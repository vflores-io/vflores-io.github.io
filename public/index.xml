<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Victor Flores, PhD</title>
    <link>http://localhost:59413/</link>
    <description>Recent content on Victor Flores, PhD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Dec 2024 09:52:15 +0700</lastBuildDate><atom:link href="http://localhost:59413/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kalman Filter and RxInfer for Structural Dynamics</title>
      <link>http://localhost:59413/posts/20241219_rxinfer_structuraldynamics/rxinfer_structural_dynamics/</link>
      <pubDate>Wed, 18 Dec 2024 09:52:15 +0700</pubDate>
      
      <guid>http://localhost:59413/posts/20241219_rxinfer_structuraldynamics/rxinfer_structural_dynamics/</guid>
      <description>Implementing an AKF in Julia and RxInfer for Structural Dyanmics analysis.</description>
      <content:encoded><![CDATA[<h2 id="state-and-input-estimation-with-rxinfer">State and Input Estimation with RxInfer</h2>
<p>In this example, we estimate system states and unknown input forces for a simple <strong>structural dynamical system</strong> using the <a href="https://www.sciencedirect.com/science/article/abs/pii/S0888327011003931">Augmented Kalman Filter (AKF)</a> in <strong>RxInfer</strong>.</p>
<p>The system can be described using a <strong>state-space model</strong>:
$$
x[k+1] \sim \mathcal{N}(A x[k] + B p[k], Q),
$$
$$
y[k] \sim \mathcal{N}(G x[k] + J p[k], R),
$$
where $ x[k] $ are the states, $ p[k] $ are the unknown inputs, and $ y[k] $ are noisy measurements.</p>
<p>We simulate the system, generate synthetic observations, and estimate the states and inputs using <strong>RxInfer.jl</strong>.</p>
<h3 id="data-environment">Data Environment</h3>
<p>We start by constructing a <code>StructuralModelData</code> data structure that stores all relevant information for the structural dynamics model and its simulation environment. This data structure organizes the system&rsquo;s properties, simulation parameters, and results for easy access and manipulation later on by <code>RxInfer</code>. It will later become clear what each field means!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">LinearAlgebra</span><span class="p">,</span> <span class="n">Statistics</span><span class="p">,</span> <span class="n">Random</span><span class="p">,</span> <span class="n">Plots</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># define a data structure for the structural model environment</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kt">StructuralModelData</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Any</span><span class="p">}</span>                      <span class="c"># expects StepRangeLen</span>
</span></span><span class="line"><span class="cl">    <span class="n">ndof</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Int64</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">nf</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Int64</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">N_data</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Int64</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_meas</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">A_aug</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">G_aug</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">G_aug_fullfield</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q_akf</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">R</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">LinearAlgebra</span><span class="o">.</span><span class="kt">Diagonal</span><span class="p">{</span><span class="kt">Float64</span><span class="p">,</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_real</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_real</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">p_real</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>The dynamics of a structural system are governed by its <strong>mass</strong> ($ M $), <strong>stiffness</strong> ($ K $), and <strong>damping</strong> ($ C $) matrices, leading to the equation of motion:</p>
<p>$$
M \ddot{x}(t) + C \dot{x}(t) + K x(t) = p(t),
$$</p>
<p>where $ x(t) $ represents the displacements at each degree of freedom, and $ (t) $ is the external force applied to the system.</p>
<p>For this example, we consider a simplified <strong>4-floor shear building model</strong> with <strong>4 degrees of freedom (DOF)</strong>. This toy model captures the essential dynamics of a multi-story structure while remaining computationally manageable. The system matrices are defined as follows:</p>
<ul>
<li>$ M $ is the diagonal mass matrix representing the lumped masses at each floor,</li>
<li>$ K $ is the tridiagonal stiffness matrix representing inter-floor lateral stiffness, and</li>
<li>$ C $ is the proportional damping matrix reflecting energy dissipation.</li>
</ul>
<p>The structural system is depicted below:</p>
<p><img loading="lazy" src="/images/20241219_RxInfer_StructuralDynamics/shear_model.png" type="" alt="shear_model"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># define the structural system matrices</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kt">StructuralMatrices</span>
</span></span><span class="line"><span class="cl">    <span class="n">M</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">K</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="n">C</span><span class="o">::</span><span class="kt">Union</span><span class="p">{</span><span class="kt">Nothing</span><span class="p">,</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M</span> <span class="o">=</span> <span class="n">I</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">K</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2</span>  <span class="o">-</span><span class="mi">1</span>   <span class="mi">0</span>    <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">-</span><span class="mi">1</span>   <span class="mi">2</span>  <span class="o">-</span><span class="mi">1</span>    <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="mi">0</span>  <span class="o">-</span><span class="mi">1</span>   <span class="mi">2</span>   <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="mi">0</span>   <span class="mi">0</span>  <span class="o">-</span><span class="mi">1</span>    <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span> <span class="o">*</span> <span class="mf">1e3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">C</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2</span>   <span class="o">-</span><span class="mi">1</span>    <span class="mi">0</span>    <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">-</span><span class="mi">1</span>    <span class="mi">2</span>   <span class="o">-</span><span class="mi">1</span>    <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="mi">0</span>   <span class="o">-</span><span class="mi">1</span>    <span class="mi">2</span>   <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="mi">0</span>    <span class="mi">0</span>   <span class="o">-</span><span class="mi">1</span>    <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">StructuralModel</span> <span class="o">=</span> <span class="n">StructuralMatrices</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="constructing-the-state-space-model">Constructing the State-Space Model</h4>
<p>We convert the structural system into its <strong>discrete-time state-space form</strong> for numerical simulation. Starting from the equation of motion:</p>
<p>$$
M \ddot{x}(t) + C \dot{x}(t) + K x(t) = F(t),
$$</p>
<p>we introduce the state variable:</p>
<p>\[
z(t) =
\begin{bmatrix}
x(t) \\
\dot{x}(t)
\end{bmatrix},
\]</p>
<p>which allows us to express the system as:
$$
\dot{z}(t) = A_{\text{c}} z(t) + B_{\text{c}} p(t),
$$
where:
\[
A_{\text{c}} =
\begin{bmatrix}
0 &amp; I \\
-(M^{-1} K) &amp; -(M^{-1} C)
\end{bmatrix}
\]
\[
B_{\text{c}} =
\begin{bmatrix}
0 \\
M^{-1} S_p
\end{bmatrix}
\]</p>
<ul>
<li>$ S_p $ is the input selection matrix that determines where the external forces $ p(t) $ are applied.</li>
</ul>
<p>To perform simulations, the system is discretized using a time step $ \Delta t $ as:
$$
z[k+1] = A z[k] + B p[k],
$$
where:</p>
<ul>
<li>$ A = e^{A_{\text{c}} \Delta t} $ is the <strong>state transition matrix</strong>.</li>
<li>$ B = (A - I) A_{\text{c}}^{-1} B_{\text{c}} $ is the <strong>input matrix</strong>, obtained by integrating the continuous-time system.</li>
</ul>
<p>This state-space representation forms the basis for propagating the system states during simulation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># function to construct the state space model</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">construct_ssm</span><span class="p">(</span><span class="n">StructuralModel</span><span class="p">,</span><span class="n">dt</span><span class="p">,</span> <span class="n">ndof</span><span class="p">,</span> <span class="n">nf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># unpack the structural model</span>
</span></span><span class="line"><span class="cl">    <span class="n">M</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">M</span>
</span></span><span class="line"><span class="cl">    <span class="n">K</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">K</span>
</span></span><span class="line"><span class="cl">    <span class="n">C</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">C</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Sp</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">ndof</span><span class="p">,</span> <span class="n">nf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Sp</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Z</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">ndof</span><span class="p">,</span> <span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Id</span> <span class="o">=</span> <span class="n">I</span><span class="p">(</span><span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">A_continuous</span> <span class="o">=</span> <span class="p">[</span><span class="n">Z</span> <span class="n">Id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="o">-</span><span class="p">(</span><span class="n">M</span> <span class="o">\</span> <span class="n">K</span><span class="p">)</span> <span class="o">-</span><span class="p">(</span><span class="n">M</span> <span class="o">\</span> <span class="n">C</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">B_continuous</span> <span class="o">=</span> <span class="p">[</span><span class="n">Z</span><span class="p">;</span> <span class="n">Id</span> <span class="o">\</span> <span class="n">M</span><span class="p">]</span> <span class="o">*</span> <span class="n">Sp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">A</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">dt</span> <span class="o">*</span> <span class="n">A_continuous</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">B</span> <span class="o">=</span> <span class="p">(</span><span class="n">A</span> <span class="o">-</span> <span class="n">I</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">ndof</span><span class="p">))</span> <span class="o">*</span> <span class="n">A_continuous</span> <span class="o">\</span> <span class="n">B_continuous</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">Sp</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>construct_ssm (generic function with 1 method)
</code></pre>
<h3 id="generating-input-forces">Generating Input Forces</h3>
<p>External forces $ p[k] $ acting on the system are modeled as <strong>Gaussian white noise</strong>:</p>
<p>$$
p[k] \sim \mathcal{N}(\mu, \sigma^2),
$$
where $ \mu $ is the mean and $ \sigma $ controls the intensity of the force.</p>
<p>In this example, the inputs are generated independently at each time step $ k $ and across input channels to simulate random excitations, such as wind or seismic forces.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># function to generate random input noise</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">generate_input</span><span class="p">(</span><span class="n">N_data</span><span class="o">::</span><span class="kt">Int</span><span class="p">,</span> <span class="n">nf</span><span class="o">::</span><span class="kt">Int</span><span class="p">;</span> <span class="n">input_mu</span><span class="o">::</span><span class="kt">Float64</span><span class="p">,</span> <span class="n">input_std</span><span class="o">::</span><span class="kt">Float64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Random</span><span class="o">.</span><span class="n">seed!</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">p_real</span> <span class="o">=</span> <span class="n">input_mu</span> <span class="o">.+</span> <span class="n">randn</span><span class="p">(</span><span class="n">N_data</span><span class="p">,</span> <span class="n">nf</span><span class="p">)</span> <span class="o">.*</span> <span class="n">input_std</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">p_real</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>generate_input (generic function with 1 method)
</code></pre>
<h3 id="observation-model">Observation Model</h3>
<p>System responses, such as accelerations, are often measured at specific locations using sensors. The measurements are simulated using the equation:</p>
<p>$$
y[k] = G x[k] + J p[k] + v[k],
$$
where:</p>
<ul>
<li>$ G $ maps the system states $ x[k] $ to measured outputs.</li>
<li>$ J $ maps the input forces $ p[k] $ to the measurements.</li>
<li>$ v[k] \sim \mathcal{N}(0, \sigma_y^2 I) $ is Gaussian noise representing sensor inaccuracies.</li>
</ul>
<p>The noise variance $ \sigma_y^2 $ is chosen as a fraction of the true system response variance for realism.</p>
<p>In this example, <strong>accelerations</strong> are measured at selected degrees of freedom (e.g., nodes 1 and 4).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># function to generate the measurements and noise</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">generate_measurements</span><span class="p">(</span><span class="n">ndof</span><span class="p">,</span> <span class="n">na</span><span class="p">,</span> <span class="n">nv</span><span class="p">,</span> <span class="n">nd</span><span class="p">,</span> <span class="n">N_data</span><span class="p">,</span> <span class="n">x_real</span><span class="p">,</span> <span class="n">y_real</span><span class="p">,</span> <span class="n">p_real</span><span class="p">,</span> <span class="n">StructuralModel</span><span class="p">,</span> <span class="n">Sp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># unpack the structural model</span>
</span></span><span class="line"><span class="cl">    <span class="n">M</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">M</span>
</span></span><span class="line"><span class="cl">    <span class="n">K</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">K</span>
</span></span><span class="line"><span class="cl">    <span class="n">C</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">C</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Sa</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">na</span><span class="p">,</span> <span class="n">ndof</span><span class="p">)</span>            <span class="c"># selection matrix</span>
</span></span><span class="line"><span class="cl">    <span class="n">Sa</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>                    <span class="c"># acceleration at node 1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Sa</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>                    <span class="c"># acceleration at node 4</span>
</span></span><span class="line"><span class="cl">    <span class="n">G</span> <span class="o">=</span> <span class="n">Sa</span> <span class="o">*</span> <span class="p">[</span><span class="o">-</span><span class="p">(</span><span class="n">M</span> <span class="o">\</span> <span class="n">K</span><span class="p">)</span> <span class="o">-</span><span class="p">(</span><span class="n">M</span> <span class="o">\</span> <span class="n">C</span><span class="p">)]</span> 
</span></span><span class="line"><span class="cl">    <span class="n">J</span> <span class="o">=</span> <span class="n">Sa</span> <span class="o">*</span> <span class="p">(</span><span class="n">I</span> <span class="o">\</span> <span class="n">M</span><span class="p">)</span> <span class="o">*</span> <span class="n">Sp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ry</span> <span class="o">=</span> <span class="n">Statistics</span><span class="o">.</span><span class="n">var</span><span class="p">(</span><span class="n">y_real</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">ndof</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">:</span><span class="p">],</span> <span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mf">0.1</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span>        <span class="c"># simulate noise as 1% RMS of the noise-free acceleration response</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nm</span> <span class="o">=</span> <span class="n">na</span> <span class="o">+</span> <span class="n">nv</span> <span class="o">+</span> <span class="n">nd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">R</span> <span class="o">=</span> <span class="n">I</span><span class="p">(</span><span class="n">nm</span><span class="p">)</span> <span class="o">.*</span> <span class="n">ry</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">y_meas</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">nm</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_noise</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">ry</span><span class="p">)</span> <span class="o">.*</span> <span class="n">randn</span><span class="p">(</span><span class="n">nm</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># reconstruct the measurements</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_meas</span> <span class="o">=</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}(</span><span class="nb">undef</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">N_data</span>
</span></span><span class="line"><span class="cl">        <span class="n">y_meas</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">G</span> <span class="o">*</span> <span class="n">x_real</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">J</span> <span class="o">*</span> <span class="n">p_real</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span> <span class="o">+</span> <span class="n">y_noise</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">y_meas</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">J</span><span class="p">,</span> <span class="n">R</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>generate_measurements (generic function with 1 method)
</code></pre>
<h3 id="simulating-the-structural-response">Simulating the Structural Response</h3>
<p>The structural response under applied forces is governed by the state-space equations:</p>
<p>\[
\begin{aligned}
x[k+1] &amp; = A x[k] + B p[k], \\
y[k] &amp; = G_{\text{full}} x[k] + J_{\text{full}} p[k],
\end{aligned}
\]</p>
<p>where $ x[k] $ are the system states, $ p[k] $ are the input forces, and $ y[k] $ are the <strong>full-field responses</strong>, i.e., the response at every degree of freedom in our structure.</p>
<p>The function below returns:</p>
<ul>
<li><strong>True States</strong>: $ x_{\text{real}} $, propagated using $ A $ and $ B $.</li>
<li><strong>Full-Field Responses</strong>: $ y_{\text{real}} $, incorporating both states and inputs.</li>
<li><strong>Input Forces</strong>: $ p_{\text{real}} $, generated as stochastic excitations.</li>
<li><strong>Response Matrices</strong>: $ G_{\text{full}} $ (state-to-response) and $ J_{\text{full}} $ (input-to-response).</li>
</ul>
<p>These outputs simulate the physical behavior of the system and serve as the basis for inference. We keep the matrices because they will be used later when analyzing our results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># function to simulate the structural response</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">simulate_response</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">StructuralModel</span><span class="p">,</span> <span class="n">Sp</span><span class="p">,</span> <span class="n">nf</span><span class="p">,</span> <span class="n">ndof</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># unpack the structural model</span>
</span></span><span class="line"><span class="cl">    <span class="n">M</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">M</span>
</span></span><span class="line"><span class="cl">    <span class="n">K</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">K</span>
</span></span><span class="line"><span class="cl">    <span class="n">C</span> <span class="o">=</span> <span class="n">StructuralModel</span><span class="o">.</span><span class="n">C</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">p_real</span> <span class="o">=</span> <span class="n">generate_input</span><span class="p">(</span><span class="n">N_data</span><span class="p">,</span> <span class="n">nf</span><span class="p">,</span> <span class="n">input_mu</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">input_std</span> <span class="o">=</span> <span class="mf">0.05</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Z</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">ndof</span><span class="p">,</span> <span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Id</span> <span class="o">=</span> <span class="n">I</span><span class="p">(</span><span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">G_full</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">Id</span> <span class="n">Z</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">Z</span> <span class="n">Id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">-</span><span class="p">(</span><span class="n">M</span> <span class="o">\</span> <span class="n">K</span><span class="p">)</span> <span class="o">-</span><span class="p">(</span><span class="n">M</span> <span class="o">\</span> <span class="n">C</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">J_full</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">Z</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Z</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Id</span> <span class="o">\</span> <span class="n">M</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span> <span class="o">*</span> <span class="n">Sp</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># preallocate matrices</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_real</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">ndof</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_real</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="n">ndof</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">2</span><span class="o">:</span><span class="n">N_data</span>
</span></span><span class="line"><span class="cl">        <span class="n">x_real</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span> <span class="o">*</span> <span class="n">x_real</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">B</span> <span class="o">*</span> <span class="n">p_real</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">y_real</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">G_full</span> <span class="o">*</span> <span class="n">x_real</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">J_full</span> <span class="o">*</span> <span class="n">p_real</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x_real</span><span class="p">,</span> <span class="n">y_real</span><span class="p">,</span> <span class="n">p_real</span><span class="p">,</span> <span class="n">G_full</span><span class="p">,</span> <span class="n">J_full</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span> 
</span></span></code></pre></div><pre><code>simulate_response (generic function with 1 method)
</code></pre>
<h3 id="augmented-state-space-model">Augmented State-Space Model</h3>
<p>In structural health monitoring, external input forces $ p[k] $ acting on a structure, such as environmental loads or unknown excitations, are often not directly measurable. To estimate both the system states $ x[k] $ and these unknown input forces, we <strong>augment the state vector</strong> as follows:</p>
<p>\[
\tilde{x}[k] =
\begin{bmatrix}
x[k] \\
p[k]
\end{bmatrix}.
\]</p>
<p>This approach allows us to simultaneously infer the internal system states (e.g., displacements and velocities) and the unknown inputs using available measurements.</p>
<p>The augmented system dynamics are then expressed as:</p>
<p>\[
\begin{aligned}
\tilde{x}[k+1] &amp; = A_{\text{aug}} \tilde{x}[k] + w[k], \\
y[k] &amp; = G_{\text{aug}} \tilde{x}[k] + v[k],
\end{aligned}
\]</p>
<p>where:</p>
<ul>
<li>$ A_{\text{aug}} $: Augmented state transition matrix.</li>
<li>$ G_{\text{aug}} $: Augmented measurement matrix.</li>
<li>$ Q_{\text{akf}} $: Augmented process noise covariance, capturing uncertainties in both states and inputs.</li>
<li>$ w[k] $, $ v[k] $: Process and measurement noise.</li>
</ul>
<h5 id="full-field-vs-measurement-space">Full-Field vs. Measurement Space</h5>
<p>To avoid confusion, we define two augmented measurement matrices:</p>
<ul>
<li>$ G_{\text{aug}} $: Projects the augmented state vector $ \tilde{x}[k] $ to the observed <strong>sensor measurements</strong> (e.g., accelerations at specific nodes).</li>
<li>$ G^* $: The <strong>augmented full-field measurement matrix</strong>, which projects the augmented state vector to the full-field <strong>system response</strong>. This includes all degrees of freedom (displacements, velocities, and accelerations).</li>
</ul>
<p>The distinction is critical:</p>
<ul>
<li>$ G_{\text{aug}} $ is used directly in the smoother to estimate states and inputs from limited measurements.</li>
<li>$ G^* $ is used later to reconstruct the full response field for visualization and validation.</li>
</ul>
<p>For clarity, we will refer to the <strong>augmented full-field matrix</strong> as $ G^* $ throughout the rest of this example, whereas, in the code, this will be the <code>G_aug_fullfield</code> object.</p>
<h4 id="noise-covariances">Noise Covariances</h4>
<p>In this step, the process and measurement noise covariances are assumed to be <strong>known</strong> or <strong>pre-calibrated</strong>. For example:</p>
<ul>
<li>The input force uncertainty $ Q_p $ is set to a high value to reflect significant variability.</li>
<li>State noise covariance $ Q_x $ is chosen to reflect minimal uncertainty in the model.</li>
</ul>
<p>The augmented noise covariance matrix $ Q_{\text{akf}} $ combines these quantities:</p>
<p>\[
Q_{\text{akf}} =
\begin{bmatrix}
Q_x &amp; 0 \\
0 &amp; Q_p
\end{bmatrix}.
\]</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># function to construct the augmented model</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">construct_augmented_model</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">J</span><span class="p">,</span> <span class="n">G_full</span><span class="p">,</span> <span class="n">J_full</span><span class="p">,</span> <span class="n">nf</span><span class="p">,</span> <span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Z_aug</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">nf</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">A_aug</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">A</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Z_aug</span> <span class="n">I</span><span class="p">(</span><span class="n">nf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">G_aug</span> <span class="o">=</span> <span class="p">[</span><span class="n">G</span> <span class="n">J</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">G_aug_fullfield</span> <span class="o">=</span> <span class="p">[</span><span class="n">G_full</span> <span class="n">J_full</span><span class="p">]</span>                               <span class="c"># full-field augmented matrix</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Qp_aug</span> <span class="o">=</span> <span class="n">I</span><span class="p">(</span><span class="n">nf</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1e-2</span>                                           <span class="c"># assumed known or pre-callibrated</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">Qx_aug</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">ndof</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Qx_aug</span><span class="p">[(</span><span class="n">ndof</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="k">end</span><span class="p">,</span> <span class="p">(</span><span class="n">ndof</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="k">end</span><span class="p">]</span> <span class="o">=</span> <span class="n">I</span><span class="p">(</span><span class="n">ndof</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1e-1</span>            <span class="c"># assumed known or pre-callibrated</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Q_akf</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="n">Qx_aug</span> <span class="n">Z_aug</span><span class="o">&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Z_aug</span> <span class="n">Qp_aug</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">A_aug</span><span class="p">,</span> <span class="n">G_aug</span><span class="p">,</span> <span class="n">Q_akf</span><span class="p">,</span> <span class="n">G_aug_fullfield</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>construct_augmented_model (generic function with 1 method)
</code></pre>
<p>Finally, we combine all the key steps into a single workflow to generate the system dynamics, responses, measurements, and the augmented state-space model.</p>
<p>The results are stored in a <code>StructuralModelData</code> object for convenient access:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">get_structural_model</span><span class="p">(</span><span class="n">StructuralModel</span><span class="p">,</span> <span class="n">simulation_time</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># intialize</span>
</span></span><span class="line"><span class="cl">    <span class="n">ndof</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">StructuralModel</span><span class="o">.</span><span class="n">M</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>                               <span class="c"># number of degrees of freedom</span>
</span></span><span class="line"><span class="cl">    <span class="n">nf</span> <span class="o">=</span> <span class="mi">1</span>                                                          <span class="c"># number of inputs</span>
</span></span><span class="line"><span class="cl">    <span class="n">na</span><span class="p">,</span> <span class="n">nv</span><span class="p">,</span> <span class="n">nd</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>                                            <span class="c"># number of oberved accelerations, velocities, and displacements</span>
</span></span><span class="line"><span class="cl">    <span class="n">N_data</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">simulation_time</span> <span class="o">/</span> <span class="n">dt</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span> <span class="o">=</span> <span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">=</span><span class="n">simulation_time</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># construct state-space model from structural matrices</span>
</span></span><span class="line"><span class="cl">    <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">Sp</span> <span class="o">=</span> <span class="n">construct_ssm</span><span class="p">(</span><span class="n">StructuralModel</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">ndof</span><span class="p">,</span> <span class="n">nf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># Generate input and simulate response</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_real</span><span class="p">,</span> <span class="n">y_real</span><span class="p">,</span> <span class="n">p_real</span><span class="p">,</span> <span class="n">G_full</span><span class="p">,</span> <span class="n">J_full</span> <span class="o">=</span> <span class="n">simulate_response</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">StructuralModel</span><span class="p">,</span> <span class="n">Sp</span><span class="p">,</span> <span class="n">nf</span><span class="p">,</span> <span class="n">ndof</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># Generate measurements</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_meas</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">J</span><span class="p">,</span> <span class="n">R</span> <span class="o">=</span> <span class="n">generate_measurements</span><span class="p">(</span><span class="n">ndof</span><span class="p">,</span> <span class="n">na</span><span class="p">,</span> <span class="n">nv</span><span class="p">,</span> <span class="n">nd</span><span class="p">,</span> <span class="n">N_data</span><span class="p">,</span> <span class="n">x_real</span><span class="p">,</span> <span class="n">y_real</span><span class="p">,</span> <span class="n">p_real</span><span class="p">,</span> <span class="n">StructuralModel</span><span class="p">,</span> <span class="n">Sp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># Construct augmented model</span>
</span></span><span class="line"><span class="cl">    <span class="n">A_aug</span><span class="p">,</span> <span class="n">G_aug</span><span class="p">,</span> <span class="n">Q_akf</span><span class="p">,</span> <span class="n">G_aug_fullfield</span> <span class="o">=</span> <span class="n">construct_augmented_model</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">J</span><span class="p">,</span> <span class="n">G_full</span><span class="p">,</span> <span class="n">J_full</span><span class="p">,</span> <span class="n">nf</span><span class="p">,</span> <span class="n">ndof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">StructuralModelData</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">ndof</span><span class="p">,</span> <span class="n">nf</span><span class="p">,</span> <span class="n">N_data</span><span class="p">,</span> <span class="n">y_meas</span><span class="p">,</span> <span class="n">A_aug</span><span class="p">,</span> <span class="n">G_aug</span><span class="p">,</span> <span class="n">G_aug_fullfield</span><span class="p">,</span> <span class="n">Q_akf</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">x_real</span><span class="p">,</span> <span class="n">y_real</span><span class="p">,</span> <span class="n">p_real</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>get_structural_model (generic function with 1 method)
</code></pre>
<p>We define the simulation time and time step, then run the workflow to generate the structural model:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">simulation_time</span> <span class="o">=</span> <span class="mf">5.0</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span> <span class="o">=</span> <span class="mf">0.001</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model_data</span> <span class="o">=</span> <span class="n">get_structural_model</span><span class="p">(</span><span class="n">StructuralModel</span><span class="p">,</span> <span class="n">simulation_time</span><span class="p">,</span> <span class="n">dt</span><span class="p">);</span>
</span></span></code></pre></div><h2 id="state-and-input-estimation-with-rxinfer-1">State and Input Estimation with RxInfer</h2>
<p>In this section, we use <strong>RxInfer</strong> to estimate the system states and unknown input forces from the simulated noisy measurements using the Augmented State Space Model discussed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">RxInfer</span>
</span></span></code></pre></div><h3 id="defining-the-akf-smoother-model">Defining the AKF Smoother Model</h3>
<p>Here, we define our <strong>Augmented Kalman Filter (AKF)</strong> smoother using RxInfer. This probabilistic model estimates the system states and unknown input forces based on the measurements.</p>
<ul>
<li><strong>State Prior</strong>: We start with a prior belief about the initial state, <code>x0</code>.</li>
<li><strong>State Transition</strong>: At each time step, the system state evolves based on the transition matrix $ A $ and process noise covariance $ Q $:
$$
x[k] \sim \mathcal{N}(A x[k-1], Q).
$$</li>
<li><strong>Measurements</strong>: The observations (sensor data) are modeled as noisy measurements of the states:
$$
y[k] \sim \mathcal{N}(G x[k], R),
$$
where $ G $ maps the states to the measurements, and $ R $ is the measurement noise covariance.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">smoother_model</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x0</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x_prior</span> <span class="o">~</span> <span class="n">x0</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_prev</span> <span class="o">=</span> <span class="n">x_prior</span>  <span class="c"># initialize previous state with x_prior</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">MvNormalMeanCovariance</span><span class="p">(</span><span class="n">A</span> <span class="o">*</span> <span class="n">x_prev</span><span class="p">,</span> <span class="n">Q</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">MvNormalMeanCovariance</span><span class="p">(</span><span class="n">G</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">x_prev</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="running-the-akf-smoother">Running the AKF Smoother</h3>
<p>Now that we have our system set up, it&rsquo;s time to estimate the system states and unknown input forces using RxInfer. We&rsquo;ll run the <strong>Augmented Kalman Filter (AKF) smoother</strong> to make sense of the noisy measurements.</p>
<p>Here’s the game plan:</p>
<ol>
<li>
<p><strong>Unpack the Data</strong>:<br>
We grab everything we need from the <code>model_data</code> object – time, matrices, measurements, and noise covariances.</p>
</li>
<li>
<p><strong>Set the Initial State</strong>:<br>
We start with a prior belief about the first state, assuming it&rsquo;s zero with some process noise:<br>
$$
x_0 \sim \mathcal{N}(0, Q_{\text{akf}}).
$$</p>
</li>
<li>
<p><strong>Run the Smoother</strong>:<br>
We define a helper function to keep things tidy. This function calls RxInfer’s <code>infer</code> method, which does the heavy lifting for us.</p>
</li>
<li>
<p><strong>Extract and Reconstruct</strong>:</p>
<ul>
<li>RxInfer gives us <strong>state marginals</strong>, which are the posterior estimates of the states.</li>
<li>Using a helper function, we reconstruct the <strong>full-field responses</strong> (displacements, velocities, and accelerations).</li>
<li>We also extract the estimated input forces, which are part of the augmented state.</li>
</ul>
</li>
</ol>
<p>That’s it! With just a few lines of code, RxInfer takes care of the math behind the scenes and delivers smooth, reliable estimates of what’s happening inside the system.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># let&#39;s wrap the results in a struct</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kt">InferenceResults</span>
</span></span><span class="line"><span class="cl">    <span class="n">state_marginals</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_full_means</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_full_stds</span>
</span></span><span class="line"><span class="cl">    <span class="n">p_means</span>
</span></span><span class="line"><span class="cl">    <span class="n">p_stds</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">run_smoother</span><span class="p">(</span><span class="n">model_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># unpack the model data</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span>               <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">N_data</span>          <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">N_data</span>
</span></span><span class="line"><span class="cl">    <span class="n">A_aug</span>           <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">A_aug</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">G_aug</span>           <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">G_aug</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">G_aug_fullfield</span> <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">G_aug_fullfield</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q_akf</span>           <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">Q_akf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">R</span>               <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">R</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_meas</span>          <span class="o">=</span> <span class="n">model_data</span><span class="o">.</span><span class="n">y_meas</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># initialize the state - required when doing smoothing</span>
</span></span><span class="line"><span class="cl">    <span class="n">x0</span> <span class="o">=</span> <span class="n">MvNormalMeanCovariance</span><span class="p">(</span><span class="n">zeros</span><span class="p">(</span><span class="n">size</span><span class="p">(</span><span class="n">A_aug</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">Q_akf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># define the smoother engine</span>
</span></span><span class="line"><span class="cl">    <span class="k">function</span> <span class="n">smoother_engine</span><span class="p">(</span><span class="n">y_meas</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c"># run the akf smoother</span>
</span></span><span class="line"><span class="cl">        <span class="n">result_smoother</span> <span class="o">=</span> <span class="n">infer</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">model</span>   <span class="o">=</span> <span class="n">smoother_model</span><span class="p">(</span><span class="n">x0</span> <span class="o">=</span> <span class="n">x0</span><span class="p">,</span> <span class="n">A</span> <span class="o">=</span> <span class="n">A</span><span class="p">,</span> <span class="n">G</span> <span class="o">=</span> <span class="n">G</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="n">Q</span><span class="p">,</span> <span class="n">R</span> <span class="o">=</span> <span class="n">R</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">data</span>    <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="n">y_meas</span><span class="p">,),</span>
</span></span><span class="line"><span class="cl">            <span class="n">options</span> <span class="o">=</span> <span class="p">(</span><span class="n">limit_stack_depth</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># return posteriors as this inference task returns the results as posteriors</span>
</span></span><span class="line"><span class="cl">        <span class="c"># because inference is done over the full graph</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result_smoother</span><span class="o">.</span><span class="n">posteriors</span><span class="p">[</span><span class="ss">:x</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># get the marginals of x</span>
</span></span><span class="line"><span class="cl">    <span class="n">state_marginals</span> <span class="o">=</span> <span class="n">smoother_engine</span><span class="p">(</span><span class="n">y_meas</span><span class="p">,</span> <span class="n">A_aug</span><span class="p">,</span> <span class="n">G_aug</span><span class="p">,</span> <span class="n">Q_akf</span><span class="p">,</span> <span class="n">R</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># reconstructing the full-field response:</span>
</span></span><span class="line"><span class="cl">    <span class="c"># use helper function to reconstruct the full-field response</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_full_means</span><span class="p">,</span> <span class="n">y_full_stds</span> <span class="o">=</span> <span class="n">reconstruct_full_field</span><span class="p">(</span><span class="n">state_marginals</span><span class="p">,</span> <span class="n">G_aug_fullfield</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># extract the estimated input (input modeled as an augmentation state)</span>
</span></span><span class="line"><span class="cl">    <span class="n">p_results_means</span> <span class="o">=</span> <span class="n">getindex</span><span class="o">.</span><span class="p">(</span><span class="n">mean</span><span class="o">.</span><span class="p">(</span><span class="n">state_marginals</span><span class="p">),</span> <span class="n">length</span><span class="p">(</span><span class="n">state_marginals</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">    <span class="n">p_results_stds</span> <span class="o">=</span> <span class="n">getindex</span><span class="o">.</span><span class="p">(</span><span class="n">std</span><span class="o">.</span><span class="p">(</span><span class="n">state_marginals</span><span class="p">),</span> <span class="n">length</span><span class="p">(</span><span class="n">state_marginals</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">InferenceResults</span><span class="p">(</span><span class="n">state_marginals</span><span class="p">,</span> <span class="n">y_full_means</span><span class="p">,</span> <span class="n">y_full_stds</span><span class="p">,</span> <span class="n">p_results_means</span><span class="p">,</span> <span class="n">p_results_stds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>run_smoother (generic function with 1 method)
</code></pre>
<h3 id="mapping-states-to-full-field-responses">Mapping States to Full-Field Responses</h3>
<p>In the <code>run_smoother</code> function, we used a helper function to map the <strong>state estimates</strong> from the AKF smoother back to the <strong>full-field responses</strong> (e.g., displacements, velocities, and accelerations).</p>
<p>Why is this important?<br>
While the smoother estimates the system states, we often care about physical quantities like accelerations or displacements across the entire structure.</p>
<p>Using the <strong>augmented full-field matrix</strong> $ G^* $, we compute:</p>
<ul>
<li><strong>Response means</strong> from state means:<br>
$$
\mu_y[i] = G^* \mu_x[i].
$$</li>
<li><strong>Response uncertainties</strong> from state covariances:<br>
$$
\sigma_y[i] = \sqrt{\text{diag}(G^* \Sigma_x[i] {G^*}^\top)}.
$$</li>
</ul>
<p>This gives us both the expected <strong>responses</strong> and their <strong>uncertainties</strong> at each time step.</p>
<p>In other words, this function connects the smoother’s internal state estimates to meaningful, physical quantities, making it easy to visualize the system’s behavior.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># helper function to reconstruct the full field response from the state posteriors</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">reconstruct_full_field</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">x_marginals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">G_aug_fullfield</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">N_data</span><span class="o">::</span><span class="kt">Int</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># preallocate the full field response</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_means</span> <span class="o">=</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}(</span><span class="nb">undef</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>        <span class="c"># vector of vectors</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_stds</span> <span class="o">=</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}}(</span><span class="nb">undef</span><span class="p">,</span> <span class="n">N_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># reconstruct the full-field response using G_aug_fullfield</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">N_data</span>
</span></span><span class="line"><span class="cl">        <span class="c"># extract the mean and covariance of the state posterior</span>
</span></span><span class="line"><span class="cl">        <span class="n">state_mean</span> <span class="o">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">x_marginals</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>       <span class="c"># each index is a vector</span>
</span></span><span class="line"><span class="cl">        <span class="n">state_cov</span> <span class="o">=</span> <span class="n">cov</span><span class="p">(</span><span class="n">x_marginals</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># project mean and covariance onto the full-field response space</span>
</span></span><span class="line"><span class="cl">        <span class="n">y_means</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">G_aug_fullfield</span> <span class="o">*</span> <span class="n">state_mean</span>
</span></span><span class="line"><span class="cl">        <span class="n">y_stds</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sqrt</span><span class="o">.</span><span class="p">(</span><span class="n">diag</span><span class="p">(</span><span class="n">G_aug_fullfield</span> <span class="o">*</span> <span class="n">state_cov</span> <span class="o">*</span> <span class="n">G_aug_fullfield</span><span class="o">&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">y_means</span><span class="p">,</span> <span class="n">y_stds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>reconstruct_full_field (generic function with 1 method)
</code></pre>
<p>We now run the AKF smoother using the structural model data to estimate the system states, reconstruct the full-field responses, and extract the input forces along with their uncertainties.</p>
<p>Let’s fire up that RxInfer!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># run the smoother</span>
</span></span><span class="line"><span class="cl"><span class="n">smoother_results</span> <span class="o">=</span> <span class="n">run_smoother</span><span class="p">(</span><span class="n">model_data</span><span class="p">);</span>
</span></span></code></pre></div><p>To better understand the results, we use two helper functions to create interactive PlotlyBase using <strong>PlotlyBase</strong>:</p>
<p>We first write a helper function and then plot the <strong>true states</strong>, <strong>full-field response</strong>, <strong>input</strong>, their <strong>estimates</strong>, and the associated <strong>uncertainty</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># helper function</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">plot_with_uncertainty</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">true_values</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">estimated_means</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">estimated_uncertainties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">ylabel_text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">label_suffix</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">700</span><span class="p">,</span><span class="mi">300</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># plot true values</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">true_values</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span><span class="o">=</span><span class="s">&#34;true (</span><span class="si">$label_suffix</span><span class="s">)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="ss">:blue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span><span class="o">=</span><span class="n">plot_size</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">left_margin</span> <span class="o">=</span> <span class="mi">5</span><span class="n">Plots</span><span class="o">.</span><span class="n">mm</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">top_margin</span> <span class="o">=</span> <span class="mi">5</span><span class="n">Plots</span><span class="o">.</span><span class="n">mm</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">bottom_margin</span> <span class="o">=</span> <span class="mi">5</span><span class="n">Plots</span><span class="o">.</span><span class="n">mm</span>  
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># plot estimated values with uncertainty ribbon</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot!</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">estimated_means</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">ribbon</span><span class="o">=</span><span class="n">estimated_uncertainties</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">fillalpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span><span class="o">=</span><span class="s">&#34;estimated (</span><span class="si">$label_suffix</span><span class="s">)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">lw</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="ss">:orange</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">linestyle</span><span class="o">=</span><span class="ss">:dash</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># add labels and title</span>
</span></span><span class="line"><span class="cl">    <span class="n">xlabel!</span><span class="p">(</span><span class="s">&#34;time (s)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ylabel!</span><span class="p">(</span><span class="n">ylabel_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">title!</span><span class="p">(</span><span class="n">title_text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">plt</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>plot_with_uncertainty (generic function with 2 methods)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># select some DOFs to plot</span>
</span></span><span class="line"><span class="cl"><span class="n">ndof</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">StructuralModel</span><span class="o">.</span><span class="n">M</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_state_dof</span>    <span class="o">=</span> <span class="mi">4</span>                <span class="c"># dof 1:4 displacements, dof 5:8 velocities</span>
</span></span><span class="line"><span class="cl"><span class="n">display_response_dof</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">ndof</span> <span class="o">+</span> <span class="mi">1</span>       <span class="c"># dof 1:4 displacements, dof 5:8 velocities, dof 9:12 accelerations</span>
</span></span><span class="line"><span class="cl"><span class="n">display_input_dof</span>    <span class="o">=</span> <span class="mi">1</span>                <span class="c"># the only one really</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># plot the states</span>
</span></span><span class="line"><span class="cl"><span class="n">state_plot</span> <span class="o">=</span> <span class="n">plot_with_uncertainty</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_data</span><span class="o">.</span><span class="n">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_data</span><span class="o">.</span><span class="n">x_real</span><span class="p">[</span><span class="n">display_state_dof</span><span class="p">,</span> <span class="o">:</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">getindex</span><span class="o">.</span><span class="p">(</span><span class="n">mean</span><span class="o">.</span><span class="p">(</span><span class="n">smoother_results</span><span class="o">.</span><span class="n">state_marginals</span><span class="p">),</span> <span class="n">display_state_dof</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">getindex</span><span class="o">.</span><span class="p">(</span><span class="n">std</span><span class="o">.</span><span class="p">(</span><span class="n">smoother_results</span><span class="o">.</span><span class="n">state_marginals</span><span class="p">),</span> <span class="n">display_state_dof</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;state value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;state estimate (dof </span><span class="si">$</span><span class="p">(</span><span class="n">display_state_dof</span><span class="p">)</span><span class="s">)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;state dof </span><span class="si">$</span><span class="p">(</span><span class="n">display_state_dof</span><span class="p">)</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># plot the responses</span>
</span></span><span class="line"><span class="cl"><span class="n">response_plot</span> <span class="o">=</span> <span class="n">plot_with_uncertainty</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_data</span><span class="o">.</span><span class="n">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_data</span><span class="o">.</span><span class="n">y_real</span><span class="p">[</span><span class="n">display_response_dof</span><span class="p">,</span> <span class="o">:</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">getindex</span><span class="o">.</span><span class="p">(</span><span class="n">smoother_results</span><span class="o">.</span><span class="n">y_full_means</span><span class="p">,</span> <span class="n">display_response_dof</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">getindex</span><span class="o">.</span><span class="p">(</span><span class="n">smoother_results</span><span class="o">.</span><span class="n">y_full_stds</span><span class="p">,</span> <span class="n">display_response_dof</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;response value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;reconstructed response (dof </span><span class="si">$</span><span class="p">(</span><span class="n">display_response_dof</span><span class="p">)</span><span class="s">)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;response dof </span><span class="si">$</span><span class="p">(</span><span class="n">display_response_dof</span><span class="p">)</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># plot the inputs</span>
</span></span><span class="line"><span class="cl"><span class="n">input_plot</span> <span class="o">=</span> <span class="n">plot_with_uncertainty</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_data</span><span class="o">.</span><span class="n">t</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_data</span><span class="o">.</span><span class="n">p_real</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">display_input_dof</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">smoother_results</span><span class="o">.</span><span class="n">p_means</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">smoother_results</span><span class="o">.</span><span class="n">p_stds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;force value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;input estimate (applied at dof </span><span class="si">$</span><span class="p">(</span><span class="n">display_input_dof</span><span class="p">)</span><span class="s">)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;input force </span><span class="si">$</span><span class="p">(</span><span class="n">display_input_dof</span><span class="p">)</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display</span><span class="p">(</span><span class="n">state_plot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">display</span><span class="p">(</span><span class="n">response_plot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">display</span><span class="p">(</span><span class="n">input_plot</span><span class="p">)</span>
</span></span></code></pre></div><?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="700" height="300" viewBox="0 0 2800 1200">
<defs>
  <clipPath id="clip860">
    <rect x="0" y="0" width="2800" height="1200"/>
  </clipPath>
</defs>
<path clip-path="url(#clip860)" d="M0 1200 L2800 1200 L2800 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<defs>
  <clipPath id="clip861">
    <rect x="560" y="0" width="1961" height="1200"/>
  </clipPath>
</defs>
<path clip-path="url(#clip860)" d="M260.767 993.502 L2752.76 993.502 L2752.76 164.864 L260.767 164.864  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<defs>
  <clipPath id="clip862">
    <rect x="260" y="164" width="2493" height="830"/>
  </clipPath>
</defs>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="331.295,993.502 331.295,164.864 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="801.481,993.502 801.481,164.864 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1271.67,993.502 1271.67,164.864 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1741.85,993.502 1741.85,164.864 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2212.04,993.502 2212.04,164.864 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2682.23,993.502 2682.23,164.864 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="260.767,948.724 2752.76,948.724 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="260.767,773.773 2752.76,773.773 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="260.767,598.822 2752.76,598.822 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="260.767,423.871 2752.76,423.871 "/>
<polyline clip-path="url(#clip862)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="260.767,248.92 2752.76,248.92 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="260.767,993.502 2752.76,993.502 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="331.295,993.502 331.295,974.604 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="801.481,993.502 801.481,974.604 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1271.67,993.502 1271.67,974.604 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1741.85,993.502 1741.85,974.604 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2212.04,993.502 2212.04,974.604 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2682.23,993.502 2682.23,974.604 "/>
<path clip-path="url(#clip860)" d="M331.295 1027.62 Q327.684 1027.62 325.855 1031.19 Q324.049 1034.73 324.049 1041.86 Q324.049 1048.96 325.855 1052.53 Q327.684 1056.07 331.295 1056.07 Q334.929 1056.07 336.734 1052.53 Q338.563 1048.96 338.563 1041.86 Q338.563 1034.73 336.734 1031.19 Q334.929 1027.62 331.295 1027.62 M331.295 1023.92 Q337.105 1023.92 340.16 1028.52 Q343.239 1033.11 343.239 1041.86 Q343.239 1050.58 340.16 1055.19 Q337.105 1059.77 331.295 1059.77 Q325.484 1059.77 322.406 1055.19 Q319.35 1050.58 319.35 1041.86 Q319.35 1033.11 322.406 1028.52 Q325.484 1023.92 331.295 1023.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M791.863 1055.17 L799.502 1055.17 L799.502 1028.8 L791.192 1030.47 L791.192 1026.21 L799.456 1024.54 L804.132 1024.54 L804.132 1055.17 L811.771 1055.17 L811.771 1059.1 L791.863 1059.1 L791.863 1055.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1266.32 1055.17 L1282.64 1055.17 L1282.64 1059.1 L1260.7 1059.1 L1260.7 1055.17 Q1263.36 1052.41 1267.94 1047.78 Q1272.55 1043.13 1273.73 1041.79 Q1275.97 1039.26 1276.85 1037.53 Q1277.76 1035.77 1277.76 1034.08 Q1277.76 1031.32 1275.81 1029.59 Q1273.89 1027.85 1270.79 1027.85 Q1268.59 1027.85 1266.14 1028.62 Q1263.71 1029.38 1260.93 1030.93 L1260.93 1026.21 Q1263.75 1025.07 1266.21 1024.5 Q1268.66 1023.92 1270.7 1023.92 Q1276.07 1023.92 1279.26 1026.6 Q1282.45 1029.29 1282.45 1033.78 Q1282.45 1035.91 1281.64 1037.83 Q1280.86 1039.73 1278.75 1042.32 Q1278.17 1042.99 1275.07 1046.21 Q1271.97 1049.4 1266.32 1055.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1746.1 1040.47 Q1749.46 1041.19 1751.33 1043.45 Q1753.23 1045.72 1753.23 1049.06 Q1753.23 1054.17 1749.71 1056.97 Q1746.19 1059.77 1739.71 1059.77 Q1737.54 1059.77 1735.22 1059.33 Q1732.93 1058.92 1730.48 1058.06 L1730.48 1053.55 Q1732.42 1054.68 1734.74 1055.26 Q1737.05 1055.84 1739.57 1055.84 Q1743.97 1055.84 1746.26 1054.1 Q1748.58 1052.37 1748.58 1049.06 Q1748.58 1046 1746.43 1044.29 Q1744.3 1042.55 1740.48 1042.55 L1736.45 1042.55 L1736.45 1038.71 L1740.66 1038.71 Q1744.11 1038.71 1745.94 1037.34 Q1747.77 1035.95 1747.77 1033.36 Q1747.77 1030.7 1745.87 1029.29 Q1744 1027.85 1740.48 1027.85 Q1738.56 1027.85 1736.36 1028.27 Q1734.16 1028.69 1731.52 1029.57 L1731.52 1025.4 Q1734.18 1024.66 1736.5 1024.29 Q1738.83 1023.92 1740.89 1023.92 Q1746.22 1023.92 1749.32 1026.35 Q1752.42 1028.75 1752.42 1032.88 Q1752.42 1035.75 1750.78 1037.74 Q1749.13 1039.7 1746.1 1040.47 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M2215.05 1028.62 L2203.25 1047.07 L2215.05 1047.07 L2215.05 1028.62 M2213.82 1024.54 L2219.7 1024.54 L2219.7 1047.07 L2224.63 1047.07 L2224.63 1050.95 L2219.7 1050.95 L2219.7 1059.1 L2215.05 1059.1 L2215.05 1050.95 L2199.45 1050.95 L2199.45 1046.44 L2213.82 1024.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M2672.51 1024.54 L2690.86 1024.54 L2690.86 1028.48 L2676.79 1028.48 L2676.79 1036.95 Q2677.81 1036.6 2678.83 1036.44 Q2679.84 1036.25 2680.86 1036.25 Q2686.65 1036.25 2690.03 1039.43 Q2693.41 1042.6 2693.41 1048.01 Q2693.41 1053.59 2689.94 1056.69 Q2686.46 1059.77 2680.14 1059.77 Q2677.97 1059.77 2675.7 1059.4 Q2673.45 1059.03 2671.05 1058.29 L2671.05 1053.59 Q2673.13 1054.73 2675.35 1055.28 Q2677.58 1055.84 2680.05 1055.84 Q2684.06 1055.84 2686.39 1053.73 Q2688.73 1051.63 2688.73 1048.01 Q2688.73 1044.4 2686.39 1042.3 Q2684.06 1040.19 2680.05 1040.19 Q2678.18 1040.19 2676.3 1040.61 Q2674.45 1041.02 2672.51 1041.9 L2672.51 1024.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1394.22 1098.6 L1394.22 1108.72 L1406.28 1108.72 L1406.28 1113.27 L1394.22 1113.27 L1394.22 1132.62 Q1394.22 1136.98 1395.39 1138.22 Q1396.6 1139.46 1400.26 1139.46 L1406.28 1139.46 L1406.28 1144.37 L1400.26 1144.37 Q1393.48 1144.37 1390.91 1141.85 Q1388.33 1139.31 1388.33 1132.62 L1388.33 1113.27 L1384.03 1113.27 L1384.03 1108.72 L1388.33 1108.72 L1388.33 1098.6 L1394.22 1098.6 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1413.98 1108.72 L1419.84 1108.72 L1419.84 1144.37 L1413.98 1144.37 L1413.98 1108.72 M1413.98 1094.84 L1419.84 1094.84 L1419.84 1102.26 L1413.98 1102.26 L1413.98 1094.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1459.85 1115.56 Q1462.04 1111.61 1465.1 1109.74 Q1468.15 1107.86 1472.29 1107.86 Q1477.86 1107.86 1480.88 1111.77 Q1483.91 1115.66 1483.91 1122.85 L1483.91 1144.37 L1478.02 1144.37 L1478.02 1123.04 Q1478.02 1117.92 1476.21 1115.43 Q1474.39 1112.95 1470.67 1112.95 Q1466.12 1112.95 1463.47 1115.97 Q1460.83 1119 1460.83 1124.22 L1460.83 1144.37 L1454.94 1144.37 L1454.94 1123.04 Q1454.94 1117.88 1453.13 1115.43 Q1451.32 1112.95 1447.53 1112.95 Q1443.04 1112.95 1440.4 1116.01 Q1437.76 1119.03 1437.76 1124.22 L1437.76 1144.37 L1431.87 1144.37 L1431.87 1108.72 L1437.76 1108.72 L1437.76 1114.26 Q1439.76 1110.98 1442.56 1109.42 Q1445.36 1107.86 1449.22 1107.86 Q1453.1 1107.86 1455.8 1109.83 Q1458.54 1111.81 1459.85 1115.56 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1526.08 1125.08 L1526.08 1127.94 L1499.15 1127.94 Q1499.54 1133.99 1502.78 1137.17 Q1506.06 1140.32 1511.89 1140.32 Q1515.26 1140.32 1518.41 1139.5 Q1521.59 1138.67 1524.71 1137.01 L1524.71 1142.55 Q1521.56 1143.89 1518.25 1144.59 Q1514.94 1145.29 1511.54 1145.29 Q1503.01 1145.29 1498.01 1140.32 Q1493.04 1135.36 1493.04 1126.89 Q1493.04 1118.14 1497.75 1113.01 Q1502.5 1107.86 1510.52 1107.86 Q1517.71 1107.86 1521.88 1112.51 Q1526.08 1117.12 1526.08 1125.08 M1520.22 1123.36 Q1520.16 1118.55 1517.52 1115.69 Q1514.91 1112.82 1510.58 1112.82 Q1505.68 1112.82 1502.72 1115.59 Q1499.79 1118.36 1499.35 1123.39 L1520.22 1123.36 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1570.48 1094.9 Q1566.22 1102.23 1564.15 1109.39 Q1562.08 1116.55 1562.08 1123.9 Q1562.08 1131.25 1564.15 1138.48 Q1566.25 1145.67 1570.48 1152.96 L1565.39 1152.96 Q1560.62 1145.48 1558.23 1138.25 Q1555.87 1131.03 1555.87 1123.9 Q1555.87 1116.8 1558.23 1109.61 Q1560.58 1102.42 1565.39 1094.9 L1570.48 1094.9 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1604.57 1109.77 L1604.57 1115.31 Q1602.09 1114.03 1599.41 1113.4 Q1596.74 1112.76 1593.88 1112.76 Q1589.52 1112.76 1587.32 1114.1 Q1585.15 1115.43 1585.15 1118.11 Q1585.15 1120.14 1586.71 1121.32 Q1588.27 1122.47 1592.98 1123.52 L1594.99 1123.96 Q1601.23 1125.3 1603.84 1127.75 Q1606.48 1130.17 1606.48 1134.53 Q1606.48 1139.5 1602.53 1142.39 Q1598.62 1145.29 1591.74 1145.29 Q1588.88 1145.29 1585.76 1144.72 Q1582.67 1144.18 1579.23 1143.06 L1579.23 1137.01 Q1582.48 1138.7 1585.63 1139.56 Q1588.78 1140.39 1591.87 1140.39 Q1596.01 1140.39 1598.24 1138.99 Q1600.46 1137.55 1600.46 1134.98 Q1600.46 1132.59 1598.84 1131.32 Q1597.25 1130.04 1591.81 1128.87 L1589.77 1128.39 Q1584.33 1127.24 1581.91 1124.89 Q1579.49 1122.5 1579.49 1118.36 Q1579.49 1113.33 1583.05 1110.6 Q1586.62 1107.86 1593.18 1107.86 Q1596.42 1107.86 1599.29 1108.34 Q1602.15 1108.81 1604.57 1109.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1614.88 1094.9 L1619.98 1094.9 Q1624.75 1102.42 1627.1 1109.61 Q1629.49 1116.8 1629.49 1123.9 Q1629.49 1131.03 1627.1 1138.25 Q1624.75 1145.48 1619.98 1152.96 L1614.88 1152.96 Q1619.12 1145.67 1621.18 1138.48 Q1623.29 1131.25 1623.29 1123.9 Q1623.29 1116.55 1621.18 1109.39 Q1619.12 1102.23 1614.88 1094.9 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="260.767,993.502 260.767,164.864 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="260.767,948.724 279.664,948.724 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="260.767,773.773 279.664,773.773 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="260.767,598.822 279.664,598.822 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="260.767,423.871 279.664,423.871 "/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="260.767,248.92 279.664,248.92 "/>
<path clip-path="url(#clip860)" d="M158.651 949.175 L188.327 949.175 L188.327 953.111 L158.651 953.111 L158.651 949.175 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M202.447 962.069 L218.767 962.069 L218.767 966.004 L196.822 966.004 L196.822 962.069 Q199.484 959.314 204.068 954.685 Q208.674 950.032 209.855 948.689 Q212.1 946.166 212.98 944.43 Q213.882 942.671 213.882 940.981 Q213.882 938.226 211.938 936.49 Q210.017 934.754 206.915 934.754 Q204.716 934.754 202.262 935.518 Q199.832 936.282 197.054 937.833 L197.054 933.111 Q199.878 931.976 202.332 931.398 Q204.785 930.819 206.822 930.819 Q212.193 930.819 215.387 933.504 Q218.581 936.189 218.581 940.68 Q218.581 942.81 217.771 944.731 Q216.984 946.629 214.878 949.222 Q214.299 949.893 211.197 953.111 Q208.095 956.305 202.447 962.069 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M158.281 774.224 L187.957 774.224 L187.957 778.16 L158.281 778.16 L158.281 774.224 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M198.859 787.118 L206.498 787.118 L206.498 760.752 L198.188 762.419 L198.188 758.16 L206.452 756.493 L211.128 756.493 L211.128 787.118 L218.767 787.118 L218.767 791.053 L198.859 791.053 L198.859 787.118 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M206.822 584.621 Q203.211 584.621 201.382 588.185 Q199.577 591.727 199.577 598.857 Q199.577 605.963 201.382 609.528 Q203.211 613.069 206.822 613.069 Q210.457 613.069 212.262 609.528 Q214.091 605.963 214.091 598.857 Q214.091 591.727 212.262 588.185 Q210.457 584.621 206.822 584.621 M206.822 580.917 Q212.632 580.917 215.688 585.523 Q218.767 590.107 218.767 598.857 Q218.767 607.583 215.688 612.19 Q212.632 616.773 206.822 616.773 Q201.012 616.773 197.933 612.19 Q194.878 607.583 194.878 598.857 Q194.878 590.107 197.933 585.523 Q201.012 580.917 206.822 580.917 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M198.859 437.216 L206.498 437.216 L206.498 410.85 L198.188 412.517 L198.188 408.257 L206.452 406.591 L211.128 406.591 L211.128 437.216 L218.767 437.216 L218.767 441.151 L198.859 441.151 L198.859 437.216 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M202.447 262.265 L218.767 262.265 L218.767 266.2 L196.822 266.2 L196.822 262.265 Q199.484 259.51 204.068 254.88 Q208.674 250.228 209.855 248.885 Q212.1 246.362 212.98 244.626 Q213.882 242.866 213.882 241.177 Q213.882 238.422 211.938 236.686 Q210.017 234.95 206.915 234.95 Q204.716 234.95 202.262 235.714 Q199.832 236.478 197.054 238.029 L197.054 233.306 Q199.878 232.172 202.332 231.593 Q204.785 231.015 206.822 231.015 Q212.193 231.015 215.387 233.7 Q218.581 236.385 218.581 240.876 Q218.581 243.005 217.771 244.927 Q216.984 246.825 214.878 249.417 Q214.299 250.089 211.197 253.306 Q208.095 256.501 202.447 262.265 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M67.4272 732.294 L72.9654 732.294 Q71.6923 734.777 71.0557 737.451 Q70.4191 740.124 70.4191 742.989 Q70.4191 747.349 71.7559 749.545 Q73.0927 751.71 75.7663 751.71 Q77.8033 751.71 78.981 750.15 Q80.1268 748.59 81.1772 743.88 L81.6228 741.875 Q82.9596 735.636 85.4104 733.026 Q87.8293 730.385 92.1898 730.385 Q97.1551 730.385 100.051 734.331 Q102.948 738.246 102.948 745.121 Q102.948 747.986 102.375 751.105 Q101.834 754.192 100.72 757.63 L94.6725 757.63 Q96.3594 754.383 97.2187 751.232 Q98.0463 748.081 98.0463 744.994 Q98.0463 740.856 96.6458 738.628 Q95.2135 736.4 92.6354 736.4 Q90.2483 736.4 88.9752 738.023 Q87.702 739.615 86.5244 745.058 L86.0469 747.095 Q84.9011 752.537 82.5458 754.956 Q80.1587 757.375 76.0209 757.375 Q70.992 757.375 68.2548 753.81 Q65.5175 750.246 65.5175 743.689 Q65.5175 740.442 65.995 737.578 Q66.4724 734.713 67.4272 732.294 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M56.2554 715.266 L66.3769 715.266 L66.3769 703.203 L70.9284 703.203 L70.9284 715.266 L90.2801 715.266 Q94.6406 715.266 95.8819 714.088 Q97.1233 712.879 97.1233 709.219 L97.1233 703.203 L102.025 703.203 L102.025 709.219 Q102.025 715.998 99.5104 718.576 Q96.9641 721.154 90.2801 721.154 L70.9284 721.154 L70.9284 725.451 L66.3769 725.451 L66.3769 721.154 L56.2554 721.154 L56.2554 715.266 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M84.1054 679.3 Q84.1054 686.398 85.7286 689.135 Q87.3519 691.872 91.2668 691.872 Q94.386 691.872 96.2321 689.835 Q98.0463 687.766 98.0463 684.233 Q98.0463 679.363 94.6088 676.435 Q91.1395 673.475 85.4104 673.475 L84.1054 673.475 L84.1054 679.3 M81.6864 667.619 L102.025 667.619 L102.025 673.475 L96.614 673.475 Q99.8605 675.48 101.42 678.472 Q102.948 681.464 102.948 685.793 Q102.948 691.267 99.8923 694.514 Q96.805 697.728 91.6488 697.728 Q85.6332 697.728 82.5776 693.718 Q79.5221 689.676 79.5221 681.687 L79.5221 673.475 L78.9492 673.475 Q74.9069 673.475 72.7108 676.149 Q70.4828 678.791 70.4828 683.597 Q70.4828 686.652 71.2148 689.549 Q71.9469 692.445 73.411 695.119 L68.0002 695.119 Q66.7588 691.904 66.1541 688.88 Q65.5175 685.856 65.5175 682.992 Q65.5175 675.258 69.5279 671.438 Q73.5383 667.619 81.6864 667.619 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M56.2554 649.763 L66.3769 649.763 L66.3769 637.7 L70.9284 637.7 L70.9284 649.763 L90.2801 649.763 Q94.6406 649.763 95.8819 648.585 Q97.1233 647.376 97.1233 643.715 L97.1233 637.7 L102.025 637.7 L102.025 643.715 Q102.025 650.495 99.5104 653.073 Q96.9641 655.651 90.2801 655.651 L70.9284 655.651 L70.9284 659.948 L66.3769 659.948 L66.3769 655.651 L56.2554 655.651 L56.2554 649.763 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M82.7368 599.506 L85.6013 599.506 L85.6013 626.433 Q91.6488 626.051 94.8316 622.804 Q97.9826 619.526 97.9826 613.701 Q97.9826 610.327 97.1551 607.176 Q96.3275 603.993 94.6725 600.874 L100.211 600.874 Q101.547 604.025 102.248 607.335 Q102.948 610.646 102.948 614.051 Q102.948 622.581 97.9826 627.578 Q93.0174 632.544 84.551 632.544 Q75.7981 632.544 70.6737 627.833 Q65.5175 623.091 65.5175 615.07 Q65.5175 607.877 70.1645 603.707 Q74.7796 599.506 82.7368 599.506 M81.018 605.362 Q76.2119 605.426 73.3473 608.068 Q70.4828 610.677 70.4828 615.006 Q70.4828 619.908 73.2519 622.868 Q76.0209 625.796 81.0499 626.242 L81.018 605.362 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M66.3769 573.374 L66.3769 567.168 L96.2957 556.028 L66.3769 544.888 L66.3769 538.681 L102.025 552.049 L102.025 560.006 L66.3769 573.374 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M84.1054 514.396 Q84.1054 521.494 85.7286 524.231 Q87.3519 526.968 91.2668 526.968 Q94.386 526.968 96.2321 524.931 Q98.0463 522.863 98.0463 519.33 Q98.0463 514.46 94.6088 511.532 Q91.1395 508.572 85.4104 508.572 L84.1054 508.572 L84.1054 514.396 M81.6864 502.715 L102.025 502.715 L102.025 508.572 L96.614 508.572 Q99.8605 510.577 101.42 513.569 Q102.948 516.56 102.948 520.889 Q102.948 526.364 99.8923 529.61 Q96.805 532.825 91.6488 532.825 Q85.6332 532.825 82.5776 528.814 Q79.5221 524.772 79.5221 516.783 L79.5221 508.572 L78.9492 508.572 Q74.9069 508.572 72.7108 511.245 Q70.4828 513.887 70.4828 518.693 Q70.4828 521.749 71.2148 524.645 Q71.9469 527.541 73.411 530.215 L68.0002 530.215 Q66.7588 527 66.1541 523.977 Q65.5175 520.953 65.5175 518.088 Q65.5175 510.354 69.5279 506.535 Q73.5383 502.715 81.6864 502.715 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M52.4997 490.652 L52.4997 484.796 L102.025 484.796 L102.025 490.652 L52.4997 490.652 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M87.9566 473.146 L66.3769 473.146 L66.3769 467.29 L87.7338 467.29 Q92.7946 467.29 95.3409 465.317 Q97.8553 463.343 97.8553 459.396 Q97.8553 454.654 94.8316 451.917 Q91.8079 449.148 86.588 449.148 L66.3769 449.148 L66.3769 443.291 L102.025 443.291 L102.025 449.148 L96.5503 449.148 Q99.7969 451.28 101.388 454.113 Q102.948 456.914 102.948 460.638 Q102.948 466.781 99.1285 469.964 Q95.309 473.146 87.9566 473.146 M65.5175 458.41 L65.5175 458.41 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M82.7368 400.736 L85.6013 400.736 L85.6013 427.663 Q91.6488 427.281 94.8316 424.035 Q97.9826 420.757 97.9826 414.932 Q97.9826 411.558 97.1551 408.407 Q96.3275 405.224 94.6725 402.105 L100.211 402.105 Q101.547 405.256 102.248 408.566 Q102.948 411.876 102.948 415.282 Q102.948 423.812 97.9826 428.809 Q93.0174 433.774 84.551 433.774 Q75.7981 433.774 70.6737 429.064 Q65.5175 424.321 65.5175 416.301 Q65.5175 409.107 70.1645 404.938 Q74.7796 400.736 82.7368 400.736 M81.018 406.593 Q76.2119 406.657 73.3473 409.298 Q70.4828 411.908 70.4828 416.237 Q70.4828 421.139 73.2519 424.099 Q76.0209 427.027 81.0499 427.472 L81.018 406.593 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1092.58 28.5427 L1092.58 35.5912 Q1089.42 33.9709 1086.01 33.1607 Q1082.61 32.3505 1078.97 32.3505 Q1073.42 32.3505 1070.62 34.0519 Q1067.87 35.7533 1067.87 39.156 Q1067.87 41.7486 1069.85 43.2475 Q1071.84 44.7058 1077.83 46.0426 L1080.38 46.6097 Q1088.32 48.3111 1091.64 51.4303 Q1095.01 54.509 1095.01 60.0587 Q1095.01 66.3781 1089.98 70.0644 Q1085 73.7508 1076.25 73.7508 Q1072.61 73.7508 1068.64 73.0216 Q1064.71 72.3329 1060.33 70.9151 L1060.33 63.2184 Q1064.46 65.3654 1068.47 66.4591 Q1072.48 67.5124 1076.41 67.5124 Q1081.68 67.5124 1084.52 65.73 Q1087.35 63.9071 1087.35 60.6258 Q1087.35 57.5877 1085.28 55.9673 Q1083.26 54.3469 1076.33 52.8481 L1073.74 52.2405 Q1066.81 50.7821 1063.73 47.7845 Q1060.66 44.7463 1060.66 39.4801 Q1060.66 33.0797 1065.19 29.5959 Q1069.73 26.1121 1078.07 26.1121 Q1082.21 26.1121 1085.85 26.7198 Q1089.5 27.3274 1092.58 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1114.25 14.324 L1114.25 27.2059 L1129.6 27.2059 L1129.6 32.9987 L1114.25 32.9987 L1114.25 57.6282 Q1114.25 63.1779 1115.75 64.7578 Q1117.29 66.3376 1121.95 66.3376 L1129.6 66.3376 L1129.6 72.576 L1121.95 72.576 Q1113.32 72.576 1110.04 69.3758 Q1106.75 66.1351 1106.75 57.6282 L1106.75 32.9987 L1101.29 32.9987 L1101.29 27.2059 L1106.75 27.2059 L1106.75 14.324 L1114.25 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1160.02 49.7694 Q1150.99 49.7694 1147.51 51.8354 Q1144.02 53.9013 1144.02 58.8839 Q1144.02 62.8538 1146.62 65.2034 Q1149.25 67.5124 1153.75 67.5124 Q1159.94 67.5124 1163.67 63.1374 Q1167.44 58.7219 1167.44 51.4303 L1167.44 49.7694 L1160.02 49.7694 M1174.89 46.6907 L1174.89 72.576 L1167.44 72.576 L1167.44 65.6895 Q1164.89 69.8214 1161.08 71.8063 Q1157.27 73.7508 1151.76 73.7508 Q1144.79 73.7508 1140.66 69.8619 Q1136.57 65.9325 1136.57 59.3701 Q1136.57 51.7138 1141.67 47.825 Q1146.82 43.9361 1156.99 43.9361 L1167.44 43.9361 L1167.44 43.2069 Q1167.44 38.0623 1164.03 35.2672 Q1160.67 32.4315 1154.56 32.4315 Q1150.67 32.4315 1146.98 33.3632 Q1143.29 34.295 1139.89 36.1584 L1139.89 29.2718 Q1143.98 27.692 1147.83 26.9223 Q1151.68 26.1121 1155.33 26.1121 Q1165.17 26.1121 1170.03 31.2163 Q1174.89 36.3204 1174.89 46.6907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1197.62 14.324 L1197.62 27.2059 L1212.97 27.2059 L1212.97 32.9987 L1197.62 32.9987 L1197.62 57.6282 Q1197.62 63.1779 1199.12 64.7578 Q1200.65 66.3376 1205.31 66.3376 L1212.97 66.3376 L1212.97 72.576 L1205.31 72.576 Q1196.68 72.576 1193.4 69.3758 Q1190.12 66.1351 1190.12 57.6282 L1190.12 32.9987 L1184.65 32.9987 L1184.65 27.2059 L1190.12 27.2059 L1190.12 14.324 L1197.62 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1261.58 48.0275 L1261.58 51.6733 L1227.31 51.6733 Q1227.8 59.3701 1231.93 63.421 Q1236.1 67.4314 1243.51 67.4314 Q1247.81 67.4314 1251.82 66.3781 Q1255.87 65.3249 1259.84 63.2184 L1259.84 70.267 Q1255.83 71.9684 1251.62 72.8596 Q1247.4 73.7508 1243.07 73.7508 Q1232.21 73.7508 1225.85 67.4314 Q1219.53 61.1119 1219.53 50.3365 Q1219.53 39.1965 1225.53 32.6746 Q1231.56 26.1121 1241.77 26.1121 Q1250.93 26.1121 1256.23 32.0264 Q1261.58 37.9003 1261.58 48.0275 M1254.13 45.84 Q1254.05 39.7232 1250.68 36.0774 Q1247.36 32.4315 1241.85 32.4315 Q1235.61 32.4315 1231.85 35.9558 Q1228.12 39.4801 1227.55 45.8805 L1254.13 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1338.99 48.0275 L1338.99 51.6733 L1304.72 51.6733 Q1305.21 59.3701 1309.34 63.421 Q1313.51 67.4314 1320.93 67.4314 Q1325.22 67.4314 1329.23 66.3781 Q1333.28 65.3249 1337.25 63.2184 L1337.25 70.267 Q1333.24 71.9684 1329.03 72.8596 Q1324.81 73.7508 1320.48 73.7508 Q1309.62 73.7508 1303.26 67.4314 Q1296.94 61.1119 1296.94 50.3365 Q1296.94 39.1965 1302.94 32.6746 Q1308.98 26.1121 1319.18 26.1121 Q1328.34 26.1121 1333.65 32.0264 Q1338.99 37.9003 1338.99 48.0275 M1331.54 45.84 Q1331.46 39.7232 1328.1 36.0774 Q1324.77 32.4315 1319.27 32.4315 Q1313.03 32.4315 1309.26 35.9558 Q1305.53 39.4801 1304.97 45.8805 L1331.54 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1380.15 28.5427 L1380.15 35.5912 Q1376.99 33.9709 1373.59 33.1607 Q1370.19 32.3505 1366.54 32.3505 Q1360.99 32.3505 1358.19 34.0519 Q1355.44 35.7533 1355.44 39.156 Q1355.44 41.7486 1357.42 43.2475 Q1359.41 44.7058 1365.4 46.0426 L1367.96 46.6097 Q1375.9 48.3111 1379.22 51.4303 Q1382.58 54.509 1382.58 60.0587 Q1382.58 66.3781 1377.56 70.0644 Q1372.58 73.7508 1363.83 73.7508 Q1360.18 73.7508 1356.21 73.0216 Q1352.28 72.3329 1347.91 70.9151 L1347.91 63.2184 Q1352.04 65.3654 1356.05 66.4591 Q1360.06 67.5124 1363.99 67.5124 Q1369.25 67.5124 1372.09 65.73 Q1374.92 63.9071 1374.92 60.6258 Q1374.92 57.5877 1372.86 55.9673 Q1370.83 54.3469 1363.91 52.8481 L1361.31 52.2405 Q1354.39 50.7821 1351.31 47.7845 Q1348.23 44.7463 1348.23 39.4801 Q1348.23 33.0797 1352.77 29.5959 Q1357.3 26.1121 1365.65 26.1121 Q1369.78 26.1121 1373.43 26.7198 Q1377.07 27.3274 1380.15 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1401.82 14.324 L1401.82 27.2059 L1417.18 27.2059 L1417.18 32.9987 L1401.82 32.9987 L1401.82 57.6282 Q1401.82 63.1779 1403.32 64.7578 Q1404.86 66.3376 1409.52 66.3376 L1417.18 66.3376 L1417.18 72.576 L1409.52 72.576 Q1400.89 72.576 1397.61 69.3758 Q1394.33 66.1351 1394.33 57.6282 L1394.33 32.9987 L1388.86 32.9987 L1388.86 27.2059 L1394.33 27.2059 L1394.33 14.324 L1401.82 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1426.98 27.2059 L1434.43 27.2059 L1434.43 72.576 L1426.98 72.576 L1426.98 27.2059 M1426.98 9.54393 L1434.43 9.54393 L1434.43 18.9825 L1426.98 18.9825 L1426.98 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1485.35 35.9153 Q1488.15 30.8922 1492.04 28.5022 Q1495.93 26.1121 1501.19 26.1121 Q1508.28 26.1121 1512.13 31.0947 Q1515.98 36.0368 1515.98 45.1919 L1515.98 72.576 L1508.48 72.576 L1508.48 45.4349 Q1508.48 38.913 1506.17 35.7533 Q1503.86 32.5936 1499.13 32.5936 Q1493.33 32.5936 1489.97 36.4419 Q1486.61 40.2903 1486.61 46.9338 L1486.61 72.576 L1479.11 72.576 L1479.11 45.4349 Q1479.11 38.8725 1476.8 35.7533 Q1474.5 32.5936 1469.68 32.5936 Q1463.96 32.5936 1460.6 36.4824 Q1457.24 40.3308 1457.24 46.9338 L1457.24 72.576 L1449.74 72.576 L1449.74 27.2059 L1457.24 27.2059 L1457.24 34.2544 Q1459.79 30.082 1463.36 28.0971 Q1466.92 26.1121 1471.82 26.1121 Q1476.76 26.1121 1480.21 28.6237 Q1483.69 31.1352 1485.35 35.9153 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1551.46 49.7694 Q1542.43 49.7694 1538.95 51.8354 Q1535.46 53.9013 1535.46 58.8839 Q1535.46 62.8538 1538.05 65.2034 Q1540.69 67.5124 1545.18 67.5124 Q1551.38 67.5124 1555.11 63.1374 Q1558.88 58.7219 1558.88 51.4303 L1558.88 49.7694 L1551.46 49.7694 M1566.33 46.6907 L1566.33 72.576 L1558.88 72.576 L1558.88 65.6895 Q1556.32 69.8214 1552.52 71.8063 Q1548.71 73.7508 1543.2 73.7508 Q1536.23 73.7508 1532.1 69.8619 Q1528.01 65.9325 1528.01 59.3701 Q1528.01 51.7138 1533.11 47.825 Q1538.26 43.9361 1548.42 43.9361 L1558.88 43.9361 L1558.88 43.2069 Q1558.88 38.0623 1555.47 35.2672 Q1552.11 32.4315 1545.99 32.4315 Q1542.11 32.4315 1538.42 33.3632 Q1534.73 34.295 1531.33 36.1584 L1531.33 29.2718 Q1535.42 27.692 1539.27 26.9223 Q1543.12 26.1121 1546.76 26.1121 Q1556.61 26.1121 1561.47 31.2163 Q1566.33 36.3204 1566.33 46.6907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1589.06 14.324 L1589.06 27.2059 L1604.41 27.2059 L1604.41 32.9987 L1589.06 32.9987 L1589.06 57.6282 Q1589.06 63.1779 1590.55 64.7578 Q1592.09 66.3376 1596.75 66.3376 L1604.41 66.3376 L1604.41 72.576 L1596.75 72.576 Q1588.12 72.576 1584.84 69.3758 Q1581.56 66.1351 1581.56 57.6282 L1581.56 32.9987 L1576.09 32.9987 L1576.09 27.2059 L1581.56 27.2059 L1581.56 14.324 L1589.06 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1653.02 48.0275 L1653.02 51.6733 L1618.75 51.6733 Q1619.23 59.3701 1623.37 63.421 Q1627.54 67.4314 1634.95 67.4314 Q1639.25 67.4314 1643.26 66.3781 Q1647.31 65.3249 1651.28 63.2184 L1651.28 70.267 Q1647.27 71.9684 1643.05 72.8596 Q1638.84 73.7508 1634.51 73.7508 Q1623.65 73.7508 1617.29 67.4314 Q1610.97 61.1119 1610.97 50.3365 Q1610.97 39.1965 1616.97 32.6746 Q1623 26.1121 1633.21 26.1121 Q1642.37 26.1121 1647.67 32.0264 Q1653.02 37.9003 1653.02 48.0275 M1645.57 45.84 Q1645.48 39.7232 1642.12 36.0774 Q1638.8 32.4315 1633.29 32.4315 Q1627.05 32.4315 1623.29 35.9558 Q1619.56 39.4801 1618.99 45.8805 L1645.57 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1709.53 9.62495 Q1704.1 18.942 1701.47 28.0566 Q1698.83 37.1711 1698.83 46.5287 Q1698.83 55.8863 1701.47 65.0818 Q1704.14 74.2369 1709.53 83.5134 L1703.05 83.5134 Q1696.97 73.9938 1693.93 64.7983 Q1690.94 55.6027 1690.94 46.5287 Q1690.94 37.4952 1693.93 28.3401 Q1696.93 19.1851 1703.05 9.62495 L1709.53 9.62495 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1753.85 34.0924 L1753.85 9.54393 L1761.3 9.54393 L1761.3 72.576 L1753.85 72.576 L1753.85 65.7705 Q1751.5 69.8214 1747.89 71.8063 Q1744.33 73.7508 1739.3 73.7508 Q1731.08 73.7508 1725.89 67.1883 Q1720.75 60.6258 1720.75 49.9314 Q1720.75 39.2371 1725.89 32.6746 Q1731.08 26.1121 1739.3 26.1121 Q1744.33 26.1121 1747.89 28.0971 Q1751.5 30.0415 1753.85 34.0924 M1728.45 49.9314 Q1728.45 58.1548 1731.81 62.8538 Q1735.21 67.5124 1741.13 67.5124 Q1747.04 67.5124 1750.44 62.8538 Q1753.85 58.1548 1753.85 49.9314 Q1753.85 41.7081 1750.44 37.0496 Q1747.04 32.3505 1741.13 32.3505 Q1735.21 32.3505 1731.81 37.0496 Q1728.45 41.7081 1728.45 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1794.23 32.4315 Q1788.24 32.4315 1784.75 37.1306 Q1781.27 41.7891 1781.27 49.9314 Q1781.27 58.0738 1784.71 62.7728 Q1788.2 67.4314 1794.23 67.4314 Q1800.19 67.4314 1803.67 62.7323 Q1807.16 58.0333 1807.16 49.9314 Q1807.16 41.8701 1803.67 37.1711 Q1800.19 32.4315 1794.23 32.4315 M1794.23 26.1121 Q1803.96 26.1121 1809.51 32.4315 Q1815.06 38.7509 1815.06 49.9314 Q1815.06 61.0714 1809.51 67.4314 Q1803.96 73.7508 1794.23 73.7508 Q1784.47 73.7508 1778.92 67.4314 Q1773.41 61.0714 1773.41 49.9314 Q1773.41 38.7509 1778.92 32.4315 Q1784.47 26.1121 1794.23 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1850.38 9.54393 L1850.38 15.7418 L1843.25 15.7418 Q1839.24 15.7418 1837.66 17.3622 Q1836.12 18.9825 1836.12 23.1955 L1836.12 27.2059 L1848.39 27.2059 L1848.39 32.9987 L1836.12 32.9987 L1836.12 72.576 L1828.63 72.576 L1828.63 32.9987 L1821.5 32.9987 L1821.5 27.2059 L1828.63 27.2059 L1828.63 24.0462 Q1828.63 16.471 1832.15 13.0277 Q1835.67 9.54393 1843.33 9.54393 L1850.38 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1906.52 19.2256 L1885.87 51.5113 L1906.52 51.5113 L1906.52 19.2256 M1904.38 12.096 L1914.67 12.096 L1914.67 51.5113 L1923.3 51.5113 L1923.3 58.3168 L1914.67 58.3168 L1914.67 72.576 L1906.52 72.576 L1906.52 58.3168 L1879.22 58.3168 L1879.22 50.4176 L1904.38 12.096 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1934.6 9.62495 L1941.08 9.62495 Q1947.16 19.1851 1950.15 28.3401 Q1953.19 37.4952 1953.19 46.5287 Q1953.19 55.6027 1950.15 64.7983 Q1947.16 73.9938 1941.08 83.5134 L1934.6 83.5134 Q1939.99 74.2369 1942.62 65.0818 Q1945.29 55.8863 1945.29 46.5287 Q1945.29 37.1711 1942.62 28.0566 Q1939.99 18.942 1934.6 9.62495 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip862)" style="stroke:#0000ff; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" points="331.295,598.822 331.765,598.841 332.235,598.815 332.705,598.828 333.175,598.829 333.646,598.76 334.116,598.738 334.586,598.803 335.056,598.869 335.526,598.918 335.997,598.78 336.467,598.689 336.937,598.482 337.407,598.325 337.877,598.228 338.347,598.068 338.818,597.879 339.288,597.821 339.758,597.822 340.228,597.714 340.698,597.608 341.169,597.566 341.639,597.481 342.109,597.199 342.579,596.913 343.049,596.747 343.519,596.679 343.99,596.621 344.46,596.627 344.93,596.601 345.4,596.637 345.87,596.723 346.341,596.765 346.811,596.805 347.281,596.971 347.751,597.228 348.221,597.474 348.692,597.649 349.162,597.883 349.632,598.152 350.102,598.399 350.572,598.556 351.042,598.718 351.513,598.857 351.983,599.089 352.453,599.315 352.923,599.569 353.393,599.798 353.864,599.958 354.334,600.153 354.804,600.342 355.274,600.427 355.744,600.425 356.215,600.503 356.685,600.486 357.155,600.538 357.625,600.598 358.095,600.782 358.565,600.862 359.036,600.739 359.506,600.818 359.976,600.834 360.446,600.888 360.916,601.078 361.387,601.323 361.857,601.36 362.327,601.543 362.797,601.594 363.267,601.803 363.738,601.85 364.208,601.883 364.678,601.923 365.148,601.934 365.618,601.788 366.088,601.724 366.559,601.704 367.029,601.557 367.499,601.573 367.969,601.473 368.439,601.33 368.91,601.232 369.38,601.045 369.85,600.964 370.32,600.824 370.79,600.583 371.261,600.371 371.731,600.112 372.201,599.908 372.671,599.524 373.141,599.209 373.611,598.873 374.082,598.462 374.552,598.141 375.022,597.899 375.492,597.513 375.962,597.205 376.433,596.752 376.903,596.352 377.373,595.971 377.843,595.647 378.313,595.359 378.783,594.978 379.254,594.802 379.724,594.545 380.194,594.362 380.664,594.041 381.134,593.706 381.605,593.31 382.075,593.036 382.545,592.696 383.015,592.556 383.485,592.363 383.956,592.149 384.426,591.957 384.896,591.644 385.366,591.35 385.836,591.136 386.306,590.995 386.777,590.924 387.247,590.788 387.717,590.511 388.187,590.182 388.657,589.885 389.128,589.63 389.598,589.409 390.068,589.092 390.538,588.788 391.008,588.493 391.479,588.217 391.949,587.909 392.419,587.657 392.889,587.338 393.359,587.079 393.829,586.883 394.3,586.711 394.77,586.451 395.24,586.09 395.71,585.838 396.18,585.417 396.651,585.17 397.121,584.871 397.591,584.534 398.061,584.226 398.531,583.812 399.002,583.508 399.472,583.231 399.942,582.931 400.412,582.69 400.882,582.537 401.352,582.405 401.823,582.24 402.293,581.978 402.763,581.759 403.233,581.486 403.703,581.296 404.174,581.033 404.644,580.811 405.114,580.519 405.584,580.122 406.054,579.705 406.525,579.485 406.995,579.081 407.465,578.71 407.935,578.463 408.405,578.068 408.875,577.848 409.346,577.52 409.816,577.2 410.286,576.98 410.756,576.791 411.226,576.386 411.697,576.201 412.167,575.958 412.637,575.817 413.107,575.652 413.577,575.451 414.047,575.263 414.518,575.284 414.988,575.094 415.458,574.799 415.928,574.493 416.398,574.378 416.869,574.24 417.339,574.179 417.809,574.072 418.279,574.057 418.749,574.049 419.22,574.073 419.69,574.183 420.16,574.171 420.63,574.212 421.1,574.388 421.57,574.357 422.041,574.34 422.511,574.447 422.981,574.502 423.451,574.531 423.921,574.397 424.392,574.467 424.862,574.546 425.332,574.504 425.802,574.478 426.272,574.399 426.743,574.421 427.213,574.299 427.683,574.255 428.153,574.113 428.623,573.826 429.093,573.596 429.564,573.424 430.034,573.281 430.504,573.127 430.974,572.994 431.444,572.926 431.915,572.838 432.385,572.803 432.855,572.724 433.325,572.808 433.795,572.795 434.266,572.823 434.736,572.765 435.206,572.699 435.676,572.668 436.146,572.689 436.616,572.582 437.087,572.532 437.557,572.509 438.027,572.303 438.497,572.151 438.967,571.996 439.438,571.937 439.908,571.847 440.378,571.833 440.848,571.819 441.318,571.822 441.789,571.909 442.259,571.876 442.729,571.806 443.199,571.575 443.669,571.487 444.139,571.474 444.61,571.353 445.08,571.25 445.55,571.087 446.02,570.936 446.49,570.908 446.961,570.867 447.431,570.713 447.901,570.453 448.371,570.288 448.841,570.094 449.311,569.827 449.782,569.5 450.252,569.179 450.722,568.873 451.192,568.554 451.662,568.178 452.133,567.793 452.603,567.316 453.073,567.026 453.543,566.76 454.013,566.359 454.484,566.076 454.954,565.817 455.424,565.546 455.894,565.237 456.364,564.974 456.834,564.668 457.305,564.504 457.775,564.085 458.245,563.776 458.715,563.33 459.185,562.787 459.656,562.359 460.126,562.016 460.596,561.708 461.066,561.274 461.536,560.959 462.007,560.719 462.477,560.39 462.947,560.07 463.417,559.762 463.887,559.464 464.357,559.097 464.828,558.831 465.298,558.495 465.768,558.093 466.238,557.579 466.708,557.069 467.179,556.546 467.649,556.086 468.119,555.689 468.589,555.316 469.059,554.831 469.53,554.458 470,554.057 470.47,553.662 470.94,553.325 471.41,553.159 471.88,552.717 472.351,552.419 472.821,552.107 473.291,551.83 473.761,551.525 474.231,551.337 474.702,551.081 475.172,550.82 475.642,550.669 476.112,550.655 476.582,550.435 477.053,550.106 477.523,549.962 477.993,549.705 478.463,549.499 478.933,549.363 479.403,549.25 479.874,549.048 480.344,548.968 480.814,548.816 481.284,548.627 481.754,548.449 482.225,548.194 482.695,547.904 483.165,547.73 483.635,547.492 484.105,547.247 484.575,547.108 485.046,546.913 485.516,546.756 485.986,546.549 486.456,546.399 486.926,546.287 487.397,546.148 487.867,546.033 488.337,545.984 488.807,545.88 489.277,545.725 489.748,545.678 490.218,545.684 490.688,545.768 491.158,545.697 491.628,545.721 492.098,545.736 492.569,545.748 493.039,545.74 493.509,545.802 493.979,545.968 494.449,546.122 494.92,546.163 495.39,546.186 495.86,546.084 496.33,545.813 496.8,545.754 497.271,545.577 497.741,545.499 498.211,545.264 498.681,545.133 499.151,544.761 499.621,544.599 500.092,544.381 500.562,544.047 501.032,543.723 501.502,543.458 501.972,543.088 502.443,542.708 502.913,542.405 503.383,542.148 503.853,541.912 504.323,541.593 504.794,541.276 505.264,541.028 505.734,540.805 506.204,540.602 506.674,540.352 507.144,540.273 507.615,540.269 508.085,540.252 508.555,540.062 509.025,539.75 509.495,539.564 509.966,539.485 510.436,539.31 510.906,539.159 511.376,538.911 511.846,538.624 512.317,538.293 512.787,538.06 513.257,537.941 513.727,537.975 514.197,537.97 514.667,537.904 515.138,537.8 515.608,537.743 516.078,537.729 516.548,537.736 517.018,537.705 517.489,537.578 517.959,537.425 518.429,537.354 518.899,537.316 519.369,537.239 519.839,537.063 520.31,537.102 520.78,537.118 521.25,537.125 521.72,537.298 522.19,537.469 522.661,537.593 523.131,537.523 523.601,537.609 524.071,537.876 524.541,538 525.012,538.216 525.482,538.249 525.952,538.486 526.422,538.568 526.892,538.76 527.362,538.922 527.833,538.967 528.303,539.154 528.773,539.29 529.243,539.424 529.713,539.678 530.184,539.854 530.654,540.078 531.124,540.277 531.594,540.491 532.064,540.701 532.535,540.979 533.005,541.465 533.475,541.97 533.945,542.409 534.415,542.909 534.885,543.363 535.356,543.716 535.826,544.18 536.296,544.536 536.766,544.838 537.236,545.19 537.707,545.513 538.177,546.133 538.647,546.62 539.117,547.046 539.587,547.406 540.058,547.776 540.528,548.304 540.998,548.78 541.468,549.237 541.938,549.774 542.408,550.198 542.879,550.736 543.349,551.248 543.819,551.874 544.289,552.436 544.759,552.924 545.23,553.437 545.7,554.01 546.17,554.649 546.64,555.232 547.11,555.849 547.581,556.491 548.051,557.121 548.521,557.776 548.991,558.413 549.461,559.048 549.931,559.696 550.402,560.337 550.872,560.942 551.342,561.573 551.812,561.97 552.282,562.437 552.753,562.93 553.223,563.417 553.693,564.175 554.163,564.897 554.633,565.672 555.103,566.414 555.574,567.349 556.044,568.143 556.514,569.057 556.984,569.791 557.454,570.658 557.925,571.572 558.395,572.277 558.865,572.99 559.335,573.69 559.805,574.441 560.276,575.332 560.746,575.987 561.216,576.618 561.686,577.358 562.156,578.178 562.626,578.865 563.097,579.68 563.567,580.516 564.037,581.353 564.507,582.034 564.977,582.941 565.448,583.813 565.918,584.661 566.388,585.528 566.858,586.451 567.328,587.289 567.799,588.198 568.269,589.122 568.739,590.022 569.209,590.907 569.679,591.95 570.149,593.005 570.62,594.049 571.09,595.085 571.56,596.067 572.03,597.102 572.5,598.169 572.971,599.067 573.441,600.148 573.911,601.217 574.381,602.397 574.851,603.463 575.322,604.639 575.792,605.732 576.262,606.772 576.732,607.86 577.202,608.825 577.672,609.849 578.143,610.748 578.613,611.612 579.083,612.414 579.553,613.276 580.023,614.171 580.494,615.063 580.964,615.933 581.434,616.64 581.904,617.487 582.374,618.252 582.844,618.865 583.315,619.557 583.785,620.313 584.255,620.968 584.725,621.602 585.195,622.267 585.666,623.02 586.136,623.63 586.606,624.429 587.076,625.199 587.546,625.828 588.017,626.302 588.487,626.899 588.957,627.432 589.427,627.946 589.897,628.429 590.367,629.065 590.838,629.584 591.308,630.195 591.778,630.837 592.248,631.575 592.718,632.012 593.189,632.605 593.659,633.243 594.129,633.89 594.599,634.586 595.069,635.3 595.54,635.98 596.01,636.706 596.48,637.398 596.95,638.023 597.42,638.564 597.89,639.169 598.361,639.841 598.831,640.454 599.301,641.063 599.771,641.657 600.241,642.137 600.712,642.577 601.182,643.039 601.652,643.566 602.122,644.062 602.592,644.585 603.063,645.028 603.533,645.557 604.003,645.888 604.473,646.424 604.943,646.942 605.413,647.561 605.884,648.15 606.354,648.577 606.824,649.115 607.294,649.707 607.764,650.15 608.235,650.696 608.705,651.189 609.175,651.767 609.645,652.365 610.115,652.849 610.586,653.415 611.056,653.907 611.526,654.537 611.996,654.962 612.466,655.364 612.936,655.883 613.407,656.298 613.877,656.593 614.347,656.896 614.817,657.269 615.287,657.744 615.758,658.176 616.228,658.59 616.698,658.858 617.168,659.196 617.638,659.504 618.108,659.82 618.579,659.963 619.049,660.257 619.519,660.484 619.989,660.783 620.459,660.996 620.93,661.382 621.4,661.673 621.87,661.965 622.34,662.395 622.81,662.494 623.281,662.791 623.751,663.06 624.221,663.248 624.691,663.309 625.161,663.377 625.631,663.459 626.102,663.437 626.572,663.405 627.042,663.38 627.512,663.378 627.982,663.347 628.453,663.128 628.923,663.149 629.393,663.066 629.863,662.812 630.333,662.566 630.804,662.336 631.274,662.203 631.744,662.1 632.214,661.839 632.684,661.63 633.154,661.496 633.625,661.142 634.095,660.787 634.565,660.508 635.035,660.184 635.505,659.745 635.976,659.488 636.446,659.212 636.916,659.002 637.386,658.717 637.856,658.473 638.327,658.203 638.797,657.976 639.267,657.772 639.737,657.587 640.207,657.429 640.677,657.238 641.148,657.143 641.618,656.862 642.088,656.736 642.558,656.44 643.028,655.975 643.499,655.683 643.969,655.38 644.439,654.971 644.909,654.505 645.379,654.154 645.85,653.722 646.32,653.275 646.79,652.808 647.26,652.307 647.73,651.906 648.2,651.529 648.671,651.091 649.141,650.508 649.611,649.847 650.081,649.301 650.551,648.784 651.022,648.082 651.492,647.503 651.962,646.713 652.432,645.951 652.902,645.154 653.372,644.428 653.843,643.53 654.313,642.67 654.783,641.749 655.253,640.916 655.723,639.897 656.194,638.931 656.664,638.033 657.134,636.997 657.604,636.075 658.074,635.112 658.545,634.028 659.015,632.913 659.485,631.88 659.955,630.745 660.425,629.627 660.895,628.514 661.366,627.532 661.836,626.613 662.306,625.507 662.776,624.465 663.246,623.4 663.717,622.339 664.187,621.321 664.657,620.286 665.127,619.211 665.597,618.184 666.068,617.213 666.538,616.233 667.008,615.24 667.478,614.262 667.948,613.211 668.418,612.305 668.889,611.247 669.359,610.174 669.829,609.128 670.299,608.132 670.769,607.099 671.24,606.064 671.71,605.039 672.18,604.052 672.65,602.949 673.12,601.893 673.591,600.844 674.061,599.744 674.531,598.595 675.001,597.322 675.471,596.218 675.941,595.126 676.412,593.986 676.882,592.947 677.352,591.922 677.822,590.978 678.292,589.96 678.763,589.037 679.233,588.05 679.703,587.034 680.173,586.061 680.643,585.113 681.114,584.126 681.584,583.029 682.054,582.157 682.524,581.148 682.994,580.129 683.464,579.149 683.935,578.174 684.405,577.109 684.875,576.015 685.345,574.894 685.815,573.749 686.286,572.858 686.756,571.834 687.226,570.859 687.696,569.949 688.166,569.046 688.636,568.036 689.107,567.019 689.577,566.1 690.047,565.086 690.517,564.03 690.987,563.1 691.458,561.955 691.928,560.734 692.398,559.67 692.868,558.601 693.338,557.432 693.809,556.262 694.279,555.032 694.749,553.895 695.219,552.777 695.689,551.639 696.159,550.572 696.63,549.578 697.1,548.474 697.57,547.55 698.04,546.465 698.51,545.449 698.981,544.539 699.451,543.541 699.921,542.707 700.391,541.836 700.861,541.096 701.332,540.187 701.802,539.467 702.272,538.783 702.742,537.932 703.212,537.197 703.682,536.569 704.153,535.86 704.623,535.153 705.093,534.655 705.563,533.915 706.033,533.29 706.504,532.624 706.974,532.042 707.444,531.197 707.914,530.615 708.384,529.912 708.855,529.163 709.325,528.587 709.795,527.989 710.265,527.37 710.735,526.676 711.205,526.184 711.676,525.475 712.146,524.7 712.616,524.114 713.086,523.295 713.556,522.804 714.027,522.183 714.497,521.699 714.967,521.094 715.437,520.479 715.907,520.018 716.378,519.61 716.848,519.004 717.318,518.586 717.788,518.156 718.258,517.789 718.728,517.385 719.199,516.969 719.669,516.52 720.139,516.083 720.609,515.597 721.079,515.098 721.55,514.644 722.02,514.183 722.49,513.811 722.96,513.369 723.43,512.901 723.9,512.504 724.371,512.062 724.841,511.62 725.311,511.112 725.781,510.657 726.251,510.186 726.722,509.88 727.192,509.562 727.662,509.197 728.132,508.913 728.602,508.62 729.073,508.44 729.543,508.283 730.013,508.215 730.483,507.952 730.953,507.853 731.423,507.611 731.894,507.363 732.364,507.075 732.834,506.935 733.304,506.643 733.774,506.555 734.245,506.405 734.715,506.234 735.185,505.981 735.655,505.808 736.125,505.615 736.596,505.498 737.066,505.367 737.536,505.166 738.006,504.945 738.476,504.977 738.946,504.759 739.417,504.616 739.887,504.481 740.357,504.463 740.827,504.433 741.297,504.403 741.768,504.407 742.238,504.426 742.708,504.284 743.178,504.179 743.648,504.197 744.119,504.282 744.589,504.373 745.059,504.377 745.529,504.37 745.999,504.436 746.469,504.514 746.94,504.652 747.41,504.647 747.88,504.857 748.35,505.003 748.82,505.144 749.291,505.332 749.761,505.344 750.231,505.501 750.701,505.56 751.171,505.772 751.642,505.999 752.112,506.253 752.582,506.316 753.052,506.324 753.522,506.501 753.992,506.699 754.463,506.738 754.933,506.884 755.403,506.975 755.873,507.148 756.343,507.354 756.814,507.464 757.284,507.669 757.754,507.944 758.224,508.129 758.694,508.272 759.164,508.422 759.635,508.599 760.105,508.859 760.575,509.152 761.045,509.451 761.515,509.727 761.986,510.048 762.456,510.288 762.926,510.536 763.396,511.006 763.866,511.413 764.337,511.849 764.807,512.289 765.277,512.718 765.747,513.074 766.217,513.47 766.687,513.927 767.158,514.535 767.628,515.102 768.098,515.634 768.568,516.254 769.038,516.75 769.509,517.365 769.979,517.894 770.449,518.321 770.919,518.912 771.389,519.395 771.86,519.914 772.33,520.218 772.8,520.734 773.27,521.197 773.74,521.671 774.21,522.109 774.681,522.497 775.151,523.004 775.621,523.563 776.091,524.028 776.561,524.544 777.032,525.194 777.502,525.842 777.972,526.563 778.442,527.131 778.912,527.85 779.383,528.436 779.853,529.13 780.323,529.925 780.793,530.581 781.263,531.375 781.733,532.116 782.204,532.984 782.674,533.791 783.144,534.659 783.614,535.491 784.084,536.414 784.555,537.407 785.025,538.398 785.495,539.363 785.965,540.373 786.435,541.364 786.906,542.279 787.376,543.225 787.846,544.086 788.316,545.059 788.786,546.071 789.256,546.999 789.727,547.844 790.197,548.768 790.667,549.645 791.137,550.679 791.607,551.663 792.078,552.603 792.548,553.485 793.018,554.39 793.488,555.303 793.958,556.145 794.428,557.067 794.899,557.903 795.369,558.782 795.839,559.755 796.309,560.709 796.779,561.823 797.25,562.777 797.72,563.731 798.19,564.736 798.66,565.77 799.13,566.779 799.601,567.753 800.071,568.715 800.541,569.853 801.011,570.774 801.481,571.796 801.951,572.723 802.422,573.645 802.892,574.819 803.362,576.015 803.832,577.1 804.302,578.176 804.773,579.33 805.243,580.427 805.713,581.491 806.183,582.543 806.653,583.596 807.124,584.814 807.594,585.961 808.064,587.075 808.534,588.293 809.004,589.463 809.474,590.737 809.945,591.825 810.415,593.117 810.885,594.422 811.355,595.745 811.825,597.04 812.296,598.457 812.766,599.82 813.236,601.132 813.706,602.555 814.176,603.824 814.647,605.22 815.117,606.518 815.587,607.812 816.057,609.076 816.527,610.314 816.997,611.539 817.468,612.79 817.938,614.086 818.408,615.224 818.878,616.289 819.348,617.573 819.819,618.768 820.289,619.989 820.759,621.241 821.229,622.478 821.699,623.79 822.17,624.929 822.64,626.096 823.11,627.241 823.58,628.233 824.05,629.34 824.52,630.455 824.991,631.533 825.461,632.655 825.931,633.587 826.401,634.635 826.871,635.763 827.342,636.709 827.812,637.821 828.282,638.886 828.752,639.74 829.222,640.613 829.692,641.579 830.163,642.443 830.633,643.271 831.103,644.049 831.573,644.928 832.043,645.908 832.514,646.804 832.984,647.63 833.454,648.508 833.924,649.447 834.394,650.338 834.865,651.167 835.335,651.857 835.805,652.677 836.275,653.527 836.745,654.405 837.215,655.351 837.686,656.206 838.156,656.991 838.626,657.702 839.096,658.45 839.566,659.171 840.037,659.964 840.507,660.674 840.977,661.483 841.447,662.211 841.917,662.769 842.388,663.452 842.858,664.152 843.328,664.779 843.798,665.548 844.268,666.259 844.738,666.906 845.209,667.652 845.679,668.465 846.149,669.124 846.619,669.834 847.089,670.691 847.56,671.44 848.03,672.23 848.5,672.971 848.97,673.686 849.44,674.425 849.911,675.074 850.381,675.804 850.851,676.374 851.321,677.153 851.791,677.887 852.261,678.533 852.732,679.271 853.202,679.815 853.672,680.658 854.142,681.407 854.612,681.958 855.083,682.617 855.553,683.342 856.023,684.219 856.493,684.905 856.963,685.507 857.434,686.061 857.904,686.522 858.374,687.155 858.844,687.671 859.314,688.259 859.784,688.738 860.255,689.08 860.725,689.528 861.195,689.947 861.665,690.077 862.135,690.3 862.606,690.53 863.076,690.821 863.546,690.99 864.016,691.181 864.486,691.319 864.956,691.439 865.427,691.553 865.897,691.62 866.367,691.844 866.837,691.96 867.307,692.07 867.778,692.246 868.248,692.561 868.718,692.809 869.188,692.958 869.658,692.937 870.129,693.234 870.599,693.481 871.069,693.557 871.539,693.666 872.009,693.719 872.479,693.84 872.95,693.948 873.42,694.196 873.89,694.311 874.36,694.422 874.83,694.464 875.301,694.412 875.771,694.524 876.241,694.55 876.711,694.617 877.181,694.603 877.652,694.585 878.122,694.485 878.592,694.598 879.062,694.491 879.532,694.42 880.002,694.193 880.473,694.155 880.943,694.024 881.413,693.864 881.883,693.691 882.353,693.543 882.824,693.403 883.294,693.237 883.764,693.179 884.234,693.137 884.704,692.999 885.175,692.952 885.645,692.947 886.115,692.91 886.585,692.842 887.055,692.779 887.525,692.885 887.996,693.005 888.466,693.031 888.936,692.975 889.406,692.926 889.876,692.742 890.347,692.479 890.817,692.222 891.287,691.859 891.757,691.627 892.227,691.42 892.698,691.007 893.168,690.602 893.638,690.338 894.108,690 894.578,689.61 895.048,689.217 895.519,688.721 895.989,688.151 896.459,687.529 896.929,686.964 897.399,686.183 897.87,685.466 898.34,684.824 898.81,684.099 899.28,683.373 899.75,682.61 900.22,681.877 900.691,681.054 901.161,680.327 901.631,679.536 902.101,678.723 902.571,677.96 903.042,677.137 903.512,676.191 903.982,675.256 904.452,674.329 904.922,673.359 905.393,672.449 905.863,671.546 906.333,670.673 906.803,669.591 907.273,668.524 907.743,667.363 908.214,666.368 908.684,665.278 909.154,664.283 909.624,663.312 910.094,662.115 910.565,660.816 911.035,659.551 911.505,658.313 911.975,656.867 912.445,655.574 912.916,654.239 913.386,652.92 913.856,651.71 914.326,650.33 914.796,649.016 915.266,647.686 915.737,646.214 916.207,644.786 916.677,643.319 917.147,641.858 917.617,640.255 918.088,638.797 918.558,637.155 919.028,635.651 919.498,634.057 919.968,632.321 920.439,630.642 920.909,629.012 921.379,627.399 921.849,625.605 922.319,624.053 922.789,622.336 923.26,620.751 923.73,618.985 924.2,617.458 924.67,615.831 925.14,614.111 925.611,612.547 926.081,610.974 926.551,609.351 927.021,607.739 927.491,606.18 927.962,604.538 928.432,602.806 928.902,601.233 929.372,599.583 929.842,597.957 930.312,596.331 930.783,594.687 931.253,592.984 931.723,591.386 932.193,589.698 932.663,587.931 933.134,586.21 933.604,584.475 934.074,582.663 934.544,580.962 935.014,579.306 935.484,577.725 935.955,576 936.425,574.187 936.895,572.469 937.365,570.759 937.835,569.048 938.306,567.481 938.776,565.965 939.246,564.388 939.716,562.782 940.186,561.217 940.657,559.576 941.127,558.165 941.597,556.651 942.067,555.192 942.537,553.54 943.007,551.979 943.478,550.408 943.948,548.767 944.418,547.274 944.888,545.806 945.358,544.195 945.829,542.752 946.299,541.211 946.769,539.775 947.239,538.372 947.709,536.989 948.18,535.486 948.65,534.085 949.12,532.489 949.59,531.104 950.06,529.712 950.53,528.3 951.001,526.839 951.471,525.465 951.941,524.011 952.411,522.663 952.881,521.36 953.352,520.152 953.822,518.893 954.292,517.592 954.762,516.315 955.232,515.092 955.703,513.802 956.173,512.687 956.643,511.422 957.113,510.345 957.583,509.154 958.053,508.032 958.524,506.87 958.994,505.755 959.464,504.457 959.934,503.347 960.404,502.154 960.875,500.895 961.345,499.711 961.815,498.561 962.285,497.128 962.755,495.971 963.226,494.707 963.696,493.565 964.166,492.419 964.636,491.226 965.106,489.96 965.576,488.69 966.047,487.459 966.517,486.373 966.987,485.209 967.457,484.102 967.927,483.084 968.398,482.171 968.868,481.233 969.338,480.225 969.808,479.337 970.278,478.384 970.748,477.512 971.219,476.418 971.689,475.428 972.159,474.381 972.629,473.432 973.099,472.551 973.57,471.853 974.04,471.113 974.51,470.116 974.98,469.394 975.45,468.723 975.921,467.907 976.391,467.195 976.861,466.307 977.331,465.576 977.801,464.979 978.271,464.353 978.742,463.659 979.212,463.145 979.682,462.69 980.152,462.083 980.622,461.481 981.093,460.809 981.563,460.295 982.033,459.748 982.503,459.201 982.973,458.696 983.444,458.25 983.914,457.788 984.384,457.23 984.854,456.691 985.324,456.229 985.794,455.601 986.265,454.972 986.735,454.419 987.205,453.909 987.675,453.453 988.145,453.008 988.616,452.507 989.086,452.028 989.556,451.445 990.026,451.045 990.496,450.594 990.967,450.275 991.437,449.846 991.907,449.432 992.377,449.064 992.847,448.815 993.317,448.336 993.788,447.932 994.258,447.556 994.728,447.236 995.198,446.96 995.668,446.674 996.139,446.528 996.609,446.406 997.079,446.356 997.549,446.47 998.019,446.359 998.49,446.457 998.96,446.673 999.43,446.855 999.9,447.128 1000.37,447.264 1000.84,447.475 1001.31,447.749 1001.78,447.969 1002.25,448.234 1002.72,448.64 1003.19,448.977 1003.66,449.28 1004.13,449.661 1004.6,450.005 1005.07,450.41 1005.54,450.875 1006.01,451.387 1006.48,451.817 1006.95,452.269 1007.42,452.773 1007.89,453.423 1008.36,454.043 1008.83,454.563 1009.3,455.307 1009.77,455.955 1010.24,456.762 1010.71,457.658 1011.18,458.569 1011.65,459.415 1012.12,460.204 1012.6,461.066 1013.07,461.937 1013.54,462.831 1014.01,463.717 1014.48,464.777 1014.95,465.686 1015.42,466.62 1015.89,467.647 1016.36,468.654 1016.83,469.558 1017.3,470.521 1017.77,471.494 1018.24,472.475 1018.71,473.496 1019.18,474.717 1019.65,475.849 1020.12,477.026 1020.59,478.17 1021.06,479.444 1021.53,480.728 1022,481.973 1022.47,483.31 1022.94,484.503 1023.41,485.872 1023.88,487.205 1024.35,488.584 1024.82,490.047 1025.29,491.385 1025.76,492.754 1026.23,494.095 1026.7,495.542 1027.17,497 1027.64,498.241 1028.11,499.601 1028.58,500.926 1029.05,502.198 1029.52,503.622 1029.99,505.024 1030.46,506.445 1030.93,507.697 1031.4,509.089 1031.87,510.458 1032.34,511.673 1032.81,512.868 1033.28,513.948 1033.75,515.202 1034.22,516.352 1034.69,517.695 1035.16,518.899 1035.63,520.069 1036.1,521.287 1036.57,522.669 1037.04,523.998 1037.51,525.306 1037.99,526.737 1038.46,528.169 1038.93,529.572 1039.4,530.848 1039.87,532.246 1040.34,533.665 1040.81,535.184 1041.28,536.665 1041.75,538.155 1042.22,539.66 1042.69,541.101 1043.16,542.574 1043.63,544.048 1044.1,545.628 1044.57,547.158 1045.04,548.628 1045.51,550.224 1045.98,551.833 1046.45,553.439 1046.92,555.068 1047.39,556.548 1047.86,558.223 1048.33,559.825 1048.8,561.432 1049.27,562.972 1049.74,564.466 1050.21,565.862 1050.68,567.263 1051.15,568.836 1051.62,570.446 1052.09,571.983 1052.56,573.521 1053.03,575.078 1053.5,576.609 1053.97,578.301 1054.44,579.913 1054.91,581.61 1055.38,583.239 1055.85,584.96 1056.32,586.582 1056.79,588.249 1057.26,589.897 1057.73,591.468 1058.2,593.296 1058.67,594.786 1059.14,596.427 1059.61,598.212 1060.08,599.936 1060.55,601.652 1061.02,603.292 1061.49,605.063 1061.96,606.764 1062.43,608.488 1062.91,610.165 1063.38,611.996 1063.85,613.732 1064.32,615.313 1064.79,616.968 1065.26,618.803 1065.73,620.39 1066.2,622.144 1066.67,623.812 1067.14,625.578 1067.61,627.043 1068.08,628.615 1068.55,630.245 1069.02,631.931 1069.49,633.465 1069.96,635.103 1070.43,636.796 1070.9,638.264 1071.37,639.897 1071.84,641.513 1072.31,643.056 1072.78,644.551 1073.25,646.068 1073.72,647.631 1074.19,649.09 1074.66,650.546 1075.13,652.097 1075.6,653.549 1076.07,655.049 1076.54,656.547 1077.01,658.098 1077.48,659.729 1077.95,661.241 1078.42,662.607 1078.89,664.15 1079.36,665.567 1079.83,667.027 1080.3,668.546 1080.77,670.006 1081.24,671.59 1081.71,673.034 1082.18,674.5 1082.65,675.94 1083.12,677.331 1083.59,678.646 1084.06,680.002 1084.53,681.322 1085,682.674 1085.47,684.101 1085.94,685.414 1086.41,686.757 1086.88,688.096 1087.35,689.508 1087.82,690.976 1088.3,692.392 1088.77,693.794 1089.24,695.217 1089.71,696.634 1090.18,698.092 1090.65,699.509 1091.12,700.856 1091.59,702.096 1092.06,703.386 1092.53,704.798 1093,706.19 1093.47,707.694 1093.94,708.953 1094.41,710.378 1094.88,711.79 1095.35,713.185 1095.82,714.467 1096.29,715.726 1096.76,716.888 1097.23,718.093 1097.7,719.381 1098.17,720.549 1098.64,721.841 1099.11,722.999 1099.58,724.272 1100.05,725.509 1100.52,726.723 1100.99,727.874 1101.46,729.023 1101.93,730.202 1102.4,731.399 1102.87,732.785 1103.34,733.841 1103.81,734.938 1104.28,736.054 1104.75,737.123 1105.22,738.097 1105.69,739.107 1106.16,740.085 1106.63,741.029 1107.1,741.874 1107.57,742.829 1108.04,743.815 1108.51,744.736 1108.98,745.561 1109.45,746.328 1109.92,747.071 1110.39,747.856 1110.86,748.615 1111.33,749.205 1111.8,749.89 1112.27,750.656 1112.74,751.449 1113.22,752.241 1113.69,753.089 1114.16,753.868 1114.63,754.532 1115.1,755.221 1115.57,756.076 1116.04,756.753 1116.51,757.699 1116.98,758.429 1117.45,759.223 1117.92,759.958 1118.39,760.714 1118.86,761.301 1119.33,762.017 1119.8,762.768 1120.27,763.447 1120.74,764.145 1121.21,764.814 1121.68,765.485 1122.15,766.018 1122.62,766.693 1123.09,767.268 1123.56,767.771 1124.03,768.224 1124.5,768.811 1124.97,769.243 1125.44,769.733 1125.91,770.308 1126.38,770.828 1126.85,771.302 1127.32,771.583 1127.79,771.823 1128.26,771.956 1128.73,772.263 1129.2,772.463 1129.67,772.765 1130.14,772.949 1130.61,773.171 1131.08,773.512 1131.55,773.703 1132.02,773.844 1132.49,773.92 1132.96,774.039 1133.43,774.097 1133.9,774.195 1134.37,774.328 1134.84,774.219 1135.31,774.268 1135.78,774.262 1136.25,774.308 1136.72,774.243 1137.19,774.179 1137.66,774.133 1138.13,774.118 1138.61,774.206 1139.08,774.248 1139.55,774.119 1140.02,773.965 1140.49,773.961 1140.96,773.809 1141.43,773.742 1141.9,773.504 1142.37,773.422 1142.84,773.315 1143.31,773.232 1143.78,772.986 1144.25,772.777 1144.72,772.544 1145.19,772.099 1145.66,771.705 1146.13,771.232 1146.6,770.708 1147.07,770.34 1147.54,769.831 1148.01,769.365 1148.48,768.679 1148.95,767.968 1149.42,767.245 1149.89,766.609 1150.36,765.922 1150.83,765.284 1151.3,764.538 1151.77,763.983 1152.24,763.202 1152.71,762.521 1153.18,761.721 1153.65,760.798 1154.12,760.01 1154.59,759.304 1155.06,758.55 1155.53,757.629 1156,756.887 1156.47,756.009 1156.94,755.082 1157.41,754.02 1157.88,753.015 1158.35,752.04 1158.82,750.992 1159.29,749.86 1159.76,748.838 1160.23,747.829 1160.7,746.72 1161.17,745.718 1161.64,744.694 1162.11,743.533 1162.58,742.467 1163.05,741.364 1163.53,740.3 1164,739.217 1164.47,738.058 1164.94,736.807 1165.41,735.514 1165.88,734.257 1166.35,733.208 1166.82,732.107 1167.29,730.918 1167.76,729.833 1168.23,728.768 1168.7,727.718 1169.17,726.564 1169.64,725.328 1170.11,724.242 1170.58,723.11 1171.05,722.012 1171.52,720.885 1171.99,719.618 1172.46,718.29 1172.93,716.995 1173.4,715.639 1173.87,714.319 1174.34,713.116 1174.81,711.824 1175.28,710.552 1175.75,709.059 1176.22,707.62 1176.69,706.104 1177.16,704.632 1177.63,702.989 1178.1,701.22 1178.57,699.667 1179.04,698.089 1179.51,696.399 1179.98,694.596 1180.45,692.926 1180.92,691.288 1181.39,689.724 1181.86,688.261 1182.33,686.596 1182.8,684.811 1183.27,683.146 1183.74,681.229 1184.21,679.219 1184.68,677.338 1185.15,675.492 1185.62,673.597 1186.09,671.743 1186.56,669.736 1187.03,667.729 1187.5,665.781 1187.97,663.731 1188.44,661.79 1188.92,659.819 1189.39,657.875 1189.86,655.66 1190.33,653.602 1190.8,651.66 1191.27,649.591 1191.74,647.592 1192.21,645.654 1192.68,643.563 1193.15,641.536 1193.62,639.443 1194.09,637.26 1194.56,635.108 1195.03,632.958 1195.5,630.667 1195.97,628.444 1196.44,626.173 1196.91,623.901 1197.38,621.695 1197.85,619.537 1198.32,617.311 1198.79,615.114 1199.26,612.988 1199.73,610.789 1200.2,608.597 1200.67,606.525 1201.14,604.487 1201.61,602.474 1202.08,600.29 1202.55,598.283 1203.02,596.182 1203.49,594.03 1203.96,591.954 1204.43,589.789 1204.9,587.692 1205.37,585.735 1205.84,583.689 1206.31,581.721 1206.78,579.648 1207.25,577.583 1207.72,575.538 1208.19,573.591 1208.66,571.592 1209.13,569.571 1209.6,567.544 1210.07,565.568 1210.54,563.443 1211.01,561.493 1211.48,559.518 1211.95,557.455 1212.42,555.361 1212.89,553.14 1213.36,551.09 1213.83,549.067 1214.31,547.074 1214.78,544.956 1215.25,542.905 1215.72,540.876 1216.19,538.833 1216.66,536.817 1217.13,534.809 1217.6,532.871 1218.07,530.712 1218.54,528.548 1219.01,526.387 1219.48,524.356 1219.95,522.333 1220.42,520.274 1220.89,518.194 1221.36,516.138 1221.83,514.014 1222.3,512.055 1222.77,510.067 1223.24,508.001 1223.71,506.017 1224.18,504.072 1224.65,501.937 1225.12,499.958 1225.59,498.059 1226.06,496.114 1226.53,494.205 1227,492.416 1227.47,490.492 1227.94,488.615 1228.41,486.736 1228.88,484.89 1229.35,483.027 1229.82,481.222 1230.29,479.41 1230.76,477.551 1231.23,475.567 1231.7,473.499 1232.17,471.632 1232.64,469.752 1233.11,467.722 1233.58,465.806 1234.05,463.845 1234.52,461.976 1234.99,460.067 1235.46,458.293 1235.93,456.621 1236.4,454.892 1236.87,453.228 1237.34,451.599 1237.81,450.012 1238.28,448.505 1238.75,446.794 1239.23,445.414 1239.7,444.083 1240.17,442.57 1240.64,441.293 1241.11,439.899 1241.58,438.606 1242.05,437.321 1242.52,436.161 1242.99,435.021 1243.46,433.925 1243.93,432.748 1244.4,431.449 1244.87,430.255 1245.34,429.154 1245.81,428.021 1246.28,426.808 1246.75,425.63 1247.22,424.445 1247.69,423.407 1248.16,422.54 1248.63,421.52 1249.1,420.511 1249.57,419.535 1250.04,418.776 1250.51,417.917 1250.98,417.083 1251.45,416.37 1251.92,415.484 1252.39,414.6 1252.86,413.869 1253.33,413.158 1253.8,412.537 1254.27,411.696 1254.74,411.032 1255.21,410.34 1255.68,409.763 1256.15,409.225 1256.62,408.59 1257.09,407.999 1257.56,407.438 1258.03,406.868 1258.5,406.318 1258.97,405.873 1259.44,405.417 1259.91,404.963 1260.38,404.397 1260.85,404.063 1261.32,403.909 1261.79,403.727 1262.26,403.444 1262.73,403.32 1263.2,403.136 1263.67,402.892 1264.14,402.721 1264.62,402.566 1265.09,402.406 1265.56,402.174 1266.03,401.981 1266.5,401.732 1266.97,401.679 1267.44,401.524 1267.91,401.294 1268.38,401.162 1268.85,400.873 1269.32,400.733 1269.79,400.655 1270.26,400.588 1270.73,400.591 1271.2,400.536 1271.67,400.572 1272.14,400.621 1272.61,400.775 1273.08,400.89 1273.55,401.028 1274.02,401.249 1274.49,401.541 1274.96,401.778 1275.43,402.183 1275.9,402.648 1276.37,403.133 1276.84,403.586 1277.31,404.078 1277.78,404.597 1278.25,405.165 1278.72,405.748 1279.19,406.406 1279.66,407.17 1280.13,407.744 1280.6,408.272 1281.07,408.89 1281.54,409.505 1282.01,410.123 1282.48,410.808 1282.95,411.47 1283.42,412.139 1283.89,412.819 1284.36,413.502 1284.83,414.328 1285.3,415.007 1285.77,415.748 1286.24,416.446 1286.71,417.181 1287.18,417.856 1287.65,418.572 1288.12,419.379 1288.59,420.239 1289.06,420.994 1289.54,421.798 1290.01,422.756 1290.48,423.557 1290.95,424.337 1291.42,425.243 1291.89,426.284 1292.36,427.381 1292.83,428.38 1293.3,429.335 1293.77,430.519 1294.24,431.687 1294.71,432.711 1295.18,433.763 1295.65,434.959 1296.12,436.048 1296.59,437.226 1297.06,438.418 1297.53,439.725 1298,441.069 1298.47,442.392 1298.94,443.605 1299.41,444.935 1299.88,446.318 1300.35,447.566 1300.82,448.949 1301.29,450.345 1301.76,451.728 1302.23,452.968 1302.7,454.3 1303.17,455.705 1303.64,457.043 1304.11,458.382 1304.58,459.752 1305.05,461.222 1305.52,462.68 1305.99,464.148 1306.46,465.55 1306.93,467.085 1307.4,468.724 1307.87,470.362 1308.34,471.93 1308.81,473.47 1309.28,474.936 1309.75,476.58 1310.22,478.216 1310.69,479.703 1311.16,481.301 1311.63,482.937 1312.1,484.507 1312.57,486.2 1313.04,487.833 1313.51,489.527 1313.98,491.19 1314.45,492.905 1314.93,494.683 1315.4,496.459 1315.87,498.285 1316.34,500.019 1316.81,501.754 1317.28,503.575 1317.75,505.265 1318.22,506.905 1318.69,508.582 1319.16,510.349 1319.63,511.968 1320.1,513.787 1320.57,515.601 1321.04,517.398 1321.51,519.13 1321.98,521.033 1322.45,522.914 1322.92,524.807 1323.39,526.584 1323.86,528.334 1324.33,530.146 1324.8,532.092 1325.27,533.985 1325.74,535.884 1326.21,537.82 1326.68,539.836 1327.15,541.876 1327.62,543.827 1328.09,545.891 1328.56,547.774 1329.03,549.618 1329.5,551.562 1329.97,553.722 1330.44,555.759 1330.91,557.742 1331.38,559.774 1331.85,561.833 1332.32,563.776 1332.79,565.718 1333.26,567.623 1333.73,569.527 1334.2,571.311 1334.67,573.108 1335.14,574.922 1335.61,576.67 1336.08,578.363 1336.55,580.178 1337.02,582.057 1337.49,583.889 1337.96,585.684 1338.43,587.477 1338.9,589.166 1339.37,591.04 1339.85,592.801 1340.32,594.672 1340.79,596.568 1341.26,598.36 1341.73,600.125 1342.2,601.936 1342.67,603.734 1343.14,605.35 1343.61,607.153 1344.08,608.903 1344.55,610.653 1345.02,612.221 1345.49,613.993 1345.96,615.692 1346.43,617.379 1346.9,619.055 1347.37,620.779 1347.84,622.589 1348.31,624.378 1348.78,626.106 1349.25,627.762 1349.72,629.583 1350.19,631.211 1350.66,632.975 1351.13,634.513 1351.6,636.025 1352.07,637.672 1352.54,639.24 1353.01,640.875 1353.48,642.639 1353.95,644.271 1354.42,645.919 1354.89,647.634 1355.36,649.328 1355.83,651.097 1356.3,652.79 1356.77,654.731 1357.24,656.611 1357.71,658.446 1358.18,660.192 1358.65,662.017 1359.12,663.746 1359.59,665.503 1360.06,667.105 1360.53,668.95 1361,670.777 1361.47,672.467 1361.94,674.201 1362.41,676.004 1362.88,677.703 1363.35,679.255 1363.82,681.011 1364.29,682.604 1364.76,684.266 1365.24,685.897 1365.71,687.565 1366.18,689.125 1366.65,690.571 1367.12,692.127 1367.59,693.68 1368.06,695.354 1368.53,696.875 1369,698.436 1369.47,699.875 1369.94,701.311 1370.41,702.683 1370.88,704.231 1371.35,705.794 1371.82,707.234 1372.29,708.592 1372.76,710.048 1373.23,711.501 1373.7,712.913 1374.17,714.314 1374.64,715.539 1375.11,716.764 1375.58,717.762 1376.05,718.915 1376.52,720.105 1376.99,721.179 1377.46,722.326 1377.93,723.438 1378.4,724.511 1378.87,725.614 1379.34,726.741 1379.81,727.846 1380.28,728.813 1380.75,729.917 1381.22,730.933 1381.69,731.95 1382.16,732.926 1382.63,734.081 1383.1,735.151 1383.57,736.237 1384.04,737.319 1384.51,738.264 1384.98,739.364 1385.45,740.234 1385.92,741.173 1386.39,742.047 1386.86,742.751 1387.33,743.502 1387.8,744.363 1388.27,745.009 1388.74,745.646 1389.21,746.35 1389.68,747.047 1390.15,747.655 1390.63,748.247 1391.1,748.922 1391.57,749.558 1392.04,750.184 1392.51,750.863 1392.98,751.576 1393.45,752.22 1393.92,752.725 1394.39,753.237 1394.86,753.886 1395.33,754.515 1395.8,755.058 1396.27,755.563 1396.74,756.085 1397.21,756.499 1397.68,756.881 1398.15,757.245 1398.62,757.526 1399.09,757.85 1399.56,758.114 1400.03,758.166 1400.5,758.315 1400.97,758.555 1401.44,758.752 1401.91,759.053 1402.38,759.061 1402.85,759.312 1403.32,759.482 1403.79,759.578 1404.26,759.661 1404.73,759.709 1405.2,759.86 1405.67,760.023 1406.14,760.257 1406.61,760.414 1407.08,760.411 1407.55,760.427 1408.02,760.533 1408.49,760.732 1408.96,760.893 1409.43,761.002 1409.9,761.188 1410.37,761.191 1410.84,761.139 1411.31,761.15 1411.78,761.013 1412.25,760.914 1412.72,760.796 1413.19,760.543 1413.66,760.278 1414.13,759.998 1414.6,759.695 1415.07,759.44 1415.55,759.092 1416.02,758.642 1416.49,758.191 1416.96,757.83 1417.43,757.49 1417.9,757.019 1418.37,756.369 1418.84,755.864 1419.31,755.264 1419.78,754.506 1420.25,753.795 1420.72,753.298 1421.19,752.684 1421.66,752.091 1422.13,751.434 1422.6,750.74 1423.07,749.933 1423.54,749.096 1424.01,748.318 1424.48,747.611 1424.95,746.919 1425.42,746.175 1425.89,745.394 1426.36,744.728 1426.83,744.069 1427.3,743.253 1427.77,742.614 1428.24,741.884 1428.71,740.957 1429.18,740.175 1429.65,739.41 1430.12,738.662 1430.59,737.875 1431.06,737.133 1431.53,736.243 1432,735.489 1432.47,734.59 1432.94,733.709 1433.41,732.856 1433.88,732.003 1434.35,731.123 1434.82,730.277 1435.29,729.463 1435.76,728.632 1436.23,727.686 1436.7,726.833 1437.17,725.985 1437.64,724.976 1438.11,724.022 1438.58,723.133 1439.05,722.02 1439.52,721.013 1439.99,719.82 1440.46,718.798 1440.94,717.637 1441.41,716.559 1441.88,715.45 1442.35,714.248 1442.82,712.981 1443.29,711.861 1443.76,710.701 1444.23,709.375 1444.7,708.105 1445.17,706.638 1445.64,705.427 1446.11,704.121 1446.58,702.75 1447.05,701.328 1447.52,699.888 1447.99,698.391 1448.46,696.862 1448.93,695.257 1449.4,693.736 1449.87,692.22 1450.34,690.643 1450.81,689.022 1451.28,687.398 1451.75,685.863 1452.22,684.324 1452.69,682.83 1453.16,681.266 1453.63,679.815 1454.1,678.251 1454.57,676.617 1455.04,674.91 1455.51,673.244 1455.98,671.62 1456.45,669.927 1456.92,668.272 1457.39,666.552 1457.86,664.783 1458.33,662.959 1458.8,661.1 1459.27,659.484 1459.74,657.739 1460.21,656.063 1460.68,654.49 1461.15,652.942 1461.62,651.242 1462.09,649.526 1462.56,648.021 1463.03,646.209 1463.5,644.574 1463.97,642.836 1464.44,641.056 1464.91,639.17 1465.38,637.436 1465.86,635.596 1466.33,633.724 1466.8,631.883 1467.27,629.945 1467.74,628.11 1468.21,626.264 1468.68,624.38 1469.15,622.427 1469.62,620.608 1470.09,618.723 1470.56,617.008 1471.03,615.177 1471.5,613.323 1471.97,611.564 1472.44,609.595 1472.91,607.628 1473.38,605.691 1473.85,603.643 1474.32,601.715 1474.79,599.853 1475.26,597.976 1475.73,596.098 1476.2,594.199 1476.67,592.343 1477.14,590.31 1477.61,588.292 1478.08,586.306 1478.55,584.351 1479.02,582.242 1479.49,580.124 1479.96,578.075 1480.43,576.137 1480.9,574.149 1481.37,572.224 1481.84,570.352 1482.31,568.379 1482.78,566.39 1483.25,564.329 1483.72,562.28 1484.19,560.392 1484.66,558.464 1485.13,556.56 1485.6,554.572 1486.07,552.672 1486.54,550.681 1487.01,548.884 1487.48,546.942 1487.95,545.156 1488.42,543.483 1488.89,541.818 1489.36,540.064 1489.83,538.265 1490.3,536.475 1490.77,534.762 1491.25,532.954 1491.72,531.115 1492.19,529.326 1492.66,527.501 1493.13,525.728 1493.6,523.947 1494.07,522.314 1494.54,520.537 1495.01,518.652 1495.48,516.811 1495.95,515.077 1496.42,513.309 1496.89,511.632 1497.36,510.059 1497.83,508.311 1498.3,506.69 1498.77,505.029 1499.24,503.41 1499.71,501.798 1500.18,500.269 1500.65,498.687 1501.12,497.26 1501.59,495.729 1502.06,494.201 1502.53,492.728 1503,491.1 1503.47,489.545 1503.94,487.884 1504.41,486.186 1504.88,484.596 1505.35,482.971 1505.82,481.326 1506.29,479.573 1506.76,477.868 1507.23,476.165 1507.7,474.493 1508.17,472.749 1508.64,471.081 1509.11,469.346 1509.58,467.72 1510.05,466.062 1510.52,464.546 1510.99,462.995 1511.46,461.357 1511.93,459.806 1512.4,458.253 1512.87,456.789 1513.34,455.218 1513.81,453.762 1514.28,452.12 1514.75,450.644 1515.22,449.1 1515.69,447.533 1516.17,446.134 1516.64,444.721 1517.11,443.264 1517.58,441.914 1518.05,440.453 1518.52,439.107 1518.99,437.77 1519.46,436.554 1519.93,435.182 1520.4,433.936 1520.87,432.581 1521.34,431.26 1521.81,429.974 1522.28,428.611 1522.75,427.309 1523.22,426.194 1523.69,425.073 1524.16,423.87 1524.63,422.575 1525.1,421.387 1525.57,420.235 1526.04,419.121 1526.51,418.07 1526.98,417.01 1527.45,415.943 1527.92,414.806 1528.39,413.726 1528.86,412.637 1529.33,411.587 1529.8,410.737 1530.27,409.938 1530.74,409.041 1531.21,408.006 1531.68,407.047 1532.15,406.287 1532.62,405.582 1533.09,404.804 1533.56,404.018 1534.03,403.326 1534.5,402.674 1534.97,402.155 1535.44,401.771 1535.91,401.353 1536.38,400.996 1536.85,400.62 1537.32,400.139 1537.79,399.77 1538.26,399.574 1538.73,399.168 1539.2,398.959 1539.67,398.746 1540.14,398.635 1540.61,398.469 1541.08,398.309 1541.56,398.114 1542.03,397.904 1542.5,397.852 1542.97,397.784 1543.44,397.708 1543.91,397.702 1544.38,397.799 1544.85,398.02 1545.32,398.284 1545.79,398.523 1546.26,398.734 1546.73,399.007 1547.2,399.166 1547.67,399.438 1548.14,399.73 1548.61,400.061 1549.08,400.481 1549.55,400.902 1550.02,401.338 1550.49,401.811 1550.96,402.435 1551.43,402.934 1551.9,403.464 1552.37,404.019 1552.84,404.634 1553.31,405.309 1553.78,406.083 1554.25,406.757 1554.72,407.394 1555.19,408.065 1555.66,408.742 1556.13,409.582 1556.6,410.337 1557.07,411.125 1557.54,411.993 1558.01,413.003 1558.48,413.964 1558.95,414.749 1559.42,415.607 1559.89,416.499 1560.36,417.286 1560.83,418.188 1561.3,418.959 1561.77,419.882 1562.24,420.921 1562.71,421.908 1563.18,422.935 1563.65,424.022 1564.12,425.072 1564.59,426.129 1565.06,427.249 1565.53,428.3 1566,429.439 1566.47,430.639 1566.95,431.79 1567.42,433.077 1567.89,434.318 1568.36,435.462 1568.83,436.671 1569.3,438.049 1569.77,439.406 1570.24,440.628 1570.71,441.89 1571.18,443.194 1571.65,444.717 1572.12,446.136 1572.59,447.602 1573.06,449.14 1573.53,450.698 1574,452.331 1574.47,454.038 1574.94,455.704 1575.41,457.497 1575.88,459.275 1576.35,461.061 1576.82,462.797 1577.29,464.499 1577.76,466.261 1578.23,467.931 1578.7,469.763 1579.17,471.676 1579.64,473.654 1580.11,475.48 1580.58,477.269 1581.05,479.305 1581.52,481.219 1581.99,483.214 1582.46,485.165 1582.93,486.934 1583.4,488.929 1583.87,490.919 1584.34,492.967 1584.81,494.892 1585.28,497.004 1585.75,498.919 1586.22,500.952 1586.69,503.01 1587.16,504.906 1587.63,506.977 1588.1,508.995 1588.57,511.215 1589.04,513.483 1589.51,515.657 1589.98,517.839 1590.45,519.931 1590.92,522.006 1591.39,524.085 1591.87,526.265 1592.34,528.402 1592.81,530.636 1593.28,532.784 1593.75,534.817 1594.22,536.91 1594.69,539.266 1595.16,541.439 1595.63,543.662 1596.1,546.034 1596.57,548.484 1597.04,550.579 1597.51,552.736 1597.98,554.835 1598.45,557.005 1598.92,559.178 1599.39,561.328 1599.86,563.45 1600.33,565.639 1600.8,567.771 1601.27,569.915 1601.74,572.137 1602.21,574.364 1602.68,576.697 1603.15,578.985 1603.62,581.279 1604.09,583.505 1604.56,585.777 1605.03,588.06 1605.5,590.359 1605.97,592.648 1606.44,594.921 1606.91,597.124 1607.38,599.395 1607.85,601.59 1608.32,603.798 1608.79,605.998 1609.26,608.152 1609.73,610.324 1610.2,612.439 1610.67,614.504 1611.14,616.604 1611.61,618.858 1612.08,621.066 1612.55,623.182 1613.02,625.442 1613.49,627.671 1613.96,630.06 1614.43,632.496 1614.9,634.876 1615.37,637.161 1615.84,639.532 1616.31,641.751 1616.78,644.106 1617.26,646.449 1617.73,648.803 1618.2,651.303 1618.67,653.862 1619.14,656.391 1619.61,658.906 1620.08,661.372 1620.55,663.547 1621.02,665.644 1621.49,667.845 1621.96,670.245 1622.43,672.531 1622.9,674.72 1623.37,677.066 1623.84,679.403 1624.31,681.583 1624.78,684.094 1625.25,686.356 1625.72,688.765 1626.19,691.113 1626.66,693.429 1627.13,695.724 1627.6,698.019 1628.07,700.247 1628.54,702.645 1629.01,704.96 1629.48,707.28 1629.95,709.694 1630.42,711.967 1630.89,714.267 1631.36,716.542 1631.83,718.934 1632.3,721.243 1632.77,723.458 1633.24,725.651 1633.71,727.773 1634.18,730.091 1634.65,732.309 1635.12,734.347 1635.59,736.638 1636.06,738.891 1636.53,741.202 1637,743.36 1637.47,745.456 1637.94,747.486 1638.41,749.506 1638.88,751.558 1639.35,753.588 1639.82,755.69 1640.29,757.793 1640.76,759.835 1641.23,761.798 1641.7,763.669 1642.18,765.733 1642.65,767.715 1643.12,769.701 1643.59,771.629 1644.06,773.505 1644.53,775.341 1645,777.206 1645.47,779.055 1645.94,780.872 1646.41,782.631 1646.88,784.388 1647.35,786.112 1647.82,787.788 1648.29,789.376 1648.76,791.137 1649.23,792.761 1649.7,794.36 1650.17,796.021 1650.64,797.699 1651.11,799.274 1651.58,800.81 1652.05,802.421 1652.52,803.904 1652.99,805.299 1653.46,806.705 1653.93,808.07 1654.4,809.418 1654.87,810.673 1655.34,811.979 1655.81,813.251 1656.28,814.415 1656.75,815.593 1657.22,816.596 1657.69,817.747 1658.16,818.816 1658.63,819.757 1659.1,820.823 1659.57,821.722 1660.04,822.645 1660.51,823.487 1660.98,824.394 1661.45,825.198 1661.92,825.983 1662.39,826.623 1662.86,827.317 1663.33,827.906 1663.8,828.353 1664.27,828.759 1664.74,829.269 1665.21,829.707 1665.68,830.157 1666.15,830.429 1666.62,830.648 1667.09,830.957 1667.57,831.224 1668.04,831.472 1668.51,831.569 1668.98,831.575 1669.45,831.708 1669.92,831.586 1670.39,831.474 1670.86,831.362 1671.33,831.326 1671.8,831.005 1672.27,830.831 1672.74,830.575 1673.21,830.268 1673.68,829.965 1674.15,829.56 1674.62,829.098 1675.09,828.666 1675.56,828.102 1676.03,827.594 1676.5,827.039 1676.97,826.531 1677.44,825.922 1677.91,825.435 1678.38,824.954 1678.85,824.316 1679.32,823.729 1679.79,823.159 1680.26,822.478 1680.73,821.84 1681.2,821.101 1681.67,820.368 1682.14,819.59 1682.61,818.655 1683.08,817.831 1683.55,817.07 1684.02,816.417 1684.49,815.488 1684.96,814.701 1685.43,813.944 1685.9,813.058 1686.37,812.128 1686.84,811.161 1687.31,810.03 1687.78,808.943 1688.25,807.746 1688.72,806.568 1689.19,805.337 1689.66,804.19 1690.13,802.897 1690.6,801.714 1691.07,800.476 1691.54,799.252 1692.01,798.067 1692.49,796.671 1692.96,795.252 1693.43,793.682 1693.9,792.059 1694.37,790.493 1694.84,788.842 1695.31,787.261 1695.78,785.665 1696.25,784.067 1696.72,782.208 1697.19,780.524 1697.66,778.861 1698.13,777.078 1698.6,775.387 1699.07,773.43 1699.54,771.573 1700.01,769.642 1700.48,767.863 1700.95,765.98 1701.42,764.031 1701.89,762.025 1702.36,760.108 1702.83,758.186 1703.3,756.221 1703.77,754.213 1704.24,752.196 1704.71,750.309 1705.18,748.209 1705.65,745.961 1706.12,743.8 1706.59,741.583 1707.06,739.488 1707.53,737.346 1708,735.062 1708.47,732.761 1708.94,730.582 1709.41,728.452 1709.88,726.281 1710.35,723.974 1710.82,721.566 1711.29,719.161 1711.76,716.831 1712.23,714.333 1712.7,711.887 1713.17,709.354 1713.64,706.827 1714.11,704.321 1714.58,701.754 1715.05,699.209 1715.52,696.6 1715.99,693.899 1716.46,691.27 1716.93,688.548 1717.4,685.869 1717.88,683.135 1718.35,680.409 1718.82,677.81 1719.29,675.201 1719.76,672.561 1720.23,670.168 1720.7,667.575 1721.17,665.065 1721.64,662.452 1722.11,659.885 1722.58,657.417 1723.05,654.837 1723.52,652.253 1723.99,649.734 1724.46,646.958 1724.93,644.285 1725.4,641.645 1725.87,639.005 1726.34,636.376 1726.81,633.773 1727.28,631.106 1727.75,628.364 1728.22,625.72 1728.69,623.079 1729.16,620.508 1729.63,617.768 1730.1,615.146 1730.57,612.538 1731.04,609.775 1731.51,607.088 1731.98,604.387 1732.45,601.745 1732.92,598.938 1733.39,596.192 1733.86,593.441 1734.33,590.744 1734.8,588.084 1735.27,585.497 1735.74,582.932 1736.21,580.24 1736.68,577.506 1737.15,574.934 1737.62,572.427 1738.09,569.833 1738.56,567.254 1739.03,564.562 1739.5,561.985 1739.97,559.286 1740.44,556.777 1740.91,554.198 1741.38,551.596 1741.85,548.96 1742.32,546.222 1742.79,543.55 1743.27,540.939 1743.74,538.438 1744.21,535.693 1744.68,533.057 1745.15,530.543 1745.62,527.91 1746.09,525.464 1746.56,522.967 1747.03,520.475 1747.5,518.09 1747.97,515.641 1748.44,513.299 1748.91,510.888 1749.38,508.212 1749.85,505.561 1750.32,503.037 1750.79,500.488 1751.26,497.949 1751.73,495.414 1752.2,492.949 1752.67,490.509 1753.14,487.964 1753.61,485.528 1754.08,483.111 1754.55,480.542 1755.02,477.939 1755.49,475.435 1755.96,472.997 1756.43,470.471 1756.9,467.886 1757.37,465.53 1757.84,463.013 1758.31,460.521 1758.78,457.961 1759.25,455.543 1759.72,453.137 1760.19,450.733 1760.66,448.34 1761.13,445.966 1761.6,443.691 1762.07,441.316 1762.54,438.868 1763.01,436.534 1763.48,434.253 1763.95,431.84 1764.42,429.42 1764.89,427.027 1765.36,424.587 1765.83,422.161 1766.3,419.815 1766.77,417.451 1767.24,415.252 1767.71,413.028 1768.19,410.707 1768.66,408.401 1769.13,406.11 1769.6,403.829 1770.07,401.413 1770.54,399.141 1771.01,396.903 1771.48,394.794 1771.95,392.673 1772.42,390.629 1772.89,388.45 1773.36,386.384 1773.83,384.454 1774.3,382.403 1774.77,380.302 1775.24,378.292 1775.71,376.354 1776.18,374.512 1776.65,372.732 1777.12,371.026 1777.59,369.196 1778.06,367.352 1778.53,365.499 1779,363.812 1779.47,362.081 1779.94,360.35 1780.41,358.75 1780.88,357.099 1781.35,355.491 1781.82,354.087 1782.29,352.49 1782.76,351.055 1783.23,349.568 1783.7,348.155 1784.17,346.68 1784.64,345.283 1785.11,343.831 1785.58,342.387 1786.05,340.932 1786.52,339.757 1786.99,338.509 1787.46,337.377 1787.93,336.104 1788.4,334.935 1788.87,333.856 1789.34,332.823 1789.81,331.857 1790.28,330.829 1790.75,329.818 1791.22,328.863 1791.69,327.913 1792.16,327.16 1792.63,326.383 1793.1,325.677 1793.58,324.964 1794.05,324.347 1794.52,323.575 1794.99,322.9 1795.46,322.208 1795.93,321.54 1796.4,320.669 1796.87,320.081 1797.34,319.345 1797.81,318.753 1798.28,318.231 1798.75,317.621 1799.22,317.106 1799.69,316.749 1800.16,316.47 1800.63,316.293 1801.1,316.188 1801.57,315.852 1802.04,315.682 1802.51,315.425 1802.98,315.308 1803.45,315.2 1803.92,315.044 1804.39,314.976 1804.86,315.031 1805.33,315.135 1805.8,315.204 1806.27,315.3 1806.74,315.429 1807.21,315.869 1807.68,316.122 1808.15,316.528 1808.62,316.783 1809.09,317.156 1809.56,317.647 1810.03,318.184 1810.5,318.688 1810.97,319.16 1811.44,319.744 1811.91,320.455 1812.38,321.199 1812.85,322.034 1813.32,322.713 1813.79,323.64 1814.26,324.636 1814.73,325.64 1815.2,326.668 1815.67,327.607 1816.14,328.669 1816.61,329.694 1817.08,331.007 1817.55,332.304 1818.02,333.602 1818.5,334.94 1818.97,336.342 1819.44,337.916 1819.91,339.39 1820.38,340.898 1820.85,342.422 1821.32,343.84 1821.79,345.402 1822.26,347.004 1822.73,348.568 1823.2,350.191 1823.67,351.841 1824.14,353.557 1824.61,355.51 1825.08,357.212 1825.55,359.06 1826.02,360.978 1826.49,362.926 1826.96,364.76 1827.43,366.674 1827.9,368.545 1828.37,370.634 1828.84,372.768 1829.31,374.937 1829.78,377.131 1830.25,379.349 1830.72,381.451 1831.19,383.594 1831.66,385.728 1832.13,387.965 1832.6,390.309 1833.07,392.829 1833.54,395.218 1834.01,397.5 1834.48,399.93 1834.95,402.249 1835.42,404.615 1835.89,407.149 1836.36,409.597 1836.83,412.17 1837.3,414.748 1837.77,417.45 1838.24,420.096 1838.71,422.667 1839.18,425.399 1839.65,428.131 1840.12,430.85 1840.59,433.544 1841.06,436.242 1841.53,438.924 1842,441.516 1842.47,444.217 1842.94,446.835 1843.41,449.489 1843.89,452.206 1844.36,455.046 1844.83,457.934 1845.3,460.671 1845.77,463.549 1846.24,466.282 1846.71,469.022 1847.18,471.852 1847.65,474.721 1848.12,477.589 1848.59,480.388 1849.06,483.251 1849.53,486.059 1850,488.855 1850.47,491.678 1850.94,494.433 1851.41,497.404 1851.88,500.355 1852.35,503.184 1852.82,506.152 1853.29,509.026 1853.76,512.152 1854.23,515.275 1854.7,518.435 1855.17,521.613 1855.64,524.606 1856.11,527.891 1856.58,531.236 1857.05,534.585 1857.52,537.774 1857.99,541.104 1858.46,544.301 1858.93,547.5 1859.4,550.748 1859.87,554.11 1860.34,557.417 1860.81,560.758 1861.28,563.941 1861.75,567.167 1862.22,570.555 1862.69,573.745 1863.16,577.17 1863.63,580.417 1864.1,583.631 1864.57,586.914 1865.04,590.151 1865.51,593.366 1865.98,596.655 1866.45,599.998 1866.92,603.375 1867.39,606.626 1867.86,609.81 1868.33,613.155 1868.8,616.426 1869.28,619.658 1869.75,622.966 1870.22,626.299 1870.69,629.525 1871.16,632.876 1871.63,636.308 1872.1,639.48 1872.57,642.819 1873.04,646.028 1873.51,649.241 1873.98,652.48 1874.45,655.687 1874.92,658.824 1875.39,662.163 1875.86,665.406 1876.33,668.526 1876.8,671.836 1877.27,674.946 1877.74,678.223 1878.21,681.538 1878.68,684.771 1879.15,688.123 1879.62,691.552 1880.09,694.843 1880.56,698.104 1881.03,701.488 1881.5,704.723 1881.97,707.928 1882.44,711.107 1882.91,714.263 1883.38,717.541 1883.85,720.822 1884.32,724.124 1884.79,727.371 1885.26,730.594 1885.73,733.757 1886.2,737.034 1886.67,740.211 1887.14,743.595 1887.61,746.817 1888.08,749.943 1888.55,752.98 1889.02,756.029 1889.49,759.077 1889.96,762.155 1890.43,765.115 1890.9,768.171 1891.37,771.163 1891.84,774.059 1892.31,776.822 1892.78,779.641 1893.25,782.472 1893.72,785.401 1894.2,788.259 1894.67,791.009 1895.14,793.854 1895.61,796.752 1896.08,799.504 1896.55,802.194 1897.02,804.835 1897.49,807.415 1897.96,810.068 1898.43,812.603 1898.9,815.063 1899.37,817.584 1899.84,820.113 1900.31,822.538 1900.78,824.939 1901.25,827.287 1901.72,829.628 1902.19,831.955 1902.66,834.229 1903.13,836.558 1903.6,838.835 1904.07,841.037 1904.54,843.341 1905.01,845.557 1905.48,847.589 1905.95,849.898 1906.42,851.981 1906.89,854.133 1907.36,856.132 1907.83,858.188 1908.3,860.125 1908.77,861.988 1909.24,863.842 1909.71,865.833 1910.18,867.793 1910.65,869.629 1911.12,871.396 1911.59,873.214 1912.06,875.105 1912.53,876.844 1913,878.379 1913.47,879.971 1913.94,881.409 1914.41,882.981 1914.88,884.532 1915.35,886.19 1915.82,887.687 1916.29,889.116 1916.76,890.518 1917.23,891.921 1917.7,893.281 1918.17,894.586 1918.64,895.722 1919.11,897.073 1919.59,898.249 1920.06,899.513 1920.53,900.562 1921,901.735 1921.47,902.909 1921.94,903.932 1922.41,904.927 1922.88,906.027 1923.35,907.151 1923.82,908.154 1924.29,909.105 1924.76,910.031 1925.23,910.922 1925.7,911.686 1926.17,912.531 1926.64,913.253 1927.11,913.926 1927.58,914.552 1928.05,915.241 1928.52,915.852 1928.99,916.515 1929.46,917.025 1929.93,917.528 1930.4,918.011 1930.87,918.418 1931.34,918.806 1931.81,919.032 1932.28,919.445 1932.75,919.82 1933.22,920.159 1933.69,920.388 1934.16,920.656 1934.63,920.765 1935.1,920.81 1935.57,920.694 1936.04,920.597 1936.51,920.441 1936.98,920.088 1937.45,919.75 1937.92,919.547 1938.39,919.391 1938.86,919.163 1939.33,918.882 1939.8,918.459 1940.27,918.117 1940.74,917.878 1941.21,917.566 1941.68,917.244 1942.15,916.855 1942.62,916.432 1943.09,915.893 1943.56,915.302 1944.03,914.716 1944.51,914.087 1944.98,913.303 1945.45,912.506 1945.92,911.704 1946.39,910.813 1946.86,909.681 1947.33,908.717 1947.8,907.654 1948.27,906.65 1948.74,905.556 1949.21,904.51 1949.68,903.317 1950.15,902.002 1950.62,900.818 1951.09,899.551 1951.56,898.089 1952.03,896.881 1952.5,895.317 1952.97,893.975 1953.44,892.527 1953.91,891.038 1954.38,889.64 1954.85,888.056 1955.32,886.45 1955.79,884.836 1956.26,883.198 1956.73,881.464 1957.2,879.758 1957.67,877.99 1958.14,876.119 1958.61,874.242 1959.08,872.157 1959.55,870.037 1960.02,867.892 1960.49,865.687 1960.96,863.451 1961.43,861.219 1961.9,858.96 1962.37,856.595 1962.84,854.214 1963.31,851.784 1963.78,849.3 1964.25,846.808 1964.72,844.395 1965.19,841.781 1965.66,839.084 1966.13,836.304 1966.6,833.563 1967.07,830.796 1967.54,828.032 1968.01,825.155 1968.48,822.346 1968.95,819.411 1969.42,816.401 1969.9,813.468 1970.37,810.565 1970.84,807.584 1971.31,804.545 1971.78,801.423 1972.25,798.313 1972.72,795.303 1973.19,792.167 1973.66,788.877 1974.13,785.736 1974.6,782.517 1975.07,779.513 1975.54,776.192 1976.01,772.96 1976.48,769.678 1976.95,766.467 1977.42,763.057 1977.89,759.59 1978.36,756.185 1978.83,752.855 1979.3,749.446 1979.77,746.198 1980.24,742.761 1980.71,739.332 1981.18,735.798 1981.65,732.417 1982.12,729.088 1982.59,725.731 1983.06,722.107 1983.53,718.57 1984,714.99 1984.47,711.501 1984.94,707.866 1985.41,704.311 1985.88,700.932 1986.35,697.507 1986.82,693.936 1987.29,690.612 1987.76,687.173 1988.23,683.655 1988.7,680.184 1989.17,676.906 1989.64,673.496 1990.11,670.078 1990.58,666.654 1991.05,663.31 1991.52,660.111 1991.99,656.838 1992.46,653.468 1992.93,650.286 1993.4,646.931 1993.87,643.658 1994.34,640.346 1994.82,636.875 1995.29,633.53 1995.76,630.197 1996.23,626.885 1996.7,623.52 1997.17,620.125 1997.64,616.815 1998.11,613.498 1998.58,610.105 1999.05,606.69 1999.52,603.291 1999.99,599.921 2000.46,596.597 2000.93,593.307 2001.4,589.961 2001.87,586.615 2002.34,583.222 2002.81,579.81 2003.28,576.332 2003.75,573.015 2004.22,569.681 2004.69,566.234 2005.16,562.833 2005.63,559.574 2006.1,556.316 2006.57,553.102 2007.04,549.81 2007.51,546.574 2007.98,543.392 2008.45,540.107 2008.92,536.834 2009.39,533.597 2009.86,530.353 2010.33,527.109 2010.8,523.722 2011.27,520.376 2011.74,517.111 2012.21,513.812 2012.68,510.434 2013.15,507.162 2013.62,503.913 2014.09,500.549 2014.56,497.223 2015.03,493.843 2015.5,490.477 2015.97,487.1 2016.44,483.912 2016.91,480.657 2017.38,477.406 2017.85,474.067 2018.32,470.914 2018.79,467.617 2019.26,464.316 2019.73,460.998 2020.21,457.772 2020.68,454.417 2021.15,451.21 2021.62,447.961 2022.09,444.672 2022.56,441.515 2023.03,438.181 2023.5,435.133 2023.97,431.954 2024.44,428.991 2024.91,425.823 2025.38,422.849 2025.85,419.866 2026.32,416.871 2026.79,413.931 2027.26,410.915 2027.73,407.881 2028.2,404.973 2028.67,401.942 2029.14,399.155 2029.61,396.205 2030.08,393.302 2030.55,390.368 2031.02,387.502 2031.49,384.722 2031.96,381.954 2032.43,379.266 2032.9,376.585 2033.37,373.848 2033.84,371.174 2034.31,368.589 2034.78,366.058 2035.25,363.652 2035.72,361.328 2036.19,359.042 2036.66,356.708 2037.13,354.518 2037.6,352.135 2038.07,349.979 2038.54,347.831 2039.01,345.827 2039.48,343.743 2039.95,341.699 2040.42,339.828 2040.89,337.891 2041.36,335.949 2041.83,334.038 2042.3,332.324 2042.77,330.603 2043.24,328.841 2043.71,327.025 2044.18,325.226 2044.65,323.474 2045.12,321.819 2045.6,320.012 2046.07,318.362 2046.54,316.782 2047.01,315.18 2047.48,313.562 2047.95,312.001 2048.42,310.465 2048.89,309.093 2049.36,307.64 2049.83,306.383 2050.3,305.082 2050.77,303.814 2051.24,302.569 2051.71,301.359 2052.18,300.102 2052.65,298.961 2053.12,297.822 2053.59,296.801 2054.06,295.79 2054.53,294.668 2055,293.618 2055.47,292.546 2055.94,291.566 2056.41,290.65 2056.88,289.651 2057.35,288.65 2057.82,287.806 2058.29,286.928 2058.76,285.837 2059.23,285.1 2059.7,284.292 2060.17,283.45 2060.64,282.656 2061.11,281.968 2061.58,281.28 2062.05,280.637 2062.52,279.928 2062.99,279.353 2063.46,278.88 2063.93,278.41 2064.4,277.963 2064.87,277.529 2065.34,277.184 2065.81,277.048 2066.28,276.852 2066.75,276.732 2067.22,276.77 2067.69,276.891 2068.16,276.888 2068.63,276.993 2069.1,277.081 2069.57,277.158 2070.04,277.45 2070.52,277.774 2070.99,278.147 2071.46,278.566 2071.93,279.006 2072.4,279.553 2072.87,279.991 2073.34,280.531 2073.81,281.258 2074.28,281.915 2074.75,282.659 2075.22,283.416 2075.69,284.286 2076.16,285.109 2076.63,285.958 2077.1,286.955 2077.57,287.954 2078.04,288.939 2078.51,289.781 2078.98,290.728 2079.45,291.735 2079.92,292.863 2080.39,293.949 2080.86,295.062 2081.33,296.215 2081.8,297.455 2082.27,298.751 2082.74,300.042 2083.21,301.401 2083.68,302.871 2084.15,304.341 2084.62,305.859 2085.09,307.481 2085.56,309.152 2086.03,310.884 2086.5,312.54 2086.97,314.344 2087.44,316.133 2087.91,318.039 2088.38,319.943 2088.85,321.969 2089.32,323.848 2089.79,325.816 2090.26,327.935 2090.73,329.841 2091.2,331.94 2091.67,334.028 2092.14,336.23 2092.61,338.394 2093.08,340.608 2093.55,342.766 2094.02,344.905 2094.49,347.052 2094.96,349.164 2095.43,351.509 2095.91,353.915 2096.38,356.382 2096.85,358.774 2097.32,361.022 2097.79,363.449 2098.26,365.778 2098.73,368.17 2099.2,370.593 2099.67,372.994 2100.14,375.444 2100.61,377.962 2101.08,380.537 2101.55,382.933 2102.02,385.423 2102.49,388.106 2102.96,390.802 2103.43,393.532 2103.9,396.317 2104.37,399.112 2104.84,401.823 2105.31,404.635 2105.78,407.365 2106.25,410.242 2106.72,413.06 2107.19,415.783 2107.66,418.69 2108.13,421.422 2108.6,424.482 2109.07,427.497 2109.54,430.503 2110.01,433.471 2110.48,436.497 2110.95,439.492 2111.42,442.449 2111.89,445.305 2112.36,448.28 2112.83,451.326 2113.3,454.353 2113.77,457.429 2114.24,460.435 2114.71,463.199 2115.18,466.193 2115.65,469.091 2116.12,472.079 2116.59,475.131 2117.06,478.01 2117.53,480.962 2118,484.032 2118.47,487.156 2118.94,490.315 2119.41,493.459 2119.88,496.527 2120.35,499.789 2120.83,502.905 2121.3,506.171 2121.77,509.414 2122.24,512.543 2122.71,515.823 2123.18,519.024 2123.65,522.277 2124.12,525.615 2124.59,528.832 2125.06,532.133 2125.53,535.397 2126,538.731 2126.47,542.202 2126.94,545.525 2127.41,548.986 2127.88,552.29 2128.35,555.604 2128.82,558.823 2129.29,562.15 2129.76,565.329 2130.23,568.695 2130.7,572.132 2131.17,575.394 2131.64,578.594 2132.11,581.811 2132.58,585.201 2133.05,588.68 2133.52,592.042 2133.99,595.485 2134.46,599.028 2134.93,602.497 2135.4,605.855 2135.87,609.286 2136.34,612.713 2136.81,616.117 2137.28,619.539 2137.75,622.786 2138.22,626.189 2138.69,629.675 2139.16,633.149 2139.63,636.63 2140.1,640.203 2140.57,643.587 2141.04,647.036 2141.51,650.473 2141.98,653.819 2142.45,657.048 2142.92,660.319 2143.39,663.621 2143.86,666.817 2144.33,669.999 2144.8,673.039 2145.27,676.271 2145.74,679.37 2146.22,682.535 2146.69,685.732 2147.16,688.833 2147.63,691.994 2148.1,695.23 2148.57,698.505 2149.04,701.582 2149.51,704.603 2149.98,707.653 2150.45,710.901 2150.92,714.083 2151.39,717.262 2151.86,720.545 2152.33,723.874 2152.8,727.248 2153.27,730.565 2153.74,733.811 2154.21,737.043 2154.68,740.349 2155.15,743.593 2155.62,746.843 2156.09,750.118 2156.56,753.375 2157.03,756.645 2157.5,759.942 2157.97,763.188 2158.44,766.394 2158.91,769.581 2159.38,772.716 2159.85,775.777 2160.32,778.885 2160.79,782.011 2161.26,785.017 2161.73,788.088 2162.2,791.007 2162.67,793.837 2163.14,796.794 2163.61,799.653 2164.08,802.539 2164.55,805.33 2165.02,808.109 2165.49,810.839 2165.96,813.666 2166.43,816.472 2166.9,819.334 2167.37,822.104 2167.84,824.751 2168.31,827.24 2168.78,829.774 2169.25,832.158 2169.72,834.631 2170.19,837.04 2170.66,839.366 2171.14,841.644 2171.61,843.926 2172.08,846.011 2172.55,848.345 2173.02,850.515 2173.49,852.612 2173.96,854.599 2174.43,856.636 2174.9,858.652 2175.37,860.621 2175.84,862.403 2176.31,864.249 2176.78,866.053 2177.25,867.833 2177.72,869.499 2178.19,871.237 2178.66,873.175 2179.13,874.999 2179.6,876.732 2180.07,878.444 2180.54,880.1 2181.01,881.901 2181.48,883.553 2181.95,885.197 2182.42,886.829 2182.89,888.385 2183.36,889.921 2183.83,891.476 2184.3,893.09 2184.77,894.605 2185.24,896.176 2185.71,897.744 2186.18,899.194 2186.65,900.629 2187.12,902.093 2187.59,903.357 2188.06,904.524 2188.53,905.729 2189,906.865 2189.47,908.01 2189.94,908.936 2190.41,909.978 2190.88,911.023 2191.35,912.005 2191.82,912.999 2192.29,913.953 2192.76,914.813 2193.23,915.706 2193.7,916.705 2194.17,917.524 2194.64,918.421 2195.11,919.177 2195.58,919.901 2196.05,920.696 2196.53,921.251 2197,921.8 2197.47,922.314 2197.94,922.713 2198.41,923.142 2198.88,923.496 2199.35,923.798 2199.82,924.202 2200.29,924.498 2200.76,924.724 2201.23,924.971 2201.7,925.286 2202.17,925.439 2202.64,925.588 2203.11,925.454 2203.58,925.366 2204.05,925.239 2204.52,925.112 2204.99,924.841 2205.46,924.357 2205.93,924.081 2206.4,923.724 2206.87,923.287 2207.34,922.794 2207.81,922.235 2208.28,921.532 2208.75,920.932 2209.22,920.147 2209.69,919.663 2210.16,918.904 2210.63,918.263 2211.1,917.495 2211.57,916.563 2212.04,915.782 2212.51,914.941 2212.98,913.986 2213.45,913.077 2213.92,912.199 2214.39,911.238 2214.86,910.169 2215.33,909.033 2215.8,907.968 2216.27,906.767 2216.74,905.516 2217.21,904.198 2217.68,902.867 2218.15,901.515 2218.62,900.104 2219.09,898.778 2219.56,897.353 2220.03,895.905 2220.5,894.427 2220.97,892.991 2221.44,891.535 2221.92,889.951 2222.39,888.354 2222.86,886.737 2223.33,885.213 2223.8,883.452 2224.27,881.72 2224.74,879.956 2225.21,878.139 2225.68,876.258 2226.15,874.443 2226.62,872.515 2227.09,870.5 2227.56,868.445 2228.03,866.269 2228.5,864.047 2228.97,861.849 2229.44,859.527 2229.91,857.184 2230.38,854.861 2230.85,852.541 2231.32,850.138 2231.79,847.763 2232.26,845.246 2232.73,842.73 2233.2,840.193 2233.67,837.587 2234.14,835.014 2234.61,832.411 2235.08,829.742 2235.55,827.136 2236.02,824.37 2236.49,821.666 2236.96,818.888 2237.43,816.095 2237.9,813.414 2238.37,810.685 2238.84,807.832 2239.31,804.937 2239.78,801.994 2240.25,798.916 2240.72,795.848 2241.19,792.741 2241.66,789.667 2242.13,786.582 2242.6,783.47 2243.07,780.372 2243.54,777.236 2244.01,774.076 2244.48,770.904 2244.95,767.672 2245.42,764.426 2245.89,761.28 2246.36,758.109 2246.84,754.833 2247.31,751.62 2247.78,748.341 2248.25,745.023 2248.72,741.581 2249.19,738.299 2249.66,734.843 2250.13,731.319 2250.6,727.812 2251.07,724.229 2251.54,720.786 2252.01,717.239 2252.48,713.571 2252.95,709.936 2253.42,706.367 2253.89,702.805 2254.36,699.069 2254.83,695.484 2255.3,691.945 2255.77,688.373 2256.24,684.682 2256.71,681.147 2257.18,677.668 2257.65,674.047 2258.12,670.597 2258.59,667.139 2259.06,663.608 2259.53,660.112 2260,656.59 2260.47,653.027 2260.94,649.608 2261.41,646.227 2261.88,642.878 2262.35,639.39 2262.82,635.88 2263.29,632.284 2263.76,628.774 2264.23,625.286 2264.7,621.736 2265.17,618.197 2265.64,614.663 2266.11,611.103 2266.58,607.721 2267.05,604.249 2267.52,600.715 2267.99,597.194 2268.46,593.674 2268.93,590.272 2269.4,586.782 2269.87,583.454 2270.34,580.019 2270.81,576.536 2271.28,573.047 2271.75,569.516 2272.23,566.204 2272.7,562.884 2273.17,559.54 2273.64,556.253 2274.11,552.978 2274.58,549.533 2275.05,546.164 2275.52,542.984 2275.99,539.649 2276.46,536.305 2276.93,533.068 2277.4,529.818 2277.87,526.701 2278.34,523.516 2278.81,520.486 2279.28,517.387 2279.75,514.258 2280.22,511.24 2280.69,508.319 2281.16,505.318 2281.63,502.362 2282.1,499.479 2282.57,496.52 2283.04,493.521 2283.51,490.454 2283.98,487.63 2284.45,484.653 2284.92,481.698 2285.39,478.643 2285.86,475.733 2286.33,472.733 2286.8,469.838 2287.27,467.055 2287.74,464.123 2288.21,461.262 2288.68,458.365 2289.15,455.374 2289.62,452.438 2290.09,449.635 2290.56,446.885 2291.03,444.181 2291.5,441.48 2291.97,438.866 2292.44,436.316 2292.91,433.782 2293.38,431.2 2293.85,428.668 2294.32,426.148 2294.79,423.529 2295.26,421.029 2295.73,418.589 2296.2,416.165 2296.67,413.761 2297.15,411.34 2297.62,408.783 2298.09,406.434 2298.56,404 2299.03,401.756 2299.5,399.534 2299.97,397.143 2300.44,394.804 2300.91,392.394 2301.38,390.112 2301.85,387.795 2302.32,385.567 2302.79,383.404 2303.26,381.161 2303.73,379.062 2304.2,376.868 2304.67,374.62 2305.14,372.61 2305.61,370.578 2306.08,368.511 2306.55,366.658 2307.02,364.635 2307.49,362.716 2307.96,360.948 2308.43,359.198 2308.9,357.416 2309.37,355.855 2309.84,354.144 2310.31,352.558 2310.78,351.006 2311.25,349.45 2311.72,348.056 2312.19,346.826 2312.66,345.554 2313.13,344.237 2313.6,343.008 2314.07,341.896 2314.54,340.763 2315.01,339.712 2315.48,338.781 2315.95,337.811 2316.42,337.012 2316.89,336.268 2317.36,335.525 2317.83,334.761 2318.3,334.144 2318.77,333.518 2319.24,333.005 2319.71,332.505 2320.18,332.155 2320.65,331.801 2321.12,331.479 2321.59,331.087 2322.06,330.691 2322.54,330.359 2323.01,330.154 2323.48,329.948 2323.95,329.742 2324.42,329.593 2324.89,329.464 2325.36,329.354 2325.83,329.354 2326.3,329.152 2326.77,329.115 2327.24,329.318 2327.71,329.39 2328.18,329.543 2328.65,329.745 2329.12,329.882 2329.59,330.113 2330.06,330.215 2330.53,330.474 2331,330.828 2331.47,331.009 2331.94,331.229 2332.41,331.476 2332.88,331.846 2333.35,332.121 2333.82,332.595 2334.29,332.991 2334.76,333.447 2335.23,333.974 2335.7,334.387 2336.17,334.951 2336.64,335.512 2337.11,336.162 2337.58,336.881 2338.05,337.639 2338.52,338.465 2338.99,339.344 2339.46,340.089 2339.93,340.905 2340.4,341.672 2340.87,342.451 2341.34,343.208 2341.81,344.022 2342.28,345.098 2342.75,346.137 2343.22,347.193 2343.69,348.248 2344.16,349.33 2344.63,350.529 2345.1,351.799 2345.57,352.964 2346.04,354.19 2346.51,355.51 2346.98,356.789 2347.46,358.119 2347.93,359.403 2348.4,360.708 2348.87,362.093 2349.34,363.553 2349.81,364.945 2350.28,366.548 2350.75,368.126 2351.22,369.683 2351.69,371.363 2352.16,373.192 2352.63,375.172 2353.1,376.967 2353.57,378.665 2354.04,380.408 2354.51,382.36 2354.98,384.288 2355.45,386.199 2355.92,388.163 2356.39,390.181 2356.86,392.426 2357.33,394.308 2357.8,396.322 2358.27,398.542 2358.74,400.667 2359.21,402.891 2359.68,405.094 2360.15,407.193 2360.62,409.32 2361.09,411.442 2361.56,413.596 2362.03,415.584 2362.5,417.72 2362.97,420.007 2363.44,422.358 2363.91,424.648 2364.38,426.937 2364.85,429.331 2365.32,431.787 2365.79,434.293 2366.26,436.76 2366.73,439.334 2367.2,441.955 2367.67,444.584 2368.14,447.197 2368.61,449.846 2369.08,452.581 2369.55,455.253 2370.02,457.856 2370.49,460.634 2370.96,463.399 2371.43,466.094 2371.9,468.839 2372.37,471.689 2372.85,474.65 2373.32,477.574 2373.79,480.548 2374.26,483.44 2374.73,486.376 2375.2,489.35 2375.67,492.36 2376.14,495.4 2376.61,498.512 2377.08,501.681 2377.55,504.739 2378.02,507.834 2378.49,510.975 2378.96,514.224 2379.43,517.596 2379.9,520.835 2380.37,524.084 2380.84,527.251 2381.31,530.463 2381.78,533.739 2382.25,536.971 2382.72,540.225 2383.19,543.618 2383.66,546.998 2384.13,550.232 2384.6,553.62 2385.07,556.903 2385.54,560.066 2386.01,563.381 2386.48,566.798 2386.95,570.087 2387.42,573.461 2387.89,576.792 2388.36,580.157 2388.83,583.699 2389.3,587.068 2389.77,590.4 2390.24,593.667 2390.71,596.944 2391.18,600.355 2391.65,603.761 2392.12,607.128 2392.59,610.371 2393.06,613.606 2393.53,616.907 2394,620.335 2394.47,623.728 2394.94,627.161 2395.41,630.655 2395.88,633.968 2396.35,637.354 2396.82,640.94 2397.29,644.388 2397.76,648.015 2398.24,651.442 2398.71,655.016 2399.18,658.405 2399.65,662.051 2400.12,665.55 2400.59,669.106 2401.06,672.554 2401.53,676.12 2402,679.616 2402.47,683.058 2402.94,686.523 2403.41,690.034 2403.88,693.391 2404.35,696.706 2404.82,700.006 2405.29,703.353 2405.76,706.718 2406.23,710.091 2406.7,713.533 2407.17,716.859 2407.64,720.312 2408.11,723.724 2408.58,727.071 2409.05,730.448 2409.52,733.733 2409.99,737.09 2410.46,740.559 2410.93,743.971 2411.4,747.271 2411.87,750.596 2412.34,753.774 2412.81,756.881 2413.28,759.909 2413.75,762.932 2414.22,765.969 2414.69,768.91 2415.16,771.962 2415.63,774.902 2416.1,777.886 2416.57,780.852 2417.04,783.779 2417.51,786.642 2417.98,789.602 2418.45,792.386 2418.92,795.238 2419.39,798.159 2419.86,800.898 2420.33,803.674 2420.8,806.264 2421.27,808.995 2421.74,811.83 2422.21,814.583 2422.68,817.148 2423.16,819.594 2423.63,822.272 2424.1,824.716 2424.57,827.132 2425.04,829.576 2425.51,832.136 2425.98,834.429 2426.45,836.884 2426.92,838.995 2427.39,841.218 2427.86,843.296 2428.33,845.392 2428.8,847.421 2429.27,849.559 2429.74,851.754 2430.21,853.68 2430.68,855.743 2431.15,857.705 2431.62,859.678 2432.09,861.775 2432.56,863.743 2433.03,865.446 2433.5,867.316 2433.97,869.04 2434.44,870.761 2434.91,872.4 2435.38,874.193 2435.85,875.843 2436.32,877.353 2436.79,878.966 2437.26,880.595 2437.73,882.189 2438.2,883.78 2438.67,885.449 2439.14,886.982 2439.61,888.449 2440.08,890.096 2440.55,891.499 2441.02,892.795 2441.49,894.2 2441.96,895.606 2442.43,897.053 2442.9,898.357 2443.37,899.644 2443.84,900.848 2444.31,902.023 2444.78,903.026 2445.25,904.257 2445.72,905.288 2446.19,906.266 2446.66,907.507 2447.13,908.64 2447.6,909.742 2448.07,910.75 2448.55,911.723 2449.02,912.66 2449.49,913.693 2449.96,914.673 2450.43,915.603 2450.9,916.406 2451.37,916.958 2451.84,917.766 2452.31,918.382 2452.78,918.977 2453.25,919.535 2453.72,919.946 2454.19,920.515 2454.66,921.002 2455.13,921.424 2455.6,921.938 2456.07,922.411 2456.54,922.887 2457.01,923.013 2457.48,923.284 2457.95,923.587 2458.42,923.719 2458.89,924.012 2459.36,924.315 2459.83,924.444 2460.3,924.618 2460.77,924.651 2461.24,924.654 2461.71,924.739 2462.18,924.539 2462.65,924.474 2463.12,924.265 2463.59,924.199 2464.06,924.075 2464.53,923.84 2465,923.574 2465.47,923.279 2465.94,922.925 2466.41,922.509 2466.88,922.088 2467.35,921.711 2467.82,921.119 2468.29,920.716 2468.76,920.128 2469.23,919.59 2469.7,919.037 2470.17,918.478 2470.64,917.892 2471.11,917.186 2471.58,916.466 2472.05,915.819 2472.52,915.159 2472.99,914.49 2473.47,913.659 2473.94,912.749 2474.41,911.745 2474.88,910.744 2475.35,909.77 2475.82,908.754 2476.29,907.77 2476.76,906.609 2477.23,905.495 2477.7,904.459 2478.17,903.264 2478.64,902.187 2479.11,901.023 2479.58,899.871 2480.05,898.586 2480.52,897.237 2480.99,895.848 2481.46,894.663 2481.93,893.341 2482.4,892.003 2482.87,890.573 2483.34,889.064 2483.81,887.643 2484.28,886.062 2484.75,884.493 2485.22,882.891 2485.69,881.257 2486.16,879.564 2486.63,877.802 2487.1,876.232 2487.57,874.597 2488.04,872.875 2488.51,871.117 2488.98,869.507 2489.45,867.78 2489.92,866.027 2490.39,864.152 2490.86,862.323 2491.33,860.357 2491.8,858.421 2492.27,856.504 2492.74,854.483 2493.21,852.29 2493.68,849.962 2494.15,847.756 2494.62,845.569 2495.09,843.37 2495.56,841.036 2496.03,838.679 2496.5,836.381 2496.97,834.034 2497.44,831.573 2497.91,829.205 2498.38,826.69 2498.86,824.104 2499.33,821.639 2499.8,819.151 2500.27,816.667 2500.74,814.134 2501.21,811.507 2501.68,808.857 2502.15,806.142 2502.62,803.389 2503.09,800.472 2503.56,797.65 2504.03,794.81 2504.5,791.715 2504.97,788.703 2505.44,785.582 2505.91,782.511 2506.38,779.374 2506.85,776.142 2507.32,772.874 2507.79,769.618 2508.26,766.362 2508.73,763.182 2509.2,759.735 2509.67,756.351 2510.14,752.916 2510.61,749.572 2511.08,746.115 2511.55,742.718 2512.02,739.244 2512.49,735.651 2512.96,732.178 2513.43,728.601 2513.9,724.987 2514.37,721.427 2514.84,717.621 2515.31,713.774 2515.78,710.008 2516.25,705.996 2516.72,702.158 2517.19,698.265 2517.66,694.329 2518.13,690.478 2518.6,686.615 2519.07,682.575 2519.54,678.514 2520.01,674.524 2520.48,670.482 2520.95,666.507 2521.42,662.509 2521.89,658.611 2522.36,654.689 2522.83,650.715 2523.3,646.622 2523.78,642.808 2524.25,638.927 2524.72,634.872 2525.19,630.986 2525.66,627.166 2526.13,623.224 2526.6,619.242 2527.07,615.305 2527.54,611.503 2528.01,607.559 2528.48,603.575 2528.95,599.766 2529.42,596.041 2529.89,592.283 2530.36,588.445 2530.83,584.817 2531.3,581.147 2531.77,577.237 2532.24,573.561 2532.71,569.844 2533.18,566.108 2533.65,562.579 2534.12,558.968 2534.59,555.395 2535.06,551.649 2535.53,548.11 2536,544.632 2536.47,540.994 2536.94,537.537 2537.41,534.056 2537.88,530.651 2538.35,527.276 2538.82,523.871 2539.29,520.311 2539.76,516.821 2540.23,513.354 2540.7,509.924 2541.17,506.383 2541.64,502.91 2542.11,499.413 2542.58,495.834 2543.05,492.349 2543.52,488.841 2543.99,485.399 2544.46,481.755 2544.93,478.107 2545.4,474.585 2545.87,471.118 2546.34,467.74 2546.81,464.386 2547.28,461.07 2547.75,457.737 2548.22,454.485 2548.69,451.246 2549.17,448.048 2549.64,444.837 2550.11,441.694 2550.58,438.551 2551.05,435.38 2551.52,432.219 2551.99,429.03 2552.46,425.959 2552.93,422.905 2553.4,419.835 2553.87,416.729 2554.34,413.666 2554.81,410.485 2555.28,407.349 2555.75,404.209 2556.22,401.043 2556.69,397.812 2557.16,394.621 2557.63,391.603 2558.1,388.663 2558.57,385.69 2559.04,382.651 2559.51,379.617 2559.98,376.824 2560.45,374.016 2560.92,371.167 2561.39,368.213 2561.86,365.56 2562.33,362.783 2562.8,360.159 2563.27,357.403 2563.74,354.84 2564.21,352.261 2564.68,349.563 2565.15,347.142 2565.62,344.706 2566.09,342.23 2566.56,339.828 2567.03,337.398 2567.5,334.928 2567.97,332.624 2568.44,330.273 2568.91,327.921 2569.38,325.628 2569.85,323.27 2570.32,320.957 2570.79,318.653 2571.26,316.191 2571.73,313.848 2572.2,311.476 2572.67,309.252 2573.14,307.048 2573.61,304.844 2574.08,302.776 2574.56,300.58 2575.03,298.453 2575.5,296.356 2575.97,294.567 2576.44,292.637 2576.91,290.801 2577.38,288.922 2577.85,287.123 2578.32,285.382 2578.79,283.676 2579.26,282.173 2579.73,280.489 2580.2,279.036 2580.67,277.572 2581.14,276.037 2581.61,274.513 2582.08,273.102 2582.55,271.713 2583.02,270.496 2583.49,269.279 2583.96,268.183 2584.43,266.961 2584.9,265.721 2585.37,264.514 2585.84,263.311 2586.31,262.224 2586.78,261.153 2587.25,260 2587.72,258.92 2588.19,257.945 2588.66,257.101 2589.13,256.18 2589.6,255.474 2590.07,254.751 2590.54,254.099 2591.01,253.521 2591.48,252.894 2591.95,252.436 2592.42,251.946 2592.89,251.377 2593.36,250.934 2593.83,250.53 2594.3,250.251 2594.77,249.835 2595.24,249.605 2595.71,249.511 2596.18,249.399 2596.65,249.311 2597.12,249.18 2597.59,249.114 2598.06,249.109 2598.53,249.099 2599,249.009 2599.48,249.131 2599.95,249.44 2600.42,249.647 2600.89,249.917 2601.36,250.137 2601.83,250.36 2602.3,250.657 2602.77,250.888 2603.24,251.247 2603.71,251.759 2604.18,252.186 2604.65,252.742 2605.12,253.351 2605.59,253.987 2606.06,254.594 2606.53,255.387 2607,256.157 2607.47,257.023 2607.94,257.886 2608.41,258.919 2608.88,259.784 2609.35,260.811 2609.82,261.897 2610.29,263.033 2610.76,264.305 2611.23,265.471 2611.7,266.658 2612.17,267.954 2612.64,269.378 2613.11,270.795 2613.58,272.345 2614.05,273.875 2614.52,275.272 2614.99,276.818 2615.46,278.416 2615.93,280.028 2616.4,281.54 2616.87,283.03 2617.34,284.688 2617.81,286.394 2618.28,288.093 2618.75,289.944 2619.22,291.755 2619.69,293.657 2620.16,295.719 2620.63,297.752 2621.1,299.724 2621.57,301.799 2622.04,303.797 2622.51,305.864 2622.98,308.042 2623.45,310.178 2623.92,312.474 2624.39,314.663 2624.87,316.792 2625.34,319.041 2625.81,321.422 2626.28,323.782 2626.75,326.054 2627.22,328.437 2627.69,330.911 2628.16,333.411 2628.63,336.056 2629.1,338.691 2629.57,341.475 2630.04,344.256 2630.51,346.868 2630.98,349.505 2631.45,352.071 2631.92,354.936 2632.39,357.904 2632.86,360.875 2633.33,363.763 2633.8,366.614 2634.27,369.582 2634.74,372.417 2635.21,375.405 2635.68,378.468 2636.15,381.566 2636.62,384.608 2637.09,387.64 2637.56,390.666 2638.03,393.798 2638.5,396.964 2638.97,400.162 2639.44,403.386 2639.91,406.649 2640.38,409.935 2640.85,413.238 2641.32,416.549 2641.79,419.864 2642.26,423.255 2642.73,426.702 2643.2,430.139 2643.67,433.56 2644.14,437.057 2644.61,440.544 2645.08,444.033 2645.55,447.564 2646.02,451.207 2646.49,454.767 2646.96,458.451 2647.43,462.141 2647.9,465.798 2648.37,469.381 2648.84,472.888 2649.31,476.501 2649.79,480.017 2650.26,483.576 2650.73,487.18 2651.2,490.71 2651.67,494.231 2652.14,497.736 2652.61,501.14 2653.08,504.736 2653.55,508.107 2654.02,511.53 2654.49,515.021 2654.96,518.441 2655.43,521.931 2655.9,525.494 2656.37,528.956 2656.84,532.687 2657.31,536.322 2657.78,539.822 2658.25,543.387 2658.72,547.086 2659.19,550.899 2659.66,554.585 2660.13,558.058 2660.6,561.452 2661.07,565.107 2661.54,568.906 2662.01,572.613 2662.48,576.214 2662.95,579.87 2663.42,583.466 2663.89,587.031 2664.36,590.689 2664.83,594.241 2665.3,597.694 2665.77,601.138 2666.24,604.655 2666.71,607.94 2667.18,611.383 2667.65,614.793 2668.12,618.179 2668.59,621.502 2669.06,624.916 2669.53,628.4 2670,631.757 2670.47,635.075 2670.94,638.322 2671.41,641.738 2671.88,645.028 2672.35,648.589 2672.82,651.976 2673.29,655.38 2673.76,658.823 2674.23,662.219 2674.7,665.741 2675.18,669.151 2675.65,672.452 2676.12,675.828 2676.59,679.22 2677.06,682.547 2677.53,685.878 2678,689.209 2678.47,692.365 2678.94,695.705 2679.41,698.921 2679.88,701.944 2680.35,705.073 2680.82,708.125 2681.29,711.142 2681.76,714.105 2682.23,717.119 "/>
<path clip-path="url(#clip862)" d="M331.295 598.878 L331.765 598.907 L332.235 598.905 L332.705 598.897 L333.175 598.922 L333.646 599.008 L334.116 599.162 L334.586 599.374 L335.056 599.63 L335.526 599.915 L335.997 600.221 L336.467 600.55 L336.937 600.906 L337.407 601.292 L337.877 601.707 L338.347 602.155 L338.818 602.638 L339.288 603.153 L339.758 603.697 L340.228 604.265 L340.698 604.86 L341.169 605.479 L341.639 606.126 L342.109 606.799 L342.579 607.492 L343.049 608.187 L343.519 608.88 L343.99 609.568 L344.46 610.245 L344.93 610.912 L345.4 611.571 L345.87 612.238 L346.341 612.927 L346.811 613.644 L347.281 614.392 L347.751 615.173 L348.221 615.984 L348.692 616.831 L349.162 617.709 L349.632 618.606 L350.102 619.501 L350.572 620.371 L351.042 621.198 L351.513 621.966 L351.983 622.675 L352.453 623.334 L352.923 623.956 L353.393 624.561 L353.864 625.162 L354.334 625.768 L354.804 626.377 L355.274 626.981 L355.744 627.58 L356.215 628.169 L356.685 628.751 L357.155 629.331 L357.625 629.911 L358.095 630.501 L358.565 631.103 L359.036 631.71 L359.506 632.307 L359.976 632.883 L360.446 633.423 L360.916 633.919 L361.387 634.377 L361.857 634.803 L362.327 635.198 L362.797 635.555 L363.267 635.874 L363.738 636.157 L364.208 636.407 L364.678 636.635 L365.148 636.845 L365.618 637.037 L366.088 637.208 L366.559 637.345 L367.029 637.444 L367.499 637.506 L367.969 637.526 L368.439 637.506 L368.91 637.446 L369.38 637.348 L369.85 637.218 L370.32 637.063 L370.79 636.895 L371.261 636.726 L371.731 636.564 L372.201 636.414 L372.671 636.283 L373.141 636.169 L373.611 636.087 L374.082 636.03 L374.552 635.988 L375.022 635.943 L375.492 635.886 L375.962 635.803 L376.433 635.682 L376.903 635.513 L377.373 635.294 L377.843 635.026 L378.313 634.717 L378.783 634.38 L379.254 634.031 L379.724 633.69 L380.194 633.382 L380.664 633.118 L381.134 632.9 L381.605 632.714 L382.075 632.548 L382.545 632.394 L383.015 632.242 L383.485 632.093 L383.956 631.953 L384.426 631.816 L384.896 631.681 L385.366 631.547 L385.836 631.414 L386.306 631.279 L386.777 631.139 L387.247 630.976 L387.717 630.773 L388.187 630.52 L388.657 630.205 L389.128 629.823 L389.598 629.37 L390.068 628.858 L390.538 628.31 L391.008 627.748 L391.479 627.197 L391.949 626.69 L392.419 626.252 L392.889 625.882 L393.359 625.571 L393.829 625.309 L394.3 625.08 L394.77 624.876 L395.24 624.689 L395.71 624.509 L396.18 624.333 L396.651 624.158 L397.121 623.984 L397.591 623.807 L398.061 623.625 L398.531 623.44 L399.002 623.254 L399.472 623.068 L399.942 622.883 L400.412 622.697 L400.882 622.499 L401.352 622.288 L401.823 622.058 L402.293 621.809 L402.763 621.548 L403.233 621.291 L403.703 621.046 L404.174 620.822 L404.644 620.616 L405.114 620.427 L405.584 620.248 L406.054 620.07 L406.525 619.88 L406.995 619.671 L407.465 619.446 L407.935 619.203 L408.405 618.934 L408.875 618.638 L409.346 618.32 L409.816 617.981 L410.286 617.62 L410.756 617.246 L411.226 616.878 L411.697 616.532 L412.167 616.222 L412.637 615.96 L413.107 615.753 L413.577 615.601 L414.047 615.504 L414.518 615.458 L414.988 615.452 L415.458 615.488 L415.928 615.566 L416.398 615.671 L416.869 615.783 L417.339 615.89 L417.809 615.978 L418.279 616.046 L418.749 616.101 L419.22 616.152 L419.69 616.214 L420.16 616.295 L420.63 616.392 L421.1 616.493 L421.57 616.588 L422.041 616.661 L422.511 616.698 L422.981 616.694 L423.451 616.649 L423.921 616.559 L424.392 616.423 L424.862 616.247 L425.332 616.052 L425.802 615.856 L426.272 615.672 L426.743 615.508 L427.213 615.369 L427.683 615.253 L428.153 615.163 L428.623 615.095 L429.093 615.039 L429.564 614.992 L430.034 614.959 L430.504 614.955 L430.974 614.996 L431.444 615.081 L431.915 615.203 L432.385 615.35 L432.855 615.506 L433.325 615.656 L433.795 615.796 L434.266 615.915 L434.736 616.004 L435.206 616.057 L435.676 616.073 L436.146 616.053 L436.616 616.008 L437.087 615.948 L437.557 615.877 L438.027 615.803 L438.497 615.737 L438.967 615.682 L439.438 615.645 L439.908 615.626 L440.378 615.622 L440.848 615.633 L441.318 615.655 L441.789 615.683 L442.259 615.711 L442.729 615.728 L443.199 615.729 L443.669 615.699 L444.139 615.638 L444.61 615.547 L445.08 615.442 L445.55 615.32 L446.02 615.17 L446.49 614.979 L446.961 614.739 L447.431 614.447 L447.901 614.11 L448.371 613.739 L448.841 613.349 L449.311 612.951 L449.782 612.553 L450.252 612.165 L450.722 611.79 L451.192 611.425 L451.662 611.066 L452.133 610.713 L452.603 610.372 L453.073 610.055 L453.543 609.769 L454.013 609.519 L454.484 609.302 L454.954 609.114 L455.424 608.942 L455.894 608.779 L456.364 608.624 L456.834 608.469 L457.305 608.295 L457.775 608.09 L458.245 607.849 L458.715 607.573 L459.185 607.262 L459.656 606.917 L460.126 606.533 L460.596 606.116 L461.066 605.682 L461.536 605.244 L462.007 604.802 L462.477 604.358 L462.947 603.92 L463.417 603.491 L463.887 603.063 L464.357 602.627 L464.828 602.178 L465.298 601.726 L465.768 601.29 L466.238 600.885 L466.708 600.521 L467.179 600.205 L467.649 599.939 L468.119 599.725 L468.589 599.563 L469.059 599.438 L469.53 599.328 L470 599.213 L470.47 599.079 L470.94 598.914 L471.41 598.717 L471.88 598.489 L472.351 598.233 L472.821 597.955 L473.291 597.659 L473.761 597.346 L474.231 597.017 L474.702 596.67 L475.172 596.298 L475.642 595.913 L476.112 595.527 L476.582 595.153 L477.053 594.806 L477.523 594.487 L477.993 594.199 L478.463 593.942 L478.933 593.712 L479.403 593.504 L479.874 593.314 L480.344 593.136 L480.814 592.969 L481.284 592.82 L481.754 592.688 L482.225 592.565 L482.695 592.45 L483.165 592.344 L483.635 592.245 L484.105 592.154 L484.575 592.059 L485.046 591.949 L485.516 591.82 L485.986 591.673 L486.456 591.524 L486.926 591.389 L487.397 591.28 L487.867 591.198 L488.337 591.14 L488.807 591.089 L489.277 591.036 L489.748 590.97 L490.218 590.89 L490.688 590.796 L491.158 590.693 L491.628 590.591 L492.098 590.51 L492.569 590.457 L493.039 590.433 L493.509 590.426 L493.979 590.421 L494.449 590.399 L494.92 590.334 L495.39 590.201 L495.86 589.994 L496.33 589.713 L496.8 589.363 L497.271 588.972 L497.741 588.568 L498.211 588.177 L498.681 587.813 L499.151 587.49 L499.621 587.216 L500.092 586.991 L500.562 586.803 L501.032 586.646 L501.502 586.509 L501.972 586.382 L502.443 586.258 L502.913 586.139 L503.383 586.02 L503.853 585.893 L504.323 585.76 L504.794 585.624 L505.264 585.484 L505.734 585.341 L506.204 585.191 L506.674 585.032 L507.144 584.858 L507.615 584.662 L508.085 584.436 L508.555 584.178 L509.025 583.891 L509.495 583.582 L509.966 583.255 L510.436 582.921 L510.906 582.601 L511.376 582.306 L511.846 582.039 L512.317 581.803 L512.787 581.596 L513.257 581.421 L513.727 581.275 L514.197 581.153 L514.667 581.049 L515.138 580.955 L515.608 580.878 L516.078 580.831 L516.548 580.813 L517.018 580.82 L517.489 580.844 L517.959 580.887 L518.429 580.94 L518.899 580.996 L519.369 581.055 L519.839 581.112 L520.31 581.17 L520.78 581.231 L521.25 581.297 L521.72 581.373 L522.19 581.462 L522.661 581.558 L523.131 581.659 L523.601 581.756 L524.071 581.843 L524.541 581.92 L525.012 581.987 L525.482 582.04 L525.952 582.087 L526.422 582.128 L526.892 582.17 L527.362 582.225 L527.833 582.303 L528.303 582.413 L528.773 582.564 L529.243 582.749 L529.713 582.968 L530.184 583.227 L530.654 583.526 L531.124 583.865 L531.594 584.237 L532.064 584.646 L532.535 585.083 L533.005 585.535 L533.475 585.986 L533.945 586.421 L534.415 586.831 L534.885 587.2 L535.356 587.527 L535.826 587.827 L536.296 588.121 L536.766 588.435 L537.236 588.779 L537.707 589.165 L538.177 589.593 L538.647 590.066 L539.117 590.582 L539.587 591.13 L540.058 591.698 L540.528 592.281 L540.998 592.88 L541.468 593.495 L541.938 594.119 L542.408 594.732 L542.879 595.323 L543.349 595.884 L543.819 596.418 L544.289 596.943 L544.759 597.472 L545.23 598.008 L545.7 598.556 L546.17 599.126 L546.64 599.711 L547.11 600.302 L547.581 600.887 L548.051 601.459 L548.521 602.014 L548.991 602.549 L549.461 603.06 L549.931 603.553 L550.402 604.044 L550.872 604.56 L551.342 605.118 L551.812 605.726 L552.282 606.39 L552.753 607.099 L553.223 607.841 L553.693 608.596 L554.163 609.353 L554.633 610.104 L555.103 610.849 L555.574 611.587 L556.044 612.333 L556.514 613.098 L556.984 613.883 L557.454 614.69 L557.925 615.519 L558.395 616.369 L558.865 617.23 L559.335 618.099 L559.805 618.968 L560.276 619.829 L560.746 620.684 L561.216 621.528 L561.686 622.361 L562.156 623.189 L562.626 624.012 L563.097 624.828 L563.567 625.634 L564.037 626.432 L564.507 627.225 L564.977 628.023 L565.448 628.835 L565.918 629.666 L566.388 630.521 L566.858 631.401 L567.328 632.31 L567.799 633.251 L568.269 634.21 L568.739 635.176 L569.209 636.145 L569.679 637.106 L570.149 638.054 L570.62 638.995 L571.09 639.927 L571.56 640.853 L572.03 641.772 L572.5 642.69 L572.971 643.606 L573.441 644.523 L573.911 645.441 L574.381 646.356 L574.851 647.267 L575.322 648.177 L575.792 649.097 L576.262 650.039 L576.732 650.999 L577.202 651.969 L577.672 652.94 L578.143 653.908 L578.613 654.874 L579.083 655.849 L579.553 656.837 L580.023 657.84 L580.494 658.854 L580.964 659.877 L581.434 660.892 L581.904 661.889 L582.374 662.857 L582.844 663.773 L583.315 664.612 L583.785 665.368 L584.255 666.043 L584.725 666.642 L585.195 667.185 L585.666 667.686 L586.136 668.162 L586.606 668.637 L587.076 669.13 L587.546 669.658 L588.017 670.226 L588.487 670.827 L588.957 671.445 L589.427 672.066 L589.897 672.682 L590.367 673.288 L590.838 673.884 L591.308 674.482 L591.778 675.094 L592.248 675.727 L592.718 676.388 L593.189 677.081 L593.659 677.8 L594.129 678.534 L594.599 679.275 L595.069 680.012 L595.54 680.737 L596.01 681.442 L596.48 682.124 L596.95 682.792 L597.42 683.455 L597.89 684.121 L598.361 684.789 L598.831 685.458 L599.301 686.114 L599.771 686.745 L600.241 687.335 L600.712 687.877 L601.182 688.363 L601.652 688.804 L602.122 689.215 L602.592 689.609 L603.063 689.997 L603.533 690.386 L604.003 690.784 L604.473 691.193 L604.943 691.606 L605.413 692.017 L605.884 692.422 L606.354 692.823 L606.824 693.224 L607.294 693.628 L607.764 694.032 L608.235 694.441 L608.705 694.871 L609.175 695.332 L609.645 695.817 L610.115 696.309 L610.586 696.801 L611.056 697.305 L611.526 697.835 L611.996 698.403 L612.466 699.013 L612.936 699.66 L613.407 700.329 L613.877 701.004 L614.347 701.674 L614.817 702.328 L615.287 702.947 L615.758 703.517 L616.228 704.041 L616.698 704.514 L617.168 704.939 L617.638 705.319 L618.108 705.651 L618.579 705.933 L619.049 706.162 L619.519 706.336 L619.989 706.459 L620.459 706.54 L620.93 706.592 L621.4 706.632 L621.87 706.67 L622.34 706.711 L622.81 706.761 L623.281 706.826 L623.751 706.909 L624.221 707.006 L624.691 707.107 L625.161 707.195 L625.631 707.247 L626.102 707.246 L626.572 707.185 L627.042 707.061 L627.512 706.881 L627.982 706.661 L628.453 706.418 L628.923 706.175 L629.393 705.954 L629.863 705.765 L630.333 705.617 L630.804 705.515 L631.274 705.451 L631.744 705.407 L632.214 705.369 L632.684 705.322 L633.154 705.259 L633.625 705.177 L634.095 705.079 L634.565 704.967 L635.035 704.834 L635.505 704.67 L635.976 704.467 L636.446 704.222 L636.916 703.94 L637.386 703.621 L637.856 703.271 L638.327 702.902 L638.797 702.529 L639.267 702.163 L639.737 701.809 L640.207 701.457 L640.677 701.105 L641.148 700.745 L641.618 700.376 L642.088 699.998 L642.558 699.616 L643.028 699.232 L643.499 698.854 L643.969 698.487 L644.439 698.136 L644.909 697.795 L645.379 697.457 L645.85 697.11 L646.32 696.75 L646.79 696.374 L647.26 695.988 L647.73 695.603 L648.2 695.213 L648.671 694.815 L649.141 694.401 L649.611 693.964 L650.081 693.496 L650.551 692.994 L651.022 692.448 L651.492 691.853 L651.962 691.211 L652.432 690.526 L652.902 689.796 L653.372 689.015 L653.843 688.189 L654.313 687.325 L654.783 686.428 L655.253 685.498 L655.723 684.543 L656.194 683.569 L656.664 682.568 L657.134 681.529 L657.604 680.448 L658.074 679.324 L658.545 678.174 L659.015 677.02 L659.485 675.883 L659.955 674.784 L660.425 673.73 L660.895 672.716 L661.366 671.728 L661.836 670.752 L662.306 669.782 L662.776 668.81 L663.246 667.831 L663.717 666.835 L664.187 665.821 L664.657 664.797 L665.127 663.763 L665.597 662.728 L666.068 661.697 L666.538 660.672 L667.008 659.654 L667.478 658.642 L667.948 657.621 L668.418 656.578 L668.889 655.516 L669.359 654.451 L669.829 653.394 L670.299 652.342 L670.769 651.297 L671.24 650.25 L671.71 649.191 L672.18 648.112 L672.65 646.996 L673.12 645.833 L673.591 644.639 L674.061 643.429 L674.531 642.217 L675.001 641.012 L675.471 639.831 L675.941 638.697 L676.412 637.628 L676.882 636.62 L677.352 635.661 L677.822 634.737 L678.292 633.844 L678.763 632.972 L679.233 632.117 L679.703 631.275 L680.173 630.447 L680.643 629.633 L681.114 628.82 L681.584 627.999 L682.054 627.152 L682.524 626.268 L682.994 625.349 L683.464 624.4 L683.935 623.432 L684.405 622.445 L684.875 621.437 L685.345 620.418 L685.815 619.391 L686.286 618.352 L686.756 617.302 L687.226 616.248 L687.696 615.199 L688.166 614.166 L688.636 613.152 L689.107 612.145 L689.577 611.122 L690.047 610.067 L690.517 608.961 L690.987 607.797 L691.458 606.579 L691.928 605.321 L692.398 604.046 L692.868 602.773 L693.338 601.516 L693.809 600.296 L694.279 599.135 L694.749 598.043 L695.219 597.016 L695.689 596.038 L696.159 595.09 L696.63 594.159 L697.1 593.244 L697.57 592.345 L698.04 591.464 L698.51 590.592 L698.981 589.72 L699.451 588.834 L699.921 587.929 L700.391 587.007 L700.861 586.082 L701.332 585.17 L701.802 584.276 L702.272 583.403 L702.742 582.549 L703.212 581.717 L703.682 580.913 L704.153 580.156 L704.623 579.453 L705.093 578.807 L705.563 578.214 L706.033 577.662 L706.504 577.125 L706.974 576.582 L707.444 576.015 L707.914 575.416 L708.384 574.781 L708.855 574.104 L709.325 573.39 L709.795 572.649 L710.265 571.899 L710.735 571.15 L711.205 570.404 L711.676 569.666 L712.146 568.942 L712.616 568.233 L713.086 567.548 L713.556 566.895 L714.027 566.283 L714.497 565.721 L714.967 565.209 L715.437 564.739 L715.907 564.293 L716.378 563.864 L716.848 563.442 L717.318 563.022 L717.788 562.589 L718.258 562.135 L718.728 561.654 L719.199 561.142 L719.669 560.61 L720.139 560.068 L720.609 559.536 L721.079 559.019 L721.55 558.515 L722.02 558.031 L722.49 557.573 L722.96 557.145 L723.43 556.744 L723.9 556.364 L724.371 555.992 L724.841 555.62 L725.311 555.244 L725.781 554.866 L726.251 554.484 L726.722 554.103 L727.192 553.724 L727.662 553.352 L728.132 552.993 L728.602 552.651 L729.073 552.333 L729.543 552.051 L730.013 551.801 L730.483 551.571 L730.953 551.349 L731.423 551.127 L731.894 550.897 L732.364 550.659 L732.834 550.423 L733.304 550.201 L733.774 550.009 L734.245 549.856 L734.715 549.752 L735.185 549.698 L735.655 549.684 L736.125 549.691 L736.596 549.706 L737.066 549.719 L737.536 549.711 L738.006 549.663 L738.476 549.57 L738.946 549.432 L739.417 549.255 L739.887 549.05 L740.357 548.835 L740.827 548.633 L741.297 548.456 L741.768 548.305 L742.238 548.172 L742.708 548.061 L743.178 547.975 L743.648 547.927 L744.119 547.917 L744.589 547.941 L745.059 548.004 L745.529 548.098 L745.999 548.219 L746.469 548.362 L746.94 548.522 L747.41 548.702 L747.88 548.904 L748.35 549.121 L748.82 549.34 L749.291 549.551 L749.761 549.738 L750.231 549.891 L750.701 550.008 L751.171 550.098 L751.642 550.166 L752.112 550.221 L752.582 550.275 L753.052 550.336 L753.522 550.407 L753.992 550.493 L754.463 550.595 L754.933 550.718 L755.403 550.862 L755.873 551.024 L756.343 551.204 L756.814 551.416 L757.284 551.67 L757.754 551.965 L758.224 552.298 L758.694 552.659 L759.164 553.031 L759.635 553.399 L760.105 553.746 L760.575 554.056 L761.045 554.32 L761.515 554.543 L761.986 554.739 L762.456 554.923 L762.926 555.117 L763.396 555.346 L763.866 555.622 L764.337 555.959 L764.807 556.352 L765.277 556.802 L765.747 557.309 L766.217 557.858 L766.687 558.426 L767.158 558.996 L767.628 559.551 L768.098 560.082 L768.568 560.58 L769.038 561.041 L769.509 561.473 L769.979 561.882 L770.449 562.284 L770.919 562.697 L771.389 563.132 L771.86 563.595 L772.33 564.089 L772.8 564.619 L773.27 565.192 L773.74 565.814 L774.21 566.482 L774.681 567.183 L775.151 567.9 L775.621 568.616 L776.091 569.315 L776.561 569.99 L777.032 570.636 L777.502 571.263 L777.972 571.891 L778.442 572.526 L778.912 573.18 L779.383 573.862 L779.853 574.582 L780.323 575.331 L780.793 576.1 L781.263 576.883 L781.733 577.683 L782.204 578.493 L782.674 579.314 L783.144 580.133 L783.614 580.948 L784.084 581.761 L784.555 582.572 L785.025 583.389 L785.495 584.223 L785.965 585.068 L786.435 585.917 L786.906 586.769 L787.376 587.635 L787.846 588.517 L788.316 589.42 L788.786 590.337 L789.256 591.266 L789.727 592.205 L790.197 593.155 L790.667 594.116 L791.137 595.084 L791.607 596.059 L792.078 597.028 L792.548 597.99 L793.018 598.943 L793.488 599.888 L793.958 600.829 L794.428 601.772 L794.899 602.718 L795.369 603.669 L795.839 604.625 L796.309 605.582 L796.779 606.547 L797.25 607.52 L797.72 608.499 L798.19 609.482 L798.66 610.472 L799.13 611.463 L799.601 612.451 L800.071 613.433 L800.541 614.407 L801.011 615.382 L801.481 616.367 L801.951 617.367 L802.422 618.4 L802.892 619.466 L803.362 620.573 L803.832 621.713 L804.302 622.872 L804.773 624.039 L805.243 625.204 L805.713 626.349 L806.183 627.458 L806.653 628.527 L807.124 629.56 L807.594 630.574 L808.064 631.586 L808.534 632.614 L809.004 633.672 L809.474 634.771 L809.945 635.92 L810.415 637.128 L810.885 638.39 L811.355 639.704 L811.825 641.062 L812.296 642.454 L812.766 643.872 L813.236 645.303 L813.706 646.74 L814.176 648.166 L814.647 649.57 L815.117 650.942 L815.587 652.29 L816.057 653.611 L816.527 654.907 L816.997 656.176 L817.468 657.416 L817.938 658.633 L818.408 659.841 L818.878 661.04 L819.348 662.232 L819.819 663.41 L820.289 664.574 L820.759 665.725 L821.229 666.857 L821.699 667.966 L822.17 669.045 L822.64 670.095 L823.11 671.114 L823.58 672.107 L824.05 673.085 L824.52 674.064 L824.991 675.056 L825.461 676.077 L825.931 677.141 L826.401 678.248 L826.871 679.388 L827.342 680.535 L827.812 681.661 L828.282 682.743 L828.752 683.771 L829.222 684.742 L829.692 685.653 L830.163 686.517 L830.633 687.353 L831.103 688.18 L831.573 689.015 L832.043 689.865 L832.514 690.727 L832.984 691.588 L833.454 692.441 L833.924 693.283 L834.394 694.115 L834.865 694.943 L835.335 695.773 L835.805 696.605 L836.275 697.434 L836.745 698.254 L837.215 699.059 L837.686 699.846 L838.156 700.619 L838.626 701.383 L839.096 702.142 L839.566 702.901 L840.037 703.669 L840.507 704.449 L840.977 705.24 L841.447 706.046 L841.917 706.865 L842.388 707.695 L842.858 708.527 L843.328 709.346 L843.798 710.14 L844.268 710.902 L844.738 711.636 L845.209 712.355 L845.679 713.065 L846.149 713.776 L846.619 714.492 L847.089 715.216 L847.56 715.931 L848.03 716.628 L848.5 717.288 L848.97 717.911 L849.44 718.492 L849.911 719.033 L850.381 719.542 L850.851 720.039 L851.321 720.546 L851.791 721.081 L852.261 721.66 L852.732 722.29 L853.202 722.967 L853.672 723.683 L854.142 724.425 L854.612 725.19 L855.083 725.976 L855.553 726.775 L856.023 727.576 L856.493 728.363 L856.963 729.126 L857.434 729.857 L857.904 730.546 L858.374 731.186 L858.844 731.762 L859.314 732.265 L859.784 732.695 L860.255 733.052 L860.725 733.331 L861.195 733.542 L861.665 733.694 L862.135 733.812 L862.606 733.913 L863.076 734.015 L863.546 734.126 L864.016 734.256 L864.486 734.407 L864.956 734.578 L865.427 734.767 L865.897 734.975 L866.367 735.202 L866.837 735.441 L867.307 735.689 L867.778 735.942 L868.248 736.193 L868.718 736.436 L869.188 736.66 L869.658 736.86 L870.129 737.038 L870.599 737.202 L871.069 737.364 L871.539 737.529 L872.009 737.691 L872.479 737.839 L872.95 737.971 L873.42 738.09 L873.89 738.197 L874.36 738.29 L874.83 738.367 L875.301 738.429 L875.771 738.481 L876.241 738.541 L876.711 738.615 L877.181 738.71 L877.652 738.821 L878.122 738.941 L878.592 739.068 L879.062 739.206 L879.532 739.341 L880.002 739.457 L880.473 739.53 L880.943 739.548 L881.413 739.509 L881.883 739.419 L882.353 739.284 L882.824 739.112 L883.294 738.909 L883.764 738.693 L884.234 738.476 L884.704 738.272 L885.175 738.086 L885.645 737.926 L886.115 737.792 L886.585 737.686 L887.055 737.614 L887.525 737.57 L887.996 737.534 L888.466 737.488 L888.936 737.422 L889.406 737.332 L889.876 737.214 L890.347 737.062 L890.817 736.87 L891.287 736.637 L891.757 736.368 L892.227 736.07 L892.698 735.755 L893.168 735.442 L893.638 735.134 L894.108 734.816 L894.578 734.468 L895.048 734.078 L895.519 733.637 L895.989 733.142 L896.459 732.595 L896.929 731.992 L897.399 731.325 L897.87 730.595 L898.34 729.81 L898.81 728.977 L899.28 728.111 L899.75 727.223 L900.22 726.318 L900.691 725.396 L901.161 724.458 L901.631 723.516 L902.101 722.583 L902.571 721.656 L903.042 720.743 L903.512 719.854 L903.982 718.985 L904.452 718.129 L904.922 717.272 L905.393 716.409 L905.863 715.544 L906.333 714.676 L906.803 713.797 L907.273 712.891 L907.743 711.945 L908.214 710.945 L908.684 709.88 L909.154 708.744 L909.624 707.548 L910.094 706.302 L910.565 705.023 L911.035 703.733 L911.505 702.457 L911.975 701.199 L912.445 699.961 L912.916 698.729 L913.386 697.482 L913.856 696.196 L914.326 694.858 L914.796 693.466 L915.266 692.012 L915.737 690.499 L916.207 688.929 L916.677 687.308 L917.147 685.65 L917.617 683.974 L918.088 682.292 L918.558 680.617 L919.028 678.96 L919.498 677.335 L919.968 675.754 L920.439 674.226 L920.909 672.745 L921.379 671.288 L921.849 669.827 L922.319 668.337 L922.789 666.8 L923.26 665.211 L923.73 663.562 L924.2 661.868 L924.67 660.151 L925.14 658.426 L925.611 656.709 L926.081 655.001 L926.551 653.303 L927.021 651.608 L927.491 649.917 L927.962 648.224 L928.432 646.537 L928.902 644.858 L929.372 643.197 L929.842 641.566 L930.312 639.966 L930.783 638.394 L931.253 636.842 L931.723 635.302 L932.193 633.764 L932.663 632.218 L933.134 630.655 L933.604 629.067 L934.074 627.452 L934.544 625.82 L935.014 624.18 L935.484 622.54 L935.955 620.894 L936.425 619.25 L936.895 617.612 L937.365 615.983 L937.835 614.363 L938.306 612.747 L938.776 611.124 L939.246 609.488 L939.716 607.833 L940.186 606.158 L940.657 604.473 L941.127 602.784 L941.597 601.094 L942.067 599.402 L942.537 597.705 L943.007 596.001 L943.478 594.295 L943.948 592.6 L944.418 590.93 L944.888 589.288 L945.358 587.672 L945.829 586.086 L946.299 584.532 L946.769 583.009 L947.239 581.52 L947.709 580.072 L948.18 578.663 L948.65 577.284 L949.12 575.937 L949.59 574.622 L950.06 573.335 L950.53 572.067 L951.001 570.802 L951.471 569.538 L951.941 568.276 L952.411 567.011 L952.881 565.731 L953.352 564.433 L953.822 563.117 L954.292 561.794 L954.762 560.471 L955.232 559.163 L955.703 557.876 L956.173 556.603 L956.643 555.342 L957.113 554.092 L957.583 552.846 L958.053 551.6 L958.524 550.356 L958.994 549.124 L959.464 547.915 L959.934 546.739 L960.404 545.589 L960.875 544.456 L961.345 543.331 L961.815 542.2 L962.285 541.04 L962.755 539.847 L963.226 538.625 L963.696 537.378 L964.166 536.122 L964.636 534.878 L965.106 533.655 L965.576 532.463 L966.047 531.31 L966.517 530.19 L966.987 529.099 L967.457 528.03 L967.927 526.982 L968.398 525.957 L968.868 524.955 L969.338 523.977 L969.808 523.015 L970.278 522.052 L970.748 521.078 L971.219 520.097 L971.689 519.112 L972.159 518.126 L972.629 517.141 L973.099 516.166 L973.57 515.214 L974.04 514.295 L974.51 513.419 L974.98 512.589 L975.45 511.806 L975.921 511.077 L976.391 510.403 L976.861 509.783 L977.331 509.212 L977.801 508.675 L978.271 508.162 L978.742 507.663 L979.212 507.162 L979.682 506.641 L980.152 506.094 L980.622 505.523 L981.093 504.931 L981.563 504.322 L982.033 503.702 L982.503 503.08 L982.973 502.473 L983.444 501.885 L983.914 501.313 L984.384 500.755 L984.854 500.218 L985.324 499.708 L985.794 499.234 L986.265 498.818 L986.735 498.461 L987.205 498.153 L987.675 497.875 L988.145 497.603 L988.616 497.309 L989.086 496.976 L989.556 496.594 L990.026 496.161 L990.496 495.688 L990.967 495.197 L991.437 494.705 L991.907 494.222 L992.377 493.757 L992.847 493.316 L993.317 492.903 L993.788 492.529 L994.258 492.2 L994.728 491.921 L995.198 491.694 L995.668 491.521 L996.139 491.398 L996.609 491.311 L997.079 491.251 L997.549 491.214 L998.019 491.208 L998.49 491.243 L998.96 491.322 L999.43 491.447 L999.9 491.62 L1000.37 491.832 L1000.84 492.074 L1001.31 492.332 L1001.78 492.595 L1002.25 492.854 L1002.72 493.107 L1003.19 493.369 L1003.66 493.655 L1004.13 493.982 L1004.6 494.359 L1005.07 494.792 L1005.54 495.281 L1006.01 495.822 L1006.48 496.407 L1006.95 497.021 L1007.42 497.654 L1007.89 498.303 L1008.36 498.97 L1008.83 499.661 L1009.3 500.38 L1009.77 501.125 L1010.24 501.896 L1010.71 502.691 L1011.18 503.512 L1011.65 504.358 L1012.12 505.229 L1012.6 506.132 L1013.07 507.064 L1013.54 508.026 L1014.01 509.017 L1014.48 510.028 L1014.95 511.05 L1015.42 512.084 L1015.89 513.121 L1016.36 514.16 L1016.83 515.207 L1017.3 516.269 L1017.77 517.355 L1018.24 518.468 L1018.71 519.606 L1019.18 520.757 L1019.65 521.914 L1020.12 523.07 L1020.59 524.226 L1021.06 525.385 L1021.53 526.545 L1022 527.705 L1022.47 528.866 L1022.94 530.034 L1023.41 531.218 L1023.88 532.426 L1024.35 533.665 L1024.82 534.949 L1025.29 536.288 L1025.76 537.676 L1026.23 539.094 L1026.7 540.524 L1027.17 541.955 L1027.64 543.363 L1028.11 544.735 L1028.58 546.059 L1029.05 547.336 L1029.52 548.567 L1029.99 549.758 L1030.46 550.926 L1030.93 552.091 L1031.4 553.26 L1031.87 554.437 L1032.34 555.618 L1032.81 556.814 L1033.28 558.031 L1033.75 559.277 L1034.22 560.555 L1034.69 561.862 L1035.16 563.194 L1035.63 564.543 L1036.1 565.909 L1036.57 567.288 L1037.04 568.678 L1037.51 570.082 L1037.99 571.508 L1038.46 572.952 L1038.93 574.414 L1039.4 575.892 L1039.87 577.389 L1040.34 578.908 L1040.81 580.445 L1041.28 581.993 L1041.75 583.543 L1042.22 585.088 L1042.69 586.625 L1043.16 588.155 L1043.63 589.667 L1044.1 591.159 L1044.57 592.631 L1045.04 594.092 L1045.51 595.544 L1045.98 596.986 L1046.45 598.423 L1046.92 599.861 L1047.39 601.302 L1047.86 602.76 L1048.33 604.248 L1048.8 605.769 L1049.27 607.324 L1049.74 608.908 L1050.21 610.515 L1050.68 612.145 L1051.15 613.794 L1051.62 615.458 L1052.09 617.13 L1052.56 618.796 L1053.03 620.452 L1053.5 622.097 L1053.97 623.739 L1054.44 625.393 L1054.91 627.069 L1055.38 628.771 L1055.85 630.499 L1056.32 632.246 L1056.79 634.001 L1057.26 635.752 L1057.73 637.495 L1058.2 639.23 L1058.67 640.946 L1059.14 642.634 L1059.61 644.288 L1060.08 645.915 L1060.55 647.525 L1061.02 649.115 L1061.49 650.688 L1061.96 652.254 L1062.43 653.831 L1062.91 655.437 L1063.38 657.081 L1063.85 658.757 L1064.32 660.462 L1064.79 662.19 L1065.26 663.937 L1065.73 665.692 L1066.2 667.435 L1066.67 669.148 L1067.14 670.821 L1067.61 672.453 L1068.08 674.052 L1068.55 675.628 L1069.02 677.181 L1069.49 678.716 L1069.96 680.242 L1070.43 681.752 L1070.9 683.247 L1071.37 684.739 L1071.84 686.239 L1072.31 687.756 L1072.78 689.291 L1073.25 690.852 L1073.72 692.447 L1074.19 694.083 L1074.66 695.751 L1075.13 697.445 L1075.6 699.146 L1076.07 700.836 L1076.54 702.504 L1077.01 704.144 L1077.48 705.744 L1077.95 707.296 L1078.42 708.793 L1078.89 710.233 L1079.36 711.612 L1079.83 712.945 L1080.3 714.254 L1080.77 715.553 L1081.24 716.852 L1081.71 718.161 L1082.18 719.486 L1082.65 720.827 L1083.12 722.181 L1083.59 723.55 L1084.06 724.934 L1084.53 726.327 L1085 727.731 L1085.47 729.146 L1085.94 730.576 L1086.41 732.025 L1086.88 733.496 L1087.35 734.991 L1087.82 736.497 L1088.3 738.004 L1088.77 739.505 L1089.24 740.988 L1089.71 742.439 L1090.18 743.844 L1090.65 745.2 L1091.12 746.519 L1091.59 747.814 L1092.06 749.091 L1092.53 750.366 L1093 751.649 L1093.47 752.937 L1093.94 754.219 L1094.41 755.495 L1094.88 756.77 L1095.35 758.052 L1095.82 759.34 L1096.29 760.631 L1096.76 761.917 L1097.23 763.183 L1097.7 764.424 L1098.17 765.64 L1098.64 766.836 L1099.11 768.007 L1099.58 769.157 L1100.05 770.301 L1100.52 771.448 L1100.99 772.605 L1101.46 773.772 L1101.93 774.943 L1102.4 776.109 L1102.87 777.27 L1103.34 778.43 L1103.81 779.582 L1104.28 780.715 L1104.75 781.815 L1105.22 782.877 L1105.69 783.908 L1106.16 784.905 L1106.63 785.864 L1107.1 786.789 L1107.57 787.677 L1108.04 788.527 L1108.51 789.336 L1108.98 790.112 L1109.45 790.867 L1109.92 791.613 L1110.39 792.366 L1110.86 793.141 L1111.33 793.951 L1111.8 794.807 L1112.27 795.701 L1112.74 796.619 L1113.22 797.535 L1113.69 798.43 L1114.16 799.293 L1114.63 800.116 L1115.1 800.893 L1115.57 801.612 L1116.04 802.275 L1116.51 802.886 L1116.98 803.463 L1117.45 804.025 L1117.92 804.587 L1118.39 805.163 L1118.86 805.765 L1119.33 806.408 L1119.8 807.085 L1120.27 807.781 L1120.74 808.474 L1121.21 809.144 L1121.68 809.783 L1122.15 810.388 L1122.62 810.963 L1123.09 811.514 L1123.56 812.053 L1124.03 812.592 L1124.5 813.133 L1124.97 813.669 L1125.44 814.178 L1125.91 814.643 L1126.38 815.042 L1126.85 815.377 L1127.32 815.654 L1127.79 815.881 L1128.26 816.073 L1128.73 816.249 L1129.2 816.428 L1129.67 816.622 L1130.14 816.836 L1130.61 817.075 L1131.08 817.334 L1131.55 817.603 L1132.02 817.87 L1132.49 818.12 L1132.96 818.338 L1133.43 818.513 L1133.9 818.641 L1134.37 818.726 L1134.84 818.783 L1135.31 818.816 L1135.78 818.836 L1136.25 818.852 L1136.72 818.865 L1137.19 818.881 L1137.66 818.9 L1138.13 818.921 L1138.61 818.936 L1139.08 818.935 L1139.55 818.902 L1140.02 818.831 L1140.49 818.72 L1140.96 818.57 L1141.43 818.381 L1141.9 818.156 L1142.37 817.894 L1142.84 817.598 L1143.31 817.272 L1143.78 816.919 L1144.25 816.545 L1144.72 816.153 L1145.19 815.748 L1145.66 815.337 L1146.13 814.927 L1146.6 814.52 L1147.07 814.117 L1147.54 813.712 L1148.01 813.296 L1148.48 812.865 L1148.95 812.412 L1149.42 811.934 L1149.89 811.429 L1150.36 810.886 L1150.83 810.304 L1151.3 809.686 L1151.77 809.029 L1152.24 808.336 L1152.71 807.608 L1153.18 806.843 L1153.65 806.037 L1154.12 805.203 L1154.59 804.348 L1155.06 803.477 L1155.53 802.593 L1156 801.701 L1156.47 800.804 L1156.94 799.904 L1157.41 798.996 L1157.88 798.072 L1158.35 797.129 L1158.82 796.174 L1159.29 795.206 L1159.76 794.226 L1160.23 793.229 L1160.7 792.209 L1161.17 791.163 L1161.64 790.086 L1162.11 788.969 L1162.58 787.809 L1163.05 786.614 L1163.53 785.393 L1164 784.151 L1164.47 782.891 L1164.94 781.614 L1165.41 780.321 L1165.88 779.01 L1166.35 777.685 L1166.82 776.357 L1167.29 775.034 L1167.76 773.734 L1168.23 772.467 L1168.7 771.24 L1169.17 770.05 L1169.64 768.896 L1170.11 767.768 L1170.58 766.664 L1171.05 765.577 L1171.52 764.495 L1171.99 763.406 L1172.46 762.296 L1172.93 761.154 L1173.4 759.976 L1173.87 758.766 L1174.34 757.533 L1174.81 756.285 L1175.28 755.015 L1175.75 753.707 L1176.22 752.353 L1176.69 750.955 L1177.16 749.508 L1177.63 748.005 L1178.1 746.441 L1178.57 744.819 L1179.04 743.138 L1179.51 741.406 L1179.98 739.638 L1180.45 737.847 L1180.92 736.034 L1181.39 734.207 L1181.86 732.366 L1182.33 730.516 L1182.8 728.655 L1183.27 726.78 L1183.74 724.881 L1184.21 722.958 L1184.68 721.013 L1185.15 719.053 L1185.62 717.092 L1186.09 715.153 L1186.56 713.247 L1187.03 711.378 L1187.5 709.542 L1187.97 707.727 L1188.44 705.91 L1188.92 704.067 L1189.39 702.179 L1189.86 700.23 L1190.33 698.209 L1190.8 696.112 L1191.27 693.949 L1191.74 691.749 L1192.21 689.536 L1192.68 687.321 L1193.15 685.103 L1193.62 682.877 L1194.09 680.64 L1194.56 678.393 L1195.03 676.142 L1195.5 673.891 L1195.97 671.65 L1196.44 669.429 L1196.91 667.227 L1197.38 665.045 L1197.85 662.878 L1198.32 660.731 L1198.79 658.614 L1199.26 656.531 L1199.73 654.478 L1200.2 652.441 L1200.67 650.411 L1201.14 648.395 L1201.61 646.396 L1202.08 644.417 L1202.55 642.462 L1203.02 640.53 L1203.49 638.612 L1203.96 636.692 L1204.43 634.756 L1204.9 632.795 L1205.37 630.81 L1205.84 628.813 L1206.31 626.804 L1206.78 624.785 L1207.25 622.753 L1207.72 620.712 L1208.19 618.67 L1208.66 616.623 L1209.13 614.556 L1209.6 612.455 L1210.07 610.315 L1210.54 608.135 L1211.01 605.921 L1211.48 603.685 L1211.95 601.446 L1212.42 599.222 L1212.89 597.028 L1213.36 594.864 L1213.83 592.727 L1214.31 590.612 L1214.78 588.517 L1215.25 586.438 L1215.72 584.376 L1216.19 582.34 L1216.66 580.328 L1217.13 578.336 L1217.6 576.358 L1218.07 574.382 L1218.54 572.4 L1219.01 570.403 L1219.48 568.393 L1219.95 566.374 L1220.42 564.346 L1220.89 562.317 L1221.36 560.289 L1221.83 558.273 L1222.3 556.275 L1222.77 554.3 L1223.24 552.346 L1223.71 550.406 L1224.18 548.483 L1224.65 546.572 L1225.12 544.672 L1225.59 542.78 L1226.06 540.895 L1226.53 539.011 L1227 537.121 L1227.47 535.222 L1227.94 533.315 L1228.41 531.402 L1228.88 529.483 L1229.35 527.554 L1229.82 525.615 L1230.29 523.667 L1230.76 521.709 L1231.23 519.732 L1231.7 517.736 L1232.17 515.728 L1232.64 513.717 L1233.11 511.717 L1233.58 509.744 L1234.05 507.816 L1234.52 505.946 L1234.99 504.14 L1235.46 502.394 L1235.93 500.701 L1236.4 499.042 L1236.87 497.402 L1237.34 495.772 L1237.81 494.152 L1238.28 492.562 L1238.75 491.02 L1239.23 489.546 L1239.7 488.145 L1240.17 486.81 L1240.64 485.527 L1241.11 484.282 L1241.58 483.053 L1242.05 481.822 L1242.52 480.584 L1242.99 479.341 L1243.46 478.099 L1243.93 476.87 L1244.4 475.657 L1244.87 474.463 L1245.34 473.296 L1245.81 472.158 L1246.28 471.049 L1246.75 469.973 L1247.22 468.927 L1247.69 467.914 L1248.16 466.927 L1248.63 465.964 L1249.1 465.025 L1249.57 464.11 L1250.04 463.225 L1250.51 462.38 L1250.98 461.582 L1251.45 460.827 L1251.92 460.101 L1252.39 459.385 L1252.86 458.668 L1253.33 457.941 L1253.8 457.201 L1254.27 456.442 L1254.74 455.669 L1255.21 454.895 L1255.68 454.132 L1256.15 453.394 L1256.62 452.688 L1257.09 452.025 L1257.56 451.406 L1258.03 450.827 L1258.5 450.278 L1258.97 449.762 L1259.44 449.287 L1259.91 448.857 L1260.38 448.478 L1260.85 448.154 L1261.32 447.881 L1261.79 447.655 L1262.26 447.471 L1262.73 447.32 L1263.2 447.193 L1263.67 447.076 L1264.14 446.957 L1264.62 446.824 L1265.09 446.679 L1265.56 446.528 L1266.03 446.383 L1266.5 446.255 L1266.97 446.159 L1267.44 446.105 L1267.91 446.096 L1268.38 446.125 L1268.85 446.187 L1269.32 446.264 L1269.79 446.332 L1270.26 446.367 L1270.73 446.359 L1271.2 446.307 L1271.67 446.222 L1272.14 446.128 L1272.61 446.05 L1273.08 446.008 L1273.55 446.029 L1274.02 446.132 L1274.49 446.324 L1274.96 446.601 L1275.43 446.953 L1275.9 447.366 L1276.37 447.826 L1276.84 448.324 L1277.31 448.855 L1277.78 449.411 L1278.25 449.989 L1278.72 450.567 L1279.19 451.139 L1279.66 451.702 L1280.13 452.253 L1280.6 452.787 L1281.07 453.304 L1281.54 453.81 L1282.01 454.319 L1282.48 454.836 L1282.95 455.365 L1283.42 455.906 L1283.89 456.464 L1284.36 457.048 L1284.83 457.669 L1285.3 458.332 L1285.77 459.041 L1286.24 459.806 L1286.71 460.63 L1287.18 461.519 L1287.65 462.464 L1288.12 463.453 L1288.59 464.479 L1289.06 465.536 L1289.54 466.612 L1290.01 467.69 L1290.48 468.749 L1290.95 469.783 L1291.42 470.806 L1291.89 471.833 L1292.36 472.876 L1292.83 473.937 L1293.3 475.023 L1293.77 476.132 L1294.24 477.26 L1294.71 478.4 L1295.18 479.561 L1295.65 480.743 L1296.12 481.946 L1296.59 483.166 L1297.06 484.396 L1297.53 485.637 L1298 486.89 L1298.47 488.153 L1298.94 489.421 L1299.41 490.7 L1299.88 491.989 L1300.35 493.288 L1300.82 494.596 L1301.29 495.911 L1301.76 497.237 L1302.23 498.586 L1302.7 499.96 L1303.17 501.359 L1303.64 502.78 L1304.11 504.212 L1304.58 505.65 L1305.05 507.091 L1305.52 508.53 L1305.99 509.977 L1306.46 511.44 L1306.93 512.932 L1307.4 514.461 L1307.87 516.028 L1308.34 517.629 L1308.81 519.257 L1309.28 520.903 L1309.75 522.56 L1310.22 524.213 L1310.69 525.845 L1311.16 527.45 L1311.63 529.018 L1312.1 530.544 L1312.57 532.034 L1313.04 533.505 L1313.51 534.974 L1313.98 536.448 L1314.45 537.931 L1314.93 539.429 L1315.4 540.948 L1315.87 542.499 L1316.34 544.099 L1316.81 545.763 L1317.28 547.502 L1317.75 549.308 L1318.22 551.167 L1318.69 553.06 L1319.16 554.97 L1319.63 556.884 L1320.1 558.79 L1320.57 560.674 L1321.04 562.529 L1321.51 564.349 L1321.98 566.14 L1322.45 567.918 L1322.92 569.7 L1323.39 571.499 L1323.86 573.32 L1324.33 575.157 L1324.8 577.006 L1325.27 578.863 L1325.74 580.734 L1326.21 582.63 L1326.68 584.564 L1327.15 586.546 L1327.62 588.579 L1328.09 590.653 L1328.56 592.755 L1329.03 594.87 L1329.5 596.981 L1329.97 599.076 L1330.44 601.145 L1330.91 603.176 L1331.38 605.168 L1331.85 607.116 L1332.32 609.02 L1332.79 610.878 L1333.26 612.686 L1333.73 614.444 L1334.2 616.167 L1334.67 617.869 L1335.14 619.557 L1335.61 621.234 L1336.08 622.903 L1336.55 624.558 L1337.02 626.209 L1337.49 627.863 L1337.96 629.532 L1338.43 631.231 L1338.9 632.957 L1339.37 634.712 L1339.85 636.493 L1340.32 638.295 L1340.79 640.114 L1341.26 641.947 L1341.73 643.796 L1342.2 645.66 L1342.67 647.534 L1343.14 649.408 L1343.61 651.284 L1344.08 653.16 L1344.55 655.029 L1345.02 656.883 L1345.49 658.708 L1345.96 660.491 L1346.43 662.223 L1346.9 663.91 L1347.37 665.558 L1347.84 667.181 L1348.31 668.793 L1348.78 670.405 L1349.25 672.035 L1349.72 673.698 L1350.19 675.398 L1350.66 677.133 L1351.13 678.89 L1351.6 680.658 L1352.07 682.429 L1352.54 684.202 L1353.01 685.981 L1353.48 687.754 L1353.95 689.516 L1354.42 691.258 L1354.89 692.977 L1355.36 694.678 L1355.83 696.365 L1356.3 698.052 L1356.77 699.753 L1357.24 701.485 L1357.71 703.247 L1358.18 705.035 L1358.65 706.838 L1359.12 708.643 L1359.59 710.439 L1360.06 712.212 L1360.53 713.954 L1361 715.659 L1361.47 717.336 L1361.94 718.984 L1362.41 720.608 L1362.88 722.212 L1363.35 723.796 L1363.82 725.367 L1364.29 726.94 L1364.76 728.524 L1365.24 730.112 L1365.71 731.703 L1366.18 733.296 L1366.65 734.886 L1367.12 736.475 L1367.59 738.047 L1368.06 739.594 L1368.53 741.111 L1369 742.594 L1369.47 744.045 L1369.94 745.475 L1370.41 746.887 L1370.88 748.286 L1371.35 749.681 L1371.82 751.083 L1372.29 752.498 L1372.76 753.924 L1373.23 755.343 L1373.7 756.737 L1374.17 758.097 L1374.64 759.415 L1375.11 760.694 L1375.58 761.942 L1376.05 763.173 L1376.52 764.401 L1376.99 765.641 L1377.46 766.902 L1377.93 768.174 L1378.4 769.451 L1378.87 770.722 L1379.34 771.974 L1379.81 773.198 L1380.28 774.376 L1380.75 775.509 L1381.22 776.601 L1381.69 777.654 L1382.16 778.676 L1382.63 779.672 L1383.1 780.647 L1383.57 781.606 L1384.04 782.554 L1384.51 783.492 L1384.98 784.416 L1385.45 785.318 L1385.92 786.19 L1386.39 787.035 L1386.86 787.857 L1387.33 788.659 L1387.8 789.456 L1388.27 790.249 L1388.74 791.031 L1389.21 791.794 L1389.68 792.539 L1390.15 793.267 L1390.63 793.983 L1391.1 794.682 L1391.57 795.353 L1392.04 795.995 L1392.51 796.605 L1392.98 797.185 L1393.45 797.733 L1393.92 798.252 L1394.39 798.747 L1394.86 799.221 L1395.33 799.685 L1395.8 800.141 L1396.27 800.594 L1396.74 801.034 L1397.21 801.454 L1397.68 801.845 L1398.15 802.201 L1398.62 802.516 L1399.09 802.797 L1399.56 803.055 L1400.03 803.295 L1400.5 803.523 L1400.97 803.733 L1401.44 803.923 L1401.91 804.094 L1402.38 804.258 L1402.85 804.43 L1403.32 804.613 L1403.79 804.803 L1404.26 804.984 L1404.73 805.144 L1405.2 805.28 L1405.67 805.398 L1406.14 805.499 L1406.61 805.58 L1407.08 805.638 L1407.55 805.673 L1408.02 805.693 L1408.49 805.7 L1408.96 805.697 L1409.43 805.688 L1409.9 805.673 L1410.37 805.647 L1410.84 805.607 L1411.31 805.549 L1411.78 805.47 L1412.25 805.362 L1412.72 805.215 L1413.19 805.027 L1413.66 804.8 L1414.13 804.534 L1414.6 804.227 L1415.07 803.88 L1415.55 803.494 L1416.02 803.077 L1416.49 802.636 L1416.96 802.189 L1417.43 801.74 L1417.9 801.292 L1418.37 800.842 L1418.84 800.375 L1419.31 799.889 L1419.78 799.378 L1420.25 798.84 L1420.72 798.281 L1421.19 797.703 L1421.66 797.108 L1422.13 796.5 L1422.6 795.881 L1423.07 795.254 L1423.54 794.621 L1424.01 793.975 L1424.48 793.319 L1424.95 792.647 L1425.42 791.957 L1425.89 791.248 L1426.36 790.513 L1426.83 789.744 L1427.3 788.939 L1427.77 788.099 L1428.24 787.22 L1428.71 786.3 L1429.18 785.347 L1429.65 784.372 L1430.12 783.39 L1430.59 782.43 L1431.06 781.512 L1431.53 780.654 L1432 779.854 L1432.47 779.097 L1432.94 778.366 L1433.41 777.644 L1433.88 776.913 L1434.35 776.155 L1434.82 775.371 L1435.29 774.555 L1435.76 773.724 L1436.23 772.882 L1436.7 772.027 L1437.17 771.153 L1437.64 770.246 L1438.11 769.292 L1438.58 768.284 L1439.05 767.216 L1439.52 766.094 L1439.99 764.924 L1440.46 763.723 L1440.94 762.501 L1441.41 761.275 L1441.88 760.054 L1442.35 758.836 L1442.82 757.613 L1443.29 756.369 L1443.76 755.091 L1444.23 753.773 L1444.7 752.417 L1445.17 751.029 L1445.64 749.623 L1446.11 748.216 L1446.58 746.814 L1447.05 745.418 L1447.52 744.026 L1447.99 742.625 L1448.46 741.198 L1448.93 739.738 L1449.4 738.246 L1449.87 736.723 L1450.34 735.172 L1450.81 733.605 L1451.28 732.025 L1451.75 730.44 L1452.22 728.849 L1452.69 727.246 L1453.16 725.638 L1453.63 724.03 L1454.1 722.43 L1454.57 720.841 L1455.04 719.264 L1455.51 717.699 L1455.98 716.134 L1456.45 714.559 L1456.92 712.964 L1457.39 711.344 L1457.86 709.693 L1458.33 708.004 L1458.8 706.27 L1459.27 704.499 L1459.74 702.701 L1460.21 700.883 L1460.68 699.046 L1461.15 697.202 L1461.62 695.364 L1462.09 693.54 L1462.56 691.744 L1463.03 689.975 L1463.5 688.23 L1463.97 686.495 L1464.44 684.759 L1464.91 683.014 L1465.38 681.253 L1465.86 679.471 L1466.33 677.669 L1466.8 675.846 L1467.27 674.004 L1467.74 672.14 L1468.21 670.25 L1468.68 668.331 L1469.15 666.389 L1469.62 664.435 L1470.09 662.484 L1470.56 660.545 L1471.03 658.622 L1471.5 656.719 L1471.97 654.838 L1472.44 652.975 L1472.91 651.139 L1473.38 649.323 L1473.85 647.51 L1474.32 645.682 L1474.79 643.829 L1475.26 641.94 L1475.73 640.008 L1476.2 638.031 L1476.67 636.007 L1477.14 633.934 L1477.61 631.811 L1478.08 629.648 L1478.55 627.467 L1479.02 625.294 L1479.49 623.153 L1479.96 621.062 L1480.43 619.029 L1480.9 617.058 L1481.37 615.153 L1481.84 613.309 L1482.31 611.51 L1482.78 609.742 L1483.25 607.988 L1483.72 606.235 L1484.19 604.461 L1484.66 602.651 L1485.13 600.796 L1485.6 598.897 L1486.07 596.965 L1486.54 595.019 L1487.01 593.086 L1487.48 591.181 L1487.95 589.32 L1488.42 587.506 L1488.89 585.726 L1489.36 583.97 L1489.83 582.227 L1490.3 580.479 L1490.77 578.719 L1491.25 576.95 L1491.72 575.164 L1492.19 573.361 L1492.66 571.544 L1493.13 569.724 L1493.6 567.912 L1494.07 566.116 L1494.54 564.345 L1495.01 562.601 L1495.48 560.882 L1495.95 559.182 L1496.42 557.494 L1496.89 555.817 L1497.36 554.14 L1497.83 552.454 L1498.3 550.751 L1498.77 549.02 L1499.24 547.264 L1499.71 545.497 L1500.18 543.731 L1500.65 541.984 L1501.12 540.268 L1501.59 538.586 L1502.06 536.933 L1502.53 535.302 L1503 533.682 L1503.47 532.056 L1503.94 530.416 L1504.41 528.761 L1504.88 527.086 L1505.35 525.394 L1505.82 523.685 L1506.29 521.971 L1506.76 520.263 L1507.23 518.565 L1507.7 516.885 L1508.17 515.23 L1508.64 513.617 L1509.11 512.064 L1509.58 510.578 L1510.05 509.155 L1510.52 507.786 L1510.99 506.452 L1511.46 505.136 L1511.93 503.815 L1512.4 502.472 L1512.87 501.09 L1513.34 499.658 L1513.81 498.162 L1514.28 496.607 L1514.75 494.998 L1515.22 493.346 L1515.69 491.673 L1516.17 490.004 L1516.64 488.367 L1517.11 486.791 L1517.58 485.289 L1518.05 483.872 L1518.52 482.541 L1518.99 481.297 L1519.46 480.133 L1519.93 479.034 L1520.4 477.982 L1520.87 476.946 L1521.34 475.898 L1521.81 474.809 L1522.28 473.657 L1522.75 472.436 L1523.22 471.154 L1523.69 469.824 L1524.16 468.464 L1524.63 467.099 L1525.1 465.744 L1525.57 464.404 L1526.04 463.089 L1526.51 461.813 L1526.98 460.584 L1527.45 459.401 L1527.92 458.265 L1528.39 457.171 L1528.86 456.119 L1529.33 455.108 L1529.8 454.143 L1530.27 453.211 L1530.74 452.302 L1531.21 451.411 L1531.68 450.535 L1532.15 449.678 L1532.62 448.857 L1533.09 448.093 L1533.56 447.401 L1534.03 446.778 L1534.5 446.216 L1534.97 445.712 L1535.44 445.278 L1535.91 444.914 L1536.38 444.619 L1536.85 444.386 L1537.32 444.204 L1537.79 444.071 L1538.26 443.985 L1538.73 443.945 L1539.2 443.95 L1539.67 443.995 L1540.14 444.077 L1540.61 444.182 L1541.08 444.289 L1541.56 444.378 L1542.03 444.44 L1542.5 444.467 L1542.97 444.454 L1543.44 444.403 L1543.91 444.321 L1544.38 444.213 L1544.85 444.093 L1545.32 443.977 L1545.79 443.874 L1546.26 443.805 L1546.73 443.791 L1547.2 443.85 L1547.67 443.997 L1548.14 444.238 L1548.61 444.575 L1549.08 444.99 L1549.55 445.473 L1550.02 446.01 L1550.49 446.592 L1550.96 447.208 L1551.43 447.848 L1551.9 448.497 L1552.37 449.142 L1552.84 449.77 L1553.31 450.377 L1553.78 450.969 L1554.25 451.545 L1554.72 452.118 L1555.19 452.698 L1555.66 453.295 L1556.13 453.922 L1556.6 454.583 L1557.07 455.28 L1557.54 456.023 L1558.01 456.804 L1558.48 457.616 L1558.95 458.46 L1559.42 459.338 L1559.89 460.255 L1560.36 461.217 L1560.83 462.221 L1561.3 463.27 L1561.77 464.363 L1562.24 465.499 L1562.71 466.667 L1563.18 467.854 L1563.65 469.039 L1564.12 470.21 L1564.59 471.365 L1565.06 472.512 L1565.53 473.657 L1566 474.81 L1566.47 475.974 L1566.95 477.162 L1567.42 478.376 L1567.89 479.616 L1568.36 480.873 L1568.83 482.137 L1569.3 483.396 L1569.77 484.645 L1570.24 485.884 L1570.71 487.117 L1571.18 488.355 L1571.65 489.607 L1572.12 490.878 L1572.59 492.182 L1573.06 493.534 L1573.53 494.946 L1574 496.437 L1574.47 498.018 L1574.94 499.69 L1575.41 501.439 L1575.88 503.253 L1576.35 505.117 L1576.82 507.018 L1577.29 508.945 L1577.76 510.885 L1578.23 512.833 L1578.7 514.776 L1579.17 516.715 L1579.64 518.654 L1580.11 520.599 L1580.58 522.554 L1581.05 524.524 L1581.52 526.501 L1581.99 528.473 L1582.46 530.426 L1582.93 532.361 L1583.4 534.288 L1583.87 536.211 L1584.34 538.132 L1584.81 540.054 L1585.28 541.98 L1585.75 543.916 L1586.22 545.866 L1586.69 547.841 L1587.16 549.844 L1587.63 551.87 L1588.1 553.91 L1588.57 555.964 L1589.04 558.035 L1589.51 560.131 L1589.98 562.263 L1590.45 564.44 L1590.92 566.668 L1591.39 568.944 L1591.87 571.25 L1592.34 573.573 L1592.81 575.895 L1593.28 578.201 L1593.75 580.486 L1594.22 582.746 L1594.69 584.982 L1595.16 587.199 L1595.63 589.4 L1596.1 591.584 L1596.57 593.752 L1597.04 595.902 L1597.51 598.033 L1597.98 600.145 L1598.45 602.244 L1598.92 604.336 L1599.39 606.423 L1599.86 608.514 L1600.33 610.623 L1600.8 612.76 L1601.27 614.919 L1601.74 617.092 L1602.21 619.265 L1602.68 621.43 L1603.15 623.576 L1603.62 625.709 L1604.09 627.831 L1604.56 629.947 L1605.03 632.082 L1605.5 634.24 L1605.97 636.428 L1606.44 638.649 L1606.91 640.891 L1607.38 643.15 L1607.85 645.412 L1608.32 647.667 L1608.79 649.904 L1609.26 652.125 L1609.73 654.337 L1610.2 656.552 L1610.67 658.774 L1611.14 661.004 L1611.61 663.246 L1612.08 665.5 L1612.55 667.766 L1613.02 670.043 L1613.49 672.329 L1613.96 674.625 L1614.43 676.933 L1614.9 679.264 L1615.37 681.617 L1615.84 683.994 L1616.31 686.393 L1616.78 688.81 L1617.26 691.231 L1617.73 693.639 L1618.2 696.027 L1618.67 698.395 L1619.14 700.742 L1619.61 703.071 L1620.08 705.39 L1620.55 707.707 L1621.02 710.03 L1621.49 712.369 L1621.96 714.736 L1622.43 717.135 L1622.9 719.562 L1623.37 722.01 L1623.84 724.469 L1624.31 726.925 L1624.78 729.362 L1625.25 731.772 L1625.72 734.138 L1626.19 736.443 L1626.66 738.678 L1627.13 740.843 L1627.6 742.943 L1628.07 744.988 L1628.54 746.992 L1629.01 748.977 L1629.48 750.974 L1629.95 753.016 L1630.42 755.12 L1630.89 757.302 L1631.36 759.562 L1631.83 761.888 L1632.3 764.261 L1632.77 766.674 L1633.24 769.108 L1633.71 771.546 L1634.18 773.958 L1634.65 776.319 L1635.12 778.61 L1635.59 780.817 L1636.06 782.943 L1636.53 785.006 L1637 787.027 L1637.47 789.027 L1637.94 791.027 L1638.41 793.036 L1638.88 795.062 L1639.35 797.103 L1639.82 799.156 L1640.29 801.213 L1640.76 803.269 L1641.23 805.314 L1641.7 807.328 L1642.18 809.297 L1642.65 811.213 L1643.12 813.081 L1643.59 814.909 L1644.06 816.704 L1644.53 818.484 L1645 820.265 L1645.47 822.063 L1645.94 823.884 L1646.41 825.731 L1646.88 827.6 L1647.35 829.479 L1647.82 831.361 L1648.29 833.24 L1648.76 835.1 L1649.23 836.919 L1649.7 838.685 L1650.17 840.384 L1650.64 842.006 L1651.11 843.551 L1651.58 845.02 L1652.05 846.422 L1652.52 847.762 L1652.99 849.049 L1653.46 850.287 L1653.93 851.487 L1654.4 852.654 L1654.87 853.797 L1655.34 854.924 L1655.81 856.039 L1656.28 857.143 L1656.75 858.231 L1657.22 859.302 L1657.69 860.355 L1658.16 861.392 L1658.63 862.412 L1659.1 863.416 L1659.57 864.399 L1660.04 865.362 L1660.51 866.305 L1660.98 867.229 L1661.45 868.13 L1661.92 869.004 L1662.39 869.83 L1662.86 870.59 L1663.33 871.272 L1663.8 871.873 L1664.27 872.386 L1664.74 872.813 L1665.21 873.167 L1665.68 873.461 L1666.15 873.713 L1666.62 873.942 L1667.09 874.16 L1667.57 874.378 L1668.04 874.594 L1668.51 874.8 L1668.98 874.973 L1669.45 875.086 L1669.92 875.128 L1670.39 875.1 L1670.86 875.006 L1671.33 874.855 L1671.8 874.653 L1672.27 874.41 L1672.74 874.137 L1673.21 873.845 L1673.68 873.545 L1674.15 873.24 L1674.62 872.932 L1675.09 872.607 L1675.56 872.252 L1676.03 871.865 L1676.5 871.44 L1676.97 870.98 L1677.44 870.491 L1677.91 869.979 L1678.38 869.45 L1678.85 868.908 L1679.32 868.357 L1679.79 867.794 L1680.26 867.217 L1680.73 866.619 L1681.2 865.985 L1681.67 865.303 L1682.14 864.573 L1682.61 863.799 L1683.08 862.985 L1683.55 862.136 L1684.02 861.258 L1684.49 860.358 L1684.96 859.442 L1685.43 858.509 L1685.9 857.561 L1686.37 856.591 L1686.84 855.592 L1687.31 854.56 L1687.78 853.493 L1688.25 852.384 L1688.72 851.22 L1689.19 850 L1689.66 848.728 L1690.13 847.407 L1690.6 846.045 L1691.07 844.645 L1691.54 843.209 L1692.01 841.736 L1692.49 840.231 L1692.96 838.707 L1693.43 837.169 L1693.9 835.615 L1694.37 834.04 L1694.84 832.426 L1695.31 830.77 L1695.78 829.064 L1696.25 827.316 L1696.72 825.532 L1697.19 823.727 L1697.66 821.921 L1698.13 820.125 L1698.6 818.348 L1699.07 816.595 L1699.54 814.863 L1700.01 813.147 L1700.48 811.431 L1700.95 809.7 L1701.42 807.952 L1701.89 806.173 L1702.36 804.347 L1702.83 802.453 L1703.3 800.482 L1703.77 798.442 L1704.24 796.355 L1704.71 794.236 L1705.18 792.091 L1705.65 789.921 L1706.12 787.724 L1706.59 785.501 L1707.06 783.256 L1707.53 780.994 L1708 778.72 L1708.47 776.432 L1708.94 774.132 L1709.41 771.831 L1709.88 769.533 L1710.35 767.241 L1710.82 764.951 L1711.29 762.653 L1711.76 760.341 L1712.23 758.016 L1712.7 755.673 L1713.17 753.3 L1713.64 750.892 L1714.11 748.439 L1714.58 745.937 L1715.05 743.383 L1715.52 740.777 L1715.99 738.132 L1716.46 735.459 L1716.93 732.767 L1717.4 730.066 L1717.88 727.364 L1718.35 724.67 L1718.82 721.98 L1719.29 719.295 L1719.76 716.611 L1720.23 713.928 L1720.7 711.255 L1721.17 708.592 L1721.64 705.941 L1722.11 703.304 L1722.58 700.696 L1723.05 698.126 L1723.52 695.586 L1723.99 693.08 L1724.46 690.6 L1724.93 688.133 L1725.4 685.664 L1725.87 683.184 L1726.34 680.691 L1726.81 678.172 L1727.28 675.619 L1727.75 673.028 L1728.22 670.404 L1728.69 667.754 L1729.16 665.091 L1729.63 662.424 L1730.1 659.761 L1730.57 657.102 L1731.04 654.446 L1731.51 651.798 L1731.98 649.162 L1732.45 646.544 L1732.92 643.935 L1733.39 641.327 L1733.86 638.715 L1734.33 636.094 L1734.8 633.458 L1735.27 630.809 L1735.74 628.149 L1736.21 625.484 L1736.68 622.828 L1737.15 620.178 L1737.62 617.532 L1738.09 614.886 L1738.56 612.233 L1739.03 609.568 L1739.5 606.889 L1739.97 604.193 L1740.44 601.495 L1740.91 598.81 L1741.38 596.146 L1741.85 593.505 L1742.32 590.887 L1742.79 588.281 L1743.27 585.675 L1743.74 583.064 L1744.21 580.438 L1744.68 577.802 L1745.15 575.166 L1745.62 572.541 L1746.09 569.934 L1746.56 567.346 L1747.03 564.77 L1747.5 562.21 L1747.97 559.666 L1748.44 557.135 L1748.91 554.607 L1749.38 552.077 L1749.85 549.551 L1750.32 547.025 L1750.79 544.503 L1751.26 541.991 L1751.73 539.497 L1752.2 537.024 L1752.67 534.566 L1753.14 532.119 L1753.61 529.668 L1754.08 527.205 L1754.55 524.735 L1755.02 522.257 L1755.49 519.772 L1755.96 517.288 L1756.43 514.809 L1756.9 512.334 L1757.37 509.87 L1757.84 507.422 L1758.31 504.993 L1758.78 502.583 L1759.25 500.184 L1759.72 497.791 L1760.19 495.399 L1760.66 492.999 L1761.13 490.578 L1761.6 488.139 L1762.07 485.69 L1762.54 483.231 L1763.01 480.758 L1763.48 478.274 L1763.95 475.779 L1764.42 473.273 L1764.89 470.761 L1765.36 468.248 L1765.83 465.754 L1766.3 463.3 L1766.77 460.894 L1767.24 458.529 L1767.71 456.189 L1768.19 453.866 L1768.66 451.56 L1769.13 449.273 L1769.6 447.014 L1770.07 444.789 L1770.54 442.602 L1771.01 440.465 L1771.48 438.381 L1771.95 436.347 L1772.42 434.363 L1772.89 432.419 L1773.36 430.509 L1773.83 428.631 L1774.3 426.778 L1774.77 424.947 L1775.24 423.131 L1775.71 421.327 L1776.18 419.533 L1776.65 417.753 L1777.12 415.992 L1777.59 414.246 L1778.06 412.513 L1778.53 410.784 L1779 409.055 L1779.47 407.327 L1779.94 405.613 L1780.41 403.918 L1780.88 402.248 L1781.35 400.606 L1781.82 398.993 L1782.29 397.409 L1782.76 395.857 L1783.23 394.341 L1783.7 392.853 L1784.17 391.387 L1784.64 389.94 L1785.11 388.519 L1785.58 387.126 L1786.05 385.756 L1786.52 384.412 L1786.99 383.09 L1787.46 381.789 L1787.93 380.509 L1788.4 379.258 L1788.87 378.033 L1789.34 376.823 L1789.81 375.633 L1790.28 374.473 L1790.75 373.361 L1791.22 372.321 L1791.69 371.366 L1792.16 370.497 L1792.63 369.711 L1793.1 368.996 L1793.58 368.332 L1794.05 367.7 L1794.52 367.081 L1794.99 366.461 L1795.46 365.828 L1795.93 365.175 L1796.4 364.505 L1796.87 363.829 L1797.34 363.17 L1797.81 362.548 L1798.28 361.977 L1798.75 361.452 L1799.22 360.971 L1799.69 360.529 L1800.16 360.117 L1800.63 359.737 L1801.1 359.387 L1801.57 359.077 L1802.04 358.823 L1802.51 358.633 L1802.98 358.503 L1803.45 358.432 L1803.92 358.417 L1804.39 358.453 L1804.86 358.53 L1805.33 358.632 L1805.8 358.757 L1806.27 358.908 L1806.74 359.089 L1807.21 359.31 L1807.68 359.584 L1808.15 359.916 L1808.62 360.307 L1809.09 360.758 L1809.56 361.259 L1810.03 361.806 L1810.5 362.392 L1810.97 363.014 L1811.44 363.671 L1811.91 364.36 L1812.38 365.085 L1812.85 365.85 L1813.32 366.663 L1813.79 367.529 L1814.26 368.449 L1814.73 369.426 L1815.2 370.454 L1815.67 371.535 L1816.14 372.664 L1816.61 373.843 L1817.08 375.068 L1817.55 376.351 L1818.02 377.691 L1818.5 379.086 L1818.97 380.525 L1819.44 382 L1819.91 383.502 L1820.38 385.013 L1820.85 386.522 L1821.32 388.015 L1821.79 389.485 L1822.26 390.934 L1822.73 392.368 L1823.2 393.807 L1823.67 395.274 L1824.14 396.8 L1824.61 398.416 L1825.08 400.15 L1825.55 402.017 L1826.02 404.012 L1826.49 406.127 L1826.96 408.34 L1827.43 410.613 L1827.9 412.911 L1828.37 415.202 L1828.84 417.459 L1829.31 419.673 L1829.78 421.837 L1830.25 423.958 L1830.72 426.053 L1831.19 428.142 L1831.66 430.245 L1832.13 432.381 L1832.6 434.563 L1833.07 436.804 L1833.54 439.109 L1834.01 441.479 L1834.48 443.91 L1834.95 446.383 L1835.42 448.876 L1835.89 451.368 L1836.36 453.845 L1836.83 456.308 L1837.3 458.759 L1837.77 461.204 L1838.24 463.647 L1838.71 466.103 L1839.18 468.59 L1839.65 471.122 L1840.12 473.707 L1840.59 476.342 L1841.06 479.031 L1841.53 481.767 L1842 484.545 L1842.47 487.359 L1842.94 490.197 L1843.41 493.055 L1843.89 495.927 L1844.36 498.808 L1844.83 501.694 L1845.3 504.583 L1845.77 507.464 L1846.24 510.33 L1846.71 513.176 L1847.18 515.996 L1847.65 518.788 L1848.12 521.555 L1848.59 524.299 L1849.06 527.027 L1849.53 529.753 L1850 532.489 L1850.47 535.254 L1850.94 538.06 L1851.41 540.909 L1851.88 543.797 L1852.35 546.716 L1852.82 549.664 L1853.29 552.638 L1853.76 555.636 L1854.23 558.659 L1854.7 561.716 L1855.17 564.811 L1855.64 567.952 L1856.11 571.144 L1856.58 574.388 L1857.05 577.68 L1857.52 581.011 L1857.99 584.375 L1858.46 587.772 L1858.93 591.199 L1859.4 594.653 L1859.87 598.123 L1860.34 601.593 L1860.81 605.047 L1861.28 608.469 L1861.75 611.854 L1862.22 615.205 L1862.69 618.521 L1863.16 621.808 L1863.63 625.068 L1864.1 628.307 L1864.57 631.536 L1865.04 634.76 L1865.51 637.993 L1865.98 641.254 L1866.45 644.554 L1866.92 647.897 L1867.39 651.284 L1867.86 654.707 L1868.33 658.153 L1868.8 661.602 L1869.28 665.041 L1869.75 668.46 L1870.22 671.85 L1870.69 675.212 L1871.16 678.552 L1871.63 681.87 L1872.1 685.168 L1872.57 688.447 L1873.04 691.704 L1873.51 694.931 L1873.98 698.119 L1874.45 701.27 L1874.92 704.39 L1875.39 707.49 L1875.86 710.581 L1876.33 713.675 L1876.8 716.786 L1877.27 719.922 L1877.74 723.078 L1878.21 726.245 L1878.68 729.413 L1879.15 732.571 L1879.62 735.721 L1880.09 738.875 L1880.56 742.041 L1881.03 745.237 L1881.5 748.481 L1881.97 751.771 L1882.44 755.102 L1882.91 758.466 L1883.38 761.86 L1883.85 765.269 L1884.32 768.688 L1884.79 772.109 L1885.26 775.528 L1885.73 778.931 L1886.2 782.294 L1886.67 785.593 L1887.14 788.816 L1887.61 791.959 L1888.08 795.027 L1888.55 798.02 L1889.02 800.95 L1889.49 803.833 L1889.96 806.681 L1890.43 809.516 L1890.9 812.357 L1891.37 815.21 L1891.84 818.079 L1892.31 820.961 L1892.78 823.851 L1893.25 826.746 L1893.72 829.637 L1894.2 832.522 L1894.67 835.389 L1895.14 838.231 L1895.61 841.036 L1896.08 843.794 L1896.55 846.495 L1897.02 849.12 L1897.49 851.658 L1897.96 854.111 L1898.43 856.492 L1898.9 858.829 L1899.37 861.149 L1899.84 863.478 L1900.31 865.847 L1900.78 868.267 L1901.25 870.732 L1901.72 873.238 L1902.19 875.769 L1902.66 878.298 L1903.13 880.795 L1903.6 883.24 L1904.07 885.615 L1904.54 887.904 L1905.01 890.101 L1905.48 892.215 L1905.95 894.266 L1906.42 896.283 L1906.89 898.293 L1907.36 900.314 L1907.83 902.353 L1908.3 904.409 L1908.77 906.46 L1909.24 908.491 L1909.71 910.479 L1910.18 912.414 L1910.65 914.292 L1911.12 916.109 L1911.59 917.864 L1912.06 919.564 L1912.53 921.209 L1913 922.813 L1913.47 924.382 L1913.94 925.925 L1914.41 927.456 L1914.88 928.99 L1915.35 930.525 L1915.82 932.054 L1916.29 933.566 L1916.76 935.058 L1917.23 936.53 L1917.7 937.984 L1918.17 939.414 L1918.64 940.819 L1919.11 942.193 L1919.59 943.534 L1920.06 944.834 L1920.53 946.095 L1921 947.313 L1921.47 948.485 L1921.94 949.612 L1922.41 950.696 L1922.88 951.746 L1923.35 952.768 L1923.82 953.765 L1924.29 954.732 L1924.76 955.664 L1925.23 956.556 L1925.7 957.405 L1926.17 958.207 L1926.64 958.967 L1927.11 959.683 L1927.58 960.362 L1928.05 961.008 L1928.52 961.618 L1928.99 962.183 L1929.46 962.696 L1929.93 963.146 L1930.4 963.521 L1930.87 963.825 L1931.34 964.076 L1931.81 964.289 L1932.28 964.479 L1932.75 964.661 L1933.22 964.85 L1933.69 965.048 L1934.16 965.254 L1934.63 965.467 L1935.1 965.675 L1935.57 965.86 L1936.04 966.001 L1936.51 966.076 L1936.98 966.072 L1937.45 965.986 L1937.92 965.831 L1938.39 965.616 L1938.86 965.347 L1939.33 965.028 L1939.8 964.673 L1940.27 964.292 L1940.74 963.89 L1941.21 963.463 L1941.68 962.999 L1942.15 962.495 L1942.62 961.953 L1943.09 961.375 L1943.56 960.757 L1944.03 960.097 L1944.51 959.389 L1944.98 958.63 L1945.45 957.814 L1945.92 956.939 L1946.39 955.994 L1946.86 954.969 L1947.33 953.855 L1947.8 952.664 L1948.27 951.412 L1948.74 950.122 L1949.21 948.825 L1949.68 947.535 L1950.15 946.262 L1950.62 945.006 L1951.09 943.758 L1951.56 942.497 L1952.03 941.212 L1952.5 939.891 L1952.97 938.523 L1953.44 937.101 L1953.91 935.619 L1954.38 934.08 L1954.85 932.475 L1955.32 930.801 L1955.79 929.058 L1956.26 927.253 L1956.73 925.398 L1957.2 923.504 L1957.67 921.588 L1958.14 919.654 L1958.61 917.7 L1959.08 915.716 L1959.55 913.688 L1960.02 911.608 L1960.49 909.463 L1960.96 907.243 L1961.43 904.943 L1961.9 902.57 L1962.37 900.143 L1962.84 897.675 L1963.31 895.181 L1963.78 892.67 L1964.25 890.141 L1964.72 887.597 L1965.19 885.034 L1965.66 882.455 L1966.13 879.861 L1966.6 877.244 L1967.07 874.589 L1967.54 871.89 L1968.01 869.149 L1968.48 866.363 L1968.95 863.533 L1969.42 860.664 L1969.9 857.763 L1970.37 854.833 L1970.84 851.873 L1971.31 848.881 L1971.78 845.862 L1972.25 842.822 L1972.72 839.762 L1973.19 836.677 L1973.66 833.547 L1974.13 830.359 L1974.6 827.102 L1975.07 823.775 L1975.54 820.391 L1976.01 816.97 L1976.48 813.532 L1976.95 810.094 L1977.42 806.669 L1977.89 803.273 L1978.36 799.911 L1978.83 796.585 L1979.3 793.294 L1979.77 790.032 L1980.24 786.798 L1980.71 783.577 L1981.18 780.351 L1981.65 777.101 L1982.12 773.814 L1982.59 770.477 L1983.06 767.078 L1983.53 763.613 L1984 760.088 L1984.47 756.509 L1984.94 752.885 L1985.41 749.236 L1985.88 745.588 L1986.35 741.967 L1986.82 738.389 L1987.29 734.862 L1987.76 731.386 L1988.23 727.962 L1988.7 724.583 L1989.17 721.247 L1989.64 717.948 L1990.11 714.679 L1990.58 711.422 L1991.05 708.159 L1991.52 704.877 L1991.99 701.567 L1992.46 698.23 L1992.93 694.874 L1993.4 691.501 L1993.87 688.111 L1994.34 684.715 L1994.82 681.328 L1995.29 677.966 L1995.76 674.631 L1996.23 671.327 L1996.7 668.047 L1997.17 664.777 L1997.64 661.505 L1998.11 658.217 L1998.58 654.894 L1999.05 651.529 L1999.52 648.12 L1999.99 644.67 L2000.46 641.183 L2000.93 637.669 L2001.4 634.144 L2001.87 630.619 L2002.34 627.106 L2002.81 623.621 L2003.28 620.185 L2003.75 616.798 L2004.22 613.454 L2004.69 610.145 L2005.16 606.865 L2005.63 603.603 L2006.1 600.356 L2006.57 597.126 L2007.04 593.918 L2007.51 590.729 L2007.98 587.548 L2008.45 584.357 L2008.92 581.145 L2009.39 577.905 L2009.86 574.629 L2010.33 571.311 L2010.8 567.944 L2011.27 564.521 L2011.74 561.045 L2012.21 557.532 L2012.68 554.007 L2013.15 550.498 L2013.62 547.029 L2014.09 543.617 L2014.56 540.266 L2015.03 536.974 L2015.5 533.734 L2015.97 530.536 L2016.44 527.363 L2016.91 524.2 L2017.38 521.034 L2017.85 517.865 L2018.32 514.685 L2018.79 511.494 L2019.26 508.289 L2019.73 505.082 L2020.21 501.888 L2020.68 498.708 L2021.15 495.543 L2021.62 492.392 L2022.09 489.25 L2022.56 486.12 L2023.03 483.001 L2023.5 479.896 L2023.97 476.802 L2024.44 473.721 L2024.91 470.651 L2025.38 467.589 L2025.85 464.546 L2026.32 461.527 L2026.79 458.536 L2027.26 455.571 L2027.73 452.618 L2028.2 449.669 L2028.67 446.721 L2029.14 443.784 L2029.61 440.876 L2030.08 438.007 L2030.55 435.188 L2031.02 432.426 L2031.49 429.72 L2031.96 427.072 L2032.43 424.473 L2032.9 421.917 L2033.37 419.399 L2033.84 416.919 L2034.31 414.477 L2034.78 412.082 L2035.25 409.728 L2035.72 407.396 L2036.19 405.07 L2036.66 402.742 L2037.13 400.417 L2037.6 398.107 L2038.07 395.821 L2038.54 393.572 L2039.01 391.369 L2039.48 389.212 L2039.95 387.105 L2040.42 385.051 L2040.89 383.054 L2041.36 381.108 L2041.83 379.207 L2042.3 377.346 L2042.77 375.521 L2043.24 373.727 L2043.71 371.958 L2044.18 370.211 L2044.65 368.496 L2045.12 366.821 L2045.6 365.19 L2046.07 363.607 L2046.54 362.068 L2047.01 360.559 L2047.48 359.056 L2047.95 357.554 L2048.42 356.055 L2048.89 354.56 L2049.36 353.077 L2049.83 351.61 L2050.3 350.168 L2050.77 348.744 L2051.24 347.333 L2051.71 345.939 L2052.18 344.569 L2052.65 343.235 L2053.12 341.946 L2053.59 340.72 L2054.06 339.563 L2054.53 338.472 L2055 337.443 L2055.47 336.467 L2055.94 335.537 L2056.41 334.647 L2056.88 333.789 L2057.35 332.96 L2057.82 332.158 L2058.29 331.388 L2058.76 330.654 L2059.23 329.952 L2059.7 329.279 L2060.17 328.628 L2060.64 327.993 L2061.11 327.378 L2061.58 326.784 L2062.05 326.218 L2062.52 325.681 L2062.99 325.169 L2063.46 324.678 L2063.93 324.213 L2064.4 323.78 L2064.87 323.388 L2065.34 323.042 L2065.81 322.754 L2066.28 322.533 L2066.75 322.384 L2067.22 322.316 L2067.69 322.333 L2068.16 322.429 L2068.63 322.599 L2069.1 322.832 L2069.57 323.113 L2070.04 323.436 L2070.52 323.792 L2070.99 324.172 L2071.46 324.574 L2071.93 324.992 L2072.4 325.417 L2072.87 325.851 L2073.34 326.298 L2073.81 326.766 L2074.28 327.26 L2074.75 327.79 L2075.22 328.365 L2075.69 328.991 L2076.16 329.67 L2076.63 330.401 L2077.1 331.189 L2077.57 332.038 L2078.04 332.951 L2078.51 333.932 L2078.98 334.99 L2079.45 336.126 L2079.92 337.339 L2080.39 338.608 L2080.86 339.924 L2081.33 341.288 L2081.8 342.701 L2082.27 344.17 L2082.74 345.696 L2083.21 347.27 L2083.68 348.891 L2084.15 350.545 L2084.62 352.222 L2085.09 353.918 L2085.56 355.635 L2086.03 357.369 L2086.5 359.112 L2086.97 360.856 L2087.44 362.601 L2087.91 364.35 L2088.38 366.11 L2088.85 367.879 L2089.32 369.654 L2089.79 371.431 L2090.26 373.21 L2090.73 374.998 L2091.2 376.802 L2091.67 378.637 L2092.14 380.51 L2092.61 382.424 L2093.08 384.384 L2093.55 386.395 L2094.02 388.472 L2094.49 390.627 L2094.96 392.863 L2095.43 395.173 L2095.91 397.537 L2096.38 399.935 L2096.85 402.345 L2097.32 404.746 L2097.79 407.132 L2098.26 409.509 L2098.73 411.891 L2099.2 414.296 L2099.67 416.747 L2100.14 419.26 L2100.61 421.835 L2101.08 424.463 L2101.55 427.132 L2102.02 429.828 L2102.49 432.549 L2102.96 435.283 L2103.43 438.022 L2103.9 440.761 L2104.37 443.495 L2104.84 446.226 L2105.31 448.963 L2105.78 451.725 L2106.25 454.519 L2106.72 457.339 L2107.19 460.176 L2107.66 463.022 L2108.13 465.87 L2108.6 468.723 L2109.07 471.583 L2109.54 474.446 L2110.01 477.306 L2110.48 480.155 L2110.95 482.996 L2111.42 485.831 L2111.89 488.669 L2112.36 491.53 L2112.83 494.428 L2113.3 497.375 L2113.77 500.368 L2114.24 503.399 L2114.71 506.455 L2115.18 509.528 L2115.65 512.607 L2116.12 515.677 L2116.59 518.724 L2117.06 521.746 L2117.53 524.752 L2118 527.758 L2118.47 530.782 L2118.94 533.84 L2119.41 536.94 L2119.88 540.085 L2120.35 543.27 L2120.83 546.495 L2121.3 549.76 L2121.77 553.065 L2122.24 556.413 L2122.71 559.799 L2123.18 563.214 L2123.65 566.633 L2124.12 570.035 L2124.59 573.403 L2125.06 576.722 L2125.53 579.984 L2126 583.212 L2126.47 586.424 L2126.94 589.641 L2127.41 592.876 L2127.88 596.136 L2128.35 599.42 L2128.82 602.725 L2129.29 606.055 L2129.76 609.408 L2130.23 612.788 L2130.7 616.196 L2131.17 619.634 L2131.64 623.104 L2132.11 626.605 L2132.58 630.13 L2133.05 633.661 L2133.52 637.19 L2133.99 640.707 L2134.46 644.204 L2134.93 647.67 L2135.4 651.097 L2135.87 654.489 L2136.34 657.852 L2136.81 661.196 L2137.28 664.524 L2137.75 667.838 L2138.22 671.143 L2138.69 674.442 L2139.16 677.728 L2139.63 680.996 L2140.1 684.244 L2140.57 687.475 L2141.04 690.682 L2141.51 693.865 L2141.98 697.034 L2142.45 700.2 L2142.92 703.371 L2143.39 706.548 L2143.86 709.73 L2144.33 712.909 L2144.8 716.08 L2145.27 719.232 L2145.74 722.365 L2146.22 725.487 L2146.69 728.61 L2147.16 731.758 L2147.63 734.95 L2148.1 738.194 L2148.57 741.489 L2149.04 744.824 L2149.51 748.177 L2149.98 751.535 L2150.45 754.884 L2150.92 758.216 L2151.39 761.526 L2151.86 764.814 L2152.33 768.09 L2152.8 771.361 L2153.27 774.628 L2153.74 777.892 L2154.21 781.155 L2154.68 784.412 L2155.15 787.659 L2155.62 790.893 L2156.09 794.099 L2156.56 797.274 L2157.03 800.422 L2157.5 803.557 L2157.97 806.702 L2158.44 809.861 L2158.91 813.031 L2159.38 816.211 L2159.85 819.395 L2160.32 822.578 L2160.79 825.745 L2161.26 828.889 L2161.73 832.009 L2162.2 835.106 L2162.67 838.178 L2163.14 841.223 L2163.61 844.235 L2164.08 847.209 L2164.55 850.137 L2165.02 853.018 L2165.49 855.848 L2165.96 858.628 L2166.43 861.357 L2166.9 864.034 L2167.37 866.652 L2167.84 869.21 L2168.31 871.706 L2168.78 874.15 L2169.25 876.547 L2169.72 878.896 L2170.19 881.192 L2170.66 883.436 L2171.14 885.647 L2171.61 887.843 L2172.08 890.041 L2172.55 892.24 L2173.02 894.431 L2173.49 896.607 L2173.96 898.75 L2174.43 900.847 L2174.9 902.893 L2175.37 904.889 L2175.84 906.836 L2176.31 908.737 L2176.78 910.598 L2177.25 912.424 L2177.72 914.236 L2178.19 916.057 L2178.66 917.9 L2179.13 919.764 L2179.6 921.632 L2180.07 923.488 L2180.54 925.319 L2181.01 927.112 L2181.48 928.852 L2181.95 930.527 L2182.42 932.128 L2182.89 933.651 L2183.36 935.103 L2183.83 936.489 L2184.3 937.82 L2184.77 939.111 L2185.24 940.366 L2185.71 941.602 L2186.18 942.83 L2186.65 944.055 L2187.12 945.287 L2187.59 946.528 L2188.06 947.771 L2188.53 949.012 L2189 950.245 L2189.47 951.469 L2189.94 952.676 L2190.41 953.857 L2190.88 955.011 L2191.35 956.142 L2191.82 957.257 L2192.29 958.355 L2192.76 959.418 L2193.23 960.437 L2193.7 961.393 L2194.17 962.27 L2194.64 963.053 L2195.11 963.734 L2195.58 964.33 L2196.05 964.859 L2196.53 965.339 L2197 965.784 L2197.47 966.214 L2197.94 966.646 L2198.41 967.085 L2198.88 967.534 L2199.35 967.979 L2199.82 968.402 L2200.29 968.789 L2200.76 969.133 L2201.23 969.429 L2201.7 969.673 L2202.17 969.861 L2202.64 969.985 L2203.11 970.05 L2203.58 970.049 L2204.05 969.978 L2204.52 969.842 L2204.99 969.65 L2205.46 969.401 L2205.93 969.101 L2206.4 968.75 L2206.87 968.348 L2207.34 967.899 L2207.81 967.403 L2208.28 966.85 L2208.75 966.231 L2209.22 965.542 L2209.69 964.78 L2210.16 963.942 L2210.63 963.031 L2211.1 962.059 L2211.57 961.046 L2212.04 960.018 L2212.51 958.989 L2212.98 957.966 L2213.45 956.945 L2213.92 955.926 L2214.39 954.914 L2214.86 953.908 L2215.33 952.902 L2215.8 951.876 L2216.27 950.814 L2216.74 949.7 L2217.21 948.517 L2217.68 947.257 L2218.15 945.924 L2218.62 944.532 L2219.09 943.099 L2219.56 941.637 L2220.03 940.153 L2220.5 938.654 L2220.97 937.133 L2221.44 935.577 L2221.92 933.981 L2222.39 932.346 L2222.86 930.676 L2223.33 928.969 L2223.8 927.223 L2224.27 925.436 L2224.74 923.622 L2225.21 921.783 L2225.68 919.91 L2226.15 917.982 L2226.62 915.987 L2227.09 913.922 L2227.56 911.791 L2228.03 909.607 L2228.5 907.378 L2228.97 905.111 L2229.44 902.813 L2229.91 900.487 L2230.38 898.13 L2230.85 895.734 L2231.32 893.301 L2231.79 890.836 L2232.26 888.347 L2232.73 885.84 L2233.2 883.324 L2233.67 880.806 L2234.14 878.287 L2234.61 875.77 L2235.08 873.263 L2235.55 870.751 L2236.02 868.23 L2236.49 865.681 L2236.96 863.091 L2237.43 860.446 L2237.9 857.743 L2238.37 854.988 L2238.84 852.196 L2239.31 849.376 L2239.78 846.521 L2240.25 843.634 L2240.72 840.702 L2241.19 837.719 L2241.66 834.685 L2242.13 831.606 L2242.6 828.491 L2243.07 825.339 L2243.54 822.158 L2244.01 818.947 L2244.48 815.706 L2244.95 812.438 L2245.42 809.138 L2245.89 805.807 L2246.36 802.447 L2246.84 799.062 L2247.31 795.65 L2247.78 792.212 L2248.25 788.751 L2248.72 785.266 L2249.19 781.76 L2249.66 778.239 L2250.13 774.712 L2250.6 771.187 L2251.07 767.664 L2251.54 764.152 L2252.01 760.655 L2252.48 757.175 L2252.95 753.716 L2253.42 750.276 L2253.89 746.834 L2254.36 743.374 L2254.83 739.881 L2255.3 736.351 L2255.77 732.788 L2256.24 729.204 L2256.71 725.61 L2257.18 722.026 L2257.65 718.459 L2258.12 714.923 L2258.59 711.423 L2259.06 707.962 L2259.53 704.542 L2260 701.162 L2260.47 697.809 L2260.94 694.472 L2261.41 691.149 L2261.88 687.831 L2262.35 684.519 L2262.82 681.207 L2263.29 677.881 L2263.76 674.517 L2264.23 671.094 L2264.7 667.613 L2265.17 664.083 L2265.64 660.519 L2266.11 656.943 L2266.58 653.368 L2267.05 649.79 L2267.52 646.207 L2267.99 642.624 L2268.46 639.045 L2268.93 635.47 L2269.4 631.898 L2269.87 628.336 L2270.34 624.795 L2270.81 621.284 L2271.28 617.811 L2271.75 614.383 L2272.23 611 L2272.7 607.656 L2273.17 604.336 L2273.64 601.029 L2274.11 597.723 L2274.58 594.411 L2275.05 591.093 L2275.52 587.773 L2275.99 584.451 L2276.46 581.135 L2276.93 577.836 L2277.4 574.566 L2277.87 571.337 L2278.34 568.153 L2278.81 565.007 L2279.28 561.889 L2279.75 558.789 L2280.22 555.699 L2280.69 552.613 L2281.16 549.523 L2281.63 546.422 L2282.1 543.31 L2282.57 540.195 L2283.04 537.094 L2283.51 534.023 L2283.98 530.993 L2284.45 528.012 L2284.92 525.077 L2285.39 522.181 L2285.86 519.317 L2286.33 516.469 L2286.8 513.623 L2287.27 510.772 L2287.74 507.92 L2288.21 505.078 L2288.68 502.254 L2289.15 499.461 L2289.62 496.697 L2290.09 493.958 L2290.56 491.247 L2291.03 488.556 L2291.5 485.874 L2291.97 483.197 L2292.44 480.525 L2292.91 477.857 L2293.38 475.194 L2293.85 472.548 L2294.32 469.94 L2294.79 467.375 L2295.26 464.855 L2295.73 462.373 L2296.2 459.928 L2296.67 457.516 L2297.15 455.122 L2297.62 452.739 L2298.09 450.362 L2298.56 448 L2299.03 445.659 L2299.5 443.341 L2299.97 441.054 L2300.44 438.794 L2300.91 436.565 L2301.38 434.368 L2301.85 432.215 L2302.32 430.11 L2302.79 428.041 L2303.26 425.998 L2303.73 423.975 L2304.2 421.964 L2304.67 419.961 L2305.14 417.967 L2305.61 415.991 L2306.08 414.044 L2306.55 412.13 L2307.02 410.252 L2307.49 408.41 L2307.96 406.606 L2308.43 404.839 L2308.9 403.108 L2309.37 401.415 L2309.84 399.756 L2310.31 398.136 L2310.78 396.56 L2311.25 395.038 L2311.72 393.581 L2312.19 392.192 L2312.66 390.866 L2313.13 389.589 L2313.6 388.364 L2314.07 387.194 L2314.54 386.078 L2315.01 385.01 L2315.48 383.982 L2315.95 382.994 L2316.42 382.05 L2316.89 381.163 L2317.36 380.341 L2317.83 379.585 L2318.3 378.896 L2318.77 378.268 L2319.24 377.705 L2319.71 377.208 L2320.18 376.762 L2320.65 376.341 L2321.12 375.931 L2321.59 375.522 L2322.06 375.116 L2322.54 374.719 L2323.01 374.338 L2323.48 373.98 L2323.95 373.657 L2324.42 373.379 L2324.89 373.149 L2325.36 372.97 L2325.83 372.841 L2326.3 372.753 L2326.77 372.691 L2327.24 372.656 L2327.71 372.653 L2328.18 372.7 L2328.65 372.804 L2329.12 372.964 L2329.59 373.179 L2330.06 373.434 L2330.53 373.718 L2331 374.013 L2331.47 374.308 L2331.94 374.605 L2332.41 374.901 L2332.88 375.195 L2333.35 375.494 L2333.82 375.802 L2334.29 376.127 L2334.76 376.473 L2335.23 376.846 L2335.7 377.254 L2336.17 377.705 L2336.64 378.207 L2337.11 378.766 L2337.58 379.382 L2338.05 380.046 L2338.52 380.747 L2338.99 381.477 L2339.46 382.235 L2339.93 383.027 L2340.4 383.865 L2340.87 384.759 L2341.34 385.71 L2341.81 386.72 L2342.28 387.782 L2342.75 388.888 L2343.22 390.034 L2343.69 391.204 L2344.16 392.393 L2344.63 393.596 L2345.1 394.815 L2345.57 396.041 L2346.04 397.279 L2346.51 398.54 L2346.98 399.844 L2347.46 401.209 L2347.93 402.645 L2348.4 404.149 L2348.87 405.707 L2349.34 407.311 L2349.81 408.947 L2350.28 410.601 L2350.75 412.27 L2351.22 413.957 L2351.69 415.659 L2352.16 417.384 L2352.63 419.137 L2353.1 420.923 L2353.57 422.746 L2354.04 424.6 L2354.51 426.484 L2354.98 428.387 L2355.45 430.302 L2355.92 432.224 L2356.39 434.164 L2356.86 436.129 L2357.33 438.126 L2357.8 440.156 L2358.27 442.216 L2358.74 444.308 L2359.21 446.434 L2359.68 448.605 L2360.15 450.829 L2360.62 453.103 L2361.09 455.417 L2361.56 457.755 L2362.03 460.092 L2362.5 462.421 L2362.97 464.752 L2363.44 467.095 L2363.91 469.458 L2364.38 471.844 L2364.85 474.257 L2365.32 476.699 L2365.79 479.172 L2366.26 481.674 L2366.73 484.198 L2367.2 486.737 L2367.67 489.291 L2368.14 491.863 L2368.61 494.457 L2369.08 497.087 L2369.55 499.761 L2370.02 502.482 L2370.49 505.243 L2370.96 508.036 L2371.43 510.853 L2371.9 513.696 L2372.37 516.562 L2372.85 519.448 L2373.32 522.368 L2373.79 525.331 L2374.26 528.343 L2374.73 531.409 L2375.2 534.529 L2375.67 537.678 L2376.14 540.838 L2376.61 543.994 L2377.08 547.141 L2377.55 550.275 L2378.02 553.393 L2378.49 556.493 L2378.96 559.58 L2379.43 562.654 L2379.9 565.726 L2380.37 568.809 L2380.84 571.919 L2381.31 575.069 L2381.78 578.27 L2382.25 581.519 L2382.72 584.799 L2383.19 588.097 L2383.66 591.408 L2384.13 594.724 L2384.6 598.04 L2385.07 601.362 L2385.54 604.698 L2386.01 608.051 L2386.48 611.418 L2386.95 614.798 L2387.42 618.19 L2387.89 621.597 L2388.36 625.016 L2388.83 628.453 L2389.3 631.912 L2389.77 635.402 L2390.24 638.925 L2390.71 642.48 L2391.18 646.056 L2391.65 649.647 L2392.12 653.246 L2392.59 656.844 L2393.06 660.432 L2393.53 664.002 L2394 667.554 L2394.47 671.084 L2394.94 674.586 L2395.41 678.069 L2395.88 681.528 L2396.35 684.959 L2396.82 688.36 L2397.29 691.735 L2397.76 695.081 L2398.24 698.402 L2398.71 701.705 L2399.18 704.999 L2399.65 708.297 L2400.12 711.611 L2400.59 714.946 L2401.06 718.3 L2401.53 721.673 L2402 725.063 L2402.47 728.455 L2402.94 731.837 L2403.41 735.205 L2403.88 738.554 L2404.35 741.889 L2404.82 745.218 L2405.29 748.55 L2405.76 751.892 L2406.23 755.249 L2406.7 758.629 L2407.17 762.039 L2407.64 765.483 L2408.11 768.963 L2408.58 772.478 L2409.05 776.008 L2409.52 779.536 L2409.99 783.038 L2410.46 786.495 L2410.93 789.885 L2411.4 793.193 L2411.87 796.408 L2412.34 799.531 L2412.81 802.567 L2413.28 805.528 L2413.75 808.421 L2414.22 811.254 L2414.69 814.032 L2415.16 816.774 L2415.63 819.499 L2416.1 822.227 L2416.57 824.973 L2417.04 827.752 L2417.51 830.571 L2417.98 833.428 L2418.45 836.309 L2418.92 839.198 L2419.39 842.075 L2419.86 844.922 L2420.33 847.728 L2420.8 850.497 L2421.27 853.233 L2421.74 855.944 L2422.21 858.626 L2422.68 861.272 L2423.16 863.868 L2423.63 866.412 L2424.1 868.903 L2424.57 871.358 L2425.04 873.794 L2425.51 876.228 L2425.98 878.662 L2426.45 881.083 L2426.92 883.487 L2427.39 885.87 L2427.86 888.229 L2428.33 890.557 L2428.8 892.849 L2429.27 895.101 L2429.74 897.308 L2430.21 899.461 L2430.68 901.552 L2431.15 903.58 L2431.62 905.542 L2432.09 907.439 L2432.56 909.27 L2433.03 911.028 L2433.5 912.715 L2433.97 914.329 L2434.44 915.882 L2434.91 917.399 L2435.38 918.902 L2435.85 920.411 L2436.32 921.927 L2436.79 923.445 L2437.26 924.96 L2437.73 926.466 L2438.2 927.954 L2438.67 929.42 L2439.14 930.863 L2439.61 932.281 L2440.08 933.678 L2440.55 935.053 L2441.02 936.407 L2441.49 937.738 L2441.96 939.035 L2442.43 940.298 L2442.9 941.521 L2443.37 942.694 L2443.84 943.817 L2444.31 944.893 L2444.78 945.932 L2445.25 946.946 L2445.72 947.94 L2446.19 948.909 L2446.66 949.855 L2447.13 950.773 L2447.6 951.658 L2448.07 952.514 L2448.55 953.352 L2449.02 954.178 L2449.49 954.997 L2449.96 955.8 L2450.43 956.584 L2450.9 957.343 L2451.37 958.083 L2451.84 958.805 L2452.31 959.5 L2452.78 960.157 L2453.25 960.768 L2453.72 961.328 L2454.19 961.837 L2454.66 962.302 L2455.13 962.732 L2455.6 963.138 L2456.07 963.527 L2456.54 963.897 L2457.01 964.239 L2457.48 964.534 L2457.95 964.776 L2458.42 964.963 L2458.89 965.091 L2459.36 965.161 L2459.83 965.18 L2460.3 965.165 L2460.77 965.129 L2461.24 965.083 L2461.71 965.028 L2462.18 964.969 L2462.65 964.904 L2463.12 964.834 L2463.59 964.758 L2464.06 964.666 L2464.53 964.539 L2465 964.355 L2465.47 964.093 L2465.94 963.731 L2466.41 963.264 L2466.88 962.71 L2467.35 962.091 L2467.82 961.432 L2468.29 960.746 L2468.76 960.044 L2469.23 959.335 L2469.7 958.622 L2470.17 957.908 L2470.64 957.198 L2471.11 956.49 L2471.58 955.784 L2472.05 955.085 L2472.52 954.39 L2472.99 953.697 L2473.47 953.004 L2473.94 952.311 L2474.41 951.604 L2474.88 950.877 L2475.35 950.123 L2475.82 949.343 L2476.29 948.535 L2476.76 947.708 L2477.23 946.864 L2477.7 945.992 L2478.17 945.074 L2478.64 944.095 L2479.11 943.033 L2479.58 941.882 L2480.05 940.647 L2480.52 939.336 L2480.99 937.96 L2481.46 936.543 L2481.93 935.098 L2482.4 933.635 L2482.87 932.169 L2483.34 930.709 L2483.81 929.264 L2484.28 927.829 L2484.75 926.397 L2485.22 924.96 L2485.69 923.507 L2486.16 922.035 L2486.63 920.532 L2487.1 918.979 L2487.57 917.373 L2488.04 915.723 L2488.51 914.033 L2488.98 912.319 L2489.45 910.584 L2489.92 908.833 L2490.39 907.075 L2490.86 905.305 L2491.33 903.518 L2491.8 901.708 L2492.27 899.865 L2492.74 897.984 L2493.21 896.053 L2493.68 894.069 L2494.15 892.035 L2494.62 889.965 L2495.09 887.851 L2495.56 885.689 L2496.03 883.484 L2496.5 881.244 L2496.97 878.979 L2497.44 876.69 L2497.91 874.369 L2498.38 872.014 L2498.86 869.623 L2499.33 867.21 L2499.8 864.775 L2500.27 862.308 L2500.74 859.804 L2501.21 857.265 L2501.68 854.692 L2502.15 852.077 L2502.62 849.408 L2503.09 846.669 L2503.56 843.861 L2504.03 840.983 L2504.5 838.037 L2504.97 835.029 L2505.44 831.96 L2505.91 828.839 L2506.38 825.682 L2506.85 822.506 L2507.32 819.319 L2507.79 816.134 L2508.26 812.958 L2508.73 809.795 L2509.2 806.641 L2509.67 803.496 L2510.14 800.359 L2510.61 797.224 L2511.08 794.081 L2511.55 790.92 L2512.02 787.734 L2512.49 784.519 L2512.96 781.268 L2513.43 777.979 L2513.9 774.636 L2514.37 771.232 L2514.84 767.761 L2515.31 764.221 L2515.78 760.611 L2516.25 756.93 L2516.72 753.181 L2517.19 749.37 L2517.66 745.512 L2518.13 741.618 L2518.6 737.707 L2519.07 733.791 L2519.54 729.88 L2520.01 725.977 L2520.48 722.085 L2520.95 718.208 L2521.42 714.345 L2521.89 710.495 L2522.36 706.658 L2522.83 702.833 L2523.3 699.013 L2523.78 695.201 L2524.25 691.392 L2524.72 687.594 L2525.19 683.812 L2525.66 680.041 L2526.13 676.271 L2526.6 672.495 L2527.07 668.703 L2527.54 664.884 L2528.01 661.039 L2528.48 657.182 L2528.95 653.318 L2529.42 649.46 L2529.89 645.622 L2530.36 641.808 L2530.83 638.023 L2531.3 634.266 L2531.77 630.533 L2532.24 626.815 L2532.71 623.109 L2533.18 619.404 L2533.65 615.697 L2534.12 611.992 L2534.59 608.296 L2535.06 604.619 L2535.53 600.976 L2536 597.37 L2536.47 593.798 L2536.94 590.255 L2537.41 586.728 L2537.88 583.207 L2538.35 579.684 L2538.82 576.154 L2539.29 572.613 L2539.76 569.067 L2540.23 565.511 L2540.7 561.933 L2541.17 558.313 L2541.64 554.656 L2542.11 550.962 L2542.58 547.251 L2543.05 543.543 L2543.52 539.851 L2543.99 536.175 L2544.46 532.523 L2544.93 528.896 L2545.4 525.288 L2545.87 521.699 L2546.34 518.133 L2546.81 514.609 L2547.28 511.138 L2547.75 507.726 L2548.22 504.365 L2548.69 501.039 L2549.17 497.729 L2549.64 494.421 L2550.11 491.103 L2550.58 487.77 L2551.05 484.426 L2551.52 481.085 L2551.99 477.755 L2552.46 474.43 L2552.93 471.09 L2553.4 467.72 L2553.87 464.304 L2554.34 460.835 L2554.81 457.317 L2555.28 453.768 L2555.75 450.21 L2556.22 446.659 L2556.69 443.137 L2557.16 439.668 L2557.63 436.258 L2558.1 432.898 L2558.57 429.585 L2559.04 426.307 L2559.51 423.054 L2559.98 419.821 L2560.45 416.614 L2560.92 413.443 L2561.39 410.322 L2561.86 407.254 L2562.33 404.23 L2562.8 401.239 L2563.27 398.261 L2563.74 395.284 L2564.21 392.302 L2564.68 389.317 L2565.15 386.323 L2565.62 383.315 L2566.09 380.295 L2566.56 377.276 L2567.03 374.273 L2567.5 371.299 L2567.97 368.365 L2568.44 365.482 L2568.91 362.651 L2569.38 359.874 L2569.85 357.147 L2570.32 354.45 L2570.79 351.774 L2571.26 349.112 L2571.73 346.458 L2572.2 343.816 L2572.67 341.197 L2573.14 338.603 L2573.61 336.046 L2574.08 333.53 L2574.56 331.067 L2575.03 328.668 L2575.5 326.33 L2575.97 324.051 L2576.44 321.827 L2576.91 319.66 L2577.38 317.545 L2577.85 315.479 L2578.32 313.459 L2578.79 311.482 L2579.26 309.548 L2579.73 307.656 L2580.2 305.806 L2580.67 303.996 L2581.14 302.236 L2581.61 300.528 L2582.08 298.873 L2582.55 297.27 L2583.02 295.719 L2583.49 294.224 L2583.96 292.785 L2584.43 291.4 L2584.9 290.082 L2585.37 288.841 L2585.84 287.684 L2586.31 286.608 L2586.78 285.606 L2587.25 284.659 L2587.72 283.745 L2588.19 282.85 L2588.66 281.971 L2589.13 281.107 L2589.6 280.26 L2590.07 279.428 L2590.54 278.618 L2591.01 277.836 L2591.48 277.092 L2591.95 276.398 L2592.42 275.771 L2592.89 275.229 L2593.36 274.791 L2593.83 274.468 L2594.3 274.267 L2594.77 274.193 L2595.24 274.235 L2595.71 274.369 L2596.18 274.571 L2596.65 274.831 L2597.12 275.132 L2597.59 275.46 L2598.06 275.794 L2598.53 276.123 L2599 276.445 L2599.48 276.772 L2599.95 277.119 L2600.42 277.511 L2600.89 277.97 L2601.36 278.519 L2601.83 279.162 L2602.3 279.889 L2602.77 280.691 L2603.24 281.559 L2603.71 282.488 L2604.18 283.475 L2604.65 284.512 L2605.12 285.591 L2605.59 286.714 L2606.06 287.889 L2606.53 289.126 L2607 290.441 L2607.47 291.846 L2607.94 293.341 L2608.41 294.921 L2608.88 296.577 L2609.35 298.302 L2609.82 300.076 L2610.29 301.886 L2610.76 303.73 L2611.23 305.61 L2611.7 307.536 L2612.17 309.515 L2612.64 311.557 L2613.11 313.664 L2613.58 315.826 L2614.05 318.029 L2614.52 320.268 L2614.99 322.544 L2615.46 324.859 L2615.93 327.21 L2616.4 329.587 L2616.87 331.972 L2617.34 334.352 L2617.81 336.726 L2618.28 339.101 L2618.75 341.489 L2619.22 343.906 L2619.69 346.363 L2620.16 348.881 L2620.63 351.469 L2621.1 354.14 L2621.57 356.888 L2622.04 359.702 L2622.51 362.568 L2622.98 365.473 L2623.45 368.408 L2623.92 371.363 L2624.39 374.324 L2624.87 377.282 L2625.34 380.237 L2625.81 383.188 L2626.28 386.133 L2626.75 389.067 L2627.22 391.994 L2627.69 394.924 L2628.16 397.873 L2628.63 400.858 L2629.1 403.889 L2629.57 406.978 L2630.04 410.133 L2630.51 413.353 L2630.98 416.629 L2631.45 419.946 L2631.92 423.277 L2632.39 426.597 L2632.86 429.879 L2633.33 433.109 L2633.8 436.284 L2634.27 439.417 L2634.74 442.532 L2635.21 445.649 L2635.68 448.788 L2636.15 451.968 L2636.62 455.205 L2637.09 458.501 L2637.56 461.854 L2638.03 465.256 L2638.5 468.705 L2638.97 472.196 L2639.44 475.729 L2639.91 479.308 L2640.38 482.943 L2640.85 486.624 L2641.32 490.334 L2641.79 494.056 L2642.26 497.78 L2642.73 501.494 L2643.2 505.193 L2643.67 508.874 L2644.14 512.542 L2644.61 516.199 L2645.08 519.85 L2645.55 523.501 L2646.02 527.159 L2646.49 530.831 L2646.96 534.521 L2647.43 538.233 L2647.9 541.962 L2648.37 545.696 L2648.84 549.428 L2649.31 553.149 L2649.79 556.846 L2650.26 560.504 L2650.73 564.119 L2651.2 567.692 L2651.67 571.229 L2652.14 574.745 L2652.61 578.255 L2653.08 581.767 L2653.55 585.289 L2654.02 588.822 L2654.49 592.365 L2654.96 595.923 L2655.43 599.49 L2655.9 603.067 L2656.37 606.642 L2656.84 610.195 L2657.31 613.706 L2657.78 617.143 L2658.25 620.494 L2658.72 623.769 L2659.19 626.976 L2659.66 630.127 L2660.13 633.243 L2660.6 636.335 L2661.07 639.419 L2661.54 642.513 L2662.01 645.624 L2662.48 648.762 L2662.95 651.923 L2663.42 655.092 L2663.89 658.255 L2664.36 661.395 L2664.83 664.505 L2665.3 667.575 L2665.77 670.597 L2666.24 673.565 L2666.71 676.479 L2667.18 679.341 L2667.65 682.148 L2668.12 684.902 L2668.59 687.607 L2669.06 690.265 L2669.53 692.876 L2670 695.442 L2670.47 697.959 L2670.94 700.437 L2671.41 702.877 L2671.88 705.279 L2672.35 707.642 L2672.82 709.961 L2673.29 712.237 L2673.76 714.473 L2674.23 716.678 L2674.7 718.862 L2675.18 721.025 L2675.65 723.16 L2676.12 725.249 L2676.59 727.275 L2677.06 729.211 L2677.53 731.042 L2678 732.761 L2678.47 734.369 L2678.94 735.874 L2679.41 737.285 L2679.88 738.599 L2680.35 739.802 L2680.82 740.877 L2681.29 741.8 L2681.76 742.548 L2682.23 779.514 L2682.23 650.226 L2681.76 632.114 L2681.29 631.617 L2680.82 631.02 L2680.35 630.341 L2679.88 629.601 L2679.41 628.815 L2678.94 627.993 L2678.47 627.134 L2678 626.228 L2677.53 625.262 L2677.06 624.23 L2676.59 623.137 L2676.12 621.992 L2675.65 620.818 L2675.18 619.626 L2674.7 618.429 L2674.23 617.23 L2673.76 616.024 L2673.29 614.794 L2672.82 613.527 L2672.35 612.217 L2671.88 610.857 L2671.41 609.448 L2670.94 607.986 L2670.47 606.468 L2670 604.89 L2669.53 603.238 L2669.06 601.514 L2668.59 599.712 L2668.12 597.831 L2667.65 595.866 L2667.18 593.813 L2666.71 591.667 L2666.24 589.432 L2665.77 587.103 L2665.3 584.682 L2664.83 582.175 L2664.36 579.589 L2663.89 576.935 L2663.42 574.223 L2662.95 571.467 L2662.48 568.688 L2662.01 565.899 L2661.54 563.106 L2661.07 560.302 L2660.6 557.482 L2660.13 554.63 L2659.66 551.731 L2659.19 548.776 L2658.72 545.748 L2658.25 542.635 L2657.78 539.43 L2657.31 536.125 L2656.84 532.735 L2656.37 529.291 L2655.9 525.815 L2655.43 522.327 L2654.96 518.839 L2654.49 515.351 L2654.02 511.868 L2653.55 508.385 L2653.08 504.902 L2652.61 501.418 L2652.14 497.924 L2651.67 494.409 L2651.2 490.86 L2650.73 487.259 L2650.26 483.599 L2649.79 479.878 L2649.31 476.098 L2648.84 472.272 L2648.37 468.415 L2647.9 464.533 L2647.43 460.632 L2646.96 456.723 L2646.49 452.812 L2646.02 448.893 L2645.55 444.963 L2645.08 441.016 L2644.61 437.043 L2644.14 433.04 L2643.67 429.001 L2643.2 424.927 L2642.73 420.813 L2642.26 416.662 L2641.79 412.482 L2641.32 408.287 L2640.85 404.088 L2640.38 399.902 L2639.91 395.751 L2639.44 391.644 L2638.97 387.575 L2638.5 383.542 L2638.03 379.546 L2637.56 375.595 L2637.09 371.693 L2636.62 367.85 L2636.15 364.07 L2635.68 360.353 L2635.21 356.686 L2634.74 353.051 L2634.27 349.43 L2633.8 345.805 L2633.33 342.155 L2632.86 338.467 L2632.39 334.745 L2631.92 331.005 L2631.45 327.277 L2630.98 323.586 L2630.51 319.96 L2630.04 316.415 L2629.57 312.96 L2629.1 309.597 L2628.63 306.321 L2628.16 303.117 L2627.69 299.976 L2627.22 296.882 L2626.75 293.82 L2626.28 290.777 L2625.81 287.751 L2625.34 284.746 L2624.87 281.764 L2624.39 278.806 L2623.92 275.869 L2623.45 272.963 L2622.98 270.099 L2622.51 267.289 L2622.04 264.541 L2621.57 261.863 L2621.1 259.271 L2620.63 256.776 L2620.16 254.379 L2619.69 252.068 L2619.22 249.831 L2618.75 247.649 L2618.28 245.506 L2617.81 243.386 L2617.34 241.275 L2616.87 239.167 L2616.4 237.059 L2615.93 234.962 L2615.46 232.896 L2614.99 230.866 L2614.52 228.876 L2614.05 226.924 L2613.58 225.005 L2613.11 223.124 L2612.64 221.295 L2612.17 219.526 L2611.7 217.813 L2611.23 216.148 L2610.76 214.521 L2610.29 212.923 L2609.82 211.349 L2609.35 209.803 L2608.88 208.298 L2608.41 206.851 L2607.94 205.47 L2607.47 204.164 L2607 202.939 L2606.53 201.792 L2606.06 200.713 L2605.59 199.686 L2605.12 198.701 L2604.65 197.751 L2604.18 196.832 L2603.71 195.953 L2603.24 195.124 L2602.77 194.346 L2602.3 193.626 L2601.83 192.972 L2601.36 192.395 L2600.89 191.904 L2600.42 191.495 L2599.95 191.146 L2599.48 190.835 L2599 190.539 L2598.53 190.24 L2598.06 189.93 L2597.59 189.608 L2597.12 189.289 L2596.65 188.99 L2596.18 188.728 L2595.71 188.519 L2595.24 188.374 L2594.77 188.316 L2594.3 188.371 L2593.83 188.549 L2593.36 188.845 L2592.89 189.252 L2592.42 189.759 L2591.95 190.348 L2591.48 191.001 L2591.01 191.7 L2590.54 192.433 L2590.07 193.192 L2589.6 193.969 L2589.13 194.758 L2588.66 195.56 L2588.19 196.374 L2587.72 197.202 L2587.25 198.046 L2586.78 198.919 L2586.31 199.845 L2585.84 200.842 L2585.37 201.918 L2584.9 203.076 L2584.43 204.308 L2583.96 205.604 L2583.49 206.954 L2583.02 208.358 L2582.55 209.816 L2582.08 211.325 L2581.61 212.885 L2581.14 214.496 L2580.67 216.16 L2580.2 217.873 L2579.73 219.627 L2579.26 221.422 L2578.79 223.26 L2578.32 225.142 L2577.85 227.068 L2577.38 229.042 L2576.91 231.066 L2576.44 233.145 L2575.97 235.282 L2575.5 237.477 L2575.03 239.734 L2574.56 242.055 L2574.08 244.443 L2573.61 246.887 L2573.14 249.376 L2572.67 251.905 L2572.2 254.464 L2571.73 257.05 L2571.26 259.651 L2570.79 262.265 L2570.32 264.897 L2569.85 267.554 L2569.38 270.246 L2568.91 272.992 L2568.44 275.797 L2567.97 278.659 L2567.5 281.575 L2567.03 284.536 L2566.56 287.53 L2566.09 290.544 L2565.62 293.564 L2565.15 296.575 L2564.68 299.575 L2564.21 302.571 L2563.74 305.566 L2563.27 308.56 L2562.8 311.558 L2562.33 314.572 L2561.86 317.621 L2561.39 320.718 L2560.92 323.869 L2560.45 327.072 L2559.98 330.313 L2559.51 333.582 L2559.04 336.872 L2558.57 340.189 L2558.1 343.541 L2557.63 346.941 L2557.16 350.393 L2556.69 353.903 L2556.22 357.466 L2555.75 361.059 L2555.28 364.658 L2554.81 368.249 L2554.34 371.808 L2553.87 375.318 L2553.4 378.774 L2552.93 382.184 L2552.46 385.562 L2551.99 388.925 L2551.52 392.292 L2551.05 395.669 L2550.58 399.048 L2550.11 402.414 L2549.64 405.764 L2549.17 409.104 L2548.69 412.443 L2548.22 415.798 L2547.75 419.187 L2547.28 422.625 L2546.81 426.12 L2546.34 429.669 L2545.87 433.257 L2545.4 436.868 L2544.93 440.495 L2544.46 444.141 L2543.99 447.81 L2543.52 451.503 L2543.05 455.21 L2542.58 458.931 L2542.11 462.656 L2541.64 466.361 L2541.17 470.029 L2540.7 473.658 L2540.23 477.246 L2539.76 480.809 L2539.29 484.362 L2538.82 487.907 L2538.35 491.442 L2537.88 494.969 L2537.41 498.492 L2536.94 502.021 L2536.47 505.564 L2536 509.135 L2535.53 512.741 L2535.06 516.381 L2534.59 520.055 L2534.12 523.746 L2533.65 527.446 L2533.18 531.147 L2532.71 534.845 L2532.24 538.543 L2531.77 542.251 L2531.3 545.974 L2530.83 549.721 L2530.36 553.494 L2529.89 557.295 L2529.42 561.12 L2528.95 564.963 L2528.48 568.812 L2528.01 572.654 L2527.54 576.482 L2527.07 580.283 L2526.6 584.058 L2526.13 587.815 L2525.66 591.566 L2525.19 595.317 L2524.72 599.08 L2524.25 602.858 L2523.78 606.645 L2523.3 610.437 L2522.83 614.235 L2522.36 618.039 L2521.89 621.854 L2521.42 625.683 L2520.95 629.524 L2520.48 633.38 L2520.01 637.251 L2519.54 641.134 L2519.07 645.024 L2518.6 648.919 L2518.13 652.811 L2517.66 656.685 L2517.19 660.525 L2516.72 664.318 L2516.25 668.049 L2515.78 671.714 L2515.31 675.308 L2514.84 678.833 L2514.37 682.29 L2513.9 685.681 L2513.43 689.011 L2512.96 692.29 L2512.49 695.53 L2512.02 698.735 L2511.55 701.913 L2511.08 705.067 L2510.61 708.204 L2510.14 711.334 L2509.67 714.466 L2509.2 717.608 L2508.73 720.759 L2508.26 723.921 L2507.79 727.097 L2507.32 730.282 L2506.85 733.471 L2506.38 736.649 L2505.91 739.809 L2505.44 742.934 L2504.97 746.009 L2504.5 749.022 L2504.03 751.974 L2503.56 754.858 L2503.09 757.674 L2502.62 760.421 L2502.15 763.099 L2501.68 765.723 L2501.21 768.305 L2500.74 770.854 L2500.27 773.368 L2499.8 775.845 L2499.33 778.291 L2498.86 780.714 L2498.38 783.115 L2497.91 785.482 L2497.44 787.813 L2496.97 790.114 L2496.5 792.39 L2496.03 794.64 L2495.56 796.856 L2495.09 799.028 L2494.62 801.153 L2494.15 803.233 L2493.68 805.277 L2493.21 807.27 L2492.74 809.211 L2492.27 811.101 L2491.8 812.953 L2491.33 814.772 L2490.86 816.566 L2490.39 818.344 L2489.92 820.11 L2489.45 821.868 L2488.98 823.61 L2488.51 825.331 L2488.04 827.027 L2487.57 828.683 L2487.1 830.294 L2486.63 831.852 L2486.16 833.36 L2485.69 834.836 L2485.22 836.293 L2484.75 837.734 L2484.28 839.169 L2483.81 840.607 L2483.34 842.055 L2482.87 843.516 L2482.4 844.985 L2481.93 846.449 L2481.46 847.895 L2480.99 849.314 L2480.52 850.691 L2480.05 852.002 L2479.58 853.238 L2479.11 854.389 L2478.64 855.45 L2478.17 856.429 L2477.7 857.345 L2477.23 858.217 L2476.76 859.059 L2476.29 859.885 L2475.82 860.692 L2475.35 861.47 L2474.88 862.222 L2474.41 862.947 L2473.94 863.651 L2473.47 864.342 L2472.99 865.032 L2472.52 865.722 L2472.05 866.414 L2471.58 867.11 L2471.11 867.813 L2470.64 868.517 L2470.17 869.224 L2469.7 869.934 L2469.23 870.643 L2468.76 871.349 L2468.29 872.046 L2467.82 872.729 L2467.35 873.384 L2466.88 873.998 L2466.41 874.548 L2465.94 875.012 L2465.47 875.369 L2465 875.627 L2464.53 875.807 L2464.06 875.93 L2463.59 876.018 L2463.12 876.09 L2462.65 876.156 L2462.18 876.217 L2461.71 876.272 L2461.24 876.323 L2460.77 876.366 L2460.3 876.397 L2459.83 876.409 L2459.36 876.387 L2458.89 876.313 L2458.42 876.182 L2457.95 875.992 L2457.48 875.747 L2457.01 875.45 L2456.54 875.105 L2456.07 874.732 L2455.6 874.341 L2455.13 873.933 L2454.66 873.5 L2454.19 873.034 L2453.72 872.524 L2453.25 871.962 L2452.78 871.349 L2452.31 870.691 L2451.84 869.995 L2451.37 869.272 L2450.9 868.532 L2450.43 867.772 L2449.96 866.988 L2449.49 866.184 L2449.02 865.365 L2448.55 864.539 L2448.07 863.701 L2447.6 862.846 L2447.13 861.962 L2446.66 861.044 L2446.19 860.098 L2445.72 859.13 L2445.25 858.137 L2444.78 857.125 L2444.31 856.086 L2443.84 855.012 L2443.37 853.89 L2442.9 852.718 L2442.43 851.497 L2441.96 850.236 L2441.49 848.941 L2441.02 847.611 L2440.55 846.258 L2440.08 844.885 L2439.61 843.49 L2439.14 842.074 L2438.67 840.633 L2438.2 839.168 L2437.73 837.682 L2437.26 836.178 L2436.79 834.664 L2436.32 833.148 L2435.85 831.633 L2435.38 830.126 L2434.91 828.625 L2434.44 827.11 L2433.97 825.558 L2433.5 823.946 L2433.03 822.26 L2432.56 820.504 L2432.09 818.674 L2431.62 816.779 L2431.15 814.818 L2430.68 812.791 L2430.21 810.701 L2429.74 808.55 L2429.27 806.344 L2428.8 804.092 L2428.33 801.802 L2427.86 799.474 L2427.39 797.117 L2426.92 794.735 L2426.45 792.331 L2425.98 789.911 L2425.51 787.478 L2425.04 785.045 L2424.57 782.609 L2424.1 780.155 L2423.63 777.663 L2423.16 775.121 L2422.68 772.525 L2422.21 769.879 L2421.74 767.197 L2421.27 764.486 L2420.8 761.75 L2420.33 758.981 L2419.86 756.175 L2419.39 753.328 L2418.92 750.451 L2418.45 747.561 L2417.98 744.68 L2417.51 741.823 L2417.04 739.004 L2416.57 736.225 L2416.1 733.478 L2415.63 730.75 L2415.16 728.025 L2414.69 725.283 L2414.22 722.503 L2413.75 719.67 L2413.28 716.776 L2412.81 713.815 L2412.34 710.778 L2411.87 707.655 L2411.4 704.439 L2410.93 701.13 L2410.46 697.739 L2409.99 694.281 L2409.52 690.778 L2409.05 687.25 L2408.58 683.718 L2408.11 680.203 L2407.64 676.722 L2407.17 673.277 L2406.7 669.867 L2406.23 666.486 L2405.76 663.128 L2405.29 659.784 L2404.82 656.452 L2404.35 653.122 L2403.88 649.786 L2403.41 646.435 L2402.94 643.067 L2402.47 639.685 L2402 636.292 L2401.53 632.901 L2401.06 629.527 L2400.59 626.173 L2400.12 622.837 L2399.65 619.522 L2399.18 616.223 L2398.71 612.929 L2398.24 609.625 L2397.76 606.303 L2397.29 602.957 L2396.82 599.581 L2396.35 596.18 L2395.88 592.749 L2395.41 589.289 L2394.94 585.806 L2394.47 582.303 L2394 578.774 L2393.53 575.221 L2393.06 571.65 L2392.59 568.063 L2392.12 564.465 L2391.65 560.865 L2391.18 557.274 L2390.71 553.698 L2390.24 550.144 L2389.77 546.621 L2389.3 543.131 L2388.83 539.672 L2388.36 536.236 L2387.89 532.816 L2387.42 529.41 L2386.95 526.018 L2386.48 522.638 L2386.01 519.271 L2385.54 515.918 L2385.07 512.583 L2384.6 509.261 L2384.13 505.945 L2383.66 502.63 L2383.19 499.32 L2382.72 496.021 L2382.25 492.742 L2381.78 489.494 L2381.31 486.293 L2380.84 483.143 L2380.37 480.034 L2379.9 476.952 L2379.43 473.88 L2378.96 470.806 L2378.49 467.72 L2378.02 464.62 L2377.55 461.502 L2377.08 458.369 L2376.61 455.222 L2376.14 452.067 L2375.67 448.908 L2375.2 445.759 L2374.73 442.639 L2374.26 439.573 L2373.79 436.561 L2373.32 433.599 L2372.85 430.68 L2372.37 427.793 L2371.9 424.928 L2371.43 422.085 L2370.96 419.269 L2370.49 416.476 L2370.02 413.715 L2369.55 410.994 L2369.08 408.32 L2368.61 405.691 L2368.14 403.096 L2367.67 400.524 L2367.2 397.971 L2366.73 395.432 L2366.26 392.908 L2365.79 390.406 L2365.32 387.933 L2364.85 385.491 L2364.38 383.078 L2363.91 380.692 L2363.44 378.33 L2362.97 375.987 L2362.5 373.656 L2362.03 371.327 L2361.56 368.99 L2361.09 366.652 L2360.62 364.337 L2360.15 362.063 L2359.68 359.84 L2359.21 357.668 L2358.74 355.542 L2358.27 353.45 L2357.8 351.39 L2357.33 349.36 L2356.86 347.363 L2356.39 345.398 L2355.92 343.458 L2355.45 341.535 L2354.98 339.621 L2354.51 337.717 L2354.04 335.833 L2353.57 333.979 L2353.1 332.156 L2352.63 330.369 L2352.16 328.617 L2351.69 326.891 L2351.22 325.189 L2350.75 323.501 L2350.28 321.832 L2349.81 320.178 L2349.34 318.542 L2348.87 316.938 L2348.4 315.38 L2347.93 313.876 L2347.46 312.44 L2346.98 311.074 L2346.51 309.77 L2346.04 308.509 L2345.57 307.271 L2345.1 306.044 L2344.63 304.826 L2344.16 303.623 L2343.69 302.434 L2343.22 301.263 L2342.75 300.117 L2342.28 299.011 L2341.81 297.949 L2341.34 296.939 L2340.87 295.987 L2340.4 295.093 L2339.93 294.255 L2339.46 293.463 L2338.99 292.705 L2338.52 291.975 L2338.05 291.274 L2337.58 290.61 L2337.11 289.993 L2336.64 289.434 L2336.17 288.933 L2335.7 288.481 L2335.23 288.073 L2334.76 287.701 L2334.29 287.354 L2333.82 287.03 L2333.35 286.721 L2332.88 286.423 L2332.41 286.129 L2331.94 285.833 L2331.47 285.536 L2331 285.24 L2330.53 284.945 L2330.06 284.662 L2329.59 284.406 L2329.12 284.192 L2328.65 284.031 L2328.18 283.927 L2327.71 283.88 L2327.24 283.883 L2326.77 283.919 L2326.3 283.98 L2325.83 284.068 L2325.36 284.198 L2324.89 284.377 L2324.42 284.607 L2323.95 284.885 L2323.48 285.208 L2323.01 285.566 L2322.54 285.947 L2322.06 286.345 L2321.59 286.75 L2321.12 287.159 L2320.65 287.57 L2320.18 287.99 L2319.71 288.437 L2319.24 288.934 L2318.77 289.497 L2318.3 290.125 L2317.83 290.814 L2317.36 291.57 L2316.89 292.393 L2316.42 293.279 L2315.95 294.223 L2315.48 295.211 L2315.01 296.239 L2314.54 297.307 L2314.07 298.424 L2313.6 299.593 L2313.13 300.819 L2312.66 302.095 L2312.19 303.422 L2311.72 304.811 L2311.25 306.268 L2310.78 307.79 L2310.31 309.366 L2309.84 310.986 L2309.37 312.645 L2308.9 314.338 L2308.43 316.069 L2307.96 317.836 L2307.49 319.64 L2307.02 321.482 L2306.55 323.36 L2306.08 325.274 L2305.61 327.221 L2305.14 329.197 L2304.67 331.191 L2304.2 333.194 L2303.73 335.206 L2303.26 337.228 L2302.79 339.271 L2302.32 341.34 L2301.85 343.445 L2301.38 345.598 L2300.91 347.795 L2300.44 350.024 L2299.97 352.284 L2299.5 354.572 L2299.03 356.889 L2298.56 359.23 L2298.09 361.592 L2297.62 363.969 L2297.15 366.352 L2296.67 368.746 L2296.2 371.158 L2295.73 373.603 L2295.26 376.085 L2294.79 378.605 L2294.32 381.17 L2293.85 383.778 L2293.38 386.424 L2292.91 389.087 L2292.44 391.755 L2291.97 394.427 L2291.5 397.104 L2291.03 399.786 L2290.56 402.477 L2290.09 405.188 L2289.62 407.926 L2289.15 410.69 L2288.68 413.483 L2288.21 416.307 L2287.74 419.15 L2287.27 422.001 L2286.8 424.852 L2286.33 427.698 L2285.86 430.546 L2285.39 433.41 L2284.92 436.306 L2284.45 439.241 L2283.98 442.222 L2283.51 445.252 L2283.04 448.323 L2282.57 451.424 L2282.1 454.539 L2281.63 457.651 L2281.16 460.752 L2280.69 463.842 L2280.22 466.928 L2279.75 470.018 L2279.28 473.118 L2278.81 476.236 L2278.34 479.382 L2277.87 482.566 L2277.4 485.795 L2276.93 489.065 L2276.46 492.364 L2275.99 495.679 L2275.52 499.001 L2275.05 502.322 L2274.58 505.639 L2274.11 508.952 L2273.64 512.258 L2273.17 515.565 L2272.7 518.885 L2272.23 522.228 L2271.75 525.612 L2271.28 529.04 L2270.81 532.513 L2270.34 536.023 L2269.87 539.565 L2269.4 543.127 L2268.93 546.699 L2268.46 550.274 L2267.99 553.852 L2267.52 557.436 L2267.05 561.019 L2266.58 564.596 L2266.11 568.172 L2265.64 571.748 L2265.17 575.312 L2264.7 578.842 L2264.23 582.323 L2263.76 585.746 L2263.29 589.11 L2262.82 592.436 L2262.35 595.748 L2261.88 599.06 L2261.41 602.378 L2260.94 605.701 L2260.47 609.038 L2260 612.391 L2259.53 615.771 L2259.06 619.191 L2258.59 622.652 L2258.12 626.152 L2257.65 629.689 L2257.18 633.255 L2256.71 636.84 L2256.24 640.433 L2255.77 644.018 L2255.3 647.58 L2254.83 651.11 L2254.36 654.603 L2253.89 658.063 L2253.42 661.505 L2252.95 664.945 L2252.48 668.404 L2252.01 671.884 L2251.54 675.381 L2251.07 678.894 L2250.6 682.416 L2250.13 685.941 L2249.66 689.468 L2249.19 692.99 L2248.72 696.495 L2248.25 699.98 L2247.78 703.442 L2247.31 706.879 L2246.84 710.291 L2246.36 713.676 L2245.89 717.036 L2245.42 720.368 L2244.95 723.667 L2244.48 726.935 L2244.01 730.177 L2243.54 733.388 L2243.07 736.568 L2242.6 739.72 L2242.13 742.836 L2241.66 745.914 L2241.19 748.948 L2240.72 751.932 L2240.25 754.863 L2239.78 757.751 L2239.31 760.605 L2238.84 763.426 L2238.37 766.217 L2237.9 768.972 L2237.43 771.675 L2236.96 774.32 L2236.49 776.91 L2236.02 779.459 L2235.55 781.98 L2235.08 784.492 L2234.61 786.999 L2234.14 789.516 L2233.67 792.035 L2233.2 794.553 L2232.73 797.069 L2232.26 799.576 L2231.79 802.065 L2231.32 804.53 L2230.85 806.963 L2230.38 809.359 L2229.91 811.716 L2229.44 814.043 L2228.97 816.34 L2228.5 818.607 L2228.03 820.836 L2227.56 823.02 L2227.09 825.151 L2226.62 827.216 L2226.15 829.211 L2225.68 831.139 L2225.21 833.012 L2224.74 834.851 L2224.27 836.665 L2223.8 838.452 L2223.33 840.198 L2222.86 841.905 L2222.39 843.575 L2221.92 845.21 L2221.44 846.806 L2220.97 848.362 L2220.5 849.883 L2220.03 851.382 L2219.56 852.866 L2219.09 854.328 L2218.62 855.761 L2218.15 857.153 L2217.68 858.486 L2217.21 859.746 L2216.74 860.929 L2216.27 862.043 L2215.8 863.105 L2215.33 864.131 L2214.86 865.137 L2214.39 866.143 L2213.92 867.156 L2213.45 868.174 L2212.98 869.195 L2212.51 870.218 L2212.04 871.247 L2211.57 872.275 L2211.1 873.288 L2210.63 874.26 L2210.16 875.171 L2209.69 876.009 L2209.22 876.771 L2208.75 877.461 L2208.28 878.079 L2207.81 878.632 L2207.34 879.128 L2206.87 879.577 L2206.4 879.979 L2205.93 880.331 L2205.46 880.63 L2204.99 880.879 L2204.52 881.071 L2204.05 881.207 L2203.58 881.278 L2203.11 881.279 L2202.64 881.214 L2202.17 881.09 L2201.7 880.902 L2201.23 880.658 L2200.76 880.362 L2200.29 880.018 L2199.82 879.631 L2199.35 879.208 L2198.88 878.763 L2198.41 878.314 L2197.94 877.875 L2197.47 877.443 L2197 877.013 L2196.53 876.568 L2196.05 876.088 L2195.58 875.559 L2195.11 874.963 L2194.64 874.282 L2194.17 873.499 L2193.7 872.622 L2193.23 871.667 L2192.76 870.648 L2192.29 869.584 L2191.82 868.486 L2191.35 867.371 L2190.88 866.24 L2190.41 865.087 L2189.94 863.905 L2189.47 862.699 L2189 861.474 L2188.53 860.241 L2188.06 859 L2187.59 857.757 L2187.12 856.516 L2186.65 855.284 L2186.18 854.059 L2185.71 852.831 L2185.24 851.596 L2184.77 850.34 L2184.3 849.05 L2183.83 847.718 L2183.36 846.332 L2182.89 844.88 L2182.42 843.357 L2181.95 841.756 L2181.48 840.081 L2181.01 838.341 L2180.54 836.548 L2180.07 834.717 L2179.6 832.862 L2179.13 830.993 L2178.66 829.13 L2178.19 827.286 L2177.72 825.465 L2177.25 823.653 L2176.78 821.827 L2176.31 819.966 L2175.84 818.065 L2175.37 816.118 L2174.9 814.123 L2174.43 812.076 L2173.96 809.979 L2173.49 807.836 L2173.02 805.661 L2172.55 803.469 L2172.08 801.27 L2171.61 799.072 L2171.14 796.876 L2170.66 794.665 L2170.19 792.421 L2169.72 790.125 L2169.25 787.776 L2168.78 785.379 L2168.31 782.935 L2167.84 780.44 L2167.37 777.881 L2166.9 775.263 L2166.43 772.586 L2165.96 769.858 L2165.49 767.078 L2165.02 764.247 L2164.55 761.366 L2164.08 758.438 L2163.61 755.464 L2163.14 752.453 L2162.67 749.407 L2162.2 746.335 L2161.73 743.238 L2161.26 740.118 L2160.79 736.974 L2160.32 733.807 L2159.85 730.625 L2159.38 727.44 L2158.91 724.261 L2158.44 721.09 L2157.97 717.931 L2157.5 714.787 L2157.03 711.652 L2156.56 708.504 L2156.09 705.328 L2155.62 702.122 L2155.15 698.888 L2154.68 695.641 L2154.21 692.384 L2153.74 689.122 L2153.27 685.858 L2152.8 682.59 L2152.33 679.319 L2151.86 676.044 L2151.39 672.755 L2150.92 669.445 L2150.45 666.113 L2149.98 662.764 L2149.51 659.406 L2149.04 656.053 L2148.57 652.718 L2148.1 649.423 L2147.63 646.179 L2147.16 642.987 L2146.69 639.839 L2146.22 636.716 L2145.74 633.594 L2145.27 630.461 L2144.8 627.309 L2144.33 624.138 L2143.86 620.959 L2143.39 617.777 L2142.92 614.6 L2142.45 611.429 L2141.98 608.263 L2141.51 605.094 L2141.04 601.911 L2140.57 598.704 L2140.1 595.473 L2139.63 592.225 L2139.16 588.957 L2138.69 585.672 L2138.22 582.372 L2137.75 579.067 L2137.28 575.753 L2136.81 572.425 L2136.34 569.081 L2135.87 565.718 L2135.4 562.326 L2134.93 558.899 L2134.46 555.433 L2133.99 551.936 L2133.52 548.419 L2133.05 544.89 L2132.58 541.359 L2132.11 537.834 L2131.64 534.333 L2131.17 530.863 L2130.7 527.426 L2130.23 524.017 L2129.76 520.637 L2129.29 517.284 L2128.82 513.954 L2128.35 510.649 L2127.88 507.365 L2127.41 504.105 L2126.94 500.87 L2126.47 497.654 L2126 494.441 L2125.53 491.214 L2125.06 487.951 L2124.59 484.632 L2124.12 481.264 L2123.65 477.862 L2123.18 474.443 L2122.71 471.028 L2122.24 467.642 L2121.77 464.294 L2121.3 460.989 L2120.83 457.724 L2120.35 454.5 L2119.88 451.314 L2119.41 448.169 L2118.94 445.069 L2118.47 442.011 L2118 438.987 L2117.53 435.982 L2117.06 432.975 L2116.59 429.953 L2116.12 426.906 L2115.65 423.836 L2115.18 420.757 L2114.71 417.684 L2114.24 414.628 L2113.77 411.598 L2113.3 408.604 L2112.83 405.657 L2112.36 402.76 L2111.89 399.898 L2111.42 397.06 L2110.95 394.225 L2110.48 391.384 L2110.01 388.535 L2109.54 385.675 L2109.07 382.812 L2108.6 379.952 L2108.13 377.099 L2107.66 374.251 L2107.19 371.406 L2106.72 368.568 L2106.25 365.748 L2105.78 362.954 L2105.31 360.192 L2104.84 357.455 L2104.37 354.724 L2103.9 351.99 L2103.43 349.252 L2102.96 346.512 L2102.49 343.778 L2102.02 341.057 L2101.55 338.361 L2101.08 335.692 L2100.61 333.064 L2100.14 330.489 L2099.67 327.976 L2099.2 325.526 L2098.73 323.12 L2098.26 320.738 L2097.79 318.361 L2097.32 315.975 L2096.85 313.574 L2096.38 311.165 L2095.91 308.766 L2095.43 306.402 L2094.96 304.092 L2094.49 301.856 L2094.02 299.701 L2093.55 297.624 L2093.08 295.613 L2092.61 293.653 L2092.14 291.739 L2091.67 289.866 L2091.2 288.032 L2090.73 286.227 L2090.26 284.44 L2089.79 282.66 L2089.32 280.883 L2088.85 279.108 L2088.38 277.339 L2087.91 275.579 L2087.44 273.83 L2086.97 272.085 L2086.5 270.342 L2086.03 268.598 L2085.56 266.864 L2085.09 265.148 L2084.62 263.451 L2084.15 261.774 L2083.68 260.12 L2083.21 258.499 L2082.74 256.925 L2082.27 255.399 L2081.8 253.93 L2081.33 252.517 L2080.86 251.154 L2080.39 249.837 L2079.92 248.568 L2079.45 247.356 L2078.98 246.219 L2078.51 245.161 L2078.04 244.18 L2077.57 243.267 L2077.1 242.418 L2076.63 241.631 L2076.16 240.9 L2075.69 240.22 L2075.22 239.594 L2074.75 239.019 L2074.28 238.489 L2073.81 237.995 L2073.34 237.527 L2072.87 237.08 L2072.4 236.646 L2071.93 236.221 L2071.46 235.804 L2070.99 235.401 L2070.52 235.021 L2070.04 234.666 L2069.57 234.342 L2069.1 234.061 L2068.63 233.828 L2068.16 233.658 L2067.69 233.562 L2067.22 233.545 L2066.75 233.613 L2066.28 233.762 L2065.81 233.983 L2065.34 234.271 L2064.87 234.617 L2064.4 235.01 L2063.93 235.442 L2063.46 235.907 L2062.99 236.398 L2062.52 236.91 L2062.05 237.447 L2061.58 238.013 L2061.11 238.607 L2060.64 239.222 L2060.17 239.857 L2059.7 240.508 L2059.23 241.181 L2058.76 241.883 L2058.29 242.617 L2057.82 243.387 L2057.35 244.189 L2056.88 245.018 L2056.41 245.877 L2055.94 246.766 L2055.47 247.697 L2055 248.672 L2054.53 249.701 L2054.06 250.793 L2053.59 251.95 L2053.12 253.175 L2052.65 254.464 L2052.18 255.798 L2051.71 257.168 L2051.24 258.562 L2050.77 259.973 L2050.3 261.397 L2049.83 262.839 L2049.36 264.306 L2048.89 265.789 L2048.42 267.284 L2047.95 268.784 L2047.48 270.285 L2047.01 271.788 L2046.54 273.297 L2046.07 274.836 L2045.6 276.419 L2045.12 278.05 L2044.65 279.725 L2044.18 281.44 L2043.71 283.187 L2043.24 284.956 L2042.77 286.75 L2042.3 288.575 L2041.83 290.436 L2041.36 292.337 L2040.89 294.283 L2040.42 296.281 L2039.95 298.334 L2039.48 300.442 L2039.01 302.598 L2038.54 304.801 L2038.07 307.05 L2037.6 309.336 L2037.13 311.646 L2036.66 313.971 L2036.19 316.299 L2035.72 318.625 L2035.25 320.957 L2034.78 323.311 L2034.31 325.706 L2033.84 328.148 L2033.37 330.629 L2032.9 333.146 L2032.43 335.702 L2031.96 338.301 L2031.49 340.949 L2031.02 343.655 L2030.55 346.417 L2030.08 349.236 L2029.61 352.105 L2029.14 355.013 L2028.67 357.95 L2028.2 360.898 L2027.73 363.847 L2027.26 366.801 L2026.79 369.766 L2026.32 372.756 L2025.85 375.775 L2025.38 378.819 L2024.91 381.88 L2024.44 384.95 L2023.97 388.032 L2023.5 391.126 L2023.03 394.231 L2022.56 397.349 L2022.09 400.479 L2021.62 403.621 L2021.15 406.772 L2020.68 409.937 L2020.21 413.117 L2019.73 416.312 L2019.26 419.518 L2018.79 422.723 L2018.32 425.914 L2017.85 429.094 L2017.38 432.263 L2016.91 435.429 L2016.44 438.592 L2015.97 441.765 L2015.5 444.963 L2015.03 448.203 L2014.56 451.495 L2014.09 454.846 L2013.62 458.258 L2013.15 461.727 L2012.68 465.236 L2012.21 468.761 L2011.74 472.274 L2011.27 475.751 L2010.8 479.173 L2010.33 482.54 L2009.86 485.859 L2009.39 489.134 L2008.92 492.374 L2008.45 495.587 L2007.98 498.777 L2007.51 501.958 L2007.04 505.147 L2006.57 508.355 L2006.1 511.585 L2005.63 514.832 L2005.16 518.094 L2004.69 521.374 L2004.22 524.683 L2003.75 528.027 L2003.28 531.414 L2002.81 534.851 L2002.34 538.335 L2001.87 541.848 L2001.4 545.373 L2000.93 548.898 L2000.46 552.412 L1999.99 555.9 L1999.52 559.349 L1999.05 562.758 L1998.58 566.123 L1998.11 569.446 L1997.64 572.734 L1997.17 576.006 L1996.7 579.276 L1996.23 582.556 L1995.76 585.86 L1995.29 589.195 L1994.82 592.558 L1994.34 595.944 L1993.87 599.34 L1993.4 602.73 L1992.93 606.103 L1992.46 609.459 L1991.99 612.796 L1991.52 616.107 L1991.05 619.388 L1990.58 622.651 L1990.11 625.908 L1989.64 629.177 L1989.17 632.477 L1988.7 635.812 L1988.23 639.191 L1987.76 642.615 L1987.29 646.091 L1986.82 649.618 L1986.35 653.196 L1985.88 656.817 L1985.41 660.465 L1984.94 664.114 L1984.47 667.738 L1984 671.317 L1983.53 674.842 L1983.06 678.307 L1982.59 681.706 L1982.12 685.043 L1981.65 688.331 L1981.18 691.58 L1980.71 694.806 L1980.24 698.028 L1979.77 701.262 L1979.3 704.523 L1978.83 707.814 L1978.36 711.14 L1977.89 714.502 L1977.42 717.898 L1976.95 721.323 L1976.48 724.761 L1976.01 728.199 L1975.54 731.62 L1975.07 735.005 L1974.6 738.331 L1974.13 741.588 L1973.66 744.777 L1973.19 747.906 L1972.72 750.991 L1972.25 754.051 L1971.78 757.091 L1971.31 760.11 L1970.84 763.102 L1970.37 766.062 L1969.9 768.993 L1969.42 771.893 L1968.95 774.762 L1968.48 777.592 L1968.01 780.378 L1967.54 783.119 L1967.07 785.818 L1966.6 788.473 L1966.13 791.09 L1965.66 793.684 L1965.19 796.263 L1964.72 798.826 L1964.25 801.37 L1963.78 803.899 L1963.31 806.411 L1962.84 808.904 L1962.37 811.372 L1961.9 813.8 L1961.43 816.172 L1960.96 818.472 L1960.49 820.692 L1960.02 822.838 L1959.55 824.917 L1959.08 826.945 L1958.61 828.929 L1958.14 830.883 L1957.67 832.817 L1957.2 834.733 L1956.73 836.627 L1956.26 838.482 L1955.79 840.287 L1955.32 842.03 L1954.85 843.704 L1954.38 845.309 L1953.91 846.849 L1953.44 848.33 L1952.97 849.753 L1952.5 851.12 L1952.03 852.442 L1951.56 853.727 L1951.09 854.987 L1950.62 856.235 L1950.15 857.491 L1949.68 858.764 L1949.21 860.054 L1948.74 861.352 L1948.27 862.641 L1947.8 863.893 L1947.33 865.084 L1946.86 866.198 L1946.39 867.223 L1945.92 868.168 L1945.45 869.044 L1944.98 869.859 L1944.51 870.618 L1944.03 871.326 L1943.56 871.986 L1943.09 872.604 L1942.62 873.182 L1942.15 873.725 L1941.68 874.229 L1941.21 874.692 L1940.74 875.119 L1940.27 875.521 L1939.8 875.902 L1939.33 876.257 L1938.86 876.576 L1938.39 876.846 L1937.92 877.06 L1937.45 877.215 L1936.98 877.302 L1936.51 877.305 L1936.04 877.23 L1935.57 877.089 L1935.1 876.904 L1934.63 876.697 L1934.16 876.483 L1933.69 876.277 L1933.22 876.079 L1932.75 875.891 L1932.28 875.708 L1931.81 875.518 L1931.34 875.305 L1930.87 875.054 L1930.4 874.75 L1929.93 874.375 L1929.46 873.926 L1928.99 873.412 L1928.52 872.847 L1928.05 872.237 L1927.58 871.591 L1927.11 870.912 L1926.64 870.196 L1926.17 869.436 L1925.7 868.634 L1925.23 867.785 L1924.76 866.893 L1924.29 865.961 L1923.82 864.994 L1923.35 863.998 L1922.88 862.975 L1922.41 861.925 L1921.94 860.841 L1921.47 859.714 L1921 858.542 L1920.53 857.324 L1920.06 856.063 L1919.59 854.763 L1919.11 853.422 L1918.64 852.048 L1918.17 850.643 L1917.7 849.213 L1917.23 847.759 L1916.76 846.287 L1916.29 844.795 L1915.82 843.283 L1915.35 841.754 L1914.88 840.219 L1914.41 838.685 L1913.94 837.154 L1913.47 835.611 L1913 834.042 L1912.53 832.439 L1912.06 830.793 L1911.59 829.094 L1911.12 827.338 L1910.65 825.522 L1910.18 823.643 L1909.71 821.708 L1909.24 819.72 L1908.77 817.69 L1908.3 815.638 L1907.83 813.582 L1907.36 811.543 L1906.89 809.523 L1906.42 807.512 L1905.95 805.495 L1905.48 803.444 L1905.01 801.33 L1904.54 799.133 L1904.07 796.844 L1903.6 794.469 L1903.13 792.024 L1902.66 789.527 L1902.19 786.998 L1901.72 784.467 L1901.25 781.961 L1900.78 779.496 L1900.31 777.076 L1899.84 774.707 L1899.37 772.378 L1898.9 770.058 L1898.43 767.721 L1897.96 765.34 L1897.49 762.888 L1897.02 760.349 L1896.55 757.724 L1896.08 755.023 L1895.61 752.265 L1895.14 749.46 L1894.67 746.618 L1894.2 743.751 L1893.72 740.866 L1893.25 737.975 L1892.78 735.08 L1892.31 732.19 L1891.84 729.308 L1891.37 726.439 L1890.9 723.586 L1890.43 720.746 L1889.96 717.91 L1889.49 715.062 L1889.02 712.179 L1888.55 709.25 L1888.08 706.256 L1887.61 703.189 L1887.14 700.045 L1886.67 696.822 L1886.2 693.523 L1885.73 690.16 L1885.26 686.758 L1884.79 683.338 L1884.32 679.917 L1883.85 676.498 L1883.38 673.089 L1882.91 669.696 L1882.44 666.331 L1881.97 663 L1881.5 659.71 L1881.03 656.467 L1880.56 653.27 L1880.09 650.104 L1879.62 646.951 L1879.15 643.8 L1878.68 640.642 L1878.21 637.474 L1877.74 634.307 L1877.27 631.151 L1876.8 628.015 L1876.33 624.904 L1875.86 621.81 L1875.39 618.719 L1874.92 615.619 L1874.45 612.499 L1873.98 609.348 L1873.51 606.16 L1873.04 602.934 L1872.57 599.676 L1872.1 596.397 L1871.63 593.099 L1871.16 589.781 L1870.69 586.441 L1870.22 583.079 L1869.75 579.689 L1869.28 576.27 L1868.8 572.831 L1868.33 569.382 L1867.86 565.936 L1867.39 562.513 L1866.92 559.126 L1866.45 555.783 L1865.98 552.483 L1865.51 549.222 L1865.04 545.989 L1864.57 542.765 L1864.1 539.536 L1863.63 536.297 L1863.16 533.037 L1862.69 529.75 L1862.22 526.434 L1861.75 523.084 L1861.28 519.698 L1860.81 516.276 L1860.34 512.822 L1859.87 509.352 L1859.4 505.882 L1858.93 502.428 L1858.46 499.001 L1857.99 495.604 L1857.52 492.24 L1857.05 488.91 L1856.58 485.617 L1856.11 482.373 L1855.64 479.181 L1855.17 476.04 L1854.7 472.945 L1854.23 469.889 L1853.76 466.865 L1853.29 463.867 L1852.82 460.893 L1852.35 457.946 L1851.88 455.026 L1851.41 452.138 L1850.94 449.29 L1850.47 446.483 L1850 443.718 L1849.53 440.982 L1849.06 438.256 L1848.59 435.528 L1848.12 432.784 L1847.65 430.017 L1847.18 427.225 L1846.71 424.405 L1846.24 421.559 L1845.77 418.693 L1845.3 415.812 L1844.83 412.923 L1844.36 410.037 L1843.89 407.156 L1843.41 404.284 L1842.94 401.426 L1842.47 398.588 L1842 395.774 L1841.53 392.996 L1841.06 390.26 L1840.59 387.572 L1840.12 384.936 L1839.65 382.351 L1839.18 379.819 L1838.71 377.333 L1838.24 374.876 L1837.77 372.433 L1837.3 369.988 L1836.83 367.537 L1836.36 365.074 L1835.89 362.597 L1835.42 360.106 L1834.95 357.612 L1834.48 355.139 L1834.01 352.708 L1833.54 350.338 L1833.07 348.033 L1832.6 345.793 L1832.13 343.611 L1831.66 341.474 L1831.19 339.371 L1830.72 337.283 L1830.25 335.187 L1829.78 333.066 L1829.31 330.902 L1828.84 328.688 L1828.37 326.431 L1827.9 324.14 L1827.43 321.842 L1826.96 319.569 L1826.49 317.356 L1826.02 315.241 L1825.55 313.246 L1825.08 311.379 L1824.61 309.645 L1824.14 308.029 L1823.67 306.503 L1823.2 305.036 L1822.73 303.598 L1822.26 302.163 L1821.79 300.715 L1821.32 299.244 L1820.85 297.751 L1820.38 296.242 L1819.91 294.731 L1819.44 293.229 L1818.97 291.754 L1818.5 290.315 L1818.02 288.92 L1817.55 287.58 L1817.08 286.297 L1816.61 285.072 L1816.14 283.893 L1815.67 282.764 L1815.2 281.683 L1814.73 280.655 L1814.26 279.678 L1813.79 278.758 L1813.32 277.892 L1812.85 277.079 L1812.38 276.314 L1811.91 275.589 L1811.44 274.9 L1810.97 274.243 L1810.5 273.621 L1810.03 273.035 L1809.56 272.488 L1809.09 271.987 L1808.62 271.536 L1808.15 271.145 L1807.68 270.813 L1807.21 270.539 L1806.74 270.319 L1806.27 270.137 L1805.8 269.986 L1805.33 269.861 L1804.86 269.759 L1804.39 269.683 L1803.92 269.646 L1803.45 269.661 L1802.98 269.732 L1802.51 269.862 L1802.04 270.052 L1801.57 270.306 L1801.1 270.616 L1800.63 270.966 L1800.16 271.346 L1799.69 271.758 L1799.22 272.201 L1798.75 272.681 L1798.28 273.206 L1797.81 273.777 L1797.34 274.399 L1796.87 275.058 L1796.4 275.734 L1795.93 276.404 L1795.46 277.057 L1794.99 277.69 L1794.52 278.31 L1794.05 278.929 L1793.58 279.561 L1793.1 280.225 L1792.63 280.94 L1792.16 281.726 L1791.69 282.595 L1791.22 283.55 L1790.75 284.59 L1790.28 285.702 L1789.81 286.862 L1789.34 288.052 L1788.87 289.262 L1788.4 290.487 L1787.93 291.738 L1787.46 293.018 L1786.99 294.319 L1786.52 295.641 L1786.05 296.986 L1785.58 298.356 L1785.11 299.748 L1784.64 301.169 L1784.17 302.616 L1783.7 304.082 L1783.23 305.57 L1782.76 307.086 L1782.29 308.638 L1781.82 310.222 L1781.35 311.835 L1780.88 313.477 L1780.41 315.147 L1779.94 316.842 L1779.47 318.556 L1779 320.284 L1778.53 322.014 L1778.06 323.742 L1777.59 325.475 L1777.12 327.221 L1776.65 328.982 L1776.18 330.762 L1775.71 332.556 L1775.24 334.361 L1774.77 336.176 L1774.3 338.007 L1773.83 339.861 L1773.36 341.738 L1772.89 343.648 L1772.42 345.592 L1771.95 347.576 L1771.48 349.61 L1771.01 351.694 L1770.54 353.832 L1770.07 356.018 L1769.6 358.244 L1769.13 360.502 L1768.66 362.789 L1768.19 365.095 L1767.71 367.418 L1767.24 369.758 L1766.77 372.123 L1766.3 374.529 L1765.83 376.983 L1765.36 379.477 L1764.89 381.99 L1764.42 384.502 L1763.95 387.008 L1763.48 389.503 L1763.01 391.987 L1762.54 394.46 L1762.07 396.919 L1761.6 399.369 L1761.13 401.807 L1760.66 404.228 L1760.19 406.628 L1759.72 409.02 L1759.25 411.413 L1758.78 413.812 L1758.31 416.222 L1757.84 418.651 L1757.37 421.099 L1756.9 423.563 L1756.43 426.038 L1755.96 428.518 L1755.49 431.001 L1755.02 433.486 L1754.55 435.964 L1754.08 438.434 L1753.61 440.897 L1753.14 443.348 L1752.67 445.795 L1752.2 448.253 L1751.73 450.726 L1751.26 453.221 L1750.79 455.732 L1750.32 458.254 L1749.85 460.78 L1749.38 463.306 L1748.91 465.836 L1748.44 468.364 L1747.97 470.895 L1747.5 473.44 L1747.03 475.999 L1746.56 478.575 L1746.09 481.163 L1745.62 483.77 L1745.15 486.395 L1744.68 489.032 L1744.21 491.667 L1743.74 494.293 L1743.27 496.905 L1742.79 499.51 L1742.32 502.116 L1741.85 504.734 L1741.38 507.375 L1740.91 510.039 L1740.44 512.724 L1739.97 515.422 L1739.5 518.118 L1739.03 520.798 L1738.56 523.463 L1738.09 526.115 L1737.62 528.761 L1737.15 531.407 L1736.68 534.057 L1736.21 536.713 L1735.74 539.378 L1735.27 542.038 L1734.8 544.687 L1734.33 547.323 L1733.86 549.944 L1733.39 552.556 L1732.92 555.164 L1732.45 557.773 L1731.98 560.391 L1731.51 563.027 L1731.04 565.675 L1730.57 568.332 L1730.1 570.991 L1729.63 573.653 L1729.16 576.32 L1728.69 578.983 L1728.22 581.633 L1727.75 584.258 L1727.28 586.848 L1726.81 589.401 L1726.34 591.92 L1725.87 594.413 L1725.4 596.893 L1724.93 599.362 L1724.46 601.829 L1723.99 604.309 L1723.52 606.816 L1723.05 609.355 L1722.58 611.926 L1722.11 614.533 L1721.64 617.17 L1721.17 619.822 L1720.7 622.485 L1720.23 625.157 L1719.76 627.84 L1719.29 630.525 L1718.82 633.209 L1718.35 635.899 L1717.88 638.593 L1717.4 641.295 L1716.93 643.996 L1716.46 646.688 L1715.99 649.361 L1715.52 652.007 L1715.05 654.612 L1714.58 657.167 L1714.11 659.668 L1713.64 662.121 L1713.17 664.53 L1712.7 666.902 L1712.23 669.246 L1711.76 671.57 L1711.29 673.882 L1710.82 676.18 L1710.35 678.471 L1709.88 680.762 L1709.41 683.06 L1708.94 685.361 L1708.47 687.661 L1708 689.949 L1707.53 692.223 L1707.06 694.485 L1706.59 696.73 L1706.12 698.953 L1705.65 701.15 L1705.18 703.32 L1704.71 705.465 L1704.24 707.585 L1703.77 709.671 L1703.3 711.711 L1702.83 713.682 L1702.36 715.576 L1701.89 717.402 L1701.42 719.181 L1700.95 720.93 L1700.48 722.66 L1700.01 724.376 L1699.54 726.092 L1699.07 727.824 L1698.6 729.578 L1698.13 731.354 L1697.66 733.15 L1697.19 734.956 L1696.72 736.761 L1696.25 738.545 L1695.78 740.293 L1695.31 741.999 L1694.84 743.655 L1694.37 745.269 L1693.9 746.845 L1693.43 748.398 L1692.96 749.936 L1692.49 751.461 L1692.01 752.965 L1691.54 754.438 L1691.07 755.874 L1690.6 757.274 L1690.13 758.636 L1689.66 759.957 L1689.19 761.23 L1688.72 762.449 L1688.25 763.613 L1687.78 764.722 L1687.31 765.79 L1686.84 766.821 L1686.37 767.82 L1685.9 768.79 L1685.43 769.738 L1684.96 770.671 L1684.49 771.587 L1684.02 772.487 L1683.55 773.365 L1683.08 774.214 L1682.61 775.028 L1682.14 775.802 L1681.67 776.532 L1681.2 777.214 L1680.73 777.848 L1680.26 778.446 L1679.79 779.023 L1679.32 779.586 L1678.85 780.137 L1678.38 780.679 L1677.91 781.208 L1677.44 781.72 L1676.97 782.209 L1676.5 782.669 L1676.03 783.094 L1675.56 783.481 L1675.09 783.836 L1674.62 784.161 L1674.15 784.469 L1673.68 784.774 L1673.21 785.074 L1672.74 785.366 L1672.27 785.639 L1671.8 785.882 L1671.33 786.084 L1670.86 786.236 L1670.39 786.329 L1669.92 786.357 L1669.45 786.315 L1668.98 786.202 L1668.51 786.029 L1668.04 785.823 L1667.57 785.607 L1667.09 785.39 L1666.62 785.171 L1666.15 784.942 L1665.68 784.69 L1665.21 784.397 L1664.74 784.042 L1664.27 783.615 L1663.8 783.103 L1663.33 782.502 L1662.86 781.819 L1662.39 781.06 L1661.92 780.233 L1661.45 779.359 L1660.98 778.458 L1660.51 777.534 L1660.04 776.591 L1659.57 775.628 L1659.1 774.645 L1658.63 773.641 L1658.16 772.621 L1657.69 771.584 L1657.22 770.531 L1656.75 769.46 L1656.28 768.372 L1655.81 767.268 L1655.34 766.153 L1654.87 765.027 L1654.4 763.883 L1653.93 762.716 L1653.46 761.517 L1652.99 760.278 L1652.52 758.992 L1652.05 757.651 L1651.58 756.249 L1651.11 754.78 L1650.64 753.235 L1650.17 751.613 L1649.7 749.914 L1649.23 748.149 L1648.76 746.329 L1648.29 744.47 L1647.82 742.59 L1647.35 740.708 L1646.88 738.829 L1646.41 736.96 L1645.94 735.114 L1645.47 733.292 L1645 731.494 L1644.53 729.713 L1644.06 727.933 L1643.59 726.138 L1643.12 724.31 L1642.65 722.442 L1642.18 720.526 L1641.7 718.558 L1641.23 716.543 L1640.76 714.498 L1640.29 712.442 L1639.82 710.385 L1639.35 708.332 L1638.88 706.291 L1638.41 704.266 L1637.94 702.256 L1637.47 700.256 L1637 698.256 L1636.53 696.235 L1636.06 694.172 L1635.59 692.046 L1635.12 689.839 L1634.65 687.548 L1634.18 685.187 L1633.71 682.775 L1633.24 680.338 L1632.77 677.903 L1632.3 675.491 L1631.83 673.117 L1631.36 670.791 L1630.89 668.531 L1630.42 666.35 L1629.95 664.245 L1629.48 662.203 L1629.01 660.206 L1628.54 658.221 L1628.07 656.217 L1627.6 654.172 L1627.13 652.072 L1626.66 649.907 L1626.19 647.672 L1625.72 645.367 L1625.25 643.001 L1624.78 640.591 L1624.31 638.154 L1623.84 635.698 L1623.37 633.24 L1622.9 630.791 L1622.43 628.364 L1621.96 625.965 L1621.49 623.599 L1621.02 621.259 L1620.55 618.936 L1620.08 616.619 L1619.61 614.3 L1619.14 611.971 L1618.67 609.624 L1618.2 607.256 L1617.73 604.868 L1617.26 602.46 L1616.78 600.039 L1616.31 597.623 L1615.84 595.223 L1615.37 592.846 L1614.9 590.493 L1614.43 588.162 L1613.96 585.854 L1613.49 583.559 L1613.02 581.272 L1612.55 578.995 L1612.08 576.729 L1611.61 574.475 L1611.14 572.234 L1610.67 570.003 L1610.2 567.781 L1609.73 565.566 L1609.26 563.354 L1608.79 561.133 L1608.32 558.896 L1607.85 556.642 L1607.38 554.379 L1606.91 552.12 L1606.44 549.878 L1605.97 547.657 L1605.5 545.469 L1605.03 543.311 L1604.56 541.177 L1604.09 539.06 L1603.62 536.938 L1603.15 534.805 L1602.68 532.659 L1602.21 530.494 L1601.74 528.321 L1601.27 526.148 L1600.8 523.989 L1600.33 521.852 L1599.86 519.743 L1599.39 517.652 L1598.92 515.565 L1598.45 513.473 L1597.98 511.374 L1597.51 509.262 L1597.04 507.131 L1596.57 504.982 L1596.1 502.813 L1595.63 500.629 L1595.16 498.428 L1594.69 496.211 L1594.22 493.975 L1593.75 491.715 L1593.28 489.431 L1592.81 487.124 L1592.34 484.802 L1591.87 482.479 L1591.39 480.173 L1590.92 477.897 L1590.45 475.669 L1589.98 473.492 L1589.51 471.36 L1589.04 469.265 L1588.57 467.193 L1588.1 465.139 L1587.63 463.1 L1587.16 461.073 L1586.69 459.07 L1586.22 457.095 L1585.75 455.145 L1585.28 453.21 L1584.81 451.283 L1584.34 449.361 L1583.87 447.44 L1583.4 445.517 L1582.93 443.59 L1582.46 441.655 L1581.99 439.702 L1581.52 437.73 L1581.05 435.754 L1580.58 433.783 L1580.11 431.828 L1579.64 429.883 L1579.17 427.944 L1578.7 426.005 L1578.23 424.062 L1577.76 422.115 L1577.29 420.174 L1576.82 418.248 L1576.35 416.346 L1575.88 414.482 L1575.41 412.668 L1574.94 410.919 L1574.47 409.247 L1574 407.666 L1573.53 406.175 L1573.06 404.763 L1572.59 403.411 L1572.12 402.107 L1571.65 400.836 L1571.18 399.584 L1570.71 398.346 L1570.24 397.113 L1569.77 395.875 L1569.3 394.626 L1568.83 393.366 L1568.36 392.103 L1567.89 390.845 L1567.42 389.606 L1566.95 388.392 L1566.47 387.203 L1566 386.039 L1565.53 384.887 L1565.06 383.741 L1564.59 382.594 L1564.12 381.439 L1563.65 380.268 L1563.18 379.083 L1562.71 377.897 L1562.24 376.728 L1561.77 375.592 L1561.3 374.499 L1560.83 373.45 L1560.36 372.446 L1559.89 371.484 L1559.42 370.567 L1558.95 369.69 L1558.48 368.845 L1558.01 368.034 L1557.54 367.252 L1557.07 366.51 L1556.6 365.812 L1556.13 365.151 L1555.66 364.524 L1555.19 363.928 L1554.72 363.348 L1554.25 362.774 L1553.78 362.198 L1553.31 361.606 L1552.84 360.999 L1552.37 360.371 L1551.9 359.726 L1551.43 359.077 L1550.96 358.437 L1550.49 357.821 L1550.02 357.239 L1549.55 356.702 L1549.08 356.219 L1548.61 355.804 L1548.14 355.467 L1547.67 355.226 L1547.2 355.08 L1546.73 355.02 L1546.26 355.034 L1545.79 355.103 L1545.32 355.206 L1544.85 355.322 L1544.38 355.442 L1543.91 355.55 L1543.44 355.633 L1542.97 355.683 L1542.5 355.696 L1542.03 355.669 L1541.56 355.607 L1541.08 355.518 L1540.61 355.411 L1540.14 355.306 L1539.67 355.224 L1539.2 355.179 L1538.73 355.174 L1538.26 355.215 L1537.79 355.3 L1537.32 355.433 L1536.85 355.615 L1536.38 355.849 L1535.91 356.143 L1535.44 356.507 L1534.97 356.942 L1534.5 357.445 L1534.03 358.007 L1533.56 358.63 L1533.09 359.322 L1532.62 360.086 L1532.15 360.908 L1531.68 361.764 L1531.21 362.64 L1530.74 363.531 L1530.27 364.44 L1529.8 365.372 L1529.33 366.337 L1528.86 367.348 L1528.39 368.4 L1527.92 369.494 L1527.45 370.63 L1526.98 371.813 L1526.51 373.043 L1526.04 374.318 L1525.57 375.633 L1525.1 376.973 L1524.63 378.329 L1524.16 379.693 L1523.69 381.053 L1523.22 382.383 L1522.75 383.665 L1522.28 384.886 L1521.81 386.038 L1521.34 387.128 L1520.87 388.175 L1520.4 389.211 L1519.93 390.263 L1519.46 391.362 L1518.99 392.527 L1518.52 393.77 L1518.05 395.101 L1517.58 396.518 L1517.11 398.02 L1516.64 399.596 L1516.17 401.233 L1515.69 402.902 L1515.22 404.576 L1514.75 406.227 L1514.28 407.836 L1513.81 409.391 L1513.34 410.887 L1512.87 412.319 L1512.4 413.701 L1511.93 415.044 L1511.46 416.365 L1510.99 417.682 L1510.52 419.015 L1510.05 420.385 L1509.58 421.807 L1509.11 423.294 L1508.64 424.847 L1508.17 426.459 L1507.7 428.114 L1507.23 429.794 L1506.76 431.492 L1506.29 433.201 L1505.82 434.914 L1505.35 436.623 L1504.88 438.315 L1504.41 439.99 L1503.94 441.646 L1503.47 443.285 L1503 444.911 L1502.53 446.531 L1502.06 448.162 L1501.59 449.815 L1501.12 451.497 L1500.65 453.213 L1500.18 454.96 L1499.71 456.726 L1499.24 458.494 L1498.77 460.25 L1498.3 461.98 L1497.83 463.683 L1497.36 465.369 L1496.89 467.046 L1496.42 468.723 L1495.95 470.411 L1495.48 472.111 L1495.01 473.83 L1494.54 475.574 L1494.07 477.345 L1493.6 479.141 L1493.13 480.953 L1492.66 482.774 L1492.19 484.59 L1491.72 486.393 L1491.25 488.179 L1490.77 489.948 L1490.3 491.708 L1489.83 493.456 L1489.36 495.199 L1488.89 496.955 L1488.42 498.735 L1487.95 500.549 L1487.48 502.41 L1487.01 504.315 L1486.54 506.248 L1486.07 508.194 L1485.6 510.126 L1485.13 512.025 L1484.66 513.88 L1484.19 515.69 L1483.72 517.464 L1483.25 519.218 L1482.78 520.971 L1482.31 522.739 L1481.84 524.538 L1481.37 526.382 L1480.9 528.287 L1480.43 530.258 L1479.96 532.291 L1479.49 534.382 L1479.02 536.523 L1478.55 538.696 L1478.08 540.877 L1477.61 543.04 L1477.14 545.163 L1476.67 547.237 L1476.2 549.26 L1475.73 551.238 L1475.26 553.169 L1474.79 555.058 L1474.32 556.912 L1473.85 558.739 L1473.38 560.552 L1472.91 562.369 L1472.44 564.204 L1471.97 566.067 L1471.5 567.948 L1471.03 569.851 L1470.56 571.774 L1470.09 573.713 L1469.62 575.664 L1469.15 577.618 L1468.68 579.561 L1468.21 581.479 L1467.74 583.369 L1467.27 585.233 L1466.8 587.075 L1466.33 588.898 L1465.86 590.7 L1465.38 592.482 L1464.91 594.243 L1464.44 595.989 L1463.97 597.724 L1463.5 599.459 L1463.03 601.205 L1462.56 602.974 L1462.09 604.769 L1461.62 606.593 L1461.15 608.431 L1460.68 610.275 L1460.21 612.112 L1459.74 613.93 L1459.27 615.728 L1458.8 617.499 L1458.33 619.233 L1457.86 620.922 L1457.39 622.573 L1456.92 624.193 L1456.45 625.788 L1455.98 627.363 L1455.51 628.928 L1455.04 630.494 L1454.57 632.07 L1454.1 633.659 L1453.63 635.259 L1453.16 636.867 L1452.69 638.475 L1452.22 640.078 L1451.75 641.669 L1451.28 643.255 L1450.81 644.834 L1450.34 646.401 L1449.87 647.952 L1449.4 649.475 L1448.93 650.967 L1448.46 652.427 L1447.99 653.854 L1447.52 655.255 L1447.05 656.648 L1446.58 658.043 L1446.11 659.445 L1445.64 660.852 L1445.17 662.258 L1444.7 663.646 L1444.23 665.002 L1443.76 666.32 L1443.29 667.598 L1442.82 668.842 L1442.35 670.065 L1441.88 671.283 L1441.41 672.504 L1440.94 673.731 L1440.46 674.953 L1439.99 676.154 L1439.52 677.323 L1439.05 678.446 L1438.58 679.513 L1438.11 680.521 L1437.64 681.475 L1437.17 682.382 L1436.7 683.256 L1436.23 684.111 L1435.76 684.954 L1435.29 685.784 L1434.82 686.6 L1434.35 687.385 L1433.88 688.142 L1433.41 688.873 L1432.94 689.595 L1432.47 690.326 L1432 691.084 L1431.53 691.884 L1431.06 692.741 L1430.59 693.659 L1430.12 694.62 L1429.65 695.601 L1429.18 696.576 L1428.71 697.53 L1428.24 698.449 L1427.77 699.328 L1427.3 700.168 L1426.83 700.973 L1426.36 701.742 L1425.89 702.477 L1425.42 703.186 L1424.95 703.876 L1424.48 704.548 L1424.01 705.205 L1423.54 705.85 L1423.07 706.484 L1422.6 707.11 L1422.13 707.729 L1421.66 708.337 L1421.19 708.932 L1420.72 709.51 L1420.25 710.07 L1419.78 710.607 L1419.31 711.118 L1418.84 711.604 L1418.37 712.071 L1417.9 712.522 L1417.43 712.969 L1416.96 713.418 L1416.49 713.866 L1416.02 714.306 L1415.55 714.723 L1415.07 715.109 L1414.6 715.457 L1414.13 715.763 L1413.66 716.029 L1413.19 716.256 L1412.72 716.444 L1412.25 716.591 L1411.78 716.699 L1411.31 716.778 L1410.84 716.836 L1410.37 716.876 L1409.9 716.902 L1409.43 716.917 L1408.96 716.926 L1408.49 716.929 L1408.02 716.922 L1407.55 716.902 L1407.08 716.867 L1406.61 716.809 L1406.14 716.728 L1405.67 716.627 L1405.2 716.509 L1404.73 716.373 L1404.26 716.213 L1403.79 716.032 L1403.32 715.842 L1402.85 715.659 L1402.38 715.487 L1401.91 715.323 L1401.44 715.152 L1400.97 714.962 L1400.5 714.752 L1400.03 714.524 L1399.56 714.284 L1399.09 714.026 L1398.62 713.746 L1398.15 713.43 L1397.68 713.074 L1397.21 712.683 L1396.74 712.263 L1396.27 711.823 L1395.8 711.37 L1395.33 710.914 L1394.86 710.45 L1394.39 709.976 L1393.92 709.481 L1393.45 708.962 L1392.98 708.414 L1392.51 707.834 L1392.04 707.224 L1391.57 706.582 L1391.1 705.911 L1390.63 705.212 L1390.15 704.496 L1389.68 703.768 L1389.21 703.023 L1388.74 702.26 L1388.27 701.478 L1387.8 700.685 L1387.33 699.889 L1386.86 699.086 L1386.39 698.264 L1385.92 697.419 L1385.45 696.547 L1384.98 695.645 L1384.51 694.722 L1384.04 693.783 L1383.57 692.835 L1383.1 691.876 L1382.63 690.901 L1382.16 689.905 L1381.69 688.883 L1381.22 687.83 L1380.75 686.738 L1380.28 685.606 L1379.81 684.427 L1379.34 683.204 L1378.87 681.951 L1378.4 680.681 L1377.93 679.403 L1377.46 678.131 L1376.99 676.87 L1376.52 675.63 L1376.05 674.402 L1375.58 673.172 L1375.11 671.923 L1374.64 670.644 L1374.17 669.326 L1373.7 667.966 L1373.23 666.573 L1372.76 665.153 L1372.29 663.727 L1371.82 662.312 L1371.35 660.91 L1370.88 659.515 L1370.41 658.116 L1369.94 656.704 L1369.47 655.274 L1369 653.823 L1368.53 652.34 L1368.06 650.823 L1367.59 649.276 L1367.12 647.704 L1366.65 646.116 L1366.18 644.525 L1365.71 642.932 L1365.24 641.341 L1364.76 639.753 L1364.29 638.169 L1363.82 636.597 L1363.35 635.025 L1362.88 633.441 L1362.41 631.837 L1361.94 630.213 L1361.47 628.565 L1361 626.888 L1360.53 625.183 L1360.06 623.442 L1359.59 621.668 L1359.12 619.872 L1358.65 618.067 L1358.18 616.264 L1357.71 614.476 L1357.24 612.714 L1356.77 610.983 L1356.3 609.281 L1355.83 607.595 L1355.36 605.907 L1354.89 604.206 L1354.42 602.487 L1353.95 600.745 L1353.48 598.983 L1353.01 597.21 L1352.54 595.431 L1352.07 593.658 L1351.6 591.887 L1351.13 590.119 L1350.66 588.362 L1350.19 586.627 L1349.72 584.927 L1349.25 583.265 L1348.78 581.634 L1348.31 580.022 L1347.84 578.41 L1347.37 576.787 L1346.9 575.139 L1346.43 573.452 L1345.96 571.72 L1345.49 569.937 L1345.02 568.112 L1344.55 566.258 L1344.08 564.389 L1343.61 562.513 L1343.14 560.638 L1342.67 558.763 L1342.2 556.889 L1341.73 555.025 L1341.26 553.176 L1340.79 551.343 L1340.32 549.524 L1339.85 547.723 L1339.37 545.941 L1338.9 544.186 L1338.43 542.46 L1337.96 540.761 L1337.49 539.092 L1337.02 537.438 L1336.55 535.788 L1336.08 534.132 L1335.61 532.463 L1335.14 530.786 L1334.67 529.098 L1334.2 527.396 L1333.73 525.674 L1333.26 523.915 L1332.79 522.107 L1332.32 520.249 L1331.85 518.345 L1331.38 516.397 L1330.91 514.405 L1330.44 512.374 L1329.97 510.305 L1329.5 508.211 L1329.03 506.099 L1328.56 503.985 L1328.09 501.882 L1327.62 499.808 L1327.15 497.775 L1326.68 495.793 L1326.21 493.859 L1325.74 491.963 L1325.27 490.092 L1324.8 488.235 L1324.33 486.386 L1323.86 484.549 L1323.39 482.728 L1322.92 480.929 L1322.45 479.147 L1321.98 477.369 L1321.51 475.578 L1321.04 473.758 L1320.57 471.903 L1320.1 470.019 L1319.63 468.114 L1319.16 466.199 L1318.69 464.289 L1318.22 462.396 L1317.75 460.537 L1317.28 458.731 L1316.81 456.992 L1316.34 455.328 L1315.87 453.728 L1315.4 452.177 L1314.93 450.659 L1314.45 449.16 L1313.98 447.677 L1313.51 446.203 L1313.04 444.734 L1312.57 443.264 L1312.1 441.773 L1311.63 440.247 L1311.16 438.679 L1310.69 437.074 L1310.22 435.442 L1309.75 433.789 L1309.28 432.132 L1308.81 430.486 L1308.34 428.858 L1307.87 427.258 L1307.4 425.69 L1306.93 424.161 L1306.46 422.67 L1305.99 421.206 L1305.52 419.759 L1305.05 418.32 L1304.58 416.879 L1304.11 415.441 L1303.64 414.009 L1303.17 412.588 L1302.7 411.189 L1302.23 409.815 L1301.76 408.466 L1301.29 407.14 L1300.82 405.825 L1300.35 404.517 L1299.88 403.218 L1299.41 401.929 L1298.94 400.65 L1298.47 399.382 L1298 398.12 L1297.53 396.866 L1297.06 395.625 L1296.59 394.395 L1296.12 393.176 L1295.65 391.972 L1295.18 390.79 L1294.71 389.629 L1294.24 388.489 L1293.77 387.361 L1293.3 386.253 L1292.83 385.167 L1292.36 384.105 L1291.89 383.062 L1291.42 382.035 L1290.95 381.012 L1290.48 379.978 L1290.01 378.919 L1289.54 377.841 L1289.06 376.765 L1288.59 375.708 L1288.12 374.682 L1287.65 373.693 L1287.18 372.749 L1286.71 371.859 L1286.24 371.035 L1285.77 370.27 L1285.3 369.561 L1284.83 368.898 L1284.36 368.277 L1283.89 367.693 L1283.42 367.135 L1282.95 366.594 L1282.48 366.065 L1282.01 365.548 L1281.54 365.039 L1281.07 364.533 L1280.6 364.016 L1280.13 363.482 L1279.66 362.931 L1279.19 362.368 L1278.72 361.796 L1278.25 361.218 L1277.78 360.641 L1277.31 360.084 L1276.84 359.554 L1276.37 359.055 L1275.9 358.595 L1275.43 358.182 L1274.96 357.83 L1274.49 357.553 L1274.02 357.361 L1273.55 357.258 L1273.08 357.237 L1272.61 357.279 L1272.14 357.357 L1271.67 357.451 L1271.2 357.536 L1270.73 357.588 L1270.26 357.596 L1269.79 357.561 L1269.32 357.494 L1268.85 357.416 L1268.38 357.354 L1267.91 357.325 L1267.44 357.334 L1266.97 357.388 L1266.5 357.484 L1266.03 357.612 L1265.56 357.757 L1265.09 357.909 L1264.62 358.053 L1264.14 358.186 L1263.67 358.306 L1263.2 358.422 L1262.73 358.549 L1262.26 358.7 L1261.79 358.884 L1261.32 359.11 L1260.85 359.383 L1260.38 359.707 L1259.91 360.086 L1259.44 360.516 L1258.97 360.991 L1258.5 361.507 L1258.03 362.056 L1257.56 362.636 L1257.09 363.254 L1256.62 363.918 L1256.15 364.623 L1255.68 365.362 L1255.21 366.124 L1254.74 366.898 L1254.27 367.672 L1253.8 368.43 L1253.33 369.171 L1252.86 369.897 L1252.39 370.614 L1251.92 371.33 L1251.45 372.056 L1250.98 372.811 L1250.51 373.61 L1250.04 374.454 L1249.57 375.339 L1249.1 376.254 L1248.63 377.194 L1248.16 378.156 L1247.69 379.143 L1247.22 380.157 L1246.75 381.202 L1246.28 382.278 L1245.81 383.387 L1245.34 384.526 L1244.87 385.693 L1244.4 386.886 L1243.93 388.1 L1243.46 389.329 L1242.99 390.57 L1242.52 391.813 L1242.05 393.051 L1241.58 394.283 L1241.11 395.511 L1240.64 396.756 L1240.17 398.039 L1239.7 399.374 L1239.23 400.776 L1238.75 402.249 L1238.28 403.791 L1237.81 405.381 L1237.34 407.001 L1236.87 408.631 L1236.4 410.272 L1235.93 411.93 L1235.46 413.623 L1234.99 415.369 L1234.52 417.175 L1234.05 419.046 L1233.58 420.973 L1233.11 422.947 L1232.64 424.946 L1232.17 426.957 L1231.7 428.966 L1231.23 430.962 L1230.76 432.938 L1230.29 434.896 L1229.82 436.844 L1229.35 438.783 L1228.88 440.712 L1228.41 442.631 L1227.94 444.544 L1227.47 446.451 L1227 448.35 L1226.53 450.24 L1226.06 452.124 L1225.59 454.009 L1225.12 455.901 L1224.65 457.801 L1224.18 459.712 L1223.71 461.635 L1223.24 463.575 L1222.77 465.53 L1222.3 467.505 L1221.83 469.502 L1221.36 471.518 L1220.89 473.546 L1220.42 475.575 L1219.95 477.603 L1219.48 479.622 L1219.01 481.632 L1218.54 483.629 L1218.07 485.612 L1217.6 487.587 L1217.13 489.565 L1216.66 491.557 L1216.19 493.569 L1215.72 495.606 L1215.25 497.668 L1214.78 499.746 L1214.31 501.841 L1213.83 503.956 L1213.36 506.093 L1212.89 508.257 L1212.42 510.451 L1211.95 512.675 L1211.48 514.914 L1211.01 517.15 L1210.54 519.365 L1210.07 521.544 L1209.6 523.684 L1209.13 525.785 L1208.66 527.852 L1208.19 529.899 L1207.72 531.941 L1207.25 533.982 L1206.78 536.014 L1206.31 538.033 L1205.84 540.042 L1205.37 542.039 L1204.9 544.024 L1204.43 545.985 L1203.96 547.921 L1203.49 549.841 L1203.02 551.759 L1202.55 553.692 L1202.08 555.646 L1201.61 557.625 L1201.14 559.624 L1200.67 561.641 L1200.2 563.67 L1199.73 565.707 L1199.26 567.76 L1198.79 569.843 L1198.32 571.961 L1197.85 574.107 L1197.38 576.274 L1196.91 578.456 L1196.44 580.658 L1195.97 582.88 L1195.5 585.12 L1195.03 587.371 L1194.56 589.622 L1194.09 591.869 L1193.62 594.106 L1193.15 596.332 L1192.68 598.55 L1192.21 600.765 L1191.74 602.978 L1191.27 605.178 L1190.8 607.341 L1190.33 609.438 L1189.86 611.459 L1189.39 613.408 L1188.92 615.296 L1188.44 617.139 L1187.97 618.956 L1187.5 620.771 L1187.03 622.607 L1186.56 624.476 L1186.09 626.382 L1185.62 628.322 L1185.15 630.282 L1184.68 632.243 L1184.21 634.188 L1183.74 636.11 L1183.27 638.009 L1182.8 639.885 L1182.33 641.745 L1181.86 643.595 L1181.39 645.436 L1180.92 647.264 L1180.45 649.076 L1179.98 650.868 L1179.51 652.635 L1179.04 654.367 L1178.57 656.049 L1178.1 657.67 L1177.63 659.234 L1177.16 660.737 L1176.69 662.184 L1176.22 663.582 L1175.75 664.936 L1175.28 666.244 L1174.81 667.514 L1174.34 668.762 L1173.87 669.996 L1173.4 671.205 L1172.93 672.383 L1172.46 673.525 L1171.99 674.635 L1171.52 675.724 L1171.05 676.806 L1170.58 677.893 L1170.11 678.997 L1169.64 680.125 L1169.17 681.279 L1168.7 682.469 L1168.23 683.696 L1167.76 684.963 L1167.29 686.263 L1166.82 687.586 L1166.35 688.914 L1165.88 690.239 L1165.41 691.55 L1164.94 692.843 L1164.47 694.12 L1164 695.38 L1163.53 696.622 L1163.05 697.843 L1162.58 699.038 L1162.11 700.198 L1161.64 701.315 L1161.17 702.392 L1160.7 703.438 L1160.23 704.458 L1159.76 705.455 L1159.29 706.435 L1158.82 707.403 L1158.35 708.358 L1157.88 709.301 L1157.41 710.225 L1156.94 711.133 L1156.47 712.033 L1156 712.93 L1155.53 713.822 L1155.06 714.706 L1154.59 715.577 L1154.12 716.432 L1153.65 717.267 L1153.18 718.072 L1152.71 718.837 L1152.24 719.565 L1151.77 720.258 L1151.3 720.915 L1150.83 721.533 L1150.36 722.115 L1149.89 722.659 L1149.42 723.163 L1148.95 723.641 L1148.48 724.094 L1148.01 724.526 L1147.54 724.941 L1147.07 725.346 L1146.6 725.749 L1146.13 726.156 L1145.66 726.566 L1145.19 726.977 L1144.72 727.382 L1144.25 727.774 L1143.78 728.148 L1143.31 728.501 L1142.84 728.828 L1142.37 729.123 L1141.9 729.385 L1141.43 729.611 L1140.96 729.799 L1140.49 729.949 L1140.02 730.061 L1139.55 730.131 L1139.08 730.164 L1138.61 730.165 L1138.13 730.15 L1137.66 730.129 L1137.19 730.11 L1136.72 730.094 L1136.25 730.081 L1135.78 730.065 L1135.31 730.045 L1134.84 730.012 L1134.37 729.955 L1133.9 729.87 L1133.43 729.742 L1132.96 729.568 L1132.49 729.349 L1132.02 729.099 L1131.55 728.833 L1131.08 728.563 L1130.61 728.304 L1130.14 728.065 L1129.67 727.851 L1129.2 727.658 L1128.73 727.478 L1128.26 727.302 L1127.79 727.11 L1127.32 726.883 L1126.85 726.606 L1126.38 726.271 L1125.91 725.872 L1125.44 725.408 L1124.97 724.898 L1124.5 724.362 L1124.03 723.821 L1123.56 723.283 L1123.09 722.743 L1122.62 722.192 L1122.15 721.617 L1121.68 721.012 L1121.21 720.373 L1120.74 719.703 L1120.27 719.01 L1119.8 718.314 L1119.33 717.637 L1118.86 716.995 L1118.39 716.392 L1117.92 715.816 L1117.45 715.254 L1116.98 714.692 L1116.51 714.115 L1116.04 713.504 L1115.57 712.841 L1115.1 712.122 L1114.63 711.346 L1114.16 710.522 L1113.69 709.659 L1113.22 708.764 L1112.74 707.848 L1112.27 706.931 L1111.8 706.036 L1111.33 705.18 L1110.86 704.37 L1110.39 703.595 L1109.92 702.842 L1109.45 702.097 L1108.98 701.341 L1108.51 700.565 L1108.04 699.756 L1107.57 698.907 L1107.1 698.018 L1106.63 697.094 L1106.16 696.134 L1105.69 695.137 L1105.22 694.106 L1104.75 693.044 L1104.28 691.944 L1103.81 690.811 L1103.34 689.659 L1102.87 688.499 L1102.4 687.338 L1101.93 686.173 L1101.46 685.001 L1100.99 683.834 L1100.52 682.677 L1100.05 681.53 L1099.58 680.387 L1099.11 679.236 L1098.64 678.065 L1098.17 676.869 L1097.7 675.653 L1097.23 674.412 L1096.76 673.146 L1096.29 671.86 L1095.82 670.569 L1095.35 669.281 L1094.88 667.999 L1094.41 666.724 L1093.94 665.448 L1093.47 664.166 L1093 662.879 L1092.53 661.595 L1092.06 660.321 L1091.59 659.043 L1091.12 657.748 L1090.65 656.429 L1090.18 655.073 L1089.71 653.668 L1089.24 652.217 L1088.77 650.734 L1088.3 649.234 L1087.82 647.726 L1087.35 646.22 L1086.88 644.725 L1086.41 643.254 L1085.94 641.805 L1085.47 640.375 L1085 638.96 L1084.53 637.556 L1084.06 636.163 L1083.59 634.78 L1083.12 633.411 L1082.65 632.057 L1082.18 630.715 L1081.71 629.39 L1081.24 628.081 L1080.77 626.782 L1080.3 625.483 L1079.83 624.174 L1079.36 622.841 L1078.89 621.462 L1078.42 620.022 L1077.95 618.525 L1077.48 616.973 L1077.01 615.373 L1076.54 613.733 L1076.07 612.065 L1075.6 610.376 L1075.13 608.674 L1074.66 606.981 L1074.19 605.312 L1073.72 603.676 L1073.25 602.081 L1072.78 600.52 L1072.31 598.985 L1071.84 597.468 L1071.37 595.968 L1070.9 594.476 L1070.43 592.981 L1069.96 591.471 L1069.49 589.945 L1069.02 588.41 L1068.55 586.857 L1068.08 585.281 L1067.61 583.682 L1067.14 582.05 L1066.67 580.377 L1066.2 578.665 L1065.73 576.921 L1065.26 575.166 L1064.79 573.419 L1064.32 571.691 L1063.85 569.986 L1063.38 568.31 L1062.91 566.667 L1062.43 565.061 L1061.96 563.484 L1061.49 561.917 L1061.02 560.344 L1060.55 558.754 L1060.08 557.145 L1059.61 555.517 L1059.14 553.863 L1058.67 552.176 L1058.2 550.459 L1057.73 548.724 L1057.26 546.981 L1056.79 545.23 L1056.32 543.475 L1055.85 541.728 L1055.38 540 L1054.91 538.298 L1054.44 536.622 L1053.97 534.968 L1053.5 533.326 L1053.03 531.681 L1052.56 530.025 L1052.09 528.359 L1051.62 526.687 L1051.15 525.023 L1050.68 523.374 L1050.21 521.744 L1049.74 520.137 L1049.27 518.554 L1048.8 516.998 L1048.33 515.477 L1047.86 513.99 L1047.39 512.532 L1046.92 511.09 L1046.45 509.652 L1045.98 508.215 L1045.51 506.773 L1045.04 505.321 L1044.57 503.86 L1044.1 502.388 L1043.63 500.896 L1043.16 499.384 L1042.69 497.855 L1042.22 496.317 L1041.75 494.772 L1041.28 493.222 L1040.81 491.674 L1040.34 490.137 L1039.87 488.618 L1039.4 487.121 L1038.93 485.643 L1038.46 484.181 L1037.99 482.737 L1037.51 481.311 L1037.04 479.907 L1036.57 478.517 L1036.1 477.138 L1035.63 475.773 L1035.16 474.423 L1034.69 473.091 L1034.22 471.784 L1033.75 470.506 L1033.28 469.26 L1032.81 468.043 L1032.34 466.847 L1031.87 465.666 L1031.4 464.489 L1030.93 463.32 L1030.46 462.155 L1029.99 460.987 L1029.52 459.796 L1029.05 458.565 L1028.58 457.288 L1028.11 455.964 L1027.64 454.592 L1027.17 453.184 L1026.7 451.753 L1026.23 450.323 L1025.76 448.905 L1025.29 447.517 L1024.82 446.178 L1024.35 444.895 L1023.88 443.655 L1023.41 442.448 L1022.94 441.263 L1022.47 440.095 L1022 438.934 L1021.53 437.774 L1021.06 436.614 L1020.59 435.456 L1020.12 434.299 L1019.65 433.143 L1019.18 431.986 L1018.71 430.835 L1018.24 429.697 L1017.77 428.584 L1017.3 427.498 L1016.83 426.436 L1016.36 425.389 L1015.89 424.35 L1015.42 423.313 L1014.95 422.279 L1014.48 421.257 L1014.01 420.246 L1013.54 419.255 L1013.07 418.293 L1012.6 417.361 L1012.12 416.459 L1011.65 415.587 L1011.18 414.741 L1010.71 413.92 L1010.24 413.125 L1009.77 412.354 L1009.3 411.609 L1008.83 410.89 L1008.36 410.199 L1007.89 409.532 L1007.42 408.883 L1006.95 408.25 L1006.48 407.636 L1006.01 407.051 L1005.54 406.51 L1005.07 406.021 L1004.6 405.588 L1004.13 405.211 L1003.66 404.884 L1003.19 404.598 L1002.72 404.336 L1002.25 404.083 L1001.78 403.824 L1001.31 403.561 L1000.84 403.303 L1000.37 403.061 L999.9 402.849 L999.43 402.676 L998.96 402.551 L998.49 402.472 L998.019 402.437 L997.549 402.443 L997.079 402.48 L996.609 402.54 L996.139 402.627 L995.668 402.75 L995.198 402.923 L994.728 403.15 L994.258 403.429 L993.788 403.758 L993.317 404.132 L992.847 404.545 L992.377 404.986 L991.907 405.451 L991.437 405.934 L990.967 406.427 L990.496 406.917 L990.026 407.39 L989.556 407.823 L989.086 408.205 L988.616 408.538 L988.145 408.832 L987.675 409.104 L987.205 409.382 L986.735 409.69 L986.265 410.048 L985.794 410.463 L985.324 410.937 L984.854 411.448 L984.384 411.985 L983.914 412.542 L983.444 413.115 L982.973 413.702 L982.503 414.309 L982.033 414.931 L981.563 415.551 L981.093 416.16 L980.622 416.752 L980.152 417.323 L979.682 417.871 L979.212 418.391 L978.742 418.892 L978.271 419.391 L977.801 419.905 L977.331 420.442 L976.861 421.012 L976.391 421.632 L975.921 422.306 L975.45 423.035 L974.98 423.818 L974.51 424.648 L974.04 425.525 L973.57 426.443 L973.099 427.395 L972.629 428.37 L972.159 429.355 L971.689 430.341 L971.219 431.326 L970.748 432.307 L970.278 433.281 L969.808 434.244 L969.338 435.206 L968.868 436.184 L968.398 437.186 L967.927 438.211 L967.457 439.259 L966.987 440.328 L966.517 441.42 L966.047 442.539 L965.576 443.692 L965.106 444.884 L964.636 446.107 L964.166 447.351 L963.696 448.607 L963.226 449.854 L962.755 451.076 L962.285 452.269 L961.815 453.429 L961.345 454.56 L960.875 455.685 L960.404 456.818 L959.934 457.969 L959.464 459.144 L958.994 460.353 L958.524 461.585 L958.053 462.829 L957.583 464.075 L957.113 465.321 L956.643 466.572 L956.173 467.832 L955.703 469.105 L955.232 470.392 L954.762 471.701 L954.292 473.023 L953.822 474.347 L953.352 475.662 L952.881 476.96 L952.411 478.24 L951.941 479.505 L951.471 480.767 L951.001 482.031 L950.53 483.296 L950.06 484.564 L949.59 485.851 L949.12 487.167 L948.65 488.513 L948.18 489.892 L947.709 491.301 L947.239 492.749 L946.769 494.238 L946.299 495.762 L945.829 497.315 L945.358 498.901 L944.888 500.517 L944.418 502.159 L943.948 503.83 L943.478 505.524 L943.007 507.23 L942.537 508.934 L942.067 510.631 L941.597 512.323 L941.127 514.013 L940.657 515.702 L940.186 517.387 L939.716 519.062 L939.246 520.717 L938.776 522.353 L938.306 523.976 L937.835 525.592 L937.365 527.212 L936.895 528.841 L936.425 530.479 L935.955 532.123 L935.484 533.769 L935.014 535.41 L934.544 537.049 L934.074 538.681 L933.604 540.296 L933.134 541.884 L932.663 543.447 L932.193 544.993 L931.723 546.531 L931.253 548.071 L930.783 549.623 L930.312 551.195 L929.842 552.795 L929.372 554.426 L928.902 556.087 L928.432 557.766 L927.962 559.454 L927.491 561.146 L927.021 562.837 L926.551 564.532 L926.081 566.23 L925.611 567.938 L925.14 569.656 L924.67 571.38 L924.2 573.097 L923.73 574.791 L923.26 576.44 L922.789 578.029 L922.319 579.566 L921.849 581.056 L921.379 582.517 L920.909 583.974 L920.439 585.455 L919.968 586.983 L919.498 588.564 L919.028 590.189 L918.558 591.846 L918.088 593.521 L917.617 595.203 L917.147 596.879 L916.677 598.537 L916.207 600.158 L915.737 601.728 L915.266 603.241 L914.796 604.695 L914.326 606.087 L913.856 607.425 L913.386 608.711 L912.916 609.958 L912.445 611.19 L911.975 612.429 L911.505 613.687 L911.035 614.963 L910.565 616.252 L910.094 617.531 L909.624 618.777 L909.154 619.973 L908.684 621.109 L908.214 622.174 L907.743 623.174 L907.273 624.12 L906.803 625.026 L906.333 625.905 L905.863 626.773 L905.393 627.638 L904.922 628.501 L904.452 629.358 L903.982 630.214 L903.512 631.083 L903.042 631.972 L902.571 632.885 L902.101 633.812 L901.631 634.745 L901.161 635.687 L900.691 636.625 L900.22 637.547 L899.75 638.452 L899.28 639.34 L898.81 640.206 L898.34 641.039 L897.87 641.824 L897.399 642.554 L896.929 643.221 L896.459 643.824 L895.989 644.371 L895.519 644.866 L895.048 645.307 L894.578 645.697 L894.108 646.045 L893.638 646.363 L893.168 646.671 L892.698 646.984 L892.227 647.299 L891.757 647.597 L891.287 647.866 L890.817 648.099 L890.347 648.291 L889.876 648.443 L889.406 648.561 L888.936 648.651 L888.466 648.717 L887.996 648.763 L887.525 648.799 L887.055 648.843 L886.585 648.915 L886.115 649.021 L885.645 649.155 L885.175 649.315 L884.704 649.501 L884.234 649.706 L883.764 649.922 L883.294 650.138 L882.824 650.341 L882.353 650.514 L881.883 650.648 L881.413 650.739 L880.943 650.777 L880.473 650.759 L880.002 650.686 L879.532 650.57 L879.062 650.435 L878.592 650.298 L878.122 650.17 L877.652 650.051 L877.181 649.939 L876.711 649.844 L876.241 649.77 L875.771 649.71 L875.301 649.658 L874.83 649.597 L874.36 649.519 L873.89 649.426 L873.42 649.319 L872.95 649.2 L872.479 649.069 L872.009 648.92 L871.539 648.758 L871.069 648.593 L870.599 648.431 L870.129 648.267 L869.658 648.089 L869.188 647.889 L868.718 647.665 L868.248 647.422 L867.778 647.171 L867.307 646.918 L866.837 646.67 L866.367 646.431 L865.897 646.204 L865.427 645.996 L864.956 645.807 L864.486 645.636 L864.016 645.485 L863.546 645.355 L863.076 645.244 L862.606 645.142 L862.135 645.042 L861.665 644.924 L861.195 644.771 L860.725 644.56 L860.255 644.281 L859.784 643.924 L859.314 643.494 L858.844 642.991 L858.374 642.415 L857.904 641.776 L857.434 641.086 L856.963 640.355 L856.493 639.592 L856.023 638.805 L855.553 638.005 L855.083 637.205 L854.612 636.419 L854.142 635.654 L853.672 634.912 L853.202 634.196 L852.732 633.519 L852.261 632.889 L851.791 632.31 L851.321 631.775 L850.851 631.268 L850.381 630.771 L849.911 630.263 L849.44 629.721 L848.97 629.14 L848.5 628.518 L848.03 627.857 L847.56 627.16 L847.089 626.445 L846.619 625.721 L846.149 625.005 L845.679 624.294 L845.209 623.584 L844.738 622.865 L844.268 622.131 L843.798 621.369 L843.328 620.575 L842.858 619.756 L842.388 618.925 L841.917 618.095 L841.447 617.275 L840.977 616.469 L840.507 615.679 L840.037 614.898 L839.566 614.13 L839.096 613.371 L838.626 612.612 L838.156 611.848 L837.686 611.076 L837.215 610.288 L836.745 609.483 L836.275 608.663 L835.805 607.834 L835.335 607.002 L834.865 606.172 L834.394 605.344 L833.924 604.512 L833.454 603.67 L832.984 602.817 L832.514 601.956 L832.043 601.094 L831.573 600.244 L831.103 599.409 L830.633 598.582 L830.163 597.747 L829.692 596.882 L829.222 595.971 L828.752 595.001 L828.282 593.972 L827.812 592.89 L827.342 591.764 L826.871 590.617 L826.401 589.477 L825.931 588.37 L825.461 587.307 L824.991 586.286 L824.52 585.294 L824.05 584.314 L823.58 583.336 L823.11 582.343 L822.64 581.324 L822.17 580.274 L821.699 579.195 L821.229 578.086 L820.759 576.955 L820.289 575.804 L819.819 574.64 L819.348 573.461 L818.878 572.269 L818.408 571.07 L817.938 569.863 L817.468 568.645 L816.997 567.405 L816.527 566.136 L816.057 564.84 L815.587 563.519 L815.117 562.171 L814.647 560.799 L814.176 559.395 L813.706 557.969 L813.236 556.533 L812.766 555.101 L812.296 553.683 L811.825 552.291 L811.355 550.933 L810.885 549.619 L810.415 548.357 L809.945 547.149 L809.474 546 L809.004 544.902 L808.534 543.843 L808.064 542.816 L807.594 541.803 L807.124 540.789 L806.653 539.757 L806.183 538.687 L805.713 537.578 L805.243 536.433 L804.773 535.268 L804.302 534.101 L803.832 532.942 L803.362 531.802 L802.892 530.696 L802.422 529.629 L801.951 528.597 L801.481 527.596 L801.011 526.611 L800.541 525.636 L800.071 524.662 L799.601 523.68 L799.13 522.692 L798.66 521.701 L798.19 520.712 L797.72 519.728 L797.25 518.75 L796.779 517.776 L796.309 516.812 L795.839 515.854 L795.369 514.898 L794.899 513.947 L794.428 513.002 L793.958 512.058 L793.488 511.118 L793.018 510.173 L792.548 509.22 L792.078 508.257 L791.607 507.288 L791.137 506.313 L790.667 505.345 L790.197 504.384 L789.727 503.434 L789.256 502.495 L788.786 501.566 L788.316 500.649 L787.846 499.746 L787.376 498.864 L786.906 497.999 L786.435 497.146 L785.965 496.297 L785.495 495.452 L785.025 494.618 L784.555 493.801 L784.084 492.99 L783.614 492.178 L783.144 491.362 L782.674 490.543 L782.204 489.722 L781.733 488.912 L781.263 488.113 L780.793 487.329 L780.323 486.561 L779.853 485.811 L779.383 485.091 L778.912 484.409 L778.442 483.756 L777.972 483.12 L777.502 482.493 L777.032 481.865 L776.561 481.22 L776.091 480.545 L775.621 479.846 L775.151 479.129 L774.681 478.413 L774.21 477.711 L773.74 477.043 L773.27 476.422 L772.8 475.848 L772.33 475.319 L771.86 474.824 L771.389 474.361 L770.919 473.926 L770.449 473.513 L769.979 473.111 L769.509 472.702 L769.038 472.271 L768.568 471.809 L768.098 471.312 L767.628 470.78 L767.158 470.226 L766.687 469.656 L766.217 469.087 L765.747 468.539 L765.277 468.032 L764.807 467.581 L764.337 467.188 L763.866 466.852 L763.396 466.575 L762.926 466.347 L762.456 466.153 L761.986 465.968 L761.515 465.772 L761.045 465.55 L760.575 465.285 L760.105 464.976 L759.635 464.628 L759.164 464.26 L758.694 463.888 L758.224 463.527 L757.754 463.195 L757.284 462.899 L756.814 462.646 L756.343 462.434 L755.873 462.254 L755.403 462.092 L754.933 461.947 L754.463 461.825 L753.992 461.723 L753.522 461.637 L753.052 461.565 L752.582 461.505 L752.112 461.451 L751.642 461.395 L751.171 461.327 L750.701 461.238 L750.231 461.121 L749.761 460.968 L749.291 460.781 L748.82 460.57 L748.35 460.351 L747.88 460.134 L747.41 459.932 L746.94 459.752 L746.469 459.591 L745.999 459.449 L745.529 459.328 L745.059 459.233 L744.589 459.171 L744.119 459.147 L743.648 459.157 L743.178 459.204 L742.708 459.29 L742.238 459.402 L741.768 459.534 L741.297 459.686 L740.827 459.863 L740.357 460.065 L739.887 460.279 L739.417 460.485 L738.946 460.662 L738.476 460.799 L738.006 460.893 L737.536 460.94 L737.066 460.948 L736.596 460.936 L736.125 460.921 L735.655 460.914 L735.185 460.928 L734.715 460.981 L734.245 461.086 L733.774 461.238 L733.304 461.431 L732.834 461.653 L732.364 461.889 L731.894 462.127 L731.423 462.357 L730.953 462.579 L730.483 462.801 L730.013 463.03 L729.543 463.281 L729.073 463.563 L728.602 463.881 L728.132 464.223 L727.662 464.582 L727.192 464.954 L726.722 465.333 L726.251 465.713 L725.781 466.095 L725.311 466.474 L724.841 466.85 L724.371 467.222 L723.9 467.594 L723.43 467.974 L722.96 468.375 L722.49 468.803 L722.02 469.261 L721.55 469.745 L721.079 470.249 L720.609 470.766 L720.139 471.298 L719.669 471.84 L719.199 472.372 L718.728 472.884 L718.258 473.365 L717.788 473.819 L717.318 474.252 L716.848 474.672 L716.378 475.094 L715.907 475.524 L715.437 475.969 L714.967 476.439 L714.497 476.951 L714.027 477.513 L713.556 478.125 L713.086 478.779 L712.616 479.464 L712.146 480.173 L711.676 480.897 L711.205 481.635 L710.735 482.381 L710.265 483.13 L709.795 483.88 L709.325 484.621 L708.855 485.334 L708.384 486.012 L707.914 486.647 L707.444 487.246 L706.974 487.813 L706.504 488.356 L706.033 488.893 L705.563 489.445 L705.093 490.038 L704.623 490.684 L704.153 491.388 L703.682 492.144 L703.212 492.948 L702.742 493.78 L702.272 494.634 L701.802 495.507 L701.332 496.401 L700.861 497.314 L700.391 498.238 L699.921 499.161 L699.451 500.066 L698.981 500.952 L698.51 501.823 L698.04 502.695 L697.57 503.576 L697.1 504.475 L696.63 505.391 L696.159 506.321 L695.689 507.27 L695.219 508.248 L694.749 509.275 L694.279 510.367 L693.809 511.528 L693.338 512.748 L692.868 514.004 L692.398 515.278 L691.928 516.553 L691.458 517.811 L690.987 519.029 L690.517 520.193 L690.047 521.298 L689.577 522.354 L689.107 523.377 L688.636 524.384 L688.166 525.398 L687.696 526.431 L687.226 527.48 L686.756 528.534 L686.286 529.584 L685.815 530.623 L685.345 531.65 L684.875 532.669 L684.405 533.677 L683.935 534.664 L683.464 535.632 L682.994 536.581 L682.524 537.5 L682.054 538.384 L681.584 539.231 L681.114 540.052 L680.643 540.865 L680.173 541.679 L679.703 542.507 L679.233 543.349 L678.763 544.204 L678.292 545.076 L677.822 545.969 L677.352 546.893 L676.882 547.852 L676.412 548.86 L675.941 549.929 L675.471 551.063 L675.001 552.244 L674.531 553.449 L674.061 554.661 L673.591 555.871 L673.12 557.066 L672.65 558.228 L672.18 559.344 L671.71 560.424 L671.24 561.483 L670.769 562.529 L670.299 563.575 L669.829 564.626 L669.359 565.684 L668.889 566.749 L668.418 567.811 L667.948 568.854 L667.478 569.875 L667.008 570.887 L666.538 571.905 L666.068 572.93 L665.597 573.961 L665.127 574.996 L664.657 576.03 L664.187 577.055 L663.717 578.068 L663.246 579.065 L662.776 580.044 L662.306 581.016 L661.836 581.986 L661.366 582.962 L660.895 583.95 L660.425 584.964 L659.955 586.019 L659.485 587.118 L659.015 588.255 L658.545 589.409 L658.074 590.559 L657.604 591.683 L657.134 592.764 L656.664 593.804 L656.194 594.805 L655.723 595.779 L655.253 596.734 L654.783 597.664 L654.313 598.562 L653.843 599.425 L653.372 600.252 L652.902 601.032 L652.432 601.763 L651.962 602.448 L651.492 603.09 L651.022 603.686 L650.551 604.231 L650.081 604.734 L649.611 605.201 L649.141 605.639 L648.671 606.053 L648.2 606.452 L647.73 606.841 L647.26 607.227 L646.79 607.613 L646.32 607.989 L645.85 608.349 L645.379 608.697 L644.909 609.035 L644.439 609.375 L643.969 609.727 L643.499 610.094 L643.028 610.472 L642.558 610.856 L642.088 611.238 L641.618 611.617 L641.148 611.986 L640.677 612.346 L640.207 612.698 L639.737 613.05 L639.267 613.404 L638.797 613.77 L638.327 614.144 L637.856 614.513 L637.386 614.863 L636.916 615.182 L636.446 615.464 L635.976 615.709 L635.505 615.913 L635.035 616.076 L634.565 616.209 L634.095 616.322 L633.625 616.419 L633.154 616.502 L632.684 616.565 L632.214 616.611 L631.744 616.65 L631.274 616.693 L630.804 616.758 L630.333 616.86 L629.863 617.008 L629.393 617.197 L628.923 617.418 L628.453 617.661 L627.982 617.904 L627.512 618.124 L627.042 618.304 L626.572 618.428 L626.102 618.49 L625.631 618.49 L625.161 618.438 L624.691 618.35 L624.221 618.25 L623.751 618.152 L623.281 618.069 L622.81 618.004 L622.34 617.954 L621.87 617.913 L621.4 617.875 L620.93 617.835 L620.459 617.783 L619.989 617.702 L619.519 617.58 L619.049 617.405 L618.579 617.176 L618.108 616.894 L617.638 616.562 L617.168 616.183 L616.698 615.758 L616.228 615.284 L615.758 614.761 L615.287 614.191 L614.817 613.572 L614.347 612.918 L613.877 612.248 L613.407 611.573 L612.936 610.904 L612.466 610.257 L611.996 609.647 L611.526 609.08 L611.056 608.55 L610.586 608.046 L610.115 607.554 L609.645 607.062 L609.175 606.578 L608.705 606.117 L608.235 605.688 L607.764 605.278 L607.294 604.875 L606.824 604.472 L606.354 604.071 L605.884 603.67 L605.413 603.266 L604.943 602.856 L604.473 602.443 L604.003 602.034 L603.533 601.636 L603.063 601.248 L602.592 600.86 L602.122 600.467 L601.652 600.057 L601.182 599.616 L600.712 599.131 L600.241 598.59 L599.771 598 L599.301 597.37 L598.831 596.715 L598.361 596.047 L597.89 595.379 L597.42 594.715 L596.95 594.052 L596.48 593.385 L596.01 592.704 L595.54 592 L595.069 591.275 L594.599 590.539 L594.129 589.799 L593.659 589.066 L593.189 588.348 L592.718 587.656 L592.248 586.995 L591.778 586.363 L591.308 585.752 L590.838 585.156 L590.367 584.561 L589.897 583.956 L589.427 583.34 L588.957 582.72 L588.487 582.103 L588.017 581.503 L587.546 580.936 L587.076 580.409 L586.606 579.917 L586.136 579.443 L585.666 578.968 L585.195 578.468 L584.725 577.926 L584.255 577.327 L583.785 576.653 L583.315 575.898 L582.844 575.06 L582.374 574.145 L581.904 573.178 L581.434 572.182 L580.964 571.167 L580.494 570.144 L580.023 569.131 L579.553 568.129 L579.083 567.141 L578.613 566.167 L578.143 565.202 L577.672 564.235 L577.202 563.263 L576.732 562.294 L576.262 561.334 L575.792 560.393 L575.322 559.473 L574.851 558.563 L574.381 557.653 L573.911 556.738 L573.441 555.821 L572.971 554.904 L572.5 553.988 L572.03 553.07 L571.56 552.151 L571.09 551.225 L570.62 550.293 L570.149 549.353 L569.679 548.404 L569.209 547.443 L568.739 546.475 L568.269 545.509 L567.799 544.55 L567.328 543.609 L566.858 542.7 L566.388 541.82 L565.918 540.964 L565.448 540.133 L564.977 539.322 L564.507 538.524 L564.037 537.731 L563.567 536.933 L563.097 536.128 L562.626 535.311 L562.156 534.488 L561.686 533.66 L561.216 532.828 L560.746 531.984 L560.276 531.13 L559.805 530.269 L559.335 529.4 L558.865 528.532 L558.395 527.671 L557.925 526.822 L557.454 525.993 L556.984 525.187 L556.514 524.403 L556.044 523.639 L555.574 522.894 L555.103 522.157 L554.633 521.413 L554.163 520.663 L553.693 519.908 L553.223 519.154 L552.753 518.414 L552.282 517.706 L551.812 517.044 L551.342 516.437 L550.872 515.881 L550.402 515.367 L549.931 514.877 L549.461 514.387 L548.991 513.878 L548.521 513.345 L548.051 512.792 L547.581 512.222 L547.11 511.64 L546.64 511.052 L546.17 510.469 L545.7 509.902 L545.23 509.356 L544.759 508.823 L544.289 508.298 L543.819 507.776 L543.349 507.245 L542.879 506.686 L542.408 506.099 L541.938 505.488 L541.468 504.868 L540.998 504.257 L540.528 503.661 L540.058 503.081 L539.587 502.517 L539.117 501.972 L538.647 501.46 L538.177 500.99 L537.707 500.566 L537.236 500.184 L536.766 499.843 L536.296 499.533 L535.826 499.242 L535.356 498.946 L534.885 498.623 L534.415 498.257 L533.945 497.851 L533.475 497.42 L533.005 496.972 L532.535 496.525 L532.064 496.092 L531.594 495.686 L531.124 495.318 L530.654 494.983 L530.184 494.687 L529.713 494.432 L529.243 494.217 L528.773 494.036 L528.303 493.888 L527.833 493.782 L527.362 493.708 L526.892 493.657 L526.422 493.619 L525.952 493.581 L525.482 493.538 L525.012 493.488 L524.541 493.424 L524.071 493.352 L523.601 493.268 L523.131 493.174 L522.661 493.077 L522.19 492.983 L521.72 492.898 L521.25 492.825 L520.78 492.762 L520.31 492.704 L519.839 492.649 L519.369 492.594 L518.899 492.538 L518.429 492.485 L517.959 492.435 L517.489 492.394 L517.018 492.372 L516.548 492.367 L516.078 492.387 L515.608 492.436 L515.138 492.515 L514.667 492.611 L514.197 492.716 L513.727 492.839 L513.257 492.986 L512.787 493.163 L512.317 493.371 L511.846 493.608 L511.376 493.876 L510.906 494.172 L510.436 494.492 L509.966 494.826 L509.495 495.154 L509.025 495.463 L508.555 495.751 L508.085 496.009 L507.615 496.236 L507.144 496.432 L506.674 496.605 L506.204 496.765 L505.734 496.914 L505.264 497.058 L504.794 497.198 L504.323 497.333 L503.853 497.467 L503.383 497.594 L502.913 497.713 L502.443 497.833 L501.972 497.957 L501.502 498.085 L501.032 498.223 L500.562 498.38 L500.092 498.57 L499.621 498.796 L499.151 499.072 L498.681 499.397 L498.211 499.762 L497.741 500.155 L497.271 500.562 L496.8 500.956 L496.33 501.309 L495.86 501.594 L495.39 501.805 L494.92 501.942 L494.449 502.012 L493.979 502.039 L493.509 502.049 L493.039 502.062 L492.569 502.093 L492.098 502.152 L491.628 502.241 L491.158 502.35 L490.688 502.461 L490.218 502.564 L489.748 502.653 L489.277 502.729 L488.807 502.793 L488.337 502.854 L487.867 502.924 L487.397 503.017 L486.926 503.139 L486.456 503.286 L485.986 503.448 L485.516 503.609 L485.046 503.753 L484.575 503.878 L484.105 503.988 L483.635 504.094 L483.165 504.21 L482.695 504.333 L482.225 504.465 L481.754 504.605 L481.284 504.756 L480.814 504.924 L480.344 505.109 L479.874 505.307 L479.403 505.517 L478.933 505.745 L478.463 505.996 L477.993 506.274 L477.523 506.584 L477.053 506.925 L476.582 507.294 L476.112 507.689 L475.642 508.098 L475.172 508.506 L474.702 508.901 L474.231 509.272 L473.761 509.624 L473.291 509.96 L472.821 510.28 L472.351 510.581 L471.88 510.861 L471.41 511.113 L470.94 511.333 L470.47 511.522 L470 511.68 L469.53 511.817 L469.059 511.951 L468.589 512.099 L468.119 512.283 L467.649 512.519 L467.179 512.807 L466.708 513.145 L466.238 513.53 L465.768 513.956 L465.298 514.413 L464.828 514.884 L464.357 515.352 L463.887 515.806 L463.417 516.253 L462.947 516.699 L462.477 517.154 L462.007 517.614 L461.536 518.071 L461.066 518.523 L460.596 518.971 L460.126 519.4 L459.656 519.796 L459.185 520.152 L458.715 520.473 L458.245 520.758 L457.775 521.008 L457.305 521.221 L456.834 521.402 L456.364 521.563 L455.894 521.723 L455.424 521.891 L454.954 522.067 L454.484 522.259 L454.013 522.477 L453.543 522.73 L453.073 523.018 L452.603 523.335 L452.133 523.677 L451.662 524.031 L451.192 524.39 L450.722 524.755 L450.252 525.13 L449.782 525.518 L449.311 525.916 L448.841 526.314 L448.371 526.705 L447.901 527.076 L447.431 527.416 L446.961 527.709 L446.49 527.953 L446.02 528.147 L445.55 528.301 L445.08 528.429 L444.61 528.541 L444.139 528.639 L443.669 528.71 L443.199 528.75 L442.729 528.762 L442.259 528.759 L441.789 528.746 L441.318 528.736 L440.848 528.733 L440.378 528.743 L439.908 528.77 L439.438 528.814 L438.967 528.879 L438.497 528.963 L438.027 529.06 L437.557 529.168 L437.087 529.274 L436.616 529.373 L436.146 529.458 L435.676 529.52 L435.206 529.549 L434.736 529.543 L434.266 529.503 L433.795 529.436 L433.325 529.349 L432.855 529.254 L432.385 529.156 L431.915 529.068 L431.444 529.008 L430.974 528.986 L430.504 529.009 L430.034 529.081 L429.564 529.181 L429.093 529.298 L428.623 529.426 L428.153 529.567 L427.683 529.731 L427.213 529.922 L426.743 530.137 L426.272 530.378 L425.802 530.641 L425.332 530.917 L424.862 531.193 L424.392 531.45 L423.921 531.668 L423.451 531.84 L422.981 531.969 L422.511 532.057 L422.041 532.105 L421.57 532.117 L421.1 532.108 L420.63 532.093 L420.16 532.083 L419.69 532.089 L419.22 532.115 L418.749 532.152 L418.279 532.186 L417.809 532.207 L417.339 532.209 L416.869 532.192 L416.398 532.17 L415.928 532.156 L415.458 532.169 L414.988 532.225 L414.518 532.324 L414.047 532.463 L413.577 532.653 L413.107 532.899 L412.637 533.2 L412.167 533.557 L411.697 533.963 L411.226 534.403 L410.756 534.867 L410.286 535.337 L409.816 535.794 L409.346 536.23 L408.875 536.645 L408.405 537.036 L407.935 537.401 L407.465 537.74 L406.995 538.06 L406.525 538.364 L406.054 538.648 L405.584 538.919 L405.114 539.19 L404.644 539.47 L404.174 539.765 L403.703 540.078 L403.233 540.409 L402.763 540.75 L402.293 541.093 L401.823 541.423 L401.352 541.729 L400.882 542.015 L400.412 542.285 L399.942 542.541 L399.472 542.791 L399.002 543.039 L398.531 543.285 L398.061 543.525 L397.591 543.759 L397.121 543.985 L396.651 544.203 L396.18 544.418 L395.71 544.632 L395.24 544.845 L394.77 545.062 L394.3 545.292 L393.829 545.543 L393.359 545.824 L392.889 546.152 L392.419 546.534 L391.949 546.983 L391.479 547.498 L391.008 548.054 L390.538 548.62 L390.068 549.169 L389.598 549.683 L389.128 550.136 L388.657 550.518 L388.187 550.832 L387.717 551.085 L387.247 551.29 L386.777 551.455 L386.306 551.601 L385.836 551.743 L385.366 551.887 L384.896 552.034 L384.426 552.188 L383.956 552.348 L383.485 552.517 L383.015 552.7 L382.545 552.893 L382.075 553.094 L381.605 553.315 L381.134 553.564 L380.664 553.854 L380.194 554.199 L379.724 554.598 L379.254 555.039 L378.783 555.498 L378.313 555.957 L377.843 556.398 L377.373 556.811 L376.903 557.187 L376.433 557.525 L375.962 557.828 L375.492 558.106 L375.022 558.372 L374.552 558.639 L374.082 558.918 L373.611 559.225 L373.141 559.573 L372.671 559.966 L372.201 560.393 L371.731 560.852 L371.261 561.341 L370.79 561.85 L370.32 562.375 L369.85 562.903 L369.38 563.422 L368.91 563.924 L368.439 564.407 L367.969 564.865 L367.499 565.299 L367.029 565.709 L366.559 566.099 L366.088 566.469 L365.618 566.821 L365.148 567.171 L364.678 567.52 L364.208 567.87 L363.738 568.216 L363.267 568.548 L362.797 568.863 L362.327 569.159 L361.857 569.437 L361.387 569.703 L360.916 569.957 L360.446 570.193 L359.976 570.406 L359.506 570.604 L359.036 570.802 L358.565 571.011 L358.095 571.247 L357.625 571.517 L357.155 571.818 L356.685 572.143 L356.215 572.487 L355.744 572.848 L355.274 573.221 L354.804 573.611 L354.334 574.02 L353.864 574.454 L353.393 574.916 L352.923 575.397 L352.453 575.884 L351.983 576.354 L351.513 576.798 L351.042 577.204 L350.572 577.572 L350.102 577.918 L349.632 578.258 L349.162 578.615 L348.692 579.01 L348.221 579.453 L347.751 579.947 L347.281 580.487 L346.811 581.073 L346.341 581.703 L345.87 582.372 L345.4 583.071 L344.93 583.784 L344.46 584.495 L343.99 585.199 L343.519 585.892 L343.049 586.578 L342.579 587.257 L342.109 587.931 L341.639 588.614 L341.169 589.311 L340.698 590.017 L340.228 590.729 L339.758 591.443 L339.288 592.153 L338.818 592.861 L338.347 593.563 L337.877 594.259 L337.407 594.94 L336.937 595.597 L336.467 596.222 L335.997 596.805 L335.526 597.33 L335.056 597.784 L334.586 598.159 L334.116 598.452 L333.646 598.657 L333.175 598.772 L332.705 598.811 L332.235 598.803 L331.765 598.787 L331.295 598.786  Z" fill="#ffa500" fill-rule="evenodd" fill-opacity="0.3"/>
<polyline clip-path="url(#clip862)" style="stroke:#ffa500; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" stroke-dasharray="32, 20" points="331.295,598.832 331.765,598.847 332.235,598.854 332.705,598.854 333.175,598.847 333.646,598.833 334.116,598.807 334.586,598.767 335.056,598.707 335.526,598.622 335.997,598.513 336.467,598.386 336.937,598.251 337.407,598.116 337.877,597.983 338.347,597.859 338.818,597.749 339.288,597.653 339.758,597.57 340.228,597.497 340.698,597.438 341.169,597.395 341.639,597.37 342.109,597.365 342.579,597.374 343.049,597.382 343.519,597.386 343.99,597.384 344.46,597.37 344.93,597.348 345.4,597.321 345.87,597.305 346.341,597.315 346.811,597.359 347.281,597.44 347.751,597.56 348.221,597.719 348.692,597.92 349.162,598.162 349.632,598.432 350.102,598.709 350.572,598.971 351.042,599.201 351.513,599.382 351.983,599.515 352.453,599.609 352.923,599.677 353.393,599.739 353.864,599.808 354.334,599.894 354.804,599.994 355.274,600.101 355.744,600.214 356.215,600.328 356.685,600.447 357.155,600.575 357.625,600.714 358.095,600.874 358.565,601.057 359.036,601.256 359.506,601.456 359.976,601.645 360.446,601.808 360.916,601.938 361.387,602.04 361.857,602.12 362.327,602.178 362.797,602.209 363.267,602.211 363.738,602.187 364.208,602.139 364.678,602.077 365.148,602.008 365.618,601.929 366.088,601.838 366.559,601.722 367.029,601.576 367.499,601.402 367.969,601.195 368.439,600.957 368.91,600.685 369.38,600.385 369.85,600.06 370.32,599.719 370.79,599.372 371.261,599.033 371.731,598.708 372.201,598.404 372.671,598.124 373.141,597.871 373.611,597.656 374.082,597.474 374.552,597.313 375.022,597.158 375.492,596.996 375.962,596.815 376.433,596.603 376.903,596.35 377.373,596.053 377.843,595.712 378.313,595.337 378.783,594.939 379.254,594.535 379.724,594.144 380.194,593.79 380.664,593.486 381.134,593.232 381.605,593.015 382.075,592.821 382.545,592.643 383.015,592.471 383.485,592.305 383.956,592.151 384.426,592.002 384.896,591.858 385.366,591.717 385.836,591.579 386.306,591.44 386.777,591.297 387.247,591.133 387.717,590.929 388.187,590.676 388.657,590.362 389.128,589.979 389.598,589.526 390.068,589.014 390.538,588.465 391.008,587.901 391.479,587.347 391.949,586.837 392.419,586.393 392.889,586.017 393.359,585.698 393.829,585.426 394.3,585.186 394.77,584.969 395.24,584.767 395.71,584.571 396.18,584.375 396.651,584.181 397.121,583.984 397.591,583.783 398.061,583.575 398.531,583.362 399.002,583.146 399.472,582.93 399.942,582.712 400.412,582.491 400.882,582.257 401.352,582.008 401.823,581.74 402.293,581.451 402.763,581.149 403.233,580.85 403.703,580.562 404.174,580.293 404.644,580.043 405.114,579.809 405.584,579.583 406.054,579.359 406.525,579.122 406.995,578.866 407.465,578.593 407.935,578.302 408.405,577.985 408.875,577.641 409.346,577.275 409.816,576.888 410.286,576.479 410.756,576.057 411.226,575.641 411.697,575.248 412.167,574.89 412.637,574.58 413.107,574.326 413.577,574.127 414.047,573.984 414.518,573.891 414.988,573.839 415.458,573.828 415.928,573.861 416.398,573.921 416.869,573.987 417.339,574.049 417.809,574.093 418.279,574.116 418.749,574.127 419.22,574.134 419.69,574.151 420.16,574.189 420.63,574.242 421.1,574.301 421.57,574.353 422.041,574.383 422.511,574.377 422.981,574.332 423.451,574.244 423.921,574.113 424.392,573.936 424.862,573.72 425.332,573.484 425.802,573.249 426.272,573.025 426.743,572.823 427.213,572.646 427.683,572.492 428.153,572.365 428.623,572.26 429.093,572.169 429.564,572.086 430.034,572.02 430.504,571.982 430.974,571.991 431.444,572.045 431.915,572.135 432.385,572.253 432.855,572.38 433.325,572.503 433.795,572.616 434.266,572.709 434.736,572.774 435.206,572.803 435.676,572.796 436.146,572.756 436.616,572.69 437.087,572.611 437.557,572.522 438.027,572.432 438.497,572.35 438.967,572.28 439.438,572.23 439.908,572.198 440.378,572.183 440.848,572.183 441.318,572.195 441.789,572.215 442.259,572.235 442.729,572.245 443.199,572.239 443.669,572.205 444.139,572.138 444.61,572.044 445.08,571.936 445.55,571.81 446.02,571.658 446.49,571.466 446.961,571.224 447.431,570.931 447.901,570.593 448.371,570.222 448.841,569.831 449.311,569.433 449.782,569.035 450.252,568.648 450.722,568.273 451.192,567.907 451.662,567.548 452.133,567.195 452.603,566.853 453.073,566.536 453.543,566.249 454.013,565.998 454.484,565.78 454.954,565.591 455.424,565.417 455.894,565.251 456.364,565.093 456.834,564.936 457.305,564.758 457.775,564.549 458.245,564.303 458.715,564.023 459.185,563.707 459.656,563.357 460.126,562.967 460.596,562.544 461.066,562.103 461.536,561.658 462.007,561.208 462.477,560.756 462.947,560.31 463.417,559.872 463.887,559.435 464.357,558.99 464.828,558.531 465.298,558.069 465.768,557.623 466.238,557.207 466.708,556.833 467.179,556.506 467.649,556.229 468.119,556.004 468.589,555.831 469.059,555.694 469.53,555.573 470,555.447 470.47,555.301 470.94,555.124 471.41,554.915 471.88,554.675 472.351,554.407 472.821,554.117 473.291,553.81 473.761,553.485 474.231,553.145 474.702,552.786 475.172,552.402 475.642,552.006 476.112,551.608 476.582,551.223 477.053,550.865 477.523,550.536 477.993,550.237 478.463,549.969 478.933,549.729 479.403,549.51 479.874,549.31 480.344,549.123 480.814,548.947 481.284,548.788 481.754,548.647 482.225,548.515 482.695,548.392 483.165,548.277 483.635,548.17 484.105,548.071 484.575,547.968 485.046,547.851 485.516,547.714 485.986,547.56 486.456,547.405 486.926,547.264 487.397,547.148 487.867,547.061 488.337,546.997 488.807,546.941 489.277,546.882 489.748,546.812 490.218,546.727 490.688,546.629 491.158,546.521 491.628,546.416 492.098,546.331 492.569,546.275 493.039,546.247 493.509,546.238 493.979,546.23 494.449,546.205 494.92,546.138 495.39,546.003 495.86,545.794 496.33,545.511 496.8,545.16 497.271,544.767 497.741,544.362 498.211,543.969 498.681,543.605 499.151,543.281 499.621,543.006 500.092,542.781 500.562,542.591 501.032,542.435 501.502,542.297 501.972,542.17 502.443,542.045 502.913,541.926 503.383,541.807 503.853,541.68 504.323,541.546 504.794,541.411 505.264,541.271 505.734,541.128 506.204,540.978 506.674,540.819 507.144,540.645 507.615,540.449 508.085,540.222 508.555,539.965 509.025,539.677 509.495,539.368 509.966,539.04 510.436,538.706 510.906,538.387 511.376,538.091 511.846,537.824 512.317,537.587 512.787,537.379 513.257,537.203 513.727,537.057 514.197,536.935 514.667,536.83 515.138,536.735 515.608,536.657 516.078,536.609 516.548,536.59 517.018,536.596 517.489,536.619 517.959,536.661 518.429,536.713 518.899,536.767 519.369,536.825 519.839,536.88 520.31,536.937 520.78,536.997 521.25,537.061 521.72,537.136 522.19,537.222 522.661,537.318 523.131,537.417 523.601,537.512 524.071,537.598 524.541,537.672 525.012,537.737 525.482,537.789 525.952,537.834 526.422,537.873 526.892,537.914 527.362,537.967 527.833,538.043 528.303,538.15 528.773,538.3 529.243,538.483 529.713,538.7 530.184,538.957 530.654,539.255 531.124,539.591 531.594,539.961 532.064,540.369 532.535,540.804 533.005,541.253 533.475,541.703 533.945,542.136 534.415,542.544 534.885,542.911 535.356,543.236 535.826,543.535 536.296,543.827 536.766,544.139 537.236,544.481 537.707,544.865 538.177,545.291 538.647,545.763 539.117,546.277 539.587,546.823 540.058,547.39 540.528,547.971 540.998,548.568 541.468,549.182 541.938,549.803 542.408,550.415 542.879,551.005 543.349,551.564 543.819,552.097 544.289,552.621 544.759,553.148 545.23,553.682 545.7,554.229 546.17,554.798 546.64,555.382 547.11,555.971 547.581,556.554 548.051,557.126 548.521,557.68 548.991,558.214 549.461,558.724 549.931,559.215 550.402,559.706 550.872,560.22 551.342,560.778 551.812,561.385 552.282,562.048 552.753,562.757 553.223,563.498 553.693,564.252 554.163,565.008 554.633,565.759 555.103,566.503 555.574,567.241 556.044,567.986 556.514,568.751 556.984,569.535 557.454,570.342 557.925,571.17 558.395,572.02 558.865,572.881 559.335,573.749 559.805,574.618 560.276,575.48 560.746,576.334 561.216,577.178 561.686,578.01 562.156,578.838 562.626,579.662 563.097,580.478 563.567,581.284 564.037,582.082 564.507,582.874 564.977,583.673 565.448,584.484 565.918,585.315 566.388,586.171 566.858,587.051 567.328,587.959 567.799,588.9 568.269,589.859 568.739,590.826 569.209,591.794 569.679,592.755 570.149,593.704 570.62,594.644 571.09,595.576 571.56,596.502 572.03,597.421 572.5,598.339 572.971,599.255 573.441,600.172 573.911,601.09 574.381,602.005 574.851,602.915 575.322,603.825 575.792,604.745 576.262,605.687 576.732,606.647 577.202,607.616 577.672,608.587 578.143,609.555 578.613,610.521 579.083,611.495 579.553,612.483 580.023,613.485 580.494,614.499 580.964,615.522 581.434,616.537 581.904,617.533 582.374,618.501 582.844,619.416 583.315,620.255 583.785,621.011 584.255,621.685 584.725,622.284 585.195,622.826 585.666,623.327 586.136,623.802 586.606,624.277 587.076,624.77 587.546,625.297 588.017,625.864 588.487,626.465 588.957,627.082 589.427,627.703 589.897,628.319 590.367,628.924 590.838,629.52 591.308,630.117 591.778,630.729 592.248,631.361 592.718,632.022 593.189,632.714 593.659,633.433 594.129,634.167 594.599,634.907 595.069,635.644 595.54,636.369 596.01,637.073 596.48,637.754 596.95,638.422 597.42,639.085 597.89,639.75 598.361,640.418 598.831,641.087 599.301,641.742 599.771,642.373 600.241,642.962 600.712,643.504 601.182,643.99 601.652,644.43 602.122,644.841 602.592,645.234 603.063,645.622 603.533,646.011 604.003,646.409 604.473,646.818 604.943,647.231 605.413,647.641 605.884,648.046 606.354,648.447 606.824,648.848 607.294,649.251 607.764,649.655 608.235,650.065 608.705,650.494 609.175,650.955 609.645,651.439 610.115,651.931 610.586,652.424 611.056,652.928 611.526,653.458 611.996,654.025 612.466,654.635 612.936,655.282 613.407,655.951 613.877,656.626 614.347,657.296 614.817,657.95 615.287,658.569 615.758,659.139 616.228,659.663 616.698,660.136 617.168,660.561 617.638,660.94 618.108,661.273 618.579,661.555 619.049,661.784 619.519,661.958 619.989,662.081 620.459,662.162 620.93,662.214 621.4,662.254 621.87,662.291 622.34,662.332 622.81,662.383 623.281,662.448 623.751,662.531 624.221,662.628 624.691,662.728 625.161,662.816 625.631,662.869 626.102,662.868 626.572,662.807 627.042,662.683 627.512,662.502 627.982,662.282 628.453,662.039 628.923,661.797 629.393,661.575 629.863,661.386 630.333,661.239 630.804,661.136 631.274,661.072 631.744,661.029 632.214,660.99 632.684,660.943 633.154,660.881 633.625,660.798 634.095,660.701 634.565,660.588 635.035,660.455 635.505,660.292 635.976,660.088 636.446,659.843 636.916,659.561 637.386,659.242 637.856,658.892 638.327,658.523 638.797,658.15 639.267,657.784 639.737,657.43 640.207,657.078 640.677,656.725 641.148,656.365 641.618,655.996 642.088,655.618 642.558,655.236 643.028,654.852 643.499,654.474 643.969,654.107 644.439,653.755 644.909,653.415 645.379,653.077 645.85,652.729 646.32,652.369 646.79,651.993 647.26,651.607 647.73,651.222 648.2,650.832 648.671,650.434 649.141,650.02 649.611,649.583 650.081,649.115 650.551,648.613 651.022,648.067 651.492,647.472 651.962,646.829 652.432,646.144 652.902,645.414 653.372,644.634 653.843,643.807 654.313,642.943 654.783,642.046 655.253,641.116 655.723,640.161 656.194,639.187 656.664,638.186 657.134,637.147 657.604,636.065 658.074,634.941 658.545,633.792 659.015,632.637 659.485,631.501 659.955,630.402 660.425,629.347 660.895,628.333 661.366,627.345 661.836,626.369 662.306,625.399 662.776,624.427 663.246,623.448 663.717,622.451 664.187,621.438 664.657,620.413 665.127,619.38 665.597,618.345 666.068,617.314 666.538,616.288 667.008,615.27 667.478,614.258 667.948,613.238 668.418,612.195 668.889,611.133 669.359,610.068 669.829,609.01 670.299,607.958 670.769,606.913 671.24,605.866 671.71,604.808 672.18,603.728 672.65,602.612 673.12,601.449 673.591,600.255 674.061,599.045 674.531,597.833 675.001,596.628 675.471,595.447 675.941,594.313 676.412,593.244 676.882,592.236 677.352,591.277 677.822,590.353 678.292,589.46 678.763,588.588 679.233,587.733 679.703,586.891 680.173,586.063 680.643,585.249 681.114,584.436 681.584,583.615 682.054,582.768 682.524,581.884 682.994,580.965 683.464,580.016 683.935,579.048 684.405,578.061 684.875,577.053 685.345,576.034 685.815,575.007 686.286,573.968 686.756,572.918 687.226,571.864 687.696,570.815 688.166,569.782 688.636,568.768 689.107,567.761 689.577,566.738 690.047,565.683 690.517,564.577 690.987,563.413 691.458,562.195 691.928,560.937 692.398,559.662 692.868,558.389 693.338,557.132 693.809,555.912 694.279,554.751 694.749,553.659 695.219,552.632 695.689,551.654 696.159,550.706 696.63,549.775 697.1,548.86 697.57,547.96 698.04,547.079 698.51,546.207 698.981,545.336 699.451,544.45 699.921,543.545 700.391,542.622 700.861,541.698 701.332,540.785 701.802,539.891 702.272,539.019 702.742,538.164 703.212,537.332 703.682,536.529 704.153,535.772 704.623,535.069 705.093,534.422 705.563,533.83 706.033,533.278 706.504,532.74 706.974,532.198 707.444,531.631 707.914,531.032 708.384,530.397 708.855,529.719 709.325,529.005 709.795,528.265 710.265,527.515 710.735,526.765 711.205,526.019 711.676,525.282 712.146,524.557 712.616,523.849 713.086,523.163 713.556,522.51 714.027,521.898 714.497,521.336 714.967,520.824 715.437,520.354 715.907,519.909 716.378,519.479 716.848,519.057 717.318,518.637 717.788,518.204 718.258,517.75 718.728,517.269 719.199,516.757 719.669,516.225 720.139,515.683 720.609,515.151 721.079,514.634 721.55,514.13 722.02,513.646 722.49,513.188 722.96,512.76 723.43,512.359 723.9,511.979 724.371,511.607 724.841,511.235 725.311,510.859 725.781,510.48 726.251,510.098 726.722,509.718 727.192,509.339 727.662,508.967 728.132,508.608 728.602,508.266 729.073,507.948 729.543,507.666 730.013,507.416 730.483,507.186 730.953,506.964 731.423,506.742 731.894,506.512 732.364,506.274 732.834,506.038 733.304,505.816 733.774,505.623 734.245,505.471 734.715,505.366 735.185,505.313 735.655,505.299 736.125,505.306 736.596,505.321 737.066,505.334 737.536,505.326 738.006,505.278 738.476,505.185 738.946,505.047 739.417,504.87 739.887,504.664 740.357,504.45 740.827,504.248 741.297,504.071 741.768,503.919 742.238,503.787 742.708,503.676 743.178,503.589 743.648,503.542 744.119,503.532 744.589,503.556 745.059,503.618 745.529,503.713 745.999,503.834 746.469,503.977 746.94,504.137 747.41,504.317 747.88,504.519 748.35,504.736 748.82,504.955 749.291,505.166 749.761,505.353 750.231,505.506 750.701,505.623 751.171,505.713 751.642,505.78 752.112,505.836 752.582,505.89 753.052,505.95 753.522,506.022 753.992,506.108 754.463,506.21 754.933,506.333 755.403,506.477 755.873,506.639 756.343,506.819 756.814,507.031 757.284,507.285 757.754,507.58 758.224,507.912 758.694,508.273 759.164,508.645 759.635,509.013 760.105,509.361 760.575,509.67 761.045,509.935 761.515,510.158 761.986,510.353 762.456,510.538 762.926,510.732 763.396,510.961 763.866,511.237 764.337,511.573 764.807,511.966 765.277,512.417 765.747,512.924 766.217,513.472 766.687,514.041 767.158,514.611 767.628,515.166 768.098,515.697 768.568,516.195 769.038,516.656 769.509,517.087 769.979,517.496 770.449,517.899 770.919,518.312 771.389,518.747 771.86,519.21 772.33,519.704 772.8,520.234 773.27,520.807 773.74,521.428 774.21,522.097 774.681,522.798 775.151,523.515 775.621,524.231 776.091,524.93 776.561,525.605 777.032,526.251 777.502,526.878 777.972,527.505 778.442,528.141 778.912,528.794 779.383,529.477 779.853,530.196 780.323,530.946 780.793,531.715 781.263,532.498 781.733,533.297 782.204,534.108 782.674,534.928 783.144,535.747 783.614,536.563 784.084,537.376 784.555,538.186 785.025,539.004 785.495,539.837 785.965,540.683 786.435,541.532 786.906,542.384 787.376,543.249 787.846,544.132 788.316,545.035 788.786,545.952 789.256,546.88 789.727,547.819 790.197,548.77 790.667,549.73 791.137,550.699 791.607,551.673 792.078,552.643 792.548,553.605 793.018,554.558 793.488,555.503 793.958,556.444 794.428,557.387 794.899,558.333 795.369,559.283 795.839,560.239 796.309,561.197 796.779,562.162 797.25,563.135 797.72,564.113 798.19,565.097 798.66,566.086 799.13,567.077 799.601,568.066 800.071,569.047 800.541,570.021 801.011,570.996 801.481,571.982 801.951,572.982 802.422,574.015 802.892,575.081 803.362,576.188 803.832,577.328 804.302,578.487 804.773,579.654 805.243,580.818 805.713,581.964 806.183,583.073 806.653,584.142 807.124,585.175 807.594,586.189 808.064,587.201 808.534,588.229 809.004,589.287 809.474,590.385 809.945,591.535 810.415,592.742 810.885,594.005 811.355,595.318 811.825,596.677 812.296,598.068 812.766,599.486 813.236,600.918 813.706,602.355 814.176,603.781 814.647,605.184 815.117,606.557 815.587,607.905 816.057,609.225 816.527,610.521 816.997,611.79 817.468,613.03 817.938,614.248 818.408,615.455 818.878,616.655 819.348,617.846 819.819,619.025 820.289,620.189 820.759,621.34 821.229,622.472 821.699,623.58 822.17,624.659 822.64,625.71 823.11,626.729 823.58,627.721 824.05,628.7 824.52,629.679 824.991,630.671 825.461,631.692 825.931,632.755 826.401,633.862 826.871,635.002 827.342,636.149 827.812,637.275 828.282,638.358 828.752,639.386 829.222,640.357 829.692,641.268 830.163,642.132 830.633,642.967 831.103,643.794 831.573,644.63 832.043,645.479 832.514,646.341 832.984,647.202 833.454,648.055 833.924,648.897 834.394,649.729 834.865,650.558 835.335,651.387 835.805,652.219 836.275,653.049 836.745,653.869 837.215,654.673 837.686,655.461 838.156,656.233 838.626,656.997 839.096,657.756 839.566,658.515 840.037,659.284 840.507,660.064 840.977,660.855 841.447,661.661 841.917,662.48 842.388,663.31 842.858,664.141 843.328,664.961 843.798,665.754 844.268,666.516 844.738,667.25 845.209,667.969 845.679,668.679 846.149,669.391 846.619,670.107 847.089,670.83 847.56,671.546 848.03,672.242 848.5,672.903 848.97,673.526 849.44,674.107 849.911,674.648 850.381,675.157 850.851,675.653 851.321,676.161 851.791,676.696 852.261,677.275 852.732,677.905 853.202,678.581 853.672,679.298 854.142,680.04 854.612,680.805 855.083,681.591 855.553,682.39 856.023,683.191 856.493,683.978 856.963,684.741 857.434,685.471 857.904,686.161 858.374,686.801 858.844,687.376 859.314,687.879 859.784,688.31 860.255,688.667 860.725,688.946 861.195,689.156 861.665,689.309 862.135,689.427 862.606,689.528 863.076,689.629 863.546,689.741 864.016,689.871 864.486,690.022 864.956,690.193 865.427,690.382 865.897,690.589 866.367,690.816 866.837,691.056 867.307,691.304 867.778,691.557 868.248,691.808 868.718,692.051 869.188,692.275 869.658,692.474 870.129,692.652 870.599,692.816 871.069,692.979 871.539,693.143 872.009,693.306 872.479,693.454 872.95,693.586 873.42,693.704 873.89,693.811 874.36,693.904 874.83,693.982 875.301,694.043 875.771,694.096 876.241,694.155 876.711,694.229 877.181,694.325 877.652,694.436 878.122,694.555 878.592,694.683 879.062,694.82 879.532,694.955 880.002,695.071 880.473,695.144 880.943,695.162 881.413,695.124 881.883,695.034 882.353,694.899 882.824,694.726 883.294,694.523 883.764,694.308 884.234,694.091 884.704,693.887 885.175,693.701 885.645,693.54 886.115,693.407 886.585,693.3 887.055,693.229 887.525,693.184 887.996,693.148 888.466,693.102 888.936,693.037 889.406,692.946 889.876,692.828 890.347,692.677 890.817,692.485 891.287,692.252 891.757,691.982 892.227,691.685 892.698,691.37 893.168,691.056 893.638,690.749 894.108,690.431 894.578,690.082 895.048,689.692 895.519,689.251 895.989,688.757 896.459,688.209 896.929,687.606 897.399,686.94 897.87,686.209 898.34,685.424 898.81,684.592 899.28,683.726 899.75,682.838 900.22,681.933 900.691,681.011 901.161,680.072 901.631,679.131 902.101,678.198 902.571,677.27 903.042,676.357 903.512,675.468 903.982,674.599 904.452,673.744 904.922,672.886 905.393,672.023 905.863,671.159 906.333,670.291 906.803,669.411 907.273,668.505 907.743,667.56 908.214,666.56 908.684,665.494 909.154,664.359 909.624,663.163 910.094,661.917 910.565,660.637 911.035,659.348 911.505,658.072 911.975,656.814 912.445,655.575 912.916,654.343 913.386,653.096 913.856,651.81 914.326,650.473 914.796,649.08 915.266,647.626 915.737,646.113 916.207,644.544 916.677,642.922 917.147,641.264 917.617,639.588 918.088,637.906 918.558,636.232 919.028,634.574 919.498,632.949 919.968,631.368 920.439,629.841 920.909,628.36 921.379,626.902 921.849,625.442 922.319,623.951 922.789,622.415 923.26,620.825 923.73,619.177 924.2,617.482 924.67,615.766 925.14,614.041 925.611,612.323 926.081,610.616 926.551,608.917 927.021,607.223 927.491,605.531 927.962,603.839 928.432,602.152 928.902,600.473 929.372,598.812 929.842,597.181 930.312,595.58 930.783,594.008 931.253,592.457 931.723,590.917 932.193,589.378 932.663,587.832 933.134,586.27 933.604,584.682 934.074,583.066 934.544,581.435 935.014,579.795 935.484,578.155 935.955,576.509 936.425,574.864 936.895,573.227 937.365,571.598 937.835,569.977 938.306,568.362 938.776,566.738 939.246,565.102 939.716,563.447 940.186,561.773 940.657,560.088 941.127,558.399 941.597,556.709 942.067,555.017 942.537,553.32 943.007,551.615 943.478,549.909 943.948,548.215 944.418,546.544 944.888,544.902 945.358,543.286 945.829,541.701 946.299,540.147 946.769,538.624 947.239,537.135 947.709,535.687 948.18,534.277 948.65,532.898 949.12,531.552 949.59,530.236 950.06,528.95 950.53,527.682 951.001,526.416 951.471,525.152 951.941,523.89 952.411,522.625 952.881,521.346 953.352,520.048 953.822,518.732 954.292,517.408 954.762,516.086 955.232,514.777 955.703,513.49 956.173,512.218 956.643,510.957 957.113,509.707 957.583,508.46 958.053,507.214 958.524,505.971 958.994,504.739 959.464,503.53 959.934,502.354 960.404,501.204 960.875,500.07 961.345,498.946 961.815,497.814 962.285,496.654 962.755,495.461 963.226,494.239 963.696,492.993 964.166,491.737 964.636,490.492 965.106,489.269 965.576,488.077 966.047,486.924 966.517,485.805 966.987,484.714 967.457,483.645 967.927,482.597 968.398,481.571 968.868,480.57 969.338,479.592 969.808,478.629 970.278,477.666 970.748,476.692 971.219,475.711 971.689,474.726 972.159,473.741 972.629,472.756 973.099,471.78 973.57,470.828 974.04,469.91 974.51,469.033 974.98,468.203 975.45,467.42 975.921,466.692 976.391,466.017 976.861,465.397 977.331,464.827 977.801,464.29 978.271,463.776 978.742,463.277 979.212,462.777 979.682,462.256 980.152,461.709 980.622,461.137 981.093,460.545 981.563,459.936 982.033,459.316 982.503,458.694 982.973,458.088 983.444,457.5 983.914,456.928 984.384,456.37 984.854,455.833 985.324,455.322 985.794,454.849 986.265,454.433 986.735,454.075 987.205,453.767 987.675,453.489 988.145,453.217 988.616,452.923 989.086,452.59 989.556,452.208 990.026,451.776 990.496,451.303 990.967,450.812 991.437,450.319 991.907,449.836 992.377,449.371 992.847,448.93 993.317,448.518 993.788,448.143 994.258,447.814 994.728,447.535 995.198,447.308 995.668,447.135 996.139,447.013 996.609,446.926 997.079,446.866 997.549,446.828 998.019,446.822 998.49,446.858 998.96,446.936 999.43,447.062 999.9,447.235 1000.37,447.447 1000.84,447.688 1001.31,447.947 1001.78,448.21 1002.25,448.469 1002.72,448.722 1003.19,448.983 1003.66,449.269 1004.13,449.597 1004.6,449.974 1005.07,450.407 1005.54,450.895 1006.01,451.436 1006.48,452.022 1006.95,452.636 1007.42,453.268 1007.89,453.918 1008.36,454.584 1008.83,455.276 1009.3,455.994 1009.77,456.739 1010.24,457.51 1010.71,458.305 1011.18,459.127 1011.65,459.972 1012.12,460.844 1012.6,461.746 1013.07,462.679 1013.54,463.641 1014.01,464.632 1014.48,465.642 1014.95,466.664 1015.42,467.699 1015.89,468.736 1016.36,469.775 1016.83,470.821 1017.3,471.884 1017.77,472.969 1018.24,474.083 1018.71,475.221 1019.18,476.372 1019.65,477.529 1020.12,478.684 1020.59,479.841 1021.06,481 1021.53,482.16 1022,483.32 1022.47,484.48 1022.94,485.649 1023.41,486.833 1023.88,488.04 1024.35,489.28 1024.82,490.564 1025.29,491.903 1025.76,493.291 1026.23,494.709 1026.7,496.139 1027.17,497.569 1027.64,498.977 1028.11,500.349 1028.58,501.674 1029.05,502.95 1029.52,504.182 1029.99,505.372 1030.46,506.541 1030.93,507.705 1031.4,508.875 1031.87,510.052 1032.34,511.232 1032.81,512.429 1033.28,513.646 1033.75,514.891 1034.22,516.169 1034.69,517.477 1035.16,518.809 1035.63,520.158 1036.1,521.523 1036.57,522.902 1037.04,524.292 1037.51,525.697 1037.99,527.123 1038.46,528.567 1038.93,530.028 1039.4,531.507 1039.87,533.003 1040.34,534.522 1040.81,536.059 1041.28,537.608 1041.75,539.158 1042.22,540.702 1042.69,542.24 1043.16,543.769 1043.63,545.282 1044.1,546.774 1044.57,548.246 1045.04,549.707 1045.51,551.158 1045.98,552.6 1046.45,554.038 1046.92,555.475 1047.39,556.917 1047.86,558.375 1048.33,559.862 1048.8,561.384 1049.27,562.939 1049.74,564.523 1050.21,566.13 1050.68,567.76 1051.15,569.409 1051.62,571.072 1052.09,572.745 1052.56,574.411 1053.03,576.066 1053.5,577.711 1053.97,579.353 1054.44,581.008 1054.91,582.684 1055.38,584.386 1055.85,586.113 1056.32,587.861 1056.79,589.616 1057.26,591.366 1057.73,593.11 1058.2,594.845 1058.67,596.561 1059.14,598.249 1059.61,599.902 1060.08,601.53 1060.55,603.14 1061.02,604.729 1061.49,606.303 1061.96,607.869 1062.43,609.446 1062.91,611.052 1063.38,612.696 1063.85,614.372 1064.32,616.076 1064.79,617.805 1065.26,619.551 1065.73,621.307 1066.2,623.05 1066.67,624.762 1067.14,626.435 1067.61,628.067 1068.08,629.667 1068.55,631.243 1069.02,632.796 1069.49,634.33 1069.96,635.856 1070.43,637.367 1070.9,638.861 1071.37,640.353 1071.84,641.854 1072.31,643.37 1072.78,644.905 1073.25,646.466 1073.72,648.062 1074.19,649.697 1074.66,651.366 1075.13,653.06 1075.6,654.761 1076.07,656.451 1076.54,658.118 1077.01,659.758 1077.48,661.358 1077.95,662.911 1078.42,664.408 1078.89,665.847 1079.36,667.227 1079.83,668.56 1080.3,669.869 1080.77,671.167 1081.24,672.466 1081.71,673.775 1082.18,675.101 1082.65,676.442 1083.12,677.796 1083.59,679.165 1084.06,680.549 1084.53,681.942 1085,683.346 1085.47,684.76 1085.94,686.19 1086.41,687.639 1086.88,689.111 1087.35,690.605 1087.82,692.111 1088.3,693.619 1088.77,695.12 1089.24,696.602 1089.71,698.053 1090.18,699.458 1090.65,700.814 1091.12,702.134 1091.59,703.429 1092.06,704.706 1092.53,705.981 1093,707.264 1093.47,708.552 1093.94,709.834 1094.41,711.109 1094.88,712.384 1095.35,713.666 1095.82,714.955 1096.29,716.246 1096.76,717.531 1097.23,718.798 1097.7,720.038 1098.17,721.254 1098.64,722.45 1099.11,723.621 1099.58,724.772 1100.05,725.915 1100.52,727.062 1100.99,728.219 1101.46,729.387 1101.93,730.558 1102.4,731.724 1102.87,732.884 1103.34,734.044 1103.81,735.196 1104.28,736.329 1104.75,737.43 1105.22,738.492 1105.69,739.522 1106.16,740.519 1106.63,741.479 1107.1,742.404 1107.57,743.292 1108.04,744.141 1108.51,744.951 1108.98,745.727 1109.45,746.482 1109.92,747.228 1110.39,747.98 1110.86,748.755 1111.33,749.566 1111.8,750.421 1112.27,751.316 1112.74,752.234 1113.22,753.15 1113.69,754.044 1114.16,754.908 1114.63,755.731 1115.1,756.507 1115.57,757.227 1116.04,757.889 1116.51,758.501 1116.98,759.078 1117.45,759.64 1117.92,760.202 1118.39,760.777 1118.86,761.38 1119.33,762.023 1119.8,762.7 1120.27,763.396 1120.74,764.089 1121.21,764.759 1121.68,765.398 1122.15,766.003 1122.62,766.578 1123.09,767.129 1123.56,767.668 1124.03,768.206 1124.5,768.748 1124.97,769.283 1125.44,769.793 1125.91,770.258 1126.38,770.657 1126.85,770.992 1127.32,771.268 1127.79,771.496 1128.26,771.688 1128.73,771.863 1129.2,772.043 1129.67,772.237 1130.14,772.45 1130.61,772.689 1131.08,772.948 1131.55,773.218 1132.02,773.484 1132.49,773.735 1132.96,773.953 1133.43,774.128 1133.9,774.255 1134.37,774.341 1134.84,774.398 1135.31,774.431 1135.78,774.451 1136.25,774.467 1136.72,774.479 1137.19,774.496 1137.66,774.515 1138.13,774.535 1138.61,774.551 1139.08,774.549 1139.55,774.517 1140.02,774.446 1140.49,774.335 1140.96,774.184 1141.43,773.996 1141.9,773.771 1142.37,773.509 1142.84,773.213 1143.31,772.887 1143.78,772.534 1144.25,772.159 1144.72,771.767 1145.19,771.363 1145.66,770.952 1146.13,770.541 1146.6,770.135 1147.07,769.731 1147.54,769.326 1148.01,768.911 1148.48,768.48 1148.95,768.026 1149.42,767.548 1149.89,767.044 1150.36,766.501 1150.83,765.919 1151.3,765.3 1151.77,764.644 1152.24,763.951 1152.71,763.222 1153.18,762.457 1153.65,761.652 1154.12,760.818 1154.59,759.962 1155.06,759.091 1155.53,758.207 1156,757.316 1156.47,756.419 1156.94,755.519 1157.41,754.61 1157.88,753.686 1158.35,752.744 1158.82,751.789 1159.29,750.82 1159.76,749.84 1160.23,748.843 1160.7,747.823 1161.17,746.778 1161.64,745.701 1162.11,744.583 1162.58,743.423 1163.05,742.229 1163.53,741.008 1164,739.766 1164.47,738.505 1164.94,737.229 1165.41,735.936 1165.88,734.624 1166.35,733.299 1166.82,731.972 1167.29,730.649 1167.76,729.348 1168.23,728.082 1168.7,726.854 1169.17,725.665 1169.64,724.511 1170.11,723.382 1170.58,722.278 1171.05,721.192 1171.52,720.11 1171.99,719.021 1172.46,717.911 1172.93,716.769 1173.4,715.591 1173.87,714.381 1174.34,713.148 1174.81,711.9 1175.28,710.63 1175.75,709.321 1176.22,707.968 1176.69,706.569 1177.16,705.122 1177.63,703.619 1178.1,702.056 1178.57,700.434 1179.04,698.752 1179.51,697.021 1179.98,695.253 1180.45,693.461 1180.92,691.649 1181.39,689.821 1181.86,687.981 1182.33,686.131 1182.8,684.27 1183.27,682.394 1183.74,680.496 1184.21,678.573 1184.68,676.628 1185.15,674.667 1185.62,672.707 1186.09,670.768 1186.56,668.862 1187.03,666.993 1187.5,665.157 1187.97,663.341 1188.44,661.525 1188.92,659.681 1189.39,657.793 1189.86,655.844 1190.33,653.823 1190.8,651.726 1191.27,649.564 1191.74,647.363 1192.21,645.15 1192.68,642.935 1193.15,640.718 1193.62,638.491 1194.09,636.254 1194.56,634.008 1195.03,631.756 1195.5,629.505 1195.97,627.265 1196.44,625.044 1196.91,622.842 1197.38,620.659 1197.85,618.492 1198.32,616.346 1198.79,614.228 1199.26,612.146 1199.73,610.093 1200.2,608.055 1200.67,606.026 1201.14,604.009 1201.61,602.01 1202.08,600.032 1202.55,598.077 1203.02,596.145 1203.49,594.227 1203.96,592.307 1204.43,590.371 1204.9,588.41 1205.37,586.425 1205.84,584.427 1206.31,582.419 1206.78,580.399 1207.25,578.367 1207.72,576.327 1208.19,574.285 1208.66,572.237 1209.13,570.17 1209.6,568.07 1210.07,565.93 1210.54,563.75 1211.01,561.535 1211.48,559.3 1211.95,557.06 1212.42,554.836 1212.89,552.643 1213.36,550.479 1213.83,548.342 1214.31,546.227 1214.78,544.132 1215.25,542.053 1215.72,539.991 1216.19,537.955 1216.66,535.942 1217.13,533.951 1217.6,531.972 1218.07,529.997 1218.54,528.015 1219.01,526.018 1219.48,524.007 1219.95,521.988 1220.42,519.961 1220.89,517.931 1221.36,515.904 1221.83,513.888 1222.3,511.89 1222.77,509.915 1223.24,507.961 1223.71,506.021 1224.18,504.098 1224.65,502.187 1225.12,500.287 1225.59,498.394 1226.06,496.51 1226.53,494.625 1227,492.736 1227.47,490.836 1227.94,488.93 1228.41,487.017 1228.88,485.097 1229.35,483.168 1229.82,481.229 1230.29,479.282 1230.76,477.324 1231.23,475.347 1231.7,473.351 1232.17,471.343 1232.64,469.331 1233.11,467.332 1233.58,465.359 1234.05,463.431 1234.52,461.56 1234.99,459.754 1235.46,458.009 1235.93,456.315 1236.4,454.657 1236.87,453.016 1237.34,451.387 1237.81,449.766 1238.28,448.176 1238.75,446.635 1239.23,445.161 1239.7,443.76 1240.17,442.424 1240.64,441.142 1241.11,439.897 1241.58,438.668 1242.05,437.437 1242.52,436.199 1242.99,434.955 1243.46,433.714 1243.93,432.485 1244.4,431.272 1244.87,430.078 1245.34,428.911 1245.81,427.773 1246.28,426.663 1246.75,425.587 1247.22,424.542 1247.69,423.529 1248.16,422.542 1248.63,421.579 1249.1,420.64 1249.57,419.724 1250.04,418.84 1250.51,417.995 1250.98,417.196 1251.45,416.442 1251.92,415.716 1252.39,414.999 1252.86,414.282 1253.33,413.556 1253.8,412.816 1254.27,412.057 1254.74,411.284 1255.21,410.509 1255.68,409.747 1256.15,409.008 1256.62,408.303 1257.09,407.64 1257.56,407.021 1258.03,406.441 1258.5,405.893 1258.97,405.376 1259.44,404.902 1259.91,404.471 1260.38,404.093 1260.85,403.768 1261.32,403.495 1261.79,403.269 1262.26,403.085 1262.73,402.934 1263.2,402.808 1263.67,402.691 1264.14,402.571 1264.62,402.439 1265.09,402.294 1265.56,402.143 1266.03,401.998 1266.5,401.87 1266.97,401.773 1267.44,401.72 1267.91,401.71 1268.38,401.74 1268.85,401.801 1269.32,401.879 1269.79,401.946 1270.26,401.981 1270.73,401.973 1271.2,401.922 1271.67,401.837 1272.14,401.743 1272.61,401.664 1273.08,401.623 1273.55,401.644 1274.02,401.747 1274.49,401.938 1274.96,402.215 1275.43,402.568 1275.9,402.981 1276.37,403.441 1276.84,403.939 1277.31,404.469 1277.78,405.026 1278.25,405.603 1278.72,406.182 1279.19,406.754 1279.66,407.317 1280.13,407.868 1280.6,408.401 1281.07,408.918 1281.54,409.425 1282.01,409.934 1282.48,410.45 1282.95,410.98 1283.42,411.521 1283.89,412.079 1284.36,412.663 1284.83,413.283 1285.3,413.946 1285.77,414.656 1286.24,415.42 1286.71,416.245 1287.18,417.134 1287.65,418.078 1288.12,419.068 1288.59,420.094 1289.06,421.15 1289.54,422.227 1290.01,423.304 1290.48,424.363 1290.95,425.398 1291.42,426.421 1291.89,427.448 1292.36,428.49 1292.83,429.552 1293.3,430.638 1293.77,431.747 1294.24,432.874 1294.71,434.015 1295.18,435.176 1295.65,436.357 1296.12,437.561 1296.59,438.781 1297.06,440.011 1297.53,441.252 1298,442.505 1298.47,443.767 1298.94,445.035 1299.41,446.315 1299.88,447.603 1300.35,448.903 1300.82,450.211 1301.29,451.525 1301.76,452.851 1302.23,454.201 1302.7,455.574 1303.17,456.973 1303.64,458.394 1304.11,459.826 1304.58,461.264 1305.05,462.705 1305.52,464.145 1305.99,465.592 1306.46,467.055 1306.93,468.547 1307.4,470.075 1307.87,471.643 1308.34,473.243 1308.81,474.871 1309.28,476.518 1309.75,478.175 1310.22,479.827 1310.69,481.46 1311.16,483.064 1311.63,484.632 1312.1,486.158 1312.57,487.649 1313.04,489.12 1313.51,490.588 1313.98,492.062 1314.45,493.546 1314.93,495.044 1315.4,496.563 1315.87,498.114 1316.34,499.713 1316.81,501.377 1317.28,503.116 1317.75,504.923 1318.22,506.781 1318.69,508.674 1319.16,510.585 1319.63,512.499 1320.1,514.404 1320.57,516.289 1321.04,518.143 1321.51,519.963 1321.98,521.755 1322.45,523.532 1322.92,525.315 1323.39,527.113 1323.86,528.934 1324.33,530.771 1324.8,532.621 1325.27,534.477 1325.74,536.349 1326.21,538.245 1326.68,540.179 1327.15,542.16 1327.62,544.193 1328.09,546.267 1328.56,548.37 1329.03,550.484 1329.5,552.596 1329.97,554.691 1330.44,556.759 1330.91,558.79 1331.38,560.782 1331.85,562.731 1332.32,564.635 1332.79,566.493 1333.26,568.3 1333.73,570.059 1334.2,571.782 1334.67,573.484 1335.14,575.171 1335.61,576.849 1336.08,578.517 1336.55,580.173 1337.02,581.824 1337.49,583.477 1337.96,585.147 1338.43,586.845 1338.9,588.572 1339.37,590.327 1339.85,592.108 1340.32,593.91 1340.79,595.729 1341.26,597.562 1341.73,599.41 1342.2,601.275 1342.67,603.149 1343.14,605.023 1343.61,606.898 1344.08,608.774 1344.55,610.644 1345.02,612.497 1345.49,614.323 1345.96,616.105 1346.43,617.838 1346.9,619.524 1347.37,621.173 1347.84,622.796 1348.31,624.407 1348.78,626.019 1349.25,627.65 1349.72,629.312 1350.19,631.012 1350.66,632.747 1351.13,634.504 1351.6,636.273 1352.07,638.043 1352.54,639.817 1353.01,641.596 1353.48,643.369 1353.95,645.131 1354.42,646.873 1354.89,648.592 1355.36,650.292 1355.83,651.98 1356.3,653.666 1356.77,655.368 1357.24,657.099 1357.71,658.862 1358.18,660.649 1358.65,662.452 1359.12,664.258 1359.59,666.054 1360.06,667.827 1360.53,669.569 1361,671.274 1361.47,672.95 1361.94,674.598 1362.41,676.223 1362.88,677.827 1363.35,679.411 1363.82,680.982 1364.29,682.555 1364.76,684.138 1365.24,685.726 1365.71,687.318 1366.18,688.911 1366.65,690.501 1367.12,692.09 1367.59,693.661 1368.06,695.209 1368.53,696.726 1369,698.209 1369.47,699.66 1369.94,701.09 1370.41,702.502 1370.88,703.901 1371.35,705.296 1371.82,706.698 1372.29,708.113 1372.76,709.538 1373.23,710.958 1373.7,712.351 1374.17,713.711 1374.64,715.029 1375.11,716.308 1375.58,717.557 1376.05,718.788 1376.52,720.016 1376.99,721.256 1377.46,722.517 1377.93,723.789 1378.4,725.066 1378.87,726.336 1379.34,727.589 1379.81,728.812 1380.28,729.991 1380.75,731.124 1381.22,732.215 1381.69,733.268 1382.16,734.29 1382.63,735.286 1383.1,736.261 1383.57,737.22 1384.04,738.169 1384.51,739.107 1384.98,740.031 1385.45,740.932 1385.92,741.804 1386.39,742.65 1386.86,743.471 1387.33,744.274 1387.8,745.07 1388.27,745.864 1388.74,746.646 1389.21,747.409 1389.68,748.153 1390.15,748.882 1390.63,749.598 1391.1,750.297 1391.57,750.968 1392.04,751.609 1392.51,752.219 1392.98,752.8 1393.45,753.348 1393.92,753.867 1394.39,754.361 1394.86,754.836 1395.33,755.299 1395.8,755.755 1396.27,756.208 1396.74,756.648 1397.21,757.068 1397.68,757.46 1398.15,757.815 1398.62,758.131 1399.09,758.412 1399.56,758.67 1400.03,758.91 1400.5,759.137 1400.97,759.348 1401.44,759.538 1401.91,759.708 1402.38,759.872 1402.85,760.044 1403.32,760.228 1403.79,760.418 1404.26,760.598 1404.73,760.758 1405.2,760.895 1405.67,761.012 1406.14,761.113 1406.61,761.195 1407.08,761.253 1407.55,761.288 1408.02,761.307 1408.49,761.315 1408.96,761.312 1409.43,761.302 1409.9,761.287 1410.37,761.262 1410.84,761.221 1411.31,761.163 1411.78,761.085 1412.25,760.976 1412.72,760.83 1413.19,760.642 1413.66,760.414 1414.13,760.148 1414.6,759.842 1415.07,759.495 1415.55,759.109 1416.02,758.691 1416.49,758.251 1416.96,757.803 1417.43,757.355 1417.9,756.907 1418.37,756.456 1418.84,755.989 1419.31,755.503 1419.78,754.992 1420.25,754.455 1420.72,753.896 1421.19,753.317 1421.66,752.723 1422.13,752.115 1422.6,751.495 1423.07,750.869 1423.54,750.236 1424.01,749.59 1424.48,748.933 1424.95,748.261 1425.42,747.571 1425.89,746.862 1426.36,746.128 1426.83,745.358 1427.3,744.553 1427.77,743.714 1428.24,742.834 1428.71,741.915 1429.18,740.962 1429.65,739.986 1430.12,739.005 1430.59,738.044 1431.06,737.126 1431.53,736.269 1432,735.469 1432.47,734.712 1432.94,733.981 1433.41,733.259 1433.88,732.527 1434.35,731.77 1434.82,730.985 1435.29,730.17 1435.76,729.339 1436.23,728.497 1436.7,727.642 1437.17,726.767 1437.64,725.861 1438.11,724.907 1438.58,723.899 1439.05,722.831 1439.52,721.709 1439.99,720.539 1440.46,719.338 1440.94,718.116 1441.41,716.89 1441.88,715.668 1442.35,714.45 1442.82,713.228 1443.29,711.984 1443.76,710.705 1444.23,709.388 1444.7,708.031 1445.17,706.643 1445.64,705.238 1446.11,703.831 1446.58,702.428 1447.05,701.033 1447.52,699.641 1447.99,698.24 1448.46,696.813 1448.93,695.353 1449.4,693.861 1449.87,692.337 1450.34,690.787 1450.81,689.219 1451.28,687.64 1451.75,686.055 1452.22,684.464 1452.69,682.861 1453.16,681.253 1453.63,679.645 1454.1,678.044 1454.57,676.456 1455.04,674.879 1455.51,673.313 1455.98,671.748 1456.45,670.173 1456.92,668.579 1457.39,666.959 1457.86,665.307 1458.33,663.618 1458.8,661.885 1459.27,660.114 1459.74,658.315 1460.21,656.498 1460.68,654.661 1461.15,652.817 1461.62,650.978 1462.09,649.155 1462.56,647.359 1463.03,645.59 1463.5,643.844 1463.97,642.109 1464.44,640.374 1464.91,638.628 1465.38,636.867 1465.86,635.086 1466.33,633.284 1466.8,631.46 1467.27,629.618 1467.74,627.754 1468.21,625.864 1468.68,623.946 1469.15,622.004 1469.62,620.049 1470.09,618.098 1470.56,616.159 1471.03,614.236 1471.5,612.334 1471.97,610.452 1472.44,608.59 1472.91,606.754 1473.38,604.938 1473.85,603.124 1474.32,601.297 1474.79,599.444 1475.26,597.554 1475.73,595.623 1476.2,593.645 1476.67,591.622 1477.14,589.548 1477.61,587.426 1478.08,585.262 1478.55,583.082 1479.02,580.908 1479.49,578.768 1479.96,576.676 1480.43,574.643 1480.9,572.673 1481.37,570.768 1481.84,568.924 1482.31,567.125 1482.78,565.356 1483.25,563.603 1483.72,561.849 1484.19,560.075 1484.66,558.265 1485.13,556.41 1485.6,554.512 1486.07,552.58 1486.54,550.634 1487.01,548.7 1487.48,546.795 1487.95,544.935 1488.42,543.121 1488.89,541.341 1489.36,539.585 1489.83,537.841 1490.3,536.094 1490.77,534.333 1491.25,532.565 1491.72,530.779 1492.19,528.975 1492.66,527.159 1493.13,525.339 1493.6,523.526 1494.07,521.73 1494.54,519.959 1495.01,518.215 1495.48,516.497 1495.95,514.797 1496.42,513.108 1496.89,511.432 1497.36,509.755 1497.83,508.068 1498.3,506.365 1498.77,504.635 1499.24,502.879 1499.71,501.111 1500.18,499.345 1500.65,497.598 1501.12,495.883 1501.59,494.201 1502.06,492.547 1502.53,490.916 1503,489.297 1503.47,487.67 1503.94,486.031 1504.41,484.375 1504.88,482.701 1505.35,481.008 1505.82,479.3 1506.29,477.586 1506.76,475.877 1507.23,474.18 1507.7,472.499 1508.17,470.845 1508.64,469.232 1509.11,467.679 1509.58,466.192 1510.05,464.77 1510.52,463.401 1510.99,462.067 1511.46,460.751 1511.93,459.429 1512.4,458.086 1512.87,456.704 1513.34,455.272 1513.81,453.776 1514.28,452.222 1514.75,450.612 1515.22,448.961 1515.69,447.288 1516.17,445.618 1516.64,443.981 1517.11,442.405 1517.58,440.904 1518.05,439.486 1518.52,438.156 1518.99,436.912 1519.46,435.747 1519.93,434.649 1520.4,433.597 1520.87,432.561 1521.34,431.513 1521.81,430.423 1522.28,429.271 1522.75,428.051 1523.22,426.768 1523.69,425.438 1524.16,424.079 1524.63,422.714 1525.1,421.358 1525.57,420.019 1526.04,418.703 1526.51,417.428 1526.98,416.199 1527.45,415.015 1527.92,413.88 1528.39,412.786 1528.86,411.733 1529.33,410.723 1529.8,409.758 1530.27,408.826 1530.74,407.917 1531.21,407.026 1531.68,406.15 1532.15,405.293 1532.62,404.471 1533.09,403.708 1533.56,403.016 1534.03,402.393 1534.5,401.83 1534.97,401.327 1535.44,400.892 1535.91,400.529 1536.38,400.234 1536.85,400.001 1537.32,399.819 1537.79,399.686 1538.26,399.6 1538.73,399.559 1539.2,399.565 1539.67,399.61 1540.14,399.692 1540.61,399.797 1541.08,399.903 1541.56,399.992 1542.03,400.055 1542.5,400.081 1542.97,400.068 1543.44,400.018 1543.91,399.936 1544.38,399.827 1544.85,399.708 1545.32,399.591 1545.79,399.489 1546.26,399.42 1546.73,399.406 1547.2,399.465 1547.67,399.612 1548.14,399.853 1548.61,400.189 1549.08,400.605 1549.55,401.088 1550.02,401.625 1550.49,402.207 1550.96,402.823 1551.43,403.462 1551.9,404.112 1552.37,404.756 1552.84,405.384 1553.31,405.992 1553.78,406.583 1554.25,407.159 1554.72,407.733 1555.19,408.313 1555.66,408.91 1556.13,409.537 1556.6,410.197 1557.07,410.895 1557.54,411.637 1558.01,412.419 1558.48,413.231 1558.95,414.075 1559.42,414.953 1559.89,415.87 1560.36,416.831 1560.83,417.836 1561.3,418.884 1561.77,419.978 1562.24,421.113 1562.71,422.282 1563.18,423.468 1563.65,424.654 1564.12,425.824 1564.59,426.979 1565.06,428.126 1565.53,429.272 1566,430.424 1566.47,431.589 1566.95,432.777 1567.42,433.991 1567.89,435.23 1568.36,436.488 1568.83,437.752 1569.3,439.011 1569.77,440.26 1570.24,441.498 1570.71,442.732 1571.18,443.969 1571.65,445.222 1572.12,446.492 1572.59,447.797 1573.06,449.148 1573.53,450.561 1574,452.051 1574.47,453.633 1574.94,455.304 1575.41,457.054 1575.88,458.868 1576.35,460.731 1576.82,462.633 1577.29,464.559 1577.76,466.5 1578.23,468.448 1578.7,470.39 1579.17,472.33 1579.64,474.268 1580.11,476.213 1580.58,478.169 1581.05,480.139 1581.52,482.115 1581.99,484.088 1582.46,486.04 1582.93,487.975 1583.4,489.903 1583.87,491.826 1584.34,493.747 1584.81,495.669 1585.28,497.595 1585.75,499.53 1586.22,501.481 1586.69,503.456 1587.16,505.459 1587.63,507.485 1588.1,509.524 1588.57,511.579 1589.04,513.65 1589.51,515.745 1589.98,517.878 1590.45,520.055 1590.92,522.283 1591.39,524.559 1591.87,526.865 1592.34,529.188 1592.81,531.51 1593.28,533.816 1593.75,536.101 1594.22,538.36 1594.69,540.596 1595.16,542.813 1595.63,545.014 1596.1,547.199 1596.57,549.367 1597.04,551.516 1597.51,553.648 1597.98,555.76 1598.45,557.858 1598.92,559.951 1599.39,562.037 1599.86,564.128 1600.33,566.238 1600.8,568.374 1601.27,570.534 1601.74,572.706 1602.21,574.88 1602.68,577.044 1603.15,579.19 1603.62,581.324 1604.09,583.445 1604.56,585.562 1605.03,587.696 1605.5,589.854 1605.97,592.043 1606.44,594.263 1606.91,596.505 1607.38,598.764 1607.85,601.027 1608.32,603.282 1608.79,605.518 1609.26,607.739 1609.73,609.951 1610.2,612.166 1610.67,614.389 1611.14,616.619 1611.61,618.86 1612.08,621.115 1612.55,623.381 1613.02,625.658 1613.49,627.944 1613.96,630.239 1614.43,632.548 1614.9,634.879 1615.37,637.231 1615.84,639.608 1616.31,642.008 1616.78,644.425 1617.26,646.845 1617.73,649.254 1618.2,651.641 1618.67,654.01 1619.14,656.357 1619.61,658.685 1620.08,661.005 1620.55,663.322 1621.02,665.645 1621.49,667.984 1621.96,670.35 1622.43,672.75 1622.9,675.177 1623.37,677.625 1623.84,680.084 1624.31,682.539 1624.78,684.976 1625.25,687.387 1625.72,689.753 1626.19,692.058 1626.66,694.293 1627.13,696.457 1627.6,698.557 1628.07,700.602 1628.54,702.606 1629.01,704.591 1629.48,706.589 1629.95,708.63 1630.42,710.735 1630.89,712.917 1631.36,715.176 1631.83,717.503 1632.3,719.876 1632.77,722.288 1633.24,724.723 1633.71,727.161 1634.18,729.572 1634.65,731.934 1635.12,734.225 1635.59,736.431 1636.06,738.557 1636.53,740.621 1637,742.641 1637.47,744.642 1637.94,746.641 1638.41,748.651 1638.88,750.676 1639.35,752.718 1639.82,754.771 1640.29,756.827 1640.76,758.884 1641.23,760.929 1641.7,762.943 1642.18,764.911 1642.65,766.827 1643.12,768.696 1643.59,770.523 1644.06,772.318 1644.53,774.098 1645,775.88 1645.47,777.678 1645.94,779.499 1646.41,781.345 1646.88,783.214 1647.35,785.094 1647.82,786.975 1648.29,788.855 1648.76,790.715 1649.23,792.534 1649.7,794.299 1650.17,795.998 1650.64,797.621 1651.11,799.165 1651.58,800.635 1652.05,802.037 1652.52,803.377 1652.99,804.664 1653.46,805.902 1653.93,807.102 1654.4,808.269 1654.87,809.412 1655.34,810.539 1655.81,811.654 1656.28,812.758 1656.75,813.846 1657.22,814.917 1657.69,815.97 1658.16,817.006 1658.63,818.026 1659.1,819.031 1659.57,820.013 1660.04,820.976 1660.51,821.92 1660.98,822.843 1661.45,823.745 1661.92,824.618 1662.39,825.445 1662.86,826.204 1663.33,826.887 1663.8,827.488 1664.27,828.001 1664.74,828.428 1665.21,828.782 1665.68,829.075 1666.15,829.328 1666.62,829.556 1667.09,829.775 1667.57,829.992 1668.04,830.208 1668.51,830.414 1668.98,830.587 1669.45,830.701 1669.92,830.743 1670.39,830.714 1670.86,830.621 1671.33,830.469 1671.8,830.267 1672.27,830.024 1672.74,829.751 1673.21,829.46 1673.68,829.16 1674.15,828.854 1674.62,828.546 1675.09,828.221 1675.56,827.867 1676.03,827.48 1676.5,827.055 1676.97,826.595 1677.44,826.105 1677.91,825.593 1678.38,825.065 1678.85,824.523 1679.32,823.971 1679.79,823.409 1680.26,822.831 1680.73,822.233 1681.2,821.6 1681.67,820.918 1682.14,820.188 1682.61,819.413 1683.08,818.6 1683.55,817.751 1684.02,816.872 1684.49,815.973 1684.96,815.056 1685.43,814.123 1685.9,813.175 1686.37,812.206 1686.84,811.207 1687.31,810.175 1687.78,809.107 1688.25,807.998 1688.72,806.834 1689.19,805.615 1689.66,804.343 1690.13,803.021 1690.6,801.66 1691.07,800.26 1691.54,798.823 1692.01,797.351 1692.49,795.846 1692.96,794.321 1693.43,792.783 1693.9,791.23 1694.37,789.655 1694.84,788.041 1695.31,786.384 1695.78,784.678 1696.25,782.931 1696.72,781.146 1697.19,779.341 1697.66,777.535 1698.13,775.74 1698.6,773.963 1699.07,772.21 1699.54,770.477 1700.01,768.761 1700.48,767.045 1700.95,765.315 1701.42,763.567 1701.89,761.787 1702.36,759.962 1702.83,758.068 1703.3,756.096 1703.77,754.056 1704.24,751.97 1704.71,749.851 1705.18,747.705 1705.65,745.535 1706.12,743.339 1706.59,741.115 1707.06,738.87 1707.53,736.609 1708,734.334 1708.47,732.047 1708.94,729.746 1709.41,727.445 1709.88,725.148 1710.35,722.856 1710.82,720.566 1711.29,718.268 1711.76,715.956 1712.23,713.631 1712.7,711.288 1713.17,708.915 1713.64,706.506 1714.11,704.054 1714.58,701.552 1715.05,698.997 1715.52,696.392 1715.99,693.747 1716.46,691.074 1716.93,688.382 1717.4,685.68 1717.88,682.978 1718.35,680.284 1718.82,677.595 1719.29,674.91 1719.76,672.225 1720.23,669.543 1720.7,666.87 1721.17,664.207 1721.64,661.555 1722.11,658.919 1722.58,656.311 1723.05,653.74 1723.52,651.201 1723.99,648.694 1724.46,646.215 1724.93,643.747 1725.4,641.278 1725.87,638.798 1726.34,636.305 1726.81,633.786 1727.28,631.233 1727.75,628.643 1728.22,626.019 1728.69,623.369 1729.16,620.706 1729.63,618.039 1730.1,615.376 1730.57,612.717 1731.04,610.061 1731.51,607.412 1731.98,604.776 1732.45,602.159 1732.92,599.549 1733.39,596.942 1733.86,594.329 1734.33,591.708 1734.8,589.072 1735.27,586.423 1735.74,583.764 1736.21,581.099 1736.68,578.443 1737.15,575.792 1737.62,573.146 1738.09,570.5 1738.56,567.848 1739.03,565.183 1739.5,562.504 1739.97,559.808 1740.44,557.109 1740.91,554.425 1741.38,551.76 1741.85,549.12 1742.32,546.502 1742.79,543.895 1743.27,541.29 1743.74,538.679 1744.21,536.052 1744.68,533.417 1745.15,530.781 1745.62,528.156 1746.09,525.549 1746.56,522.96 1747.03,520.384 1747.5,517.825 1747.97,515.281 1748.44,512.75 1748.91,510.221 1749.38,507.692 1749.85,505.166 1750.32,502.64 1750.79,500.118 1751.26,497.606 1751.73,495.111 1752.2,492.638 1752.67,490.181 1753.14,487.733 1753.61,485.282 1754.08,482.819 1754.55,480.35 1755.02,477.871 1755.49,475.387 1755.96,472.903 1756.43,470.423 1756.9,467.949 1757.37,465.485 1757.84,463.037 1758.31,460.608 1758.78,458.197 1759.25,455.799 1759.72,453.405 1760.19,451.013 1760.66,448.613 1761.13,446.192 1761.6,443.754 1762.07,441.304 1762.54,438.845 1763.01,436.372 1763.48,433.889 1763.95,431.393 1764.42,428.887 1764.89,426.376 1765.36,423.862 1765.83,421.369 1766.3,418.915 1766.77,416.508 1767.24,414.143 1767.71,411.804 1768.19,409.481 1768.66,407.174 1769.13,404.888 1769.6,402.629 1770.07,400.403 1770.54,398.217 1771.01,396.079 1771.48,393.995 1771.95,391.962 1772.42,389.977 1772.89,388.033 1773.36,386.124 1773.83,384.246 1774.3,382.393 1774.77,380.561 1775.24,378.746 1775.71,376.942 1776.18,375.147 1776.65,373.368 1777.12,371.606 1777.59,369.861 1778.06,368.128 1778.53,366.399 1779,364.669 1779.47,362.942 1779.94,361.228 1780.41,359.532 1780.88,357.863 1781.35,356.22 1781.82,354.608 1782.29,353.024 1782.76,351.472 1783.23,349.955 1783.7,348.467 1784.17,347.002 1784.64,345.555 1785.11,344.133 1785.58,342.741 1786.05,341.371 1786.52,340.026 1786.99,338.705 1787.46,337.403 1787.93,336.124 1788.4,334.873 1788.87,333.648 1789.34,332.438 1789.81,331.247 1790.28,330.088 1790.75,328.976 1791.22,327.936 1791.69,326.981 1792.16,326.112 1792.63,325.326 1793.1,324.611 1793.58,323.947 1794.05,323.314 1794.52,322.696 1794.99,322.075 1795.46,321.442 1795.93,320.789 1796.4,320.119 1796.87,319.443 1797.34,318.785 1797.81,318.163 1798.28,317.591 1798.75,317.067 1799.22,316.586 1799.69,316.143 1800.16,315.732 1800.63,315.351 1801.1,315.002 1801.57,314.691 1802.04,314.437 1802.51,314.247 1802.98,314.117 1803.45,314.047 1803.92,314.031 1804.39,314.068 1804.86,314.145 1805.33,314.247 1805.8,314.372 1806.27,314.523 1806.74,314.704 1807.21,314.924 1807.68,315.198 1808.15,315.531 1808.62,315.921 1809.09,316.372 1809.56,316.874 1810.03,317.42 1810.5,318.006 1810.97,318.628 1811.44,319.285 1811.91,319.975 1812.38,320.699 1812.85,321.465 1813.32,322.277 1813.79,323.143 1814.26,324.064 1814.73,325.04 1815.2,326.069 1815.67,327.149 1816.14,328.279 1816.61,329.457 1817.08,330.683 1817.55,331.966 1818.02,333.305 1818.5,334.7 1818.97,336.14 1819.44,337.614 1819.91,339.116 1820.38,340.627 1820.85,342.136 1821.32,343.63 1821.79,345.1 1822.26,346.549 1822.73,347.983 1823.2,349.421 1823.67,350.889 1824.14,352.415 1824.61,354.031 1825.08,355.764 1825.55,357.631 1826.02,359.627 1826.49,361.742 1826.96,363.954 1827.43,366.227 1827.9,368.525 1828.37,370.816 1828.84,373.074 1829.31,375.287 1829.78,377.452 1830.25,379.573 1830.72,381.668 1831.19,383.756 1831.66,385.859 1832.13,387.996 1832.6,390.178 1833.07,392.419 1833.54,394.723 1834.01,397.094 1834.48,399.525 1834.95,401.998 1835.42,404.491 1835.89,406.982 1836.36,409.46 1836.83,411.923 1837.3,414.374 1837.77,416.819 1838.24,419.262 1838.71,421.718 1839.18,424.205 1839.65,426.737 1840.12,429.321 1840.59,431.957 1841.06,434.645 1841.53,437.382 1842,440.159 1842.47,442.973 1842.94,445.811 1843.41,448.669 1843.89,451.541 1844.36,454.422 1844.83,457.308 1845.3,460.197 1845.77,463.078 1846.24,465.945 1846.71,468.79 1847.18,471.61 1847.65,474.403 1848.12,477.169 1848.59,479.913 1849.06,482.642 1849.53,485.368 1850,488.103 1850.47,490.869 1850.94,493.675 1851.41,496.523 1851.88,499.412 1852.35,502.331 1852.82,505.278 1853.29,508.253 1853.76,511.251 1854.23,514.274 1854.7,517.331 1855.17,520.426 1855.64,523.567 1856.11,526.759 1856.58,530.002 1857.05,533.295 1857.52,536.625 1857.99,539.989 1858.46,543.386 1858.93,546.814 1859.4,550.267 1859.87,553.737 1860.34,557.208 1860.81,560.661 1861.28,564.083 1861.75,567.469 1862.22,570.819 1862.69,574.135 1863.16,577.422 1863.63,580.683 1864.1,583.921 1864.57,587.15 1865.04,590.375 1865.51,593.608 1865.98,596.869 1866.45,600.168 1866.92,603.511 1867.39,606.898 1867.86,610.321 1868.33,613.768 1868.8,617.217 1869.28,620.656 1869.75,624.074 1870.22,627.465 1870.69,630.827 1871.16,634.167 1871.63,637.485 1872.1,640.782 1872.57,644.061 1873.04,647.319 1873.51,650.545 1873.98,653.733 1874.45,656.885 1874.92,660.005 1875.39,663.104 1875.86,666.195 1876.33,669.29 1876.8,672.401 1877.27,675.537 1877.74,678.692 1878.21,681.86 1878.68,685.027 1879.15,688.185 1879.62,691.336 1880.09,694.489 1880.56,697.656 1881.03,700.852 1881.5,704.095 1881.97,707.386 1882.44,710.717 1882.91,714.081 1883.38,717.474 1883.85,720.884 1884.32,724.302 1884.79,727.724 1885.26,731.143 1885.73,734.545 1886.2,737.908 1886.67,741.208 1887.14,744.431 1887.61,747.574 1888.08,750.642 1888.55,753.635 1889.02,756.565 1889.49,759.447 1889.96,762.296 1890.43,765.131 1890.9,767.972 1891.37,770.824 1891.84,773.693 1892.31,776.575 1892.78,779.466 1893.25,782.36 1893.72,785.252 1894.2,788.136 1894.67,791.004 1895.14,793.846 1895.61,796.651 1896.08,799.409 1896.55,802.11 1897.02,804.735 1897.49,807.273 1897.96,809.725 1898.43,812.106 1898.9,814.444 1899.37,816.763 1899.84,819.092 1900.31,821.462 1900.78,823.881 1901.25,826.347 1901.72,828.853 1902.19,831.384 1902.66,833.913 1903.13,836.409 1903.6,838.854 1904.07,841.229 1904.54,843.518 1905.01,845.715 1905.48,847.829 1905.95,849.88 1906.42,851.898 1906.89,853.908 1907.36,855.929 1907.83,857.968 1908.3,860.023 1908.77,862.075 1909.24,864.105 1909.71,866.093 1910.18,868.028 1910.65,869.907 1911.12,871.723 1911.59,873.479 1912.06,875.178 1912.53,876.824 1913,878.427 1913.47,879.997 1913.94,881.539 1914.41,883.071 1914.88,884.605 1915.35,886.14 1915.82,887.668 1916.29,889.181 1916.76,890.672 1917.23,892.145 1917.7,893.598 1918.17,895.029 1918.64,896.434 1919.11,897.808 1919.59,899.148 1920.06,900.449 1920.53,901.709 1921,902.928 1921.47,904.099 1921.94,905.226 1922.41,906.311 1922.88,907.361 1923.35,908.383 1923.82,909.379 1924.29,910.346 1924.76,911.278 1925.23,912.171 1925.7,913.02 1926.17,913.822 1926.64,914.581 1927.11,915.297 1927.58,915.976 1928.05,916.622 1928.52,917.232 1928.99,917.797 1929.46,918.311 1929.93,918.76 1930.4,919.135 1930.87,919.439 1931.34,919.691 1931.81,919.904 1932.28,920.093 1932.75,920.276 1933.22,920.465 1933.69,920.662 1934.16,920.869 1934.63,921.082 1935.1,921.29 1935.57,921.475 1936.04,921.616 1936.51,921.69 1936.98,921.687 1937.45,921.6 1937.92,921.445 1938.39,921.231 1938.86,920.961 1939.33,920.642 1939.8,920.287 1940.27,919.906 1940.74,919.504 1941.21,919.078 1941.68,918.614 1942.15,918.11 1942.62,917.568 1943.09,916.989 1943.56,916.371 1944.03,915.711 1944.51,915.004 1944.98,914.244 1945.45,913.429 1945.92,912.553 1946.39,911.609 1946.86,910.583 1947.33,909.47 1947.8,908.279 1948.27,907.027 1948.74,905.737 1949.21,904.44 1949.68,903.15 1950.15,901.877 1950.62,900.621 1951.09,899.373 1951.56,898.112 1952.03,896.827 1952.5,895.505 1952.97,894.138 1953.44,892.715 1953.91,891.234 1954.38,889.694 1954.85,888.09 1955.32,886.416 1955.79,884.672 1956.26,882.868 1956.73,881.013 1957.2,879.119 1957.67,877.203 1958.14,875.269 1958.61,873.315 1959.08,871.33 1959.55,869.303 1960.02,867.223 1960.49,865.077 1960.96,862.858 1961.43,860.558 1961.9,858.185 1962.37,855.757 1962.84,853.29 1963.31,850.796 1963.78,848.284 1964.25,845.755 1964.72,843.211 1965.19,840.649 1965.66,838.07 1966.13,835.475 1966.6,832.859 1967.07,830.204 1967.54,827.505 1968.01,824.764 1968.48,821.977 1968.95,819.148 1969.42,816.278 1969.9,813.378 1970.37,810.448 1970.84,807.487 1971.31,804.495 1971.78,801.476 1972.25,798.436 1972.72,795.377 1973.19,792.292 1973.66,789.162 1974.13,785.974 1974.6,782.716 1975.07,779.39 1975.54,776.005 1976.01,772.585 1976.48,769.147 1976.95,765.709 1977.42,762.284 1977.89,758.887 1978.36,755.526 1978.83,752.2 1979.3,748.909 1979.77,745.647 1980.24,742.413 1980.71,739.191 1981.18,735.966 1981.65,732.716 1982.12,729.429 1982.59,726.092 1983.06,722.692 1983.53,719.228 1984,715.703 1984.47,712.123 1984.94,708.5 1985.41,704.851 1985.88,701.202 1986.35,697.582 1986.82,694.004 1987.29,690.476 1987.76,687.001 1988.23,683.576 1988.7,680.198 1989.17,676.862 1989.64,673.563 1990.11,670.293 1990.58,667.037 1991.05,663.774 1991.52,660.492 1991.99,657.181 1992.46,653.845 1992.93,650.488 1993.4,647.115 1993.87,643.726 1994.34,640.329 1994.82,636.943 1995.29,633.58 1995.76,630.246 1996.23,626.942 1996.7,623.661 1997.17,620.392 1997.64,617.12 1998.11,613.831 1998.58,610.508 1999.05,607.143 1999.52,603.735 1999.99,600.285 2000.46,596.798 2000.93,593.284 2001.4,589.759 2001.87,586.234 2002.34,582.721 2002.81,579.236 2003.28,575.8 2003.75,572.412 2004.22,569.069 2004.69,565.759 2005.16,562.48 2005.63,559.218 2006.1,555.971 2006.57,552.741 2007.04,549.532 2007.51,546.344 2007.98,543.163 2008.45,539.972 2008.92,536.759 2009.39,533.519 2009.86,530.244 2010.33,526.926 2010.8,523.559 2011.27,520.136 2011.74,516.66 2012.21,513.146 2012.68,509.621 2013.15,506.112 2013.62,502.644 2014.09,499.231 2014.56,495.881 2015.03,492.588 2015.5,489.348 2015.97,486.151 2016.44,482.978 2016.91,479.815 2017.38,476.649 2017.85,473.479 2018.32,470.3 2018.79,467.108 2019.26,463.903 2019.73,460.697 2020.21,457.502 2020.68,454.322 2021.15,451.157 2021.62,448.006 2022.09,444.865 2022.56,441.734 2023.03,438.616 2023.5,435.511 2023.97,432.417 2024.44,429.336 2024.91,426.265 2025.38,423.204 2025.85,420.16 2026.32,417.142 2026.79,414.151 2027.26,411.186 2027.73,408.233 2028.2,405.284 2028.67,402.335 2029.14,399.399 2029.61,396.49 2030.08,393.621 2030.55,390.803 2031.02,388.041 2031.49,385.334 2031.96,382.686 2032.43,380.088 2032.9,377.532 2033.37,375.014 2033.84,372.533 2034.31,370.092 2034.78,367.697 2035.25,365.342 2035.72,363.01 2036.19,360.684 2036.66,358.357 2037.13,356.031 2037.6,353.722 2038.07,351.436 2038.54,349.187 2039.01,346.984 2039.48,344.827 2039.95,342.719 2040.42,340.666 2040.89,338.669 2041.36,336.723 2041.83,334.822 2042.3,332.96 2042.77,331.135 2043.24,329.342 2043.71,327.573 2044.18,325.826 2044.65,324.11 2045.12,322.435 2045.6,320.804 2046.07,319.221 2046.54,317.682 2047.01,316.174 2047.48,314.671 2047.95,313.169 2048.42,311.669 2048.89,310.175 2049.36,308.691 2049.83,307.225 2050.3,305.782 2050.77,304.358 2051.24,302.948 2051.71,301.554 2052.18,300.184 2052.65,298.85 2053.12,297.561 2053.59,296.335 2054.06,295.178 2054.53,294.087 2055,293.057 2055.47,292.082 2055.94,291.151 2056.41,290.262 2056.88,289.404 2057.35,288.575 2057.82,287.772 2058.29,287.003 2058.76,286.268 2059.23,285.567 2059.7,284.894 2060.17,284.242 2060.64,283.607 2061.11,282.992 2061.58,282.398 2062.05,281.832 2062.52,281.295 2062.99,280.783 2063.46,280.292 2063.93,279.827 2064.4,279.395 2064.87,279.002 2065.34,278.656 2065.81,278.369 2066.28,278.147 2066.75,277.998 2067.22,277.931 2067.69,277.947 2068.16,278.043 2068.63,278.214 2069.1,278.446 2069.57,278.727 2070.04,279.051 2070.52,279.406 2070.99,279.787 2071.46,280.189 2071.93,280.606 2072.4,281.032 2072.87,281.465 2073.34,281.912 2073.81,282.38 2074.28,282.874 2074.75,283.404 2075.22,283.98 2075.69,284.605 2076.16,285.285 2076.63,286.016 2077.1,286.803 2077.57,287.653 2078.04,288.566 2078.51,289.547 2078.98,290.604 2079.45,291.741 2079.92,292.954 2080.39,294.222 2080.86,295.539 2081.33,296.903 2081.8,298.315 2082.27,299.785 2082.74,301.31 2083.21,302.885 2083.68,304.506 2084.15,306.159 2084.62,307.837 2085.09,309.533 2085.56,311.249 2086.03,312.984 2086.5,314.727 2086.97,316.47 2087.44,318.216 2087.91,319.964 2088.38,321.725 2088.85,323.494 2089.32,325.269 2089.79,327.046 2090.26,328.825 2090.73,330.613 2091.2,332.417 2091.67,334.251 2092.14,336.124 2092.61,338.039 2093.08,339.998 2093.55,342.009 2094.02,344.087 2094.49,346.242 2094.96,348.478 2095.43,350.787 2095.91,353.152 2096.38,355.55 2096.85,357.96 2097.32,360.361 2097.79,362.747 2098.26,365.123 2098.73,367.506 2099.2,369.911 2099.67,372.362 2100.14,374.874 2100.61,377.45 2101.08,380.078 2101.55,382.747 2102.02,385.443 2102.49,388.164 2102.96,390.897 2103.43,393.637 2103.9,396.375 2104.37,399.11 2104.84,401.84 2105.31,404.577 2105.78,407.34 2106.25,410.134 2106.72,412.954 2107.19,415.791 2107.66,418.636 2108.13,421.484 2108.6,424.338 2109.07,427.197 2109.54,430.061 2110.01,432.92 2110.48,435.77 2110.95,438.611 2111.42,441.445 2111.89,444.284 2112.36,447.145 2112.83,450.043 2113.3,452.989 2113.77,455.983 2114.24,459.013 2114.71,462.07 2115.18,465.142 2115.65,468.221 2116.12,471.291 2116.59,474.339 2117.06,477.361 2117.53,480.367 2118,483.373 2118.47,486.397 2118.94,489.455 2119.41,492.554 2119.88,495.7 2120.35,498.885 2120.83,502.109 2121.3,505.374 2121.77,508.679 2122.24,512.027 2122.71,515.414 2123.18,518.829 2123.65,522.248 2124.12,525.649 2124.59,529.017 2125.06,532.336 2125.53,535.599 2126,538.827 2126.47,542.039 2126.94,545.256 2127.41,548.49 2127.88,551.751 2128.35,555.034 2128.82,558.339 2129.29,561.669 2129.76,565.023 2130.23,568.403 2130.7,571.811 2131.17,575.249 2131.64,578.718 2132.11,582.219 2132.58,585.745 2133.05,589.276 2133.52,592.804 2133.99,596.321 2134.46,599.818 2134.93,603.284 2135.4,606.711 2135.87,610.103 2136.34,613.466 2136.81,616.811 2137.28,620.138 2137.75,623.453 2138.22,626.758 2138.69,630.057 2139.16,633.342 2139.63,636.611 2140.1,639.858 2140.57,643.089 2141.04,646.297 2141.51,649.479 2141.98,652.648 2142.45,655.814 2142.92,658.985 2143.39,662.162 2143.86,665.344 2144.33,668.524 2144.8,671.695 2145.27,674.847 2145.74,677.98 2146.22,681.101 2146.69,684.225 2147.16,687.373 2147.63,690.565 2148.1,693.808 2148.57,697.104 2149.04,700.438 2149.51,703.791 2149.98,707.15 2150.45,710.499 2150.92,713.83 2151.39,717.14 2151.86,720.429 2152.33,723.705 2152.8,726.976 2153.27,730.243 2153.74,733.507 2154.21,736.769 2154.68,740.026 2155.15,743.273 2155.62,746.508 2156.09,749.714 2156.56,752.889 2157.03,756.037 2157.5,759.172 2157.97,762.316 2158.44,765.475 2158.91,768.646 2159.38,771.826 2159.85,775.01 2160.32,778.192 2160.79,781.36 2161.26,784.504 2161.73,787.623 2162.2,790.721 2162.67,793.793 2163.14,796.838 2163.61,799.85 2164.08,802.824 2164.55,805.752 2165.02,808.632 2165.49,811.463 2165.96,814.243 2166.43,816.972 2166.9,819.649 2167.37,822.266 2167.84,824.825 2168.31,827.321 2168.78,829.764 2169.25,832.162 2169.72,834.511 2170.19,836.806 2170.66,839.05 2171.14,841.262 2171.61,843.458 2172.08,845.655 2172.55,847.854 2173.02,850.046 2173.49,852.221 2173.96,854.364 2174.43,856.461 2174.9,858.508 2175.37,860.503 2175.84,862.45 2176.31,864.352 2176.78,866.212 2177.25,868.039 2177.72,869.851 2178.19,871.672 2178.66,873.515 2179.13,875.378 2179.6,877.247 2180.07,879.102 2180.54,880.933 2181.01,882.727 2181.48,884.467 2181.95,886.142 2182.42,887.742 2182.89,889.266 2183.36,890.718 2183.83,892.104 2184.3,893.435 2184.77,894.725 2185.24,895.981 2185.71,897.217 2186.18,898.445 2186.65,899.669 2187.12,900.901 2187.59,902.142 2188.06,903.385 2188.53,904.626 2189,905.859 2189.47,907.084 2189.94,908.291 2190.41,909.472 2190.88,910.625 2191.35,911.757 2191.82,912.872 2192.29,913.969 2192.76,915.033 2193.23,916.052 2193.7,917.008 2194.17,917.885 2194.64,918.667 2195.11,919.349 2195.58,919.945 2196.05,920.474 2196.53,920.953 2197,921.399 2197.47,921.829 2197.94,922.26 2198.41,922.7 2198.88,923.148 2199.35,923.593 2199.82,924.017 2200.29,924.403 2200.76,924.747 2201.23,925.043 2201.7,925.288 2202.17,925.475 2202.64,925.599 2203.11,925.665 2203.58,925.664 2204.05,925.592 2204.52,925.456 2204.99,925.264 2205.46,925.016 2205.93,924.716 2206.4,924.365 2206.87,923.962 2207.34,923.514 2207.81,923.018 2208.28,922.464 2208.75,921.846 2209.22,921.157 2209.69,920.394 2210.16,919.556 2210.63,918.646 2211.1,917.674 2211.57,916.661 2212.04,915.632 2212.51,914.604 2212.98,913.58 2213.45,912.56 2213.92,911.541 2214.39,910.528 2214.86,909.523 2215.33,908.516 2215.8,907.491 2216.27,906.429 2216.74,905.314 2217.21,904.132 2217.68,902.872 2218.15,901.539 2218.62,900.146 2219.09,898.714 2219.56,897.251 2220.03,895.768 2220.5,894.269 2220.97,892.748 2221.44,891.192 2221.92,889.596 2222.39,887.961 2222.86,886.29 2223.33,884.584 2223.8,882.837 2224.27,881.051 2224.74,879.236 2225.21,877.398 2225.68,875.525 2226.15,873.596 2226.62,871.602 2227.09,869.536 2227.56,867.405 2228.03,865.221 2228.5,862.993 2228.97,860.726 2229.44,858.428 2229.91,856.102 2230.38,853.745 2230.85,851.349 2231.32,848.915 2231.79,846.451 2232.26,843.961 2232.73,841.455 2233.2,838.939 2233.67,836.421 2234.14,833.902 2234.61,831.384 2235.08,828.877 2235.55,826.366 2236.02,823.845 2236.49,821.296 2236.96,818.705 2237.43,816.061 2237.9,813.357 2238.37,810.603 2238.84,807.811 2239.31,804.99 2239.78,802.136 2240.25,799.248 2240.72,796.317 2241.19,793.333 2241.66,790.299 2242.13,787.221 2242.6,784.106 2243.07,780.954 2243.54,777.773 2244.01,774.562 2244.48,771.32 2244.95,768.053 2245.42,764.753 2245.89,761.421 2246.36,758.061 2246.84,754.677 2247.31,751.264 2247.78,747.827 2248.25,744.365 2248.72,740.88 2249.19,737.375 2249.66,733.853 2250.13,730.326 2250.6,726.801 2251.07,723.279 2251.54,719.767 2252.01,716.27 2252.48,712.789 2252.95,709.33 2253.42,705.89 2253.89,702.448 2254.36,698.989 2254.83,695.495 2255.3,691.966 2255.77,688.403 2256.24,684.818 2256.71,681.225 2257.18,677.64 2257.65,674.074 2258.12,670.537 2258.59,667.038 2259.06,663.576 2259.53,660.156 2260,656.777 2260.47,653.423 2260.94,650.087 2261.41,646.763 2261.88,643.446 2262.35,640.133 2262.82,636.821 2263.29,633.495 2263.76,630.131 2264.23,626.709 2264.7,623.228 2265.17,619.698 2265.64,616.134 2266.11,612.557 2266.58,608.982 2267.05,605.404 2267.52,601.822 2267.99,598.238 2268.46,594.66 2268.93,591.085 2269.4,587.513 2269.87,583.951 2270.34,580.409 2270.81,576.898 2271.28,573.425 2271.75,569.997 2272.23,566.614 2272.7,563.27 2273.17,559.951 2273.64,556.644 2274.11,553.337 2274.58,550.025 2275.05,546.708 2275.52,543.387 2275.99,540.065 2276.46,536.749 2276.93,533.451 2277.4,530.181 2277.87,526.952 2278.34,523.768 2278.81,520.622 2279.28,517.503 2279.75,514.403 2280.22,511.314 2280.69,508.228 2281.16,505.137 2281.63,502.036 2282.1,498.924 2282.57,495.81 2283.04,492.709 2283.51,489.637 2283.98,486.608 2284.45,483.627 2284.92,480.691 2285.39,477.795 2285.86,474.931 2286.33,472.084 2286.8,469.237 2287.27,466.386 2287.74,463.535 2288.21,460.692 2288.68,457.869 2289.15,455.076 2289.62,452.312 2290.09,449.573 2290.56,446.862 2291.03,444.171 2291.5,441.489 2291.97,438.812 2292.44,436.14 2292.91,433.472 2293.38,430.809 2293.85,428.163 2294.32,425.555 2294.79,422.99 2295.26,420.47 2295.73,417.988 2296.2,415.543 2296.67,413.131 2297.15,410.737 2297.62,408.354 2298.09,405.977 2298.56,403.615 2299.03,401.274 2299.5,398.957 2299.97,396.669 2300.44,394.409 2300.91,392.18 2301.38,389.983 2301.85,387.83 2302.32,385.725 2302.79,383.656 2303.26,381.613 2303.73,379.59 2304.2,377.579 2304.67,375.576 2305.14,373.582 2305.61,371.606 2306.08,369.659 2306.55,367.745 2307.02,365.867 2307.49,364.025 2307.96,362.221 2308.43,360.454 2308.9,358.723 2309.37,357.03 2309.84,355.371 2310.31,353.751 2310.78,352.175 2311.25,350.653 2311.72,349.196 2312.19,347.807 2312.66,346.481 2313.13,345.204 2313.6,343.979 2314.07,342.809 2314.54,341.693 2315.01,340.624 2315.48,339.597 2315.95,338.608 2316.42,337.664 2316.89,336.778 2317.36,335.955 2317.83,335.2 2318.3,334.51 2318.77,333.882 2319.24,333.32 2319.71,332.822 2320.18,332.376 2320.65,331.955 2321.12,331.545 2321.59,331.136 2322.06,330.731 2322.54,330.333 2323.01,329.952 2323.48,329.594 2323.95,329.271 2324.42,328.993 2324.89,328.763 2325.36,328.584 2325.83,328.454 2326.3,328.367 2326.77,328.305 2327.24,328.269 2327.71,328.266 2328.18,328.314 2328.65,328.417 2329.12,328.578 2329.59,328.792 2330.06,329.048 2330.53,329.332 2331,329.626 2331.47,329.922 2331.94,330.219 2332.41,330.515 2332.88,330.809 2333.35,331.108 2333.82,331.416 2334.29,331.741 2334.76,332.087 2335.23,332.459 2335.7,332.867 2336.17,333.319 2336.64,333.82 2337.11,334.379 2337.58,334.996 2338.05,335.66 2338.52,336.361 2338.99,337.091 2339.46,337.849 2339.93,338.641 2340.4,339.479 2340.87,340.373 2341.34,341.324 2341.81,342.334 2342.28,343.396 2342.75,344.503 2343.22,345.648 2343.69,346.819 2344.16,348.008 2344.63,349.211 2345.1,350.429 2345.57,351.656 2346.04,352.894 2346.51,354.155 2346.98,355.459 2347.46,356.825 2347.93,358.26 2348.4,359.764 2348.87,361.322 2349.34,362.927 2349.81,364.562 2350.28,366.217 2350.75,367.886 2351.22,369.573 2351.69,371.275 2352.16,373.001 2352.63,374.753 2353.1,376.54 2353.57,378.362 2354.04,380.217 2354.51,382.1 2354.98,384.004 2355.45,385.918 2355.92,387.841 2356.39,389.781 2356.86,391.746 2357.33,393.743 2357.8,395.773 2358.27,397.833 2358.74,399.925 2359.21,402.051 2359.68,404.222 2360.15,406.446 2360.62,408.72 2361.09,411.034 2361.56,413.373 2362.03,415.709 2362.5,418.039 2362.97,420.369 2363.44,422.712 2363.91,425.075 2364.38,427.461 2364.85,429.874 2365.32,432.316 2365.79,434.789 2366.26,437.291 2366.73,439.815 2367.2,442.354 2367.67,444.907 2368.14,447.48 2368.61,450.074 2369.08,452.703 2369.55,455.378 2370.02,458.099 2370.49,460.859 2370.96,463.653 2371.43,466.469 2371.9,469.312 2372.37,472.177 2372.85,475.064 2373.32,477.983 2373.79,480.946 2374.26,483.958 2374.73,487.024 2375.2,490.144 2375.67,493.293 2376.14,496.453 2376.61,499.608 2377.08,502.755 2377.55,505.889 2378.02,509.006 2378.49,512.107 2378.96,515.193 2379.43,518.267 2379.9,521.339 2380.37,524.422 2380.84,527.531 2381.31,530.681 2381.78,533.882 2382.25,537.131 2382.72,540.41 2383.19,543.708 2383.66,547.019 2384.13,550.334 2384.6,553.651 2385.07,556.972 2385.54,560.308 2386.01,563.661 2386.48,567.028 2386.95,570.408 2387.42,573.8 2387.89,577.206 2388.36,580.626 2388.83,584.062 2389.3,587.521 2389.77,591.011 2390.24,594.535 2390.71,598.089 2391.18,601.665 2391.65,605.256 2392.12,608.856 2392.59,612.453 2393.06,616.041 2393.53,619.612 2394,623.164 2394.47,626.693 2394.94,630.196 2395.41,633.679 2395.88,637.139 2396.35,640.57 2396.82,643.971 2397.29,647.346 2397.76,650.692 2398.24,654.014 2398.71,657.317 2399.18,660.611 2399.65,663.909 2400.12,667.224 2400.59,670.56 2401.06,673.913 2401.53,677.287 2402,680.678 2402.47,684.07 2402.94,687.452 2403.41,690.82 2403.88,694.17 2404.35,697.506 2404.82,700.835 2405.29,704.167 2405.76,707.51 2406.23,710.867 2406.7,714.248 2407.17,717.658 2407.64,721.102 2408.11,724.583 2408.58,728.098 2409.05,731.629 2409.52,735.157 2409.99,738.659 2410.46,742.117 2410.93,745.508 2411.4,748.816 2411.87,752.032 2412.34,755.155 2412.81,758.191 2413.28,761.152 2413.75,764.045 2414.22,766.879 2414.69,769.657 2415.16,772.399 2415.63,775.124 2416.1,777.852 2416.57,780.599 2417.04,783.378 2417.51,786.197 2417.98,789.054 2418.45,791.935 2418.92,794.824 2419.39,797.702 2419.86,800.548 2420.33,803.355 2420.8,806.123 2421.27,808.86 2421.74,811.571 2422.21,814.253 2422.68,816.899 2423.16,819.494 2423.63,822.037 2424.1,824.529 2424.57,826.983 2425.04,829.419 2425.51,831.853 2425.98,834.286 2426.45,836.707 2426.92,839.111 2427.39,841.494 2427.86,843.852 2428.33,846.179 2428.8,848.471 2429.27,850.722 2429.74,852.929 2430.21,855.081 2430.68,857.172 2431.15,859.199 2431.62,861.161 2432.09,863.057 2432.56,864.887 2433.03,866.644 2433.5,868.33 2433.97,869.943 2434.44,871.496 2434.91,873.012 2435.38,874.514 2435.85,876.022 2436.32,877.538 2436.79,879.055 2437.26,880.569 2437.73,882.074 2438.2,883.561 2438.67,885.027 2439.14,886.469 2439.61,887.886 2440.08,889.282 2440.55,890.656 2441.02,892.009 2441.49,893.34 2441.96,894.635 2442.43,895.897 2442.9,897.119 2443.37,898.292 2443.84,899.415 2444.31,900.489 2444.78,901.528 2445.25,902.542 2445.72,903.535 2446.19,904.503 2446.66,905.45 2447.13,906.368 2447.6,907.252 2448.07,908.107 2448.55,908.946 2449.02,909.771 2449.49,910.591 2449.96,911.394 2450.43,912.178 2450.9,912.938 2451.37,913.678 2451.84,914.4 2452.31,915.095 2452.78,915.753 2453.25,916.365 2453.72,916.926 2454.19,917.436 2454.66,917.901 2455.13,918.333 2455.6,918.74 2456.07,919.13 2456.54,919.501 2457.01,919.844 2457.48,920.141 2457.95,920.384 2458.42,920.572 2458.89,920.702 2459.36,920.774 2459.83,920.794 2460.3,920.781 2460.77,920.748 2461.24,920.703 2461.71,920.65 2462.18,920.593 2462.65,920.53 2463.12,920.462 2463.59,920.388 2464.06,920.298 2464.53,920.173 2465,919.991 2465.47,919.731 2465.94,919.371 2466.41,918.906 2466.88,918.354 2467.35,917.738 2467.82,917.081 2468.29,916.396 2468.76,915.696 2469.23,914.989 2469.7,914.278 2470.17,913.566 2470.64,912.857 2471.11,912.152 2471.58,911.447 2472.05,910.749 2472.52,910.056 2472.99,909.365 2473.47,908.673 2473.94,907.981 2474.41,907.276 2474.88,906.55 2475.35,905.797 2475.82,905.017 2476.29,904.21 2476.76,903.384 2477.23,902.54 2477.7,901.669 2478.17,900.751 2478.64,899.773 2479.11,898.711 2479.58,897.56 2480.05,896.324 2480.52,895.013 2480.99,893.637 2481.46,892.219 2481.93,890.774 2482.4,889.31 2482.87,887.842 2483.34,886.382 2483.81,884.936 2484.28,883.499 2484.75,882.066 2485.22,880.626 2485.69,879.171 2486.16,877.698 2486.63,876.192 2487.1,874.637 2487.57,873.028 2488.04,871.375 2488.51,869.682 2488.98,867.964 2489.45,866.226 2489.92,864.472 2490.39,862.709 2490.86,860.935 2491.33,859.145 2491.8,857.33 2492.27,855.483 2492.74,853.598 2493.21,851.661 2493.68,849.673 2494.15,847.634 2494.62,845.559 2495.09,843.439 2495.56,841.272 2496.03,839.062 2496.5,836.817 2496.97,834.547 2497.44,832.251 2497.91,829.925 2498.38,827.564 2498.86,825.169 2499.33,822.75 2499.8,820.31 2500.27,817.838 2500.74,815.329 2501.21,812.785 2501.68,810.208 2502.15,807.588 2502.62,804.914 2503.09,802.171 2503.56,799.36 2504.03,796.479 2504.5,793.53 2504.97,790.519 2505.44,787.447 2505.91,784.324 2506.38,781.166 2506.85,777.988 2507.32,774.8 2507.79,771.616 2508.26,768.44 2508.73,765.277 2509.2,762.124 2509.67,758.981 2510.14,755.846 2510.61,752.714 2511.08,749.574 2511.55,746.416 2512.02,743.235 2512.49,740.024 2512.96,736.779 2513.43,733.495 2513.9,730.158 2514.37,726.761 2514.84,723.297 2515.31,719.764 2515.78,716.162 2516.25,712.49 2516.72,708.749 2517.19,704.947 2517.66,701.098 2518.13,697.215 2518.6,693.313 2519.07,689.407 2519.54,685.507 2520.01,681.614 2520.48,677.732 2520.95,673.866 2521.42,670.014 2521.89,666.174 2522.36,662.349 2522.83,658.534 2523.3,654.725 2523.78,650.923 2524.25,647.125 2524.72,643.337 2525.19,639.565 2525.66,635.803 2526.13,632.043 2526.6,628.277 2527.07,624.493 2527.54,620.683 2528.01,616.847 2528.48,612.997 2528.95,609.141 2529.42,605.29 2529.89,601.458 2530.36,597.651 2530.83,593.872 2531.3,590.12 2531.77,586.392 2532.24,582.679 2532.71,578.977 2533.18,575.276 2533.65,571.571 2534.12,567.869 2534.59,564.175 2535.06,560.5 2535.53,556.859 2536,553.252 2536.47,549.681 2536.94,546.138 2537.41,542.61 2537.88,539.088 2538.35,535.563 2538.82,532.031 2539.29,528.487 2539.76,524.938 2540.23,521.379 2540.7,517.795 2541.17,514.171 2541.64,510.509 2542.11,506.809 2542.58,503.091 2543.05,499.376 2543.52,495.677 2543.99,491.993 2544.46,488.332 2544.93,484.695 2545.4,481.078 2545.87,477.478 2546.34,473.901 2546.81,470.364 2547.28,466.881 2547.75,463.456 2548.22,460.082 2548.69,456.741 2549.17,453.416 2549.64,450.093 2550.11,446.758 2550.58,443.409 2551.05,440.047 2551.52,436.688 2551.99,433.34 2552.46,429.996 2552.93,426.637 2553.4,423.247 2553.87,419.811 2554.34,416.322 2554.81,412.783 2555.28,409.213 2555.75,405.634 2556.22,402.062 2556.69,398.52 2557.16,395.031 2557.63,391.599 2558.1,388.22 2558.57,384.887 2559.04,381.589 2559.51,378.318 2559.98,375.067 2560.45,371.843 2560.92,368.656 2561.39,365.52 2561.86,362.437 2562.33,359.401 2562.8,356.398 2563.27,353.41 2563.74,350.425 2564.21,347.437 2564.68,344.446 2565.15,341.449 2565.62,338.44 2566.09,335.42 2566.56,332.403 2567.03,329.405 2567.5,326.437 2567.97,323.512 2568.44,320.639 2568.91,317.821 2569.38,315.06 2569.85,312.351 2570.32,309.674 2570.79,307.019 2571.26,304.381 2571.73,301.754 2572.2,299.14 2572.67,296.551 2573.14,293.99 2573.61,291.466 2574.08,288.986 2574.56,286.561 2575.03,284.201 2575.5,281.904 2575.97,279.667 2576.44,277.486 2576.91,275.363 2577.38,273.293 2577.85,271.273 2578.32,269.301 2578.79,267.371 2579.26,265.485 2579.73,263.642 2580.2,261.84 2580.67,260.078 2581.14,258.366 2581.61,256.707 2582.08,255.099 2582.55,253.543 2583.02,252.038 2583.49,250.589 2583.96,249.194 2584.43,247.854 2584.9,246.579 2585.37,245.38 2585.84,244.263 2586.31,243.227 2586.78,242.262 2587.25,241.352 2587.72,240.474 2588.19,239.612 2588.66,238.765 2589.13,237.933 2589.6,237.114 2590.07,236.31 2590.54,235.525 2591.01,234.768 2591.48,234.047 2591.95,233.373 2592.42,232.765 2592.89,232.241 2593.36,231.818 2593.83,231.508 2594.3,231.319 2594.77,231.255 2595.24,231.305 2595.71,231.444 2596.18,231.649 2596.65,231.911 2597.12,232.211 2597.59,232.534 2598.06,232.862 2598.53,233.182 2599,233.492 2599.48,233.803 2599.95,234.133 2600.42,234.503 2600.89,234.937 2601.36,235.457 2601.83,236.067 2602.3,236.757 2602.77,237.518 2603.24,238.342 2603.71,239.221 2604.18,240.154 2604.65,241.131 2605.12,242.146 2605.59,243.2 2606.06,244.301 2606.53,245.459 2607,246.69 2607.47,248.005 2607.94,249.406 2608.41,250.886 2608.88,252.438 2609.35,254.053 2609.82,255.712 2610.29,257.404 2610.76,259.126 2611.23,260.879 2611.7,262.674 2612.17,264.521 2612.64,266.426 2613.11,268.394 2613.58,270.415 2614.05,272.476 2614.52,274.572 2614.99,276.705 2615.46,278.878 2615.93,281.086 2616.4,283.323 2616.87,285.57 2617.34,287.814 2617.81,290.056 2618.28,292.304 2618.75,294.569 2619.22,296.869 2619.69,299.216 2620.16,301.63 2620.63,304.122 2621.1,306.706 2621.57,309.375 2622.04,312.121 2622.51,314.929 2622.98,317.786 2623.45,320.686 2623.92,323.616 2624.39,326.565 2624.87,329.523 2625.34,332.491 2625.81,335.47 2626.28,338.455 2626.75,341.443 2627.22,344.438 2627.69,347.45 2628.16,350.495 2628.63,353.59 2629.1,356.743 2629.57,359.969 2630.04,363.274 2630.51,366.656 2630.98,370.108 2631.45,373.611 2631.92,377.141 2632.39,380.671 2632.86,384.173 2633.33,387.632 2633.8,391.045 2634.27,394.424 2634.74,397.792 2635.21,401.168 2635.68,404.571 2636.15,408.019 2636.62,411.527 2637.09,415.097 2637.56,418.725 2638.03,422.401 2638.5,426.123 2638.97,429.885 2639.44,433.687 2639.91,437.53 2640.38,441.423 2640.85,445.356 2641.32,449.311 2641.79,453.269 2642.26,457.221 2642.73,461.153 2643.2,465.06 2643.67,468.938 2644.14,472.791 2644.61,476.621 2645.08,480.433 2645.55,484.232 2646.02,488.026 2646.49,491.822 2646.96,495.622 2647.43,499.432 2647.9,503.247 2648.37,507.056 2648.84,510.85 2649.31,514.623 2649.79,518.362 2650.26,522.052 2650.73,525.689 2651.2,529.276 2651.67,532.819 2652.14,536.334 2652.61,539.837 2653.08,543.334 2653.55,546.837 2654.02,550.345 2654.49,553.858 2654.96,557.381 2655.43,560.908 2655.9,564.441 2656.37,567.966 2656.84,571.465 2657.31,574.915 2657.78,578.287 2658.25,581.565 2658.72,584.758 2659.19,587.876 2659.66,590.929 2660.13,593.937 2660.6,596.908 2661.07,599.86 2661.54,602.809 2662.01,605.761 2662.48,608.725 2662.95,611.695 2663.42,614.658 2663.89,617.595 2664.36,620.492 2664.83,623.34 2665.3,626.129 2665.77,628.85 2666.24,631.498 2666.71,634.073 2667.18,636.577 2667.65,639.007 2668.12,641.366 2668.59,643.659 2669.06,645.889 2669.53,648.057 2670,650.166 2670.47,652.214 2670.94,654.211 2671.41,656.163 2671.88,658.068 2672.35,659.929 2672.82,661.744 2673.29,663.515 2673.76,665.249 2674.23,666.954 2674.7,668.645 2675.18,670.326 2675.65,671.989 2676.12,673.621 2676.59,675.206 2677.06,676.721 2677.53,678.152 2678,679.494 2678.47,680.751 2678.94,681.934 2679.41,683.05 2679.88,684.1 2680.35,685.072 2680.82,685.948 2681.29,686.708 2681.76,687.331 2682.23,714.87 "/>
<path clip-path="url(#clip860)" d="M343.833 348.006 L1133.28 348.006 L1133.28 192.486 L343.833 192.486  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<polyline clip-path="url(#clip860)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="343.833,348.006 1133.28,348.006 1133.28,192.486 343.833,192.486 343.833,348.006 "/>
<polyline clip-path="url(#clip860)" style="stroke:#0000ff; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" points="371.522,244.326 537.654,244.326 "/>
<path clip-path="url(#clip860)" d="M572.75 228.319 L572.75 235.68 L581.524 235.68 L581.524 238.99 L572.75 238.99 L572.75 253.064 Q572.75 256.235 573.607 257.138 Q574.487 258.041 577.149 258.041 L581.524 258.041 L581.524 261.606 L577.149 261.606 Q572.218 261.606 570.343 259.777 Q568.468 257.925 568.468 253.064 L568.468 238.99 L565.343 238.99 L565.343 235.68 L568.468 235.68 L568.468 228.319 L572.75 228.319 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M602.148 239.661 Q601.431 239.245 600.574 239.059 Q599.741 238.851 598.723 238.851 Q595.111 238.851 593.167 241.212 Q591.246 243.55 591.246 247.948 L591.246 261.606 L586.963 261.606 L586.963 235.68 L591.246 235.68 L591.246 239.707 Q592.588 237.346 594.741 236.212 Q596.894 235.055 599.973 235.055 Q600.412 235.055 600.945 235.124 Q601.477 235.17 602.125 235.286 L602.148 239.661 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M606.176 251.374 L606.176 235.68 L610.435 235.68 L610.435 251.212 Q610.435 254.893 611.871 256.744 Q613.306 258.573 616.176 258.573 Q619.625 258.573 621.616 256.374 Q623.63 254.175 623.63 250.379 L623.63 235.68 L627.889 235.68 L627.889 261.606 L623.63 261.606 L623.63 257.624 Q622.079 259.985 620.019 261.143 Q617.982 262.277 615.273 262.277 Q610.806 262.277 608.491 259.499 Q606.176 256.721 606.176 251.374 M616.894 235.055 L616.894 235.055 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M658.838 247.578 L658.838 249.661 L639.255 249.661 Q639.533 254.059 641.894 256.374 Q644.278 258.666 648.514 258.666 Q650.968 258.666 653.259 258.064 Q655.574 257.462 657.843 256.258 L657.843 260.286 Q655.551 261.258 653.144 261.768 Q650.736 262.277 648.259 262.277 Q642.056 262.277 638.421 258.666 Q634.81 255.055 634.81 248.897 Q634.81 242.532 638.236 238.805 Q641.685 235.055 647.519 235.055 Q652.75 235.055 655.782 238.434 Q658.838 241.791 658.838 247.578 M654.579 246.328 Q654.532 242.832 652.611 240.749 Q650.713 238.666 647.565 238.666 Q644 238.666 641.847 240.68 Q639.718 242.694 639.394 246.351 L654.579 246.328 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M691.129 225.633 Q688.028 230.958 686.523 236.166 Q685.018 241.374 685.018 246.721 Q685.018 252.069 686.523 257.323 Q688.051 262.555 691.129 267.855 L687.426 267.855 Q683.954 262.416 682.217 257.161 Q680.505 251.906 680.505 246.721 Q680.505 241.559 682.217 236.328 Q683.93 231.096 687.426 225.633 L691.129 225.633 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M715.921 236.444 L715.921 240.471 Q714.115 239.545 712.171 239.082 Q710.227 238.62 708.143 238.62 Q704.972 238.62 703.375 239.592 Q701.801 240.564 701.801 242.508 Q701.801 243.99 702.935 244.846 Q704.069 245.68 707.495 246.444 L708.953 246.768 Q713.49 247.74 715.389 249.522 Q717.31 251.281 717.31 254.453 Q717.31 258.064 714.44 260.17 Q711.592 262.277 706.592 262.277 Q704.509 262.277 702.241 261.86 Q699.995 261.467 697.495 260.656 L697.495 256.258 Q699.856 257.485 702.148 258.11 Q704.44 258.712 706.685 258.712 Q709.694 258.712 711.315 257.693 Q712.935 256.652 712.935 254.777 Q712.935 253.041 711.754 252.115 Q710.597 251.189 706.639 250.332 L705.157 249.985 Q701.199 249.152 699.44 247.439 Q697.68 245.703 697.68 242.694 Q697.68 239.036 700.273 237.045 Q702.866 235.055 707.634 235.055 Q709.995 235.055 712.078 235.402 Q714.162 235.749 715.921 236.444 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M728.305 228.319 L728.305 235.68 L737.078 235.68 L737.078 238.99 L728.305 238.99 L728.305 253.064 Q728.305 256.235 729.162 257.138 Q730.041 258.041 732.703 258.041 L737.078 258.041 L737.078 261.606 L732.703 261.606 Q727.773 261.606 725.898 259.777 Q724.023 257.925 724.023 253.064 L724.023 238.99 L720.898 238.99 L720.898 235.68 L724.023 235.68 L724.023 228.319 L728.305 228.319 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M754.462 248.573 Q749.3 248.573 747.31 249.754 Q745.319 250.934 745.319 253.781 Q745.319 256.05 746.8 257.393 Q748.305 258.712 750.875 258.712 Q754.416 258.712 756.546 256.212 Q758.699 253.689 758.699 249.522 L758.699 248.573 L754.462 248.573 M762.958 246.814 L762.958 261.606 L758.699 261.606 L758.699 257.67 Q757.24 260.031 755.064 261.166 Q752.888 262.277 749.74 262.277 Q745.759 262.277 743.398 260.055 Q741.06 257.809 741.06 254.059 Q741.06 249.684 743.976 247.462 Q746.916 245.24 752.726 245.24 L758.699 245.24 L758.699 244.823 Q758.699 241.883 756.754 240.286 Q754.833 238.666 751.337 238.666 Q749.115 238.666 747.009 239.198 Q744.902 239.731 742.958 240.795 L742.958 236.86 Q745.296 235.957 747.495 235.518 Q749.694 235.055 751.777 235.055 Q757.402 235.055 760.18 237.971 Q762.958 240.888 762.958 246.814 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M775.944 228.319 L775.944 235.68 L784.717 235.68 L784.717 238.99 L775.944 238.99 L775.944 253.064 Q775.944 256.235 776.8 257.138 Q777.68 258.041 780.342 258.041 L784.717 258.041 L784.717 261.606 L780.342 261.606 Q775.411 261.606 773.536 259.777 Q771.661 257.925 771.661 253.064 L771.661 238.99 L768.536 238.99 L768.536 235.68 L771.661 235.68 L771.661 228.319 L775.944 228.319 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M812.495 247.578 L812.495 249.661 L792.911 249.661 Q793.189 254.059 795.55 256.374 Q797.934 258.666 802.171 258.666 Q804.624 258.666 806.916 258.064 Q809.231 257.462 811.499 256.258 L811.499 260.286 Q809.208 261.258 806.8 261.768 Q804.393 262.277 801.916 262.277 Q795.712 262.277 792.078 258.666 Q788.467 255.055 788.467 248.897 Q788.467 242.532 791.893 238.805 Q795.342 235.055 801.175 235.055 Q806.407 235.055 809.439 238.434 Q812.495 241.791 812.495 247.578 M808.235 246.328 Q808.189 242.832 806.268 240.749 Q804.37 238.666 801.221 238.666 Q797.657 238.666 795.504 240.68 Q793.374 242.694 793.05 246.351 L808.235 246.328 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M851.615 239.615 L851.615 225.587 L855.874 225.587 L855.874 261.606 L851.615 261.606 L851.615 257.717 Q850.272 260.031 848.212 261.166 Q846.175 262.277 843.305 262.277 Q838.606 262.277 835.643 258.527 Q832.703 254.777 832.703 248.666 Q832.703 242.555 835.643 238.805 Q838.606 235.055 843.305 235.055 Q846.175 235.055 848.212 236.189 Q850.272 237.3 851.615 239.615 M837.101 248.666 Q837.101 253.365 839.022 256.05 Q840.967 258.712 844.346 258.712 Q847.726 258.712 849.67 256.05 Q851.615 253.365 851.615 248.666 Q851.615 243.967 849.67 241.305 Q847.726 238.62 844.346 238.62 Q840.967 238.62 839.022 241.305 Q837.101 243.967 837.101 248.666 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M874.693 238.666 Q871.267 238.666 869.277 241.351 Q867.286 244.013 867.286 248.666 Q867.286 253.319 869.254 256.004 Q871.244 258.666 874.693 258.666 Q878.096 258.666 880.087 255.981 Q882.078 253.295 882.078 248.666 Q882.078 244.059 880.087 241.374 Q878.096 238.666 874.693 238.666 M874.693 235.055 Q880.249 235.055 883.42 238.666 Q886.591 242.277 886.591 248.666 Q886.591 255.031 883.42 258.666 Q880.249 262.277 874.693 262.277 Q869.115 262.277 865.943 258.666 Q862.795 255.031 862.795 248.666 Q862.795 242.277 865.943 238.666 Q869.115 235.055 874.693 235.055 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M906.776 225.587 L906.776 229.129 L902.702 229.129 Q900.411 229.129 899.508 230.055 Q898.628 230.981 898.628 233.388 L898.628 235.68 L905.642 235.68 L905.642 238.99 L898.628 238.99 L898.628 261.606 L894.346 261.606 L894.346 238.99 L890.272 238.99 L890.272 235.68 L894.346 235.68 L894.346 233.874 Q894.346 229.545 896.36 227.578 Q898.374 225.587 902.749 225.587 L906.776 225.587 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M938.86 231.12 L927.054 249.569 L938.86 249.569 L938.86 231.12 M937.633 227.046 L943.512 227.046 L943.512 249.569 L948.443 249.569 L948.443 253.457 L943.512 253.457 L943.512 261.606 L938.86 261.606 L938.86 253.457 L923.258 253.457 L923.258 248.944 L937.633 227.046 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M954.901 225.633 L958.605 225.633 Q962.077 231.096 963.79 236.328 Q965.526 241.559 965.526 246.721 Q965.526 251.906 963.79 257.161 Q962.077 262.416 958.605 267.855 L954.901 267.855 Q957.98 262.555 959.485 257.323 Q961.012 252.069 961.012 246.721 Q961.012 241.374 959.485 236.166 Q957.98 230.958 954.901 225.633 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip860)" style="stroke:#ffa500; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" stroke-dasharray="32, 20" points="371.522,296.166 537.654,296.166 "/>
<path clip-path="url(#clip860)" d="M589.371 299.418 L589.371 301.501 L569.788 301.501 Q570.065 305.899 572.426 308.214 Q574.811 310.506 579.047 310.506 Q581.5 310.506 583.792 309.904 Q586.107 309.302 588.375 308.098 L588.375 312.126 Q586.084 313.098 583.676 313.608 Q581.269 314.117 578.792 314.117 Q572.588 314.117 568.954 310.506 Q565.343 306.895 565.343 300.737 Q565.343 294.372 568.769 290.645 Q572.218 286.895 578.051 286.895 Q583.283 286.895 586.315 290.274 Q589.371 293.631 589.371 299.418 M585.112 298.168 Q585.065 294.672 583.144 292.589 Q581.246 290.506 578.098 290.506 Q574.533 290.506 572.38 292.52 Q570.25 294.534 569.926 298.191 L585.112 298.168 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M612.889 288.284 L612.889 292.311 Q611.084 291.385 609.139 290.922 Q607.195 290.46 605.111 290.46 Q601.94 290.46 600.343 291.432 Q598.769 292.404 598.769 294.348 Q598.769 295.83 599.903 296.686 Q601.037 297.52 604.463 298.284 L605.922 298.608 Q610.459 299.58 612.357 301.362 Q614.278 303.121 614.278 306.293 Q614.278 309.904 611.408 312.01 Q608.56 314.117 603.56 314.117 Q601.477 314.117 599.209 313.7 Q596.963 313.307 594.463 312.496 L594.463 308.098 Q596.824 309.325 599.116 309.95 Q601.408 310.552 603.653 310.552 Q606.662 310.552 608.283 309.533 Q609.903 308.492 609.903 306.617 Q609.903 304.881 608.723 303.955 Q607.565 303.029 603.607 302.172 L602.125 301.825 Q598.167 300.992 596.408 299.279 Q594.649 297.543 594.649 294.534 Q594.649 290.876 597.241 288.885 Q599.834 286.895 604.602 286.895 Q606.963 286.895 609.047 287.242 Q611.13 287.589 612.889 288.284 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M625.273 280.159 L625.273 287.52 L634.046 287.52 L634.046 290.83 L625.273 290.83 L625.273 304.904 Q625.273 308.075 626.13 308.978 Q627.009 309.881 629.671 309.881 L634.046 309.881 L634.046 313.446 L629.671 313.446 Q624.741 313.446 622.866 311.617 Q620.991 309.765 620.991 304.904 L620.991 290.83 L617.866 290.83 L617.866 287.52 L620.991 287.52 L620.991 280.159 L625.273 280.159 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M639.648 287.52 L643.908 287.52 L643.908 313.446 L639.648 313.446 L639.648 287.52 M639.648 277.427 L643.908 277.427 L643.908 282.821 L639.648 282.821 L639.648 277.427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M673.005 292.497 Q674.602 289.626 676.824 288.26 Q679.046 286.895 682.055 286.895 Q686.106 286.895 688.305 289.742 Q690.504 292.566 690.504 297.797 L690.504 313.446 L686.222 313.446 L686.222 297.936 Q686.222 294.21 684.903 292.404 Q683.583 290.598 680.875 290.598 Q677.565 290.598 675.643 292.797 Q673.722 294.997 673.722 298.793 L673.722 313.446 L669.44 313.446 L669.44 297.936 Q669.44 294.186 668.12 292.404 Q666.801 290.598 664.046 290.598 Q660.782 290.598 658.861 292.821 Q656.94 295.02 656.94 298.793 L656.94 313.446 L652.657 313.446 L652.657 287.52 L656.94 287.52 L656.94 291.547 Q658.398 289.163 660.435 288.029 Q662.472 286.895 665.273 286.895 Q668.097 286.895 670.065 288.33 Q672.055 289.765 673.005 292.497 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M710.782 300.413 Q705.62 300.413 703.629 301.594 Q701.639 302.774 701.639 305.621 Q701.639 307.89 703.12 309.233 Q704.625 310.552 707.194 310.552 Q710.736 310.552 712.865 308.052 Q715.018 305.529 715.018 301.362 L715.018 300.413 L710.782 300.413 M719.277 298.654 L719.277 313.446 L715.018 313.446 L715.018 309.51 Q713.56 311.871 711.384 313.006 Q709.208 314.117 706.06 314.117 Q702.078 314.117 699.717 311.895 Q697.379 309.649 697.379 305.899 Q697.379 301.524 700.296 299.302 Q703.236 297.08 709.046 297.08 L715.018 297.08 L715.018 296.663 Q715.018 293.723 713.074 292.126 Q711.153 290.506 707.657 290.506 Q705.435 290.506 703.328 291.038 Q701.222 291.571 699.278 292.635 L699.278 288.7 Q701.616 287.797 703.815 287.358 Q706.014 286.895 708.097 286.895 Q713.722 286.895 716.5 289.811 Q719.277 292.728 719.277 298.654 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M732.264 280.159 L732.264 287.52 L741.037 287.52 L741.037 290.83 L732.264 290.83 L732.264 304.904 Q732.264 308.075 733.12 308.978 Q734 309.881 736.662 309.881 L741.037 309.881 L741.037 313.446 L736.662 313.446 Q731.731 313.446 729.856 311.617 Q727.981 309.765 727.981 304.904 L727.981 290.83 L724.856 290.83 L724.856 287.52 L727.981 287.52 L727.981 280.159 L732.264 280.159 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M768.814 299.418 L768.814 301.501 L749.231 301.501 Q749.509 305.899 751.87 308.214 Q754.254 310.506 758.49 310.506 Q760.944 310.506 763.236 309.904 Q765.55 309.302 767.819 308.098 L767.819 312.126 Q765.527 313.098 763.12 313.608 Q760.712 314.117 758.236 314.117 Q752.032 314.117 748.398 310.506 Q744.787 306.895 744.787 300.737 Q744.787 294.372 748.212 290.645 Q751.662 286.895 757.495 286.895 Q762.726 286.895 765.759 290.274 Q768.814 293.631 768.814 299.418 M764.555 298.168 Q764.509 294.672 762.587 292.589 Q760.689 290.506 757.541 290.506 Q753.976 290.506 751.824 292.52 Q749.694 294.534 749.37 298.191 L764.555 298.168 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M792.865 291.455 L792.865 277.427 L797.124 277.427 L797.124 313.446 L792.865 313.446 L792.865 309.557 Q791.522 311.871 789.462 313.006 Q787.425 314.117 784.555 314.117 Q779.856 314.117 776.893 310.367 Q773.953 306.617 773.953 300.506 Q773.953 294.395 776.893 290.645 Q779.856 286.895 784.555 286.895 Q787.425 286.895 789.462 288.029 Q791.522 289.14 792.865 291.455 M778.351 300.506 Q778.351 305.205 780.273 307.89 Q782.217 310.552 785.597 310.552 Q788.976 310.552 790.921 307.89 Q792.865 305.205 792.865 300.506 Q792.865 295.807 790.921 293.145 Q788.976 290.46 785.597 290.46 Q782.217 290.46 780.273 293.145 Q778.351 295.807 778.351 300.506 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M831.198 277.473 Q828.096 282.798 826.592 288.006 Q825.087 293.214 825.087 298.561 Q825.087 303.909 826.592 309.163 Q828.119 314.395 831.198 319.695 L827.494 319.695 Q824.022 314.256 822.286 309.001 Q820.573 303.746 820.573 298.561 Q820.573 293.399 822.286 288.168 Q823.999 282.936 827.494 277.473 L831.198 277.473 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M855.99 288.284 L855.99 292.311 Q854.184 291.385 852.24 290.922 Q850.295 290.46 848.212 290.46 Q845.041 290.46 843.443 291.432 Q841.869 292.404 841.869 294.348 Q841.869 295.83 843.004 296.686 Q844.138 297.52 847.564 298.284 L849.022 298.608 Q853.559 299.58 855.457 301.362 Q857.379 303.121 857.379 306.293 Q857.379 309.904 854.508 312.01 Q851.661 314.117 846.661 314.117 Q844.578 314.117 842.309 313.7 Q840.064 313.307 837.564 312.496 L837.564 308.098 Q839.925 309.325 842.217 309.95 Q844.508 310.552 846.754 310.552 Q849.763 310.552 851.383 309.533 Q853.004 308.492 853.004 306.617 Q853.004 304.881 851.823 303.955 Q850.666 303.029 846.707 302.172 L845.226 301.825 Q841.268 300.992 839.508 299.279 Q837.749 297.543 837.749 294.534 Q837.749 290.876 840.342 288.885 Q842.934 286.895 847.703 286.895 Q850.064 286.895 852.147 287.242 Q854.23 287.589 855.99 288.284 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M868.374 280.159 L868.374 287.52 L877.147 287.52 L877.147 290.83 L868.374 290.83 L868.374 304.904 Q868.374 308.075 869.23 308.978 Q870.11 309.881 872.772 309.881 L877.147 309.881 L877.147 313.446 L872.772 313.446 Q867.841 313.446 865.966 311.617 Q864.092 309.765 864.092 304.904 L864.092 290.83 L860.967 290.83 L860.967 287.52 L864.092 287.52 L864.092 280.159 L868.374 280.159 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M894.531 300.413 Q889.369 300.413 887.378 301.594 Q885.388 302.774 885.388 305.621 Q885.388 307.89 886.869 309.233 Q888.374 310.552 890.943 310.552 Q894.485 310.552 896.614 308.052 Q898.767 305.529 898.767 301.362 L898.767 300.413 L894.531 300.413 M903.026 298.654 L903.026 313.446 L898.767 313.446 L898.767 309.51 Q897.309 311.871 895.133 313.006 Q892.957 314.117 889.809 314.117 Q885.828 314.117 883.466 311.895 Q881.128 309.649 881.128 305.899 Q881.128 301.524 884.045 299.302 Q886.985 297.08 892.795 297.08 L898.767 297.08 L898.767 296.663 Q898.767 293.723 896.823 292.126 Q894.902 290.506 891.406 290.506 Q889.184 290.506 887.077 291.038 Q884.971 291.571 883.027 292.635 L883.027 288.7 Q885.365 287.797 887.564 287.358 Q889.763 286.895 891.846 286.895 Q897.471 286.895 900.249 289.811 Q903.026 292.728 903.026 298.654 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M916.013 280.159 L916.013 287.52 L924.786 287.52 L924.786 290.83 L916.013 290.83 L916.013 304.904 Q916.013 308.075 916.869 308.978 Q917.749 309.881 920.411 309.881 L924.786 309.881 L924.786 313.446 L920.411 313.446 Q915.48 313.446 913.605 311.617 Q911.73 309.765 911.73 304.904 L911.73 290.83 L908.605 290.83 L908.605 287.52 L911.73 287.52 L911.73 280.159 L916.013 280.159 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M952.563 299.418 L952.563 301.501 L932.98 301.501 Q933.258 305.899 935.619 308.214 Q938.003 310.506 942.239 310.506 Q944.693 310.506 946.985 309.904 Q949.299 309.302 951.568 308.098 L951.568 312.126 Q949.276 313.098 946.869 313.608 Q944.461 314.117 941.985 314.117 Q935.781 314.117 932.147 310.506 Q928.536 306.895 928.536 300.737 Q928.536 294.372 931.962 290.645 Q935.411 286.895 941.244 286.895 Q946.475 286.895 949.508 290.274 Q952.563 293.631 952.563 299.418 M948.304 298.168 Q948.258 294.672 946.336 292.589 Q944.438 290.506 941.29 290.506 Q937.725 290.506 935.573 292.52 Q933.443 294.534 933.119 298.191 L948.304 298.168 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M991.683 291.455 L991.683 277.427 L995.943 277.427 L995.943 313.446 L991.683 313.446 L991.683 309.557 Q990.341 311.871 988.281 313.006 Q986.244 314.117 983.373 314.117 Q978.674 314.117 975.711 310.367 Q972.771 306.617 972.771 300.506 Q972.771 294.395 975.711 290.645 Q978.674 286.895 983.373 286.895 Q986.244 286.895 988.281 288.029 Q990.341 289.14 991.683 291.455 M977.17 300.506 Q977.17 305.205 979.091 307.89 Q981.035 310.552 984.415 310.552 Q987.795 310.552 989.739 307.89 Q991.683 305.205 991.683 300.506 Q991.683 295.807 989.739 293.145 Q987.795 290.46 984.415 290.46 Q981.035 290.46 979.091 293.145 Q977.17 295.807 977.17 300.506 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1014.76 290.506 Q1011.34 290.506 1009.35 293.191 Q1007.35 295.853 1007.35 300.506 Q1007.35 305.159 1009.32 307.844 Q1011.31 310.506 1014.76 310.506 Q1018.16 310.506 1020.16 307.821 Q1022.15 305.135 1022.15 300.506 Q1022.15 295.899 1020.16 293.214 Q1018.16 290.506 1014.76 290.506 M1014.76 286.895 Q1020.32 286.895 1023.49 290.506 Q1026.66 294.117 1026.66 300.506 Q1026.66 306.871 1023.49 310.506 Q1020.32 314.117 1014.76 314.117 Q1009.18 314.117 1006.01 310.506 Q1002.86 306.871 1002.86 300.506 Q1002.86 294.117 1006.01 290.506 Q1009.18 286.895 1014.76 286.895 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1046.85 277.427 L1046.85 280.969 L1042.77 280.969 Q1040.48 280.969 1039.58 281.895 Q1038.7 282.821 1038.7 285.228 L1038.7 287.52 L1045.71 287.52 L1045.71 290.83 L1038.7 290.83 L1038.7 313.446 L1034.41 313.446 L1034.41 290.83 L1030.34 290.83 L1030.34 287.52 L1034.41 287.52 L1034.41 285.714 Q1034.41 281.385 1036.43 279.418 Q1038.44 277.427 1042.82 277.427 L1046.85 277.427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1078.93 282.96 L1067.12 301.409 L1078.93 301.409 L1078.93 282.96 M1077.7 278.886 L1083.58 278.886 L1083.58 301.409 L1088.51 301.409 L1088.51 305.297 L1083.58 305.297 L1083.58 313.446 L1078.93 313.446 L1078.93 305.297 L1063.33 305.297 L1063.33 300.784 L1077.7 278.886 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip860)" d="M1094.97 277.473 L1098.67 277.473 Q1102.15 282.936 1103.86 288.168 Q1105.59 293.399 1105.59 298.561 Q1105.59 303.746 1103.86 309.001 Q1102.15 314.256 1098.67 319.695 L1094.97 319.695 Q1098.05 314.395 1099.55 309.163 Q1101.08 303.909 1101.08 298.561 Q1101.08 293.214 1099.55 288.006 Q1098.05 282.798 1094.97 277.473 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /></svg>
<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="700" height="300" viewBox="0 0 2800 1200">
<defs>
  <clipPath id="clip950">
    <rect x="0" y="0" width="2800" height="1200"/>
  </clipPath>
</defs>
<path clip-path="url(#clip950)" d="M0 1200 L2800 1200 L2800 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<defs>
  <clipPath id="clip951">
    <rect x="560" y="0" width="1961" height="1200"/>
  </clipPath>
</defs>
<path clip-path="url(#clip950)" d="M322.317 993.502 L2752.76 993.502 L2752.76 164.864 L322.317 164.864  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<defs>
  <clipPath id="clip952">
    <rect x="322" y="164" width="2431" height="830"/>
  </clipPath>
</defs>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="391.103,993.502 391.103,164.864 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="849.677,993.502 849.677,164.864 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1308.25,993.502 1308.25,164.864 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1766.82,993.502 1766.82,164.864 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2225.4,993.502 2225.4,164.864 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2683.97,993.502 2683.97,164.864 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="322.317,957.812 2752.76,957.812 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="322.317,766.913 2752.76,766.913 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="322.317,576.015 2752.76,576.015 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="322.317,385.116 2752.76,385.116 "/>
<polyline clip-path="url(#clip952)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="322.317,194.217 2752.76,194.217 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="322.317,993.502 2752.76,993.502 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="391.103,993.502 391.103,974.604 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="849.677,993.502 849.677,974.604 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1308.25,993.502 1308.25,974.604 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1766.82,993.502 1766.82,974.604 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2225.4,993.502 2225.4,974.604 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2683.97,993.502 2683.97,974.604 "/>
<path clip-path="url(#clip950)" d="M391.103 1027.62 Q387.492 1027.62 385.663 1031.19 Q383.858 1034.73 383.858 1041.86 Q383.858 1048.96 385.663 1052.53 Q387.492 1056.07 391.103 1056.07 Q394.737 1056.07 396.543 1052.53 Q398.372 1048.96 398.372 1041.86 Q398.372 1034.73 396.543 1031.19 Q394.737 1027.62 391.103 1027.62 M391.103 1023.92 Q396.913 1023.92 399.969 1028.52 Q403.048 1033.11 403.048 1041.86 Q403.048 1050.58 399.969 1055.19 Q396.913 1059.77 391.103 1059.77 Q385.293 1059.77 382.214 1055.19 Q379.159 1050.58 379.159 1041.86 Q379.159 1033.11 382.214 1028.52 Q385.293 1023.92 391.103 1023.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M840.059 1055.17 L847.697 1055.17 L847.697 1028.8 L839.387 1030.47 L839.387 1026.21 L847.651 1024.54 L852.327 1024.54 L852.327 1055.17 L859.966 1055.17 L859.966 1059.1 L840.059 1059.1 L840.059 1055.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1302.9 1055.17 L1319.22 1055.17 L1319.22 1059.1 L1297.28 1059.1 L1297.28 1055.17 Q1299.94 1052.41 1304.52 1047.78 Q1309.13 1043.13 1310.31 1041.79 Q1312.56 1039.26 1313.44 1037.53 Q1314.34 1035.77 1314.34 1034.08 Q1314.34 1031.32 1312.39 1029.59 Q1310.47 1027.85 1307.37 1027.85 Q1305.17 1027.85 1302.72 1028.62 Q1300.29 1029.38 1297.51 1030.93 L1297.51 1026.21 Q1300.33 1025.07 1302.79 1024.5 Q1305.24 1023.92 1307.28 1023.92 Q1312.65 1023.92 1315.84 1026.6 Q1319.04 1029.29 1319.04 1033.78 Q1319.04 1035.91 1318.23 1037.83 Q1317.44 1039.73 1315.33 1042.32 Q1314.75 1042.99 1311.65 1046.21 Q1308.55 1049.4 1302.9 1055.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1771.07 1040.47 Q1774.43 1041.19 1776.3 1043.45 Q1778.2 1045.72 1778.2 1049.06 Q1778.2 1054.17 1774.68 1056.97 Q1771.16 1059.77 1764.68 1059.77 Q1762.51 1059.77 1760.19 1059.33 Q1757.9 1058.92 1755.45 1058.06 L1755.45 1053.55 Q1757.39 1054.68 1759.71 1055.26 Q1762.02 1055.84 1764.54 1055.84 Q1768.94 1055.84 1771.23 1054.1 Q1773.55 1052.37 1773.55 1049.06 Q1773.55 1046 1771.39 1044.29 Q1769.27 1042.55 1765.45 1042.55 L1761.42 1042.55 L1761.42 1038.71 L1765.63 1038.71 Q1769.08 1038.71 1770.91 1037.34 Q1772.74 1035.95 1772.74 1033.36 Q1772.74 1030.7 1770.84 1029.29 Q1768.96 1027.85 1765.45 1027.85 Q1763.52 1027.85 1761.33 1028.27 Q1759.13 1028.69 1756.49 1029.57 L1756.49 1025.4 Q1759.15 1024.66 1761.46 1024.29 Q1763.8 1023.92 1765.86 1023.92 Q1771.19 1023.92 1774.29 1026.35 Q1777.39 1028.75 1777.39 1032.88 Q1777.39 1035.75 1775.75 1037.74 Q1774.1 1039.7 1771.07 1040.47 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M2228.41 1028.62 L2216.6 1047.07 L2228.41 1047.07 L2228.41 1028.62 M2227.18 1024.54 L2233.06 1024.54 L2233.06 1047.07 L2237.99 1047.07 L2237.99 1050.95 L2233.06 1050.95 L2233.06 1059.1 L2228.41 1059.1 L2228.41 1050.95 L2212.8 1050.95 L2212.8 1046.44 L2227.18 1024.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M2674.25 1024.54 L2692.6 1024.54 L2692.6 1028.48 L2678.53 1028.48 L2678.53 1036.95 Q2679.55 1036.6 2680.57 1036.44 Q2681.59 1036.25 2682.6 1036.25 Q2688.39 1036.25 2691.77 1039.43 Q2695.15 1042.6 2695.15 1048.01 Q2695.15 1053.59 2691.68 1056.69 Q2688.21 1059.77 2681.89 1059.77 Q2679.71 1059.77 2677.44 1059.4 Q2675.2 1059.03 2672.79 1058.29 L2672.79 1053.59 Q2674.87 1054.73 2677.09 1055.28 Q2679.32 1055.84 2681.79 1055.84 Q2685.8 1055.84 2688.14 1053.73 Q2690.47 1051.63 2690.47 1048.01 Q2690.47 1044.4 2688.14 1042.3 Q2685.8 1040.19 2681.79 1040.19 Q2679.92 1040.19 2678.04 1040.61 Q2676.19 1041.02 2674.25 1041.9 L2674.25 1024.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1424.99 1098.6 L1424.99 1108.72 L1437.05 1108.72 L1437.05 1113.27 L1424.99 1113.27 L1424.99 1132.62 Q1424.99 1136.98 1426.17 1138.22 Q1427.38 1139.46 1431.04 1139.46 L1437.05 1139.46 L1437.05 1144.37 L1431.04 1144.37 Q1424.26 1144.37 1421.68 1141.85 Q1419.1 1139.31 1419.1 1132.62 L1419.1 1113.27 L1414.81 1113.27 L1414.81 1108.72 L1419.1 1108.72 L1419.1 1098.6 L1424.99 1098.6 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1444.76 1108.72 L1450.61 1108.72 L1450.61 1144.37 L1444.76 1144.37 L1444.76 1108.72 M1444.76 1094.84 L1450.61 1094.84 L1450.61 1102.26 L1444.76 1102.26 L1444.76 1094.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1490.62 1115.56 Q1492.82 1111.61 1495.87 1109.74 Q1498.93 1107.86 1503.07 1107.86 Q1508.64 1107.86 1511.66 1111.77 Q1514.68 1115.66 1514.68 1122.85 L1514.68 1144.37 L1508.8 1144.37 L1508.8 1123.04 Q1508.8 1117.92 1506.98 1115.43 Q1505.17 1112.95 1501.44 1112.95 Q1496.89 1112.95 1494.25 1115.97 Q1491.61 1119 1491.61 1124.22 L1491.61 1144.37 L1485.72 1144.37 L1485.72 1123.04 Q1485.72 1117.88 1483.91 1115.43 Q1482.09 1112.95 1478.3 1112.95 Q1473.82 1112.95 1471.17 1116.01 Q1468.53 1119.03 1468.53 1124.22 L1468.53 1144.37 L1462.64 1144.37 L1462.64 1108.72 L1468.53 1108.72 L1468.53 1114.26 Q1470.54 1110.98 1473.34 1109.42 Q1476.14 1107.86 1479.99 1107.86 Q1483.87 1107.86 1486.58 1109.83 Q1489.32 1111.81 1490.62 1115.56 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1556.86 1125.08 L1556.86 1127.94 L1529.93 1127.94 Q1530.31 1133.99 1533.56 1137.17 Q1536.84 1140.32 1542.66 1140.32 Q1546.03 1140.32 1549.19 1139.5 Q1552.37 1138.67 1555.49 1137.01 L1555.49 1142.55 Q1552.34 1143.89 1549.03 1144.59 Q1545.72 1145.29 1542.31 1145.29 Q1533.78 1145.29 1528.78 1140.32 Q1523.82 1135.36 1523.82 1126.89 Q1523.82 1118.14 1528.53 1113.01 Q1533.27 1107.86 1541.29 1107.86 Q1548.49 1107.86 1552.66 1112.51 Q1556.86 1117.12 1556.86 1125.08 M1551 1123.36 Q1550.94 1118.55 1548.29 1115.69 Q1545.68 1112.82 1541.36 1112.82 Q1536.45 1112.82 1533.49 1115.59 Q1530.57 1118.36 1530.12 1123.39 L1551 1123.36 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1601.26 1094.9 Q1596.99 1102.23 1594.92 1109.39 Q1592.85 1116.55 1592.85 1123.9 Q1592.85 1131.25 1594.92 1138.48 Q1597.02 1145.67 1601.26 1152.96 L1596.16 1152.96 Q1591.39 1145.48 1589 1138.25 Q1586.65 1131.03 1586.65 1123.9 Q1586.65 1116.8 1589 1109.61 Q1591.36 1102.42 1596.16 1094.9 L1601.26 1094.9 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1635.35 1109.77 L1635.35 1115.31 Q1632.86 1114.03 1630.19 1113.4 Q1627.52 1112.76 1624.65 1112.76 Q1620.29 1112.76 1618.09 1114.1 Q1615.93 1115.43 1615.93 1118.11 Q1615.93 1120.14 1617.49 1121.32 Q1619.05 1122.47 1623.76 1123.52 L1625.77 1123.96 Q1632 1125.3 1634.61 1127.75 Q1637.26 1130.17 1637.26 1134.53 Q1637.26 1139.5 1633.31 1142.39 Q1629.39 1145.29 1622.52 1145.29 Q1619.65 1145.29 1616.53 1144.72 Q1613.45 1144.18 1610.01 1143.06 L1610.01 1137.01 Q1613.26 1138.7 1616.41 1139.56 Q1619.56 1140.39 1622.65 1140.39 Q1626.78 1140.39 1629.01 1138.99 Q1631.24 1137.55 1631.24 1134.98 Q1631.24 1132.59 1629.62 1131.32 Q1628.03 1130.04 1622.58 1128.87 L1620.55 1128.39 Q1615.1 1127.24 1612.68 1124.89 Q1610.26 1122.5 1610.26 1118.36 Q1610.26 1113.33 1613.83 1110.6 Q1617.39 1107.86 1623.95 1107.86 Q1627.2 1107.86 1630.06 1108.34 Q1632.93 1108.81 1635.35 1109.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1645.66 1094.9 L1650.75 1094.9 Q1655.52 1102.42 1657.88 1109.61 Q1660.27 1116.8 1660.27 1123.9 Q1660.27 1131.03 1657.88 1138.25 Q1655.52 1145.48 1650.75 1152.96 L1645.66 1152.96 Q1649.89 1145.67 1651.96 1138.48 Q1654.06 1131.25 1654.06 1123.9 Q1654.06 1116.55 1651.96 1109.39 Q1649.89 1102.23 1645.66 1094.9 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="322.317,993.502 322.317,164.864 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="322.317,957.812 341.215,957.812 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="322.317,766.913 341.215,766.913 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="322.317,576.015 341.215,576.015 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="322.317,385.116 341.215,385.116 "/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="322.317,194.217 341.215,194.217 "/>
<path clip-path="url(#clip950)" d="M158.281 958.264 L187.957 958.264 L187.957 962.199 L158.281 962.199 L158.281 958.264 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M198.859 971.157 L206.498 971.157 L206.498 944.791 L198.188 946.458 L198.188 942.199 L206.452 940.532 L211.128 940.532 L211.128 971.157 L218.767 971.157 L218.767 975.092 L198.859 975.092 L198.859 971.157 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M238.211 943.611 Q234.6 943.611 232.771 947.176 Q230.966 950.717 230.966 957.847 Q230.966 964.953 232.771 968.518 Q234.6 972.06 238.211 972.06 Q241.845 972.06 243.651 968.518 Q245.479 964.953 245.479 957.847 Q245.479 950.717 243.651 947.176 Q241.845 943.611 238.211 943.611 M238.211 939.907 Q244.021 939.907 247.077 944.514 Q250.155 949.097 250.155 957.847 Q250.155 966.574 247.077 971.18 Q244.021 975.763 238.211 975.763 Q232.401 975.763 229.322 971.18 Q226.267 966.574 226.267 957.847 Q226.267 949.097 229.322 944.514 Q232.401 939.907 238.211 939.907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M268.373 943.611 Q264.762 943.611 262.933 947.176 Q261.128 950.717 261.128 957.847 Q261.128 964.953 262.933 968.518 Q264.762 972.06 268.373 972.06 Q272.007 972.06 273.813 968.518 Q275.641 964.953 275.641 957.847 Q275.641 950.717 273.813 947.176 Q272.007 943.611 268.373 943.611 M268.373 939.907 Q274.183 939.907 277.239 944.514 Q280.317 949.097 280.317 957.847 Q280.317 966.574 277.239 971.18 Q274.183 975.763 268.373 975.763 Q262.563 975.763 259.484 971.18 Q256.428 966.574 256.428 957.847 Q256.428 949.097 259.484 944.514 Q262.563 939.907 268.373 939.907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M188.443 767.365 L218.118 767.365 L218.118 771.3 L188.443 771.3 L188.443 767.365 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M228.257 749.633 L246.614 749.633 L246.614 753.569 L232.54 753.569 L232.54 762.041 Q233.558 761.694 234.577 761.532 Q235.595 761.346 236.614 761.346 Q242.401 761.346 245.78 764.518 Q249.16 767.689 249.16 773.106 Q249.16 778.684 245.688 781.786 Q242.216 784.865 235.896 784.865 Q233.72 784.865 231.452 784.494 Q229.206 784.124 226.799 783.383 L226.799 778.684 Q228.882 779.819 231.105 780.374 Q233.327 780.93 235.804 780.93 Q239.808 780.93 242.146 778.823 Q244.484 776.717 244.484 773.106 Q244.484 769.495 242.146 767.388 Q239.808 765.282 235.804 765.282 Q233.929 765.282 232.054 765.698 Q230.202 766.115 228.257 766.995 L228.257 749.633 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M268.373 752.712 Q264.762 752.712 262.933 756.277 Q261.128 759.819 261.128 766.948 Q261.128 774.055 262.933 777.619 Q264.762 781.161 268.373 781.161 Q272.007 781.161 273.813 777.619 Q275.641 774.055 275.641 766.948 Q275.641 759.819 273.813 756.277 Q272.007 752.712 268.373 752.712 M268.373 749.009 Q274.183 749.009 277.239 753.615 Q280.317 758.198 280.317 766.948 Q280.317 775.675 277.239 780.281 Q274.183 784.865 268.373 784.865 Q262.563 784.865 259.484 780.281 Q256.428 775.675 256.428 766.948 Q256.428 758.198 259.484 753.615 Q262.563 749.009 268.373 749.009 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M268.373 561.814 Q264.762 561.814 262.933 565.378 Q261.128 568.92 261.128 576.05 Q261.128 583.156 262.933 586.721 Q264.762 590.262 268.373 590.262 Q272.007 590.262 273.813 586.721 Q275.641 583.156 275.641 576.05 Q275.641 568.92 273.813 565.378 Q272.007 561.814 268.373 561.814 M268.373 558.11 Q274.183 558.11 277.239 562.716 Q280.317 567.3 280.317 576.05 Q280.317 584.776 277.239 589.383 Q274.183 593.966 268.373 593.966 Q262.563 593.966 259.484 589.383 Q256.428 584.776 256.428 576.05 Q256.428 567.3 259.484 562.716 Q262.563 558.11 268.373 558.11 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M228.257 367.836 L246.614 367.836 L246.614 371.771 L232.54 371.771 L232.54 380.244 Q233.558 379.896 234.577 379.734 Q235.595 379.549 236.614 379.549 Q242.401 379.549 245.78 382.72 Q249.16 385.892 249.16 391.308 Q249.16 396.887 245.688 399.989 Q242.216 403.067 235.896 403.067 Q233.72 403.067 231.452 402.697 Q229.206 402.327 226.799 401.586 L226.799 396.887 Q228.882 398.021 231.105 398.577 Q233.327 399.132 235.804 399.132 Q239.808 399.132 242.146 397.026 Q244.484 394.919 244.484 391.308 Q244.484 387.697 242.146 385.591 Q239.808 383.484 235.804 383.484 Q233.929 383.484 232.054 383.901 Q230.202 384.318 228.257 385.197 L228.257 367.836 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M268.373 370.915 Q264.762 370.915 262.933 374.48 Q261.128 378.021 261.128 385.151 Q261.128 392.257 262.933 395.822 Q264.762 399.364 268.373 399.364 Q272.007 399.364 273.813 395.822 Q275.641 392.257 275.641 385.151 Q275.641 378.021 273.813 374.48 Q272.007 370.915 268.373 370.915 M268.373 367.211 Q274.183 367.211 277.239 371.818 Q280.317 376.401 280.317 385.151 Q280.317 393.878 277.239 398.484 Q274.183 403.067 268.373 403.067 Q262.563 403.067 259.484 398.484 Q256.428 393.878 256.428 385.151 Q256.428 376.401 259.484 371.818 Q262.563 367.211 268.373 367.211 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M198.859 207.562 L206.498 207.562 L206.498 181.197 L198.188 182.863 L198.188 178.604 L206.452 176.937 L211.128 176.937 L211.128 207.562 L218.767 207.562 L218.767 211.497 L198.859 211.497 L198.859 207.562 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M238.211 180.016 Q234.6 180.016 232.771 183.581 Q230.966 187.123 230.966 194.252 Q230.966 201.359 232.771 204.923 Q234.6 208.465 238.211 208.465 Q241.845 208.465 243.651 204.923 Q245.479 201.359 245.479 194.252 Q245.479 187.123 243.651 183.581 Q241.845 180.016 238.211 180.016 M238.211 176.313 Q244.021 176.313 247.077 180.919 Q250.155 185.502 250.155 194.252 Q250.155 202.979 247.077 207.585 Q244.021 212.169 238.211 212.169 Q232.401 212.169 229.322 207.585 Q226.267 202.979 226.267 194.252 Q226.267 185.502 229.322 180.919 Q232.401 176.313 238.211 176.313 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M268.373 180.016 Q264.762 180.016 262.933 183.581 Q261.128 187.123 261.128 194.252 Q261.128 201.359 262.933 204.923 Q264.762 208.465 268.373 208.465 Q272.007 208.465 273.813 204.923 Q275.641 201.359 275.641 194.252 Q275.641 187.123 273.813 183.581 Q272.007 180.016 268.373 180.016 M268.373 176.313 Q274.183 176.313 277.239 180.919 Q280.317 185.502 280.317 194.252 Q280.317 202.979 277.239 207.585 Q274.183 212.169 268.373 212.169 Q262.563 212.169 259.484 207.585 Q256.428 202.979 256.428 194.252 Q256.428 185.502 259.484 180.919 Q262.563 176.313 268.373 176.313 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M71.8514 801.028 Q71.2785 802.015 71.0239 803.192 Q70.7374 804.338 70.7374 805.739 Q70.7374 810.704 73.9839 813.377 Q77.1986 816.019 83.246 816.019 L102.025 816.019 L102.025 821.908 L66.3769 821.908 L66.3769 816.019 L71.9151 816.019 Q68.6686 814.173 67.109 811.213 Q65.5175 808.253 65.5175 804.02 Q65.5175 803.415 65.613 802.683 Q65.6767 801.951 65.8358 801.06 L71.8514 801.028 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M82.7368 765.826 L85.6013 765.826 L85.6013 792.753 Q91.6488 792.371 94.8316 789.124 Q97.9826 785.846 97.9826 780.021 Q97.9826 776.647 97.1551 773.496 Q96.3275 770.313 94.6725 767.194 L100.211 767.194 Q101.547 770.345 102.248 773.655 Q102.948 776.966 102.948 780.371 Q102.948 788.901 97.9826 793.898 Q93.0174 798.864 84.551 798.864 Q75.7981 798.864 70.6737 794.153 Q65.5175 789.411 65.5175 781.39 Q65.5175 774.197 70.1645 770.027 Q74.7796 765.826 82.7368 765.826 M81.018 771.682 Q76.2119 771.746 73.3473 774.388 Q70.4828 776.997 70.4828 781.326 Q70.4828 786.228 73.2519 789.188 Q76.0209 792.116 81.0499 792.562 L81.018 771.682 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M67.4272 733.488 L72.9654 733.488 Q71.6923 735.97 71.0557 738.644 Q70.4191 741.318 70.4191 744.182 Q70.4191 748.543 71.7559 750.739 Q73.0927 752.903 75.7663 752.903 Q77.8033 752.903 78.981 751.344 Q80.1268 749.784 81.1772 745.073 L81.6228 743.068 Q82.9596 736.83 85.4104 734.22 Q87.8293 731.578 92.1898 731.578 Q97.1551 731.578 100.051 735.525 Q102.948 739.44 102.948 746.315 Q102.948 749.179 102.375 752.299 Q101.834 755.386 100.72 758.823 L94.6725 758.823 Q96.3594 755.577 97.2187 752.426 Q98.0463 749.275 98.0463 746.187 Q98.0463 742.05 96.6458 739.822 Q95.2135 737.594 92.6354 737.594 Q90.2483 737.594 88.9752 739.217 Q87.702 740.808 86.5244 746.251 L86.0469 748.288 Q84.9011 753.731 82.5458 756.15 Q80.1587 758.569 76.0209 758.569 Q70.992 758.569 68.2548 755.004 Q65.5175 751.439 65.5175 744.882 Q65.5175 741.636 65.995 738.771 Q66.4724 735.907 67.4272 733.488 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M96.6777 716.587 L115.584 716.587 L115.584 722.475 L66.3769 722.475 L66.3769 716.587 L71.7877 716.587 Q68.6049 714.741 67.0771 711.94 Q65.5175 709.107 65.5175 705.192 Q65.5175 698.699 70.6737 694.657 Q75.83 690.583 84.2327 690.583 Q92.6354 690.583 97.7917 694.657 Q102.948 698.699 102.948 705.192 Q102.948 709.107 101.42 711.94 Q99.8605 714.741 96.6777 716.587 M84.2327 696.662 Q77.7715 696.662 74.1112 699.336 Q70.4191 701.978 70.4191 706.625 Q70.4191 711.272 74.1112 713.945 Q77.7715 716.587 84.2327 716.587 Q90.6939 716.587 94.386 713.945 Q98.0463 711.272 98.0463 706.625 Q98.0463 701.978 94.386 699.336 Q90.6939 696.662 84.2327 696.662 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M70.4828 667.062 Q70.4828 671.772 74.1749 674.51 Q77.8352 677.247 84.2327 677.247 Q90.6302 677.247 94.3223 674.541 Q97.9826 671.804 97.9826 667.062 Q97.9826 662.383 94.2905 659.646 Q90.5984 656.908 84.2327 656.908 Q77.8988 656.908 74.2067 659.646 Q70.4828 662.383 70.4828 667.062 M65.5175 667.062 Q65.5175 659.423 70.4828 655.062 Q75.448 650.702 84.2327 650.702 Q92.9856 650.702 97.9826 655.062 Q102.948 659.423 102.948 667.062 Q102.948 674.732 97.9826 679.093 Q92.9856 683.422 84.2327 683.422 Q75.448 683.422 70.4828 679.093 Q65.5175 674.732 65.5175 667.062 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M80.5088 611.362 L102.025 611.362 L102.025 617.218 L80.6997 617.218 Q75.639 617.218 73.1245 619.192 Q70.6101 621.165 70.6101 625.112 Q70.6101 629.854 73.6338 632.591 Q76.6575 635.329 81.8774 635.329 L102.025 635.329 L102.025 641.217 L66.3769 641.217 L66.3769 635.329 L71.9151 635.329 Q68.7004 633.228 67.109 630.395 Q65.5175 627.531 65.5175 623.807 Q65.5175 617.664 69.337 614.513 Q73.1245 611.362 80.5088 611.362 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M67.4272 576.955 L72.9654 576.955 Q71.6923 579.438 71.0557 582.111 Q70.4191 584.785 70.4191 587.65 Q70.4191 592.01 71.7559 594.206 Q73.0927 596.371 75.7663 596.371 Q77.8033 596.371 78.981 594.811 Q80.1268 593.251 81.1772 588.541 L81.6228 586.536 Q82.9596 580.297 85.4104 577.687 Q87.8293 575.045 92.1898 575.045 Q97.1551 575.045 100.051 578.992 Q102.948 582.907 102.948 589.782 Q102.948 592.647 102.375 595.766 Q101.834 598.853 100.72 602.291 L94.6725 602.291 Q96.3594 599.044 97.2187 595.893 Q98.0463 592.742 98.0463 589.655 Q98.0463 585.517 96.6458 583.289 Q95.2135 581.061 92.6354 581.061 Q90.2483 581.061 88.9752 582.684 Q87.702 584.276 86.5244 589.718 L86.0469 591.755 Q84.9011 597.198 82.5458 599.617 Q80.1587 602.036 76.0209 602.036 Q70.992 602.036 68.2548 598.471 Q65.5175 594.906 65.5175 588.35 Q65.5175 585.103 65.995 582.239 Q66.4724 579.374 67.4272 576.955 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M82.7368 535.228 L85.6013 535.228 L85.6013 562.155 Q91.6488 561.773 94.8316 558.526 Q97.9826 555.248 97.9826 549.423 Q97.9826 546.05 97.1551 542.899 Q96.3275 539.716 94.6725 536.597 L100.211 536.597 Q101.547 539.748 102.248 543.058 Q102.948 546.368 102.948 549.774 Q102.948 558.304 97.9826 563.301 Q93.0174 568.266 84.551 568.266 Q75.7981 568.266 70.6737 563.555 Q65.5175 558.813 65.5175 550.792 Q65.5175 543.599 70.1645 539.429 Q74.7796 535.228 82.7368 535.228 M81.018 541.084 Q76.2119 541.148 73.3473 543.79 Q70.4828 546.4 70.4828 550.728 Q70.4828 555.63 73.2519 558.59 Q76.0209 561.518 81.0499 561.964 L81.018 541.084 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M66.3769 509.097 L66.3769 502.89 L96.2957 491.75 L66.3769 480.61 L66.3769 474.404 L102.025 487.772 L102.025 495.729 L66.3769 509.097 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M84.1054 450.118 Q84.1054 457.216 85.7286 459.953 Q87.3519 462.691 91.2668 462.691 Q94.386 462.691 96.2321 460.654 Q98.0463 458.585 98.0463 455.052 Q98.0463 450.182 94.6088 447.254 Q91.1395 444.294 85.4104 444.294 L84.1054 444.294 L84.1054 450.118 M81.6864 438.437 L102.025 438.437 L102.025 444.294 L96.614 444.294 Q99.8605 446.299 101.42 449.291 Q102.948 452.283 102.948 456.611 Q102.948 462.086 99.8923 465.332 Q96.805 468.547 91.6488 468.547 Q85.6332 468.547 82.5776 464.537 Q79.5221 460.495 79.5221 452.506 L79.5221 444.294 L78.9492 444.294 Q74.9069 444.294 72.7108 446.967 Q70.4828 449.609 70.4828 454.415 Q70.4828 457.471 71.2148 460.367 Q71.9469 463.264 73.411 465.937 L68.0002 465.937 Q66.7588 462.723 66.1541 459.699 Q65.5175 456.675 65.5175 453.811 Q65.5175 446.076 69.5279 442.257 Q73.5383 438.437 81.6864 438.437 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M52.4997 426.374 L52.4997 420.518 L102.025 420.518 L102.025 426.374 L52.4997 426.374 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M87.9566 408.869 L66.3769 408.869 L66.3769 403.012 L87.7338 403.012 Q92.7946 403.012 95.3409 401.039 Q97.8553 399.065 97.8553 395.119 Q97.8553 390.376 94.8316 387.639 Q91.8079 384.87 86.588 384.87 L66.3769 384.87 L66.3769 379.013 L102.025 379.013 L102.025 384.87 L96.5503 384.87 Q99.7969 387.002 101.388 389.835 Q102.948 392.636 102.948 396.36 Q102.948 402.503 99.1285 405.686 Q95.309 408.869 87.9566 408.869 M65.5175 394.132 L65.5175 394.132 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M82.7368 336.459 L85.6013 336.459 L85.6013 363.386 Q91.6488 363.004 94.8316 359.757 Q97.9826 356.479 97.9826 350.654 Q97.9826 347.28 97.1551 344.129 Q96.3275 340.947 94.6725 337.827 L100.211 337.827 Q101.547 340.978 102.248 344.289 Q102.948 347.599 102.948 351.004 Q102.948 359.534 97.9826 364.531 Q93.0174 369.497 84.551 369.497 Q75.7981 369.497 70.6737 364.786 Q65.5175 360.044 65.5175 352.023 Q65.5175 344.83 70.1645 340.66 Q74.7796 336.459 82.7368 336.459 M81.018 342.315 Q76.2119 342.379 73.3473 345.021 Q70.4828 347.631 70.4828 351.959 Q70.4828 356.861 73.2519 359.821 Q76.0209 362.749 81.0499 363.195 L81.018 342.315 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M930.124 34.1734 Q928.868 33.4443 927.369 33.1202 Q925.911 32.7556 924.128 32.7556 Q917.809 32.7556 914.406 36.8875 Q911.044 40.9789 911.044 48.6757 L911.044 72.576 L903.55 72.576 L903.55 27.2059 L911.044 27.2059 L911.044 34.2544 Q913.394 30.1225 917.161 28.1376 Q920.928 26.1121 926.316 26.1121 Q927.086 26.1121 928.017 26.2337 Q928.949 26.3147 930.083 26.5172 L930.124 34.1734 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M974.927 48.0275 L974.927 51.6733 L940.656 51.6733 Q941.142 59.3701 945.274 63.421 Q949.447 67.4314 956.86 67.4314 Q961.154 67.4314 965.164 66.3781 Q969.215 65.3249 973.185 63.2184 L973.185 70.267 Q969.174 71.9684 964.962 72.8596 Q960.749 73.7508 956.414 73.7508 Q945.558 73.7508 939.198 67.4314 Q932.878 61.1119 932.878 50.3365 Q932.878 39.1965 938.874 32.6746 Q944.91 26.1121 955.118 26.1121 Q964.273 26.1121 969.58 32.0264 Q974.927 37.9003 974.927 48.0275 M967.473 45.84 Q967.392 39.7232 964.03 36.0774 Q960.708 32.4315 955.199 32.4315 Q948.96 32.4315 945.193 35.9558 Q941.466 39.4801 940.899 45.8805 L967.473 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1019.81 28.9478 L1019.81 35.9153 Q1016.65 34.1734 1013.45 33.3227 Q1010.29 32.4315 1007.05 32.4315 Q999.799 32.4315 995.789 37.0496 Q991.779 41.6271 991.779 49.9314 Q991.779 58.2358 995.789 62.8538 Q999.799 67.4314 1007.05 67.4314 Q1010.29 67.4314 1013.45 66.5807 Q1016.65 65.6895 1019.81 63.9476 L1019.81 70.8341 Q1016.69 72.2924 1013.33 73.0216 Q1010.01 73.7508 1006.24 73.7508 Q995.991 73.7508 989.956 67.3098 Q983.92 60.8689 983.92 49.9314 Q983.92 38.832 989.996 32.472 Q996.113 26.1121 1006.73 26.1121 Q1010.17 26.1121 1013.45 26.8413 Q1016.73 27.5299 1019.81 28.9478 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1050.35 32.4315 Q1044.36 32.4315 1040.88 37.1306 Q1037.39 41.7891 1037.39 49.9314 Q1037.39 58.0738 1040.83 62.7728 Q1044.32 67.4314 1050.35 67.4314 Q1056.31 67.4314 1059.79 62.7323 Q1063.28 58.0333 1063.28 49.9314 Q1063.28 41.8701 1059.79 37.1711 Q1056.31 32.4315 1050.35 32.4315 M1050.35 26.1121 Q1060.08 26.1121 1065.63 32.4315 Q1071.18 38.7509 1071.18 49.9314 Q1071.18 61.0714 1065.63 67.4314 Q1060.08 73.7508 1050.35 73.7508 Q1040.59 73.7508 1035.04 67.4314 Q1029.53 61.0714 1029.53 49.9314 Q1029.53 38.7509 1035.04 32.4315 Q1040.59 26.1121 1050.35 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1121.25 45.1919 L1121.25 72.576 L1113.79 72.576 L1113.79 45.4349 Q1113.79 38.994 1111.28 35.7938 Q1108.77 32.5936 1103.75 32.5936 Q1097.71 32.5936 1094.23 36.4419 Q1090.74 40.2903 1090.74 46.9338 L1090.74 72.576 L1083.25 72.576 L1083.25 27.2059 L1090.74 27.2059 L1090.74 34.2544 Q1093.42 30.163 1097.02 28.1376 Q1100.67 26.1121 1105.41 26.1121 Q1113.22 26.1121 1117.24 30.9732 Q1121.25 35.7938 1121.25 45.1919 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1165.04 28.5427 L1165.04 35.5912 Q1161.88 33.9709 1158.47 33.1607 Q1155.07 32.3505 1151.42 32.3505 Q1145.87 32.3505 1143.08 34.0519 Q1140.33 35.7533 1140.33 39.156 Q1140.33 41.7486 1142.31 43.2475 Q1144.3 44.7058 1150.29 46.0426 L1152.84 46.6097 Q1160.78 48.3111 1164.1 51.4303 Q1167.47 54.509 1167.47 60.0587 Q1167.47 66.3781 1162.44 70.0644 Q1157.46 73.7508 1148.71 73.7508 Q1145.06 73.7508 1141.09 73.0216 Q1137.17 72.3329 1132.79 70.9151 L1132.79 63.2184 Q1136.92 65.3654 1140.93 66.4591 Q1144.94 67.5124 1148.87 67.5124 Q1154.14 67.5124 1156.97 65.73 Q1159.81 63.9071 1159.81 60.6258 Q1159.81 57.5877 1157.74 55.9673 Q1155.72 54.3469 1148.79 52.8481 L1146.2 52.2405 Q1139.27 50.7821 1136.19 47.7845 Q1133.11 44.7463 1133.11 39.4801 Q1133.11 33.0797 1137.65 29.5959 Q1142.19 26.1121 1150.53 26.1121 Q1154.67 26.1121 1158.31 26.7198 Q1161.96 27.3274 1165.04 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1186.71 14.324 L1186.71 27.2059 L1202.06 27.2059 L1202.06 32.9987 L1186.71 32.9987 L1186.71 57.6282 Q1186.71 63.1779 1188.21 64.7578 Q1189.75 66.3376 1194.4 66.3376 L1202.06 66.3376 L1202.06 72.576 L1194.4 72.576 Q1185.78 72.576 1182.5 69.3758 Q1179.21 66.1351 1179.21 57.6282 L1179.21 32.9987 L1173.75 32.9987 L1173.75 27.2059 L1179.21 27.2059 L1179.21 14.324 L1186.71 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1238.15 34.1734 Q1236.9 33.4443 1235.4 33.1202 Q1233.94 32.7556 1232.16 32.7556 Q1225.84 32.7556 1222.44 36.8875 Q1219.07 40.9789 1219.07 48.6757 L1219.07 72.576 L1211.58 72.576 L1211.58 27.2059 L1219.07 27.2059 L1219.07 34.2544 Q1221.42 30.1225 1225.19 28.1376 Q1228.96 26.1121 1234.35 26.1121 Q1235.12 26.1121 1236.05 26.2337 Q1236.98 26.3147 1238.11 26.5172 L1238.15 34.1734 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1245.2 54.671 L1245.2 27.2059 L1252.66 27.2059 L1252.66 54.3874 Q1252.66 60.8284 1255.17 64.0691 Q1257.68 67.2693 1262.7 67.2693 Q1268.74 67.2693 1272.22 63.421 Q1275.75 59.5726 1275.75 52.9291 L1275.75 27.2059 L1283.2 27.2059 L1283.2 72.576 L1275.75 72.576 L1275.75 65.6084 Q1273.03 69.7404 1269.43 71.7658 Q1265.86 73.7508 1261.12 73.7508 Q1253.3 73.7508 1249.25 68.8897 Q1245.2 64.0286 1245.2 54.671 M1263.96 26.1121 L1263.96 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1331.2 28.9478 L1331.2 35.9153 Q1328.04 34.1734 1324.84 33.3227 Q1321.68 32.4315 1318.44 32.4315 Q1311.19 32.4315 1307.18 37.0496 Q1303.17 41.6271 1303.17 49.9314 Q1303.17 58.2358 1307.18 62.8538 Q1311.19 67.4314 1318.44 67.4314 Q1321.68 67.4314 1324.84 66.5807 Q1328.04 65.6895 1331.2 63.9476 L1331.2 70.8341 Q1328.08 72.2924 1324.72 73.0216 Q1321.4 73.7508 1317.63 73.7508 Q1307.38 73.7508 1301.35 67.3098 Q1295.31 60.8689 1295.31 49.9314 Q1295.31 38.832 1301.39 32.472 Q1307.51 26.1121 1318.12 26.1121 Q1321.56 26.1121 1324.84 26.8413 Q1328.13 27.5299 1331.2 28.9478 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1351.54 14.324 L1351.54 27.2059 L1366.89 27.2059 L1366.89 32.9987 L1351.54 32.9987 L1351.54 57.6282 Q1351.54 63.1779 1353.04 64.7578 Q1354.58 66.3376 1359.24 66.3376 L1366.89 66.3376 L1366.89 72.576 L1359.24 72.576 Q1350.61 72.576 1347.33 69.3758 Q1344.05 66.1351 1344.05 57.6282 L1344.05 32.9987 L1338.58 32.9987 L1338.58 27.2059 L1344.05 27.2059 L1344.05 14.324 L1351.54 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1415.5 48.0275 L1415.5 51.6733 L1381.23 51.6733 Q1381.72 59.3701 1385.85 63.421 Q1390.02 67.4314 1397.44 67.4314 Q1401.73 67.4314 1405.74 66.3781 Q1409.79 65.3249 1413.76 63.2184 L1413.76 70.267 Q1409.75 71.9684 1405.54 72.8596 Q1401.32 73.7508 1396.99 73.7508 Q1386.13 73.7508 1379.77 67.4314 Q1373.45 61.1119 1373.45 50.3365 Q1373.45 39.1965 1379.45 32.6746 Q1385.49 26.1121 1395.69 26.1121 Q1404.85 26.1121 1410.16 32.0264 Q1415.5 37.9003 1415.5 48.0275 M1408.05 45.84 Q1407.97 39.7232 1404.61 36.0774 Q1401.28 32.4315 1395.78 32.4315 Q1389.54 32.4315 1385.77 35.9558 Q1382.04 39.4801 1381.48 45.8805 L1408.05 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1457.59 34.0924 L1457.59 9.54393 L1465.05 9.54393 L1465.05 72.576 L1457.59 72.576 L1457.59 65.7705 Q1455.24 69.8214 1451.64 71.8063 Q1448.07 73.7508 1443.05 73.7508 Q1434.83 73.7508 1429.64 67.1883 Q1424.5 60.6258 1424.5 49.9314 Q1424.5 39.2371 1429.64 32.6746 Q1434.83 26.1121 1443.05 26.1121 Q1448.07 26.1121 1451.64 28.0971 Q1455.24 30.0415 1457.59 34.0924 M1432.19 49.9314 Q1432.19 58.1548 1435.56 62.8538 Q1438.96 67.5124 1444.87 67.5124 Q1450.79 67.5124 1454.19 62.8538 Q1457.59 58.1548 1457.59 49.9314 Q1457.59 41.7081 1454.19 37.0496 Q1450.79 32.3505 1444.87 32.3505 Q1438.96 32.3505 1435.56 37.0496 Q1432.19 41.7081 1432.19 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1533.06 34.1734 Q1531.8 33.4443 1530.31 33.1202 Q1528.85 32.7556 1527.06 32.7556 Q1520.75 32.7556 1517.34 36.8875 Q1513.98 40.9789 1513.98 48.6757 L1513.98 72.576 L1506.49 72.576 L1506.49 27.2059 L1513.98 27.2059 L1513.98 34.2544 Q1516.33 30.1225 1520.1 28.1376 Q1523.86 26.1121 1529.25 26.1121 Q1530.02 26.1121 1530.95 26.2337 Q1531.89 26.3147 1533.02 26.5172 L1533.06 34.1734 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1577.86 48.0275 L1577.86 51.6733 L1543.59 51.6733 Q1544.08 59.3701 1548.21 63.421 Q1552.38 67.4314 1559.8 67.4314 Q1564.09 67.4314 1568.1 66.3781 Q1572.15 65.3249 1576.12 63.2184 L1576.12 70.267 Q1572.11 71.9684 1567.9 72.8596 Q1563.69 73.7508 1559.35 73.7508 Q1548.49 73.7508 1542.13 67.4314 Q1535.81 61.1119 1535.81 50.3365 Q1535.81 39.1965 1541.81 32.6746 Q1547.85 26.1121 1558.05 26.1121 Q1567.21 26.1121 1572.52 32.0264 Q1577.86 37.9003 1577.86 48.0275 M1570.41 45.84 Q1570.33 39.7232 1566.97 36.0774 Q1563.64 32.4315 1558.14 32.4315 Q1551.9 32.4315 1548.13 35.9558 Q1544.4 39.4801 1543.84 45.8805 L1570.41 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1619.02 28.5427 L1619.02 35.5912 Q1615.86 33.9709 1612.46 33.1607 Q1609.06 32.3505 1605.41 32.3505 Q1599.86 32.3505 1597.06 34.0519 Q1594.31 35.7533 1594.31 39.156 Q1594.31 41.7486 1596.29 43.2475 Q1598.28 44.7058 1604.28 46.0426 L1606.83 46.6097 Q1614.77 48.3111 1618.09 51.4303 Q1621.45 54.509 1621.45 60.0587 Q1621.45 66.3781 1616.43 70.0644 Q1611.45 73.7508 1602.7 73.7508 Q1599.05 73.7508 1595.08 73.0216 Q1591.15 72.3329 1586.78 70.9151 L1586.78 63.2184 Q1590.91 65.3654 1594.92 66.4591 Q1598.93 67.5124 1602.86 67.5124 Q1608.12 67.5124 1610.96 65.73 Q1613.79 63.9071 1613.79 60.6258 Q1613.79 57.5877 1611.73 55.9673 Q1609.7 54.3469 1602.78 52.8481 L1600.18 52.2405 Q1593.26 50.7821 1590.18 47.7845 Q1587.1 44.7463 1587.1 39.4801 Q1587.1 33.0797 1591.64 29.5959 Q1596.17 26.1121 1604.52 26.1121 Q1608.65 26.1121 1612.3 26.7198 Q1615.94 27.3274 1619.02 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1640.53 65.7705 L1640.53 89.8329 L1633.04 89.8329 L1633.04 27.2059 L1640.53 27.2059 L1640.53 34.0924 Q1642.88 30.0415 1646.45 28.0971 Q1650.05 26.1121 1655.03 26.1121 Q1663.3 26.1121 1668.44 32.6746 Q1673.63 39.2371 1673.63 49.9314 Q1673.63 60.6258 1668.44 67.1883 Q1663.3 73.7508 1655.03 73.7508 Q1650.05 73.7508 1646.45 71.8063 Q1642.88 69.8214 1640.53 65.7705 M1665.89 49.9314 Q1665.89 41.7081 1662.49 37.0496 Q1659.12 32.3505 1653.21 32.3505 Q1647.3 32.3505 1643.89 37.0496 Q1640.53 41.7081 1640.53 49.9314 Q1640.53 58.1548 1643.89 62.8538 Q1647.3 67.5124 1653.21 67.5124 Q1659.12 67.5124 1662.49 62.8538 Q1665.89 58.1548 1665.89 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1703.56 32.4315 Q1697.57 32.4315 1694.08 37.1306 Q1690.6 41.7891 1690.6 49.9314 Q1690.6 58.0738 1694.04 62.7728 Q1697.53 67.4314 1703.56 67.4314 Q1709.52 67.4314 1713 62.7323 Q1716.49 58.0333 1716.49 49.9314 Q1716.49 41.8701 1713 37.1711 Q1709.52 32.4315 1703.56 32.4315 M1703.56 26.1121 Q1713.29 26.1121 1718.83 32.4315 Q1724.38 38.7509 1724.38 49.9314 Q1724.38 61.0714 1718.83 67.4314 Q1713.29 73.7508 1703.56 73.7508 Q1693.8 73.7508 1688.25 67.4314 Q1682.74 61.0714 1682.74 49.9314 Q1682.74 38.7509 1688.25 32.4315 Q1693.8 26.1121 1703.56 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1774.45 45.1919 L1774.45 72.576 L1767 72.576 L1767 45.4349 Q1767 38.994 1764.49 35.7938 Q1761.98 32.5936 1756.95 32.5936 Q1750.92 32.5936 1747.43 36.4419 Q1743.95 40.2903 1743.95 46.9338 L1743.95 72.576 L1736.46 72.576 L1736.46 27.2059 L1743.95 27.2059 L1743.95 34.2544 Q1746.62 30.163 1750.23 28.1376 Q1753.88 26.1121 1758.61 26.1121 Q1766.43 26.1121 1770.44 30.9732 Q1774.45 35.7938 1774.45 45.1919 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1818.24 28.5427 L1818.24 35.5912 Q1815.08 33.9709 1811.68 33.1607 Q1808.28 32.3505 1804.63 32.3505 Q1799.08 32.3505 1796.29 34.0519 Q1793.53 35.7533 1793.53 39.156 Q1793.53 41.7486 1795.52 43.2475 Q1797.5 44.7058 1803.5 46.0426 L1806.05 46.6097 Q1813.99 48.3111 1817.31 51.4303 Q1820.67 54.509 1820.67 60.0587 Q1820.67 66.3781 1815.65 70.0644 Q1810.67 73.7508 1801.92 73.7508 Q1798.27 73.7508 1794.3 73.0216 Q1790.37 72.3329 1786 70.9151 L1786 63.2184 Q1790.13 65.3654 1794.14 66.4591 Q1798.15 67.5124 1802.08 67.5124 Q1807.35 67.5124 1810.18 65.73 Q1813.02 63.9071 1813.02 60.6258 Q1813.02 57.5877 1810.95 55.9673 Q1808.93 54.3469 1802 52.8481 L1799.41 52.2405 Q1792.48 50.7821 1789.4 47.7845 Q1786.32 44.7463 1786.32 39.4801 Q1786.32 33.0797 1790.86 29.5959 Q1795.4 26.1121 1803.74 26.1121 Q1807.87 26.1121 1811.52 26.7198 Q1815.17 27.3274 1818.24 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1871.35 48.0275 L1871.35 51.6733 L1837.08 51.6733 Q1837.57 59.3701 1841.7 63.421 Q1845.87 67.4314 1853.28 67.4314 Q1857.58 67.4314 1861.59 66.3781 Q1865.64 65.3249 1869.61 63.2184 L1869.61 70.267 Q1865.6 71.9684 1861.39 72.8596 Q1857.17 73.7508 1852.84 73.7508 Q1841.98 73.7508 1835.62 67.4314 Q1829.3 61.1119 1829.3 50.3365 Q1829.3 39.1965 1835.3 32.6746 Q1841.33 26.1121 1851.54 26.1121 Q1860.7 26.1121 1866 32.0264 Q1871.35 37.9003 1871.35 48.0275 M1863.9 45.84 Q1863.82 39.7232 1860.45 36.0774 Q1857.13 32.4315 1851.62 32.4315 Q1845.39 32.4315 1841.62 35.9558 Q1837.89 39.4801 1837.32 45.8805 L1863.9 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1927.86 9.62495 Q1922.43 18.942 1919.8 28.0566 Q1917.17 37.1711 1917.17 46.5287 Q1917.17 55.8863 1919.8 65.0818 Q1922.47 74.2369 1927.86 83.5134 L1921.38 83.5134 Q1915.3 73.9938 1912.27 64.7983 Q1909.27 55.6027 1909.27 46.5287 Q1909.27 37.4952 1912.27 28.3401 Q1915.26 19.1851 1921.38 9.62495 L1927.86 9.62495 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1972.18 34.0924 L1972.18 9.54393 L1979.63 9.54393 L1979.63 72.576 L1972.18 72.576 L1972.18 65.7705 Q1969.83 69.8214 1966.22 71.8063 Q1962.66 73.7508 1957.64 73.7508 Q1949.41 73.7508 1944.23 67.1883 Q1939.08 60.6258 1939.08 49.9314 Q1939.08 39.2371 1944.23 32.6746 Q1949.41 26.1121 1957.64 26.1121 Q1962.66 26.1121 1966.22 28.0971 Q1969.83 30.0415 1972.18 34.0924 M1946.78 49.9314 Q1946.78 58.1548 1950.14 62.8538 Q1953.54 67.5124 1959.46 67.5124 Q1965.37 67.5124 1968.78 62.8538 Q1972.18 58.1548 1972.18 49.9314 Q1972.18 41.7081 1968.78 37.0496 Q1965.37 32.3505 1959.46 32.3505 Q1953.54 32.3505 1950.14 37.0496 Q1946.78 41.7081 1946.78 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M2012.57 32.4315 Q2006.57 32.4315 2003.09 37.1306 Q1999.6 41.7891 1999.6 49.9314 Q1999.6 58.0738 2003.05 62.7728 Q2006.53 67.4314 2012.57 67.4314 Q2018.52 67.4314 2022 62.7323 Q2025.49 58.0333 2025.49 49.9314 Q2025.49 41.8701 2022 37.1711 Q2018.52 32.4315 2012.57 32.4315 M2012.57 26.1121 Q2022.29 26.1121 2027.84 32.4315 Q2033.39 38.7509 2033.39 49.9314 Q2033.39 61.0714 2027.84 67.4314 Q2022.29 73.7508 2012.57 73.7508 Q2002.8 73.7508 1997.25 67.4314 Q1991.74 61.0714 1991.74 49.9314 Q1991.74 38.7509 1997.25 32.4315 Q2002.8 26.1121 2012.57 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M2068.71 9.54393 L2068.71 15.7418 L2061.58 15.7418 Q2057.57 15.7418 2055.99 17.3622 Q2054.45 18.9825 2054.45 23.1955 L2054.45 27.2059 L2066.73 27.2059 L2066.73 32.9987 L2054.45 32.9987 L2054.45 72.576 L2046.96 72.576 L2046.96 32.9987 L2039.83 32.9987 L2039.83 27.2059 L2046.96 27.2059 L2046.96 24.0462 Q2046.96 16.471 2050.48 13.0277 Q2054.01 9.54393 2061.66 9.54393 L2068.71 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M2102.62 71.3202 L2102.62 63.8666 Q2105.7 65.3249 2108.86 66.0946 Q2112.02 66.8642 2115.05 66.8642 Q2123.16 66.8642 2127.41 61.436 Q2131.7 55.9673 2132.31 44.8678 Q2129.96 48.3516 2126.36 50.215 Q2122.75 52.0784 2118.38 52.0784 Q2109.3 52.0784 2103.99 46.6097 Q2098.73 41.1005 2098.73 31.5808 Q2098.73 22.2638 2104.24 16.633 Q2109.75 11.0023 2118.9 11.0023 Q2129.39 11.0023 2134.9 19.0636 Q2140.45 27.0843 2140.45 42.3968 Q2140.45 56.6965 2133.65 65.2439 Q2126.88 73.7508 2115.42 73.7508 Q2112.34 73.7508 2109.18 73.1431 Q2106.02 72.5355 2102.62 71.3202 M2118.9 45.678 Q2124.41 45.678 2127.61 41.9107 Q2130.85 38.1433 2130.85 31.5808 Q2130.85 25.0589 2127.61 21.2916 Q2124.41 17.4837 2118.9 17.4837 Q2113.39 17.4837 2110.15 21.2916 Q2106.95 25.0589 2106.95 31.5808 Q2106.95 38.1433 2110.15 41.9107 Q2113.39 45.678 2118.9 45.678 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M2152.93 9.62495 L2159.41 9.62495 Q2165.49 19.1851 2168.49 28.3401 Q2171.52 37.4952 2171.52 46.5287 Q2171.52 55.6027 2168.49 64.7983 Q2165.49 73.9938 2159.41 83.5134 L2152.93 83.5134 Q2158.32 74.2369 2160.95 65.0818 Q2163.62 55.8863 2163.62 46.5287 Q2163.62 37.1711 2160.95 28.0566 Q2158.32 18.942 2152.93 9.62495 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip952)" style="stroke:#0000ff; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" points="391.103,576.015 391.562,576.015 392.02,576.015 392.479,576.015 392.938,576.015 393.396,576.015 393.855,576.015 394.313,576.015 394.772,576.015 395.23,576.015 395.689,576.015 396.148,576.015 396.606,576.015 397.065,576.015 397.523,576.015 397.982,576.015 398.44,576.015 398.899,576.015 399.358,576.015 399.816,576.015 400.275,576.015 400.733,576.015 401.192,576.015 401.65,576.015 402.109,576.015 402.568,576.015 403.026,576.015 403.485,576.015 403.943,576.015 404.402,576.015 404.86,576.015 405.319,576.016 405.778,576.016 406.236,576.016 406.695,576.016 407.153,576.017 407.612,576.017 408.07,576.018 408.529,576.019 408.988,576.02 409.446,576.021 409.905,576.022 410.363,576.023 410.822,576.025 411.28,576.027 411.739,576.029 412.198,576.032 412.656,576.035 413.115,576.038 413.573,576.042 414.032,576.046 414.49,576.051 414.949,576.056 415.408,576.062 415.866,576.069 416.325,576.076 416.783,576.084 417.242,576.093 417.7,576.103 418.159,576.113 418.618,576.125 419.076,576.137 419.535,576.151 419.993,576.165 420.452,576.181 420.911,576.197 421.369,576.215 421.828,576.234 422.286,576.254 422.745,576.275 423.203,576.298 423.662,576.322 424.121,576.346 424.579,576.372 425.038,576.4 425.496,576.428 425.955,576.458 426.413,576.488 426.872,576.52 427.331,576.552 427.789,576.586 428.248,576.62 428.706,576.655 429.165,576.691 429.623,576.727 430.082,576.764 430.541,576.801 430.999,576.838 431.458,576.875 431.916,576.913 432.375,576.949 432.833,576.986 433.292,577.022 433.751,577.057 434.209,577.091 434.668,577.124 435.126,577.155 435.585,577.185 436.043,577.213 436.502,577.239 436.961,577.262 437.419,577.284 437.878,577.302 438.336,577.317 438.795,577.329 439.253,577.338 439.712,577.343 440.171,577.344 440.629,577.341 441.088,577.333 441.546,577.321 442.005,577.305 442.463,577.283 442.922,577.256 443.381,577.224 443.839,577.187 444.298,577.144 444.756,577.095 445.215,577.04 445.673,576.98 446.132,576.914 446.591,576.842 447.049,576.764 447.508,576.68 447.966,576.591 448.425,576.496 448.883,576.395 449.342,576.288 449.801,576.177 450.259,576.06 450.718,575.938 451.176,575.812 451.635,575.681 452.093,575.547 452.552,575.408 453.011,575.267 453.469,575.123 453.928,574.976 454.386,574.828 454.845,574.679 455.304,574.529 455.762,574.378 456.221,574.229 456.679,574.081 457.138,573.934 457.596,573.791 458.055,573.65 458.514,573.514 458.972,573.384 459.431,573.258 459.889,573.14 460.348,573.029 460.806,572.927 461.265,572.834 461.724,572.752 462.182,572.681 462.641,572.622 463.099,572.576 463.558,572.544 464.016,572.528 464.475,572.527 464.934,572.543 465.392,572.577 465.851,572.631 466.309,572.703 466.768,572.797 467.226,572.912 467.685,573.049 468.144,573.209 468.602,573.394 469.061,573.603 469.519,573.838 469.978,574.099 470.436,574.387 470.895,574.702 471.354,575.045 471.812,575.417 472.271,575.818 472.729,576.249 473.188,576.709 473.646,577.2 474.105,577.72 474.564,578.272 475.022,578.854 475.481,579.466 475.939,580.11 476.398,580.784 476.856,581.488 477.315,582.223 477.774,582.987 478.232,583.781 478.691,584.604 479.149,585.456 479.608,586.335 480.066,587.242 480.525,588.176 480.984,589.134 481.442,590.118 481.901,591.126 482.359,592.156 482.818,593.208 483.276,594.281 483.735,595.372 484.194,596.482 484.652,597.608 485.111,598.749 485.569,599.903 486.028,601.069 486.486,602.246 486.945,603.432 487.404,604.624 487.862,605.821 488.321,607.022 488.779,608.224 489.238,609.426 489.697,610.625 490.155,611.82 490.614,613.009 491.072,614.189 491.531,615.359 491.989,616.516 492.448,617.659 492.907,618.786 493.365,619.894 493.824,620.981 494.282,622.045 494.741,623.085 495.199,624.099 495.658,625.083 496.117,626.037 496.575,626.959 497.034,627.846 497.492,628.696 497.951,629.509 498.409,630.282 498.868,631.013 499.327,631.701 499.785,632.345 500.244,632.942 500.702,633.492 501.161,633.993 501.619,634.443 502.078,634.842 502.537,635.188 502.995,635.481 503.454,635.719 503.912,635.902 504.371,636.029 504.829,636.099 505.288,636.111 505.747,636.066 506.205,635.963 506.664,635.802 507.122,635.582 507.581,635.304 508.039,634.968 508.498,634.574 508.957,634.122 509.415,633.613 509.874,633.047 510.332,632.425 510.791,631.747 511.249,631.016 511.708,630.231 512.167,629.394 512.625,628.505 513.084,627.567 513.542,626.581 514.001,625.548 514.459,624.469 514.918,623.347 515.377,622.184 515.835,620.98 516.294,619.739 516.752,618.462 517.211,617.151 517.669,615.809 518.128,614.438 518.587,613.039 519.045,611.617 519.504,610.172 519.962,608.708 520.421,607.227 520.879,605.732 521.338,604.225 521.797,602.71 522.255,601.188 522.714,599.663 523.172,598.136 523.631,596.612 524.09,595.093 524.548,593.581 525.007,592.08 525.465,590.592 525.924,589.12 526.382,587.666 526.841,586.234 527.3,584.826 527.758,583.444 528.217,582.092 528.675,580.771 529.134,579.485 529.592,578.236 530.051,577.026 530.51,575.858 530.968,574.734 531.427,573.656 531.885,572.626 532.344,571.646 532.802,570.719 533.261,569.846 533.72,569.028 534.178,568.269 534.637,567.569 535.095,566.93 535.554,566.353 536.012,565.839 536.471,565.391 536.93,565.008 537.388,564.692 537.847,564.444 538.305,564.264 538.764,564.153 539.222,564.112 539.681,564.142 540.14,564.241 540.598,564.411 541.057,564.651 541.515,564.962 541.974,565.343 542.432,565.795 542.891,566.316 543.35,566.906 543.808,567.564 544.267,568.29 544.725,569.083 545.184,569.941 545.642,570.864 546.101,571.851 546.56,572.899 547.018,574.009 547.477,575.178 547.935,576.404 548.394,577.686 548.852,579.022 549.311,580.411 549.77,581.849 550.228,583.336 550.687,584.869 551.145,586.446 551.604,588.064 552.062,589.721 552.521,591.415 552.98,593.144 553.438,594.904 553.897,596.694 554.355,598.51 554.814,600.35 555.272,602.212 555.731,604.092 556.19,605.987 556.648,607.896 557.107,609.815 557.565,611.742 558.024,613.673 558.483,615.605 558.941,617.537 559.4,619.465 559.858,621.386 560.317,623.298 560.775,625.198 561.234,627.082 561.693,628.949 562.151,630.796 562.61,632.619 563.068,634.417 563.527,636.187 563.985,637.926 564.444,639.632 564.903,641.302 565.361,642.935 565.82,644.528 566.278,646.078 566.737,647.584 567.195,649.043 567.654,650.454 568.113,651.815 568.571,653.124 569.03,654.379 569.488,655.579 569.947,656.722 570.405,657.807 570.864,658.832 571.323,659.797 571.781,660.7 572.24,661.54 572.698,662.317 573.157,663.029 573.615,663.677 574.074,664.259 574.533,664.775 574.991,665.225 575.45,665.609 575.908,665.926 576.367,666.177 576.825,666.362 577.284,666.481 577.743,666.534 578.201,666.523 578.66,666.447 579.118,666.307 579.577,666.105 580.035,665.841 580.494,665.516 580.953,665.132 581.411,664.689 581.87,664.189 582.328,663.633 582.787,663.024 583.245,662.362 583.704,661.649 584.163,660.888 584.621,660.079 585.08,659.225 585.538,658.328 585.997,657.39 586.455,656.413 586.914,655.399 587.373,654.35 587.831,653.27 588.29,652.159 588.748,651.02 589.207,649.856 589.665,648.669 590.124,647.462 590.583,646.237 591.041,644.995 591.5,643.741 591.958,642.475 592.417,641.202 592.876,639.922 593.334,638.638 593.793,637.353 594.251,636.068 594.71,634.787 595.168,633.511 595.627,632.243 596.086,630.984 596.544,629.737 597.003,628.503 597.461,627.286 597.92,626.085 598.378,624.904 598.837,623.743 599.296,622.605 599.754,621.491 600.213,620.402 600.671,619.339 601.13,618.305 601.588,617.299 602.047,616.323 602.506,615.378 602.964,614.465 603.423,613.583 603.881,612.734 604.34,611.919 604.798,611.136 605.257,610.387 605.716,609.672 606.174,608.99 606.633,608.342 607.091,607.727 607.55,607.144 608.008,606.593 608.467,606.074 608.926,605.585 609.384,605.126 609.843,604.696 610.301,604.293 610.76,603.917 611.218,603.566 611.677,603.239 612.136,602.933 612.594,602.649 613.053,602.383 613.511,602.135 613.97,601.902 614.428,601.682 614.887,601.474 615.346,601.275 615.804,601.084 616.263,600.897 616.721,600.714 617.18,600.532 617.638,600.348 618.097,600.161 618.556,599.968 619.014,599.767 619.473,599.555 619.931,599.331 620.39,599.091 620.848,598.834 621.307,598.558 621.766,598.26 622.224,597.938 622.683,597.591 623.141,597.215 623.6,596.809 624.058,596.371 624.517,595.9 624.976,595.392 625.434,594.848 625.893,594.264 626.351,593.64 626.81,592.974 627.269,592.265 627.727,591.511 628.186,590.711 628.644,589.865 629.103,588.972 629.561,588.03 630.02,587.039 630.479,585.999 630.937,584.91 631.396,583.77 631.854,582.581 632.313,581.342 632.771,580.052 633.23,578.714 633.689,577.326 634.147,575.891 634.606,574.407 635.064,572.877 635.523,571.302 635.981,569.682 636.44,568.019 636.899,566.314 637.357,564.569 637.816,562.785 638.274,560.965 638.733,559.11 639.191,557.223 639.65,555.305 640.109,553.359 640.567,551.387 641.026,549.391 641.484,547.375 641.943,545.341 642.401,543.291 642.86,541.228 643.319,539.156 643.777,537.076 644.236,534.993 644.694,532.909 645.153,530.827 645.611,528.75 646.07,526.681 646.529,524.624 646.987,522.581 647.446,520.556 647.904,518.552 648.363,516.572 648.821,514.619 649.28,512.695 649.739,510.806 650.197,508.952 650.656,507.137 651.114,505.364 651.573,503.636 652.031,501.956 652.49,500.326 652.949,498.749 653.407,497.227 653.866,495.763 654.324,494.359 654.783,493.017 655.241,491.74 655.7,490.529 656.159,489.386 656.617,488.314 657.076,487.313 657.534,486.385 657.993,485.532 658.451,484.755 658.91,484.054 659.369,483.432 659.827,482.887 660.286,482.422 660.744,482.037 661.203,481.731 661.662,481.506 662.12,481.361 662.579,481.297 663.037,481.312 663.496,481.406 663.954,481.58 664.413,481.832 664.872,482.161 665.33,482.567 665.789,483.048 666.247,483.603 666.706,484.231 667.164,484.93 667.623,485.698 668.082,486.535 668.54,487.437 668.999,488.402 669.457,489.43 669.916,490.517 670.374,491.661 670.833,492.86 671.292,494.111 671.75,495.411 672.209,496.759 672.667,498.151 673.126,499.584 673.584,501.055 674.043,502.562 674.502,504.102 674.96,505.671 675.419,507.267 675.877,508.886 676.336,510.525 676.794,512.181 677.253,513.852 677.712,515.533 678.17,517.222 678.629,518.915 679.087,520.61 679.546,522.304 680.004,523.992 680.463,525.673 680.922,527.344 681.38,529 681.839,530.64 682.297,532.26 682.756,533.859 683.214,535.432 683.673,536.978 684.132,538.494 684.59,539.977 685.049,541.425 685.507,542.836 685.966,544.208 686.424,545.538 686.883,546.824 687.342,548.065 687.8,549.259 688.259,550.403 688.717,551.498 689.176,552.54 689.634,553.529 690.093,554.463 690.552,555.342 691.01,556.164 691.469,556.929 691.927,557.636 692.386,558.284 692.844,558.874 693.303,559.403 693.762,559.873 694.22,560.284 694.679,560.635 695.137,560.926 695.596,561.159 696.055,561.332 696.513,561.448 696.972,561.506 697.43,561.508 697.889,561.453 698.347,561.344 698.806,561.182 699.265,560.967 699.723,560.702 700.182,560.387 700.64,560.024 701.099,559.614 701.557,559.161 702.016,558.664 702.475,558.127 702.933,557.551 703.392,556.938 703.85,556.291 704.309,555.611 704.767,554.901 705.226,554.164 705.685,553.401 706.143,552.615 706.602,551.808 707.06,550.984 707.519,550.144 707.977,549.29 708.436,548.427 708.895,547.556 709.353,546.68 709.812,545.801 710.27,544.922 710.729,544.045 711.187,543.174 711.646,542.311 712.105,541.458 712.563,540.618 713.022,539.794 713.48,538.987 713.939,538.201 714.397,537.438 714.856,536.699 715.315,535.989 715.773,535.307 716.232,534.658 716.69,534.043 717.149,533.463 717.607,532.922 718.066,532.421 718.525,531.962 718.983,531.546 719.442,531.176 719.9,530.853 720.359,530.579 720.817,530.354 721.276,530.181 721.735,530.061 722.193,529.994 722.652,529.983 723.11,530.027 723.569,530.129 724.027,530.288 724.486,530.506 724.945,530.783 725.403,531.119 725.862,531.516 726.32,531.973 726.779,532.491 727.237,533.07 727.696,533.709 728.155,534.41 728.613,535.171 729.072,535.993 729.53,536.875 729.989,537.817 730.448,538.819 730.906,539.879 731.365,540.998 731.823,542.174 732.282,543.406 732.74,544.694 733.199,546.037 733.658,547.434 734.116,548.884 734.575,550.384 735.033,551.935 735.492,553.535 735.95,555.182 736.409,556.875 736.868,558.612 737.326,560.392 737.785,562.214 738.243,564.075 738.702,565.974 739.16,567.909 739.619,569.879 740.078,571.881 740.536,573.914 740.995,575.975 741.453,578.064 741.912,580.177 742.37,582.313 742.829,584.47 743.288,586.646 743.746,588.838 744.205,591.046 744.663,593.266 745.122,595.497 745.58,597.736 746.039,599.982 746.498,602.233 746.956,604.486 747.415,606.739 747.873,608.991 748.332,611.239 748.79,613.482 749.249,615.717 749.708,617.942 750.166,620.156 750.625,622.357 751.083,624.542 751.542,626.71 752,628.86 752.459,630.988 752.918,633.094 753.376,635.176 753.835,637.233 754.293,639.261 754.752,641.261 755.21,643.231 755.669,645.169 756.128,647.073 756.586,648.943 757.045,650.777 757.503,652.574 757.962,654.333 758.42,656.052 758.879,657.731 759.338,659.368 759.796,660.963 760.255,662.515 760.713,664.023 761.172,665.486 761.63,666.903 762.089,668.275 762.548,669.6 763.006,670.879 763.465,672.11 763.923,673.293 764.382,674.428 764.841,675.515 765.299,676.554 765.758,677.545 766.216,678.487 766.675,679.381 767.133,680.226 767.592,681.024 768.051,681.774 768.509,682.476 768.968,683.132 769.426,683.741 769.885,684.303 770.343,684.82 770.802,685.292 771.261,685.719 771.719,686.103 772.178,686.443 772.636,686.741 773.095,686.997 773.553,687.213 774.012,687.389 774.471,687.526 774.929,687.625 775.388,687.686 775.846,687.712 776.305,687.703 776.763,687.659 777.222,687.583 777.681,687.474 778.139,687.334 778.598,687.165 779.056,686.967 779.515,686.741 779.973,686.489 780.432,686.211 780.891,685.909 781.349,685.584 781.808,685.236 782.266,684.867 782.725,684.478 783.183,684.07 783.642,683.644 784.101,683.2 784.559,682.741 785.018,682.266 785.476,681.777 785.935,681.274 786.393,680.759 786.852,680.233 787.311,679.695 787.769,679.147 788.228,678.59 788.686,678.023 789.145,677.449 789.603,676.867 790.062,676.278 790.521,675.682 790.979,675.081 791.438,674.474 791.896,673.862 792.355,673.244 792.813,672.623 793.272,671.997 793.731,671.367 794.189,670.733 794.648,670.095 795.106,669.454 795.565,668.809 796.023,668.16 796.482,667.508 796.941,666.852 797.399,666.193 797.858,665.529 798.316,664.862 798.775,664.19 799.234,663.514 799.692,662.833 800.151,662.147 800.609,661.456 801.068,660.759 801.526,660.057 801.985,659.348 802.444,658.632 802.902,657.91 803.361,657.18 803.819,656.443 804.278,655.697 804.736,654.943 805.195,654.18 805.654,653.408 806.112,652.626 806.571,651.834 807.029,651.032 807.488,650.219 807.946,649.395 808.405,648.56 808.864,647.713 809.322,646.855 809.781,645.984 810.239,645.101 810.698,644.206 811.156,643.298 811.615,642.377 812.074,641.444 812.532,640.498 812.991,639.54 813.449,638.569 813.908,637.586 814.366,636.59 814.825,635.582 815.284,634.563 815.742,633.532 816.201,632.49 816.659,631.437 817.118,630.374 817.576,629.301 818.035,628.219 818.494,627.129 818.952,626.031 819.411,624.925 819.869,623.814 820.328,622.697 820.786,621.575 821.245,620.45 821.704,619.322 822.162,618.192 822.621,617.061 823.079,615.932 823.538,614.803 823.996,613.678 824.455,612.556 824.914,611.44 825.372,610.331 825.831,609.229 826.289,608.136 826.748,607.054 827.206,605.984 827.665,604.927 828.124,603.885 828.582,602.859 829.041,601.851 829.499,600.861 829.958,599.892 830.416,598.945 830.875,598.02 831.334,597.121 831.792,596.247 832.251,595.4 832.709,594.582 833.168,593.794 833.627,593.037 834.085,592.312 834.544,591.621 835.002,590.965 835.461,590.344 835.919,589.76 836.378,589.213 836.837,588.706 837.295,588.237 837.754,587.809 838.212,587.423 838.671,587.077 839.129,586.774 839.588,586.514 840.047,586.297 840.505,586.123 840.964,585.993 841.422,585.907 841.881,585.864 842.339,585.866 842.798,585.911 843.257,586 843.715,586.132 844.174,586.307 844.632,586.524 845.091,586.783 845.549,587.083 846.008,587.423 846.467,587.802 846.925,588.219 847.384,588.674 847.842,589.164 848.301,589.689 848.759,590.247 849.218,590.837 849.677,591.457 850.135,592.105 850.594,592.78 851.052,593.479 851.511,594.202 851.969,594.945 852.428,595.707 852.887,596.486 853.345,597.279 853.804,598.084 854.262,598.899 854.721,599.722 855.179,600.549 855.638,601.378 856.097,602.207 856.555,603.034 857.014,603.855 857.472,604.668 857.931,605.47 858.389,606.259 858.848,607.031 859.307,607.785 859.765,608.517 860.224,609.225 860.682,609.907 861.141,610.558 861.599,611.177 862.058,611.762 862.517,612.309 862.975,612.816 863.434,613.28 863.892,613.7 864.351,614.072 864.809,614.395 865.268,614.665 865.727,614.882 866.185,615.042 866.644,615.144 867.102,615.186 867.561,615.165 868.02,615.081 868.478,614.931 868.937,614.714 869.395,614.429 869.854,614.073 870.312,613.647 870.771,613.148 871.23,612.576 871.688,611.929 872.147,611.208 872.605,610.411 873.064,609.538 873.522,608.588 873.981,607.562 874.44,606.459 874.898,605.279 875.357,604.022 875.815,602.689 876.274,601.28 876.732,599.795 877.191,598.235 877.65,596.601 878.108,594.894 878.567,593.115 879.025,591.264 879.484,589.344 879.942,587.356 880.401,585.301 880.86,583.18 881.318,580.997 881.777,578.751 882.235,576.446 882.694,574.084 883.152,571.666 883.611,569.195 884.07,566.673 884.528,564.103 884.987,561.487 885.445,558.827 885.904,556.127 886.362,553.39 886.821,550.617 887.28,547.812 887.738,544.977 888.197,542.117 888.655,539.233 889.114,536.329 889.572,533.407 890.031,530.472 890.49,527.526 890.948,524.571 891.407,521.613 891.865,518.653 892.324,515.694 892.782,512.741 893.241,509.795 893.7,506.861 894.158,503.942 894.617,501.04 895.075,498.158 895.534,495.301 895.992,492.47 896.451,489.669 896.91,486.9 897.368,484.168 897.827,481.473 898.285,478.82 898.744,476.211 899.202,473.649 899.661,471.136 900.12,468.675 900.578,466.269 901.037,463.919 901.495,461.628 901.954,459.398 902.413,457.232 902.871,455.131 903.33,453.098 903.788,451.134 904.247,449.24 904.705,447.42 905.164,445.674 905.623,444.004 906.081,442.411 906.54,440.896 906.998,439.461 907.457,438.107 907.915,436.834 908.374,435.643 908.833,434.536 909.291,433.513 909.75,432.574 910.208,431.72 910.667,430.951 911.125,430.267 911.584,429.668 912.043,429.155 912.501,428.727 912.96,428.385 913.418,428.126 913.877,427.953 914.335,427.863 914.794,427.856 915.253,427.931 915.711,428.088 916.17,428.326 916.628,428.643 917.087,429.039 917.545,429.512 918.004,430.061 918.463,430.685 918.921,431.382 919.38,432.152 919.838,432.991 920.297,433.899 920.755,434.874 921.214,435.914 921.673,437.017 922.131,438.181 922.59,439.405 923.048,440.687 923.507,442.023 923.965,443.413 924.424,444.855 924.883,446.345 925.341,447.881 925.8,449.463 926.258,451.086 926.717,452.75 927.175,454.451 927.634,456.188 928.093,457.957 928.551,459.758 929.01,461.587 929.468,463.442 929.927,465.321 930.385,467.221 930.844,469.14 931.303,471.076 931.761,473.027 932.22,474.99 932.678,476.963 933.137,478.944 933.595,480.931 934.054,482.922 934.513,484.913 934.971,486.905 935.43,488.894 935.888,490.878 936.347,492.856 936.806,494.826 937.264,496.785 937.723,498.733 938.181,500.667 938.64,502.585 939.098,504.487 939.557,506.371 940.016,508.234 940.474,510.077 940.933,511.897 941.391,513.693 941.85,515.464 942.308,517.208 942.767,518.926 943.226,520.615 943.684,522.275 944.143,523.905 944.601,525.504 945.06,527.071 945.518,528.606 945.977,530.108 946.436,531.577 946.894,533.012 947.353,534.412 947.811,535.778 948.27,537.109 948.728,538.405 949.187,539.666 949.646,540.891 950.104,542.081 950.563,543.236 951.021,544.355 951.48,545.44 951.938,546.489 952.397,547.504 952.856,548.484 953.314,549.431 953.773,550.344 954.231,551.223 954.69,552.07 955.148,552.885 955.607,553.669 956.066,554.421 956.524,555.143 956.983,555.835 957.441,556.498 957.9,557.133 958.358,557.74 958.817,558.321 959.276,558.876 959.734,559.406 960.193,559.911 960.651,560.393 961.11,560.853 961.568,561.291 962.027,561.709 962.486,562.107 962.944,562.486 963.403,562.848 963.861,563.193 964.32,563.522 964.778,563.836 965.237,564.136 965.696,564.424 966.154,564.7 966.613,564.965 967.071,565.22 967.53,565.466 967.988,565.704 968.447,565.936 968.906,566.162 969.364,566.383 969.823,566.6 970.281,566.814 970.74,567.026 971.199,567.237 971.657,567.449 972.116,567.661 972.574,567.876 973.033,568.093 973.491,568.314 973.95,568.54 974.409,568.772 974.867,569.01 975.326,569.256 975.784,569.511 976.243,569.774 976.701,570.049 977.16,570.334 977.619,570.631 978.077,570.941 978.536,571.264 978.994,571.603 979.453,571.956 979.911,572.326 980.37,572.713 980.829,573.118 981.287,573.541 981.746,573.984 982.204,574.446 982.663,574.93 983.121,575.436 983.58,575.963 984.039,576.514 984.497,577.089 984.956,577.688 985.414,578.313 985.873,578.963 986.331,579.64 986.79,580.344 987.249,581.076 987.707,581.836 988.166,582.624 988.624,583.443 989.083,584.291 989.541,585.17 990,586.079 990.459,587.021 990.917,587.994 991.376,588.999 991.834,590.037 992.293,591.107 992.751,592.211 993.21,593.349 993.669,594.52 994.127,595.726 994.586,596.966 995.044,598.24 995.503,599.548 995.961,600.891 996.42,602.269 996.879,603.681 997.337,605.128 997.796,606.609 998.254,608.124 998.713,609.673 999.171,611.256 999.63,612.873 1000.09,614.523 1000.55,616.206 1001.01,617.921 1001.46,619.667 1001.92,621.446 1002.38,623.255 1002.84,625.094 1003.3,626.962 1003.76,628.859 1004.22,630.784 1004.67,632.736 1005.13,634.714 1005.59,636.717 1006.05,638.744 1006.51,640.794 1006.97,642.867 1007.43,644.959 1007.88,647.072 1008.34,649.202 1008.8,651.35 1009.26,653.513 1009.72,655.69 1010.18,657.879 1010.64,660.08 1011.09,662.291 1011.55,664.509 1012.01,666.734 1012.47,668.963 1012.93,671.196 1013.39,673.429 1013.85,675.662 1014.3,677.893 1014.76,680.12 1015.22,682.34 1015.68,684.553 1016.14,686.756 1016.6,688.948 1017.06,691.126 1017.51,693.288 1017.97,695.433 1018.43,697.559 1018.89,699.664 1019.35,701.746 1019.81,703.803 1020.27,705.832 1020.72,707.833 1021.18,709.804 1021.64,711.742 1022.1,713.646 1022.56,715.514 1023.02,717.344 1023.48,719.135 1023.93,720.884 1024.39,722.591 1024.85,724.253 1025.31,725.87 1025.77,727.439 1026.23,728.96 1026.69,730.43 1027.14,731.849 1027.6,733.215 1028.06,734.528 1028.52,735.785 1028.98,736.986 1029.44,738.13 1029.9,739.217 1030.35,740.244 1030.81,741.213 1031.27,742.12 1031.73,742.968 1032.19,743.754 1032.65,744.478 1033.11,745.14 1033.56,745.74 1034.02,746.277 1034.48,746.752 1034.94,747.164 1035.4,747.513 1035.86,747.8 1036.32,748.025 1036.77,748.187 1037.23,748.289 1037.69,748.329 1038.15,748.308 1038.61,748.228 1039.07,748.089 1039.53,747.891 1039.98,747.635 1040.44,747.322 1040.9,746.954 1041.36,746.531 1041.82,746.055 1042.28,745.525 1042.74,744.945 1043.19,744.314 1043.65,743.635 1044.11,742.908 1044.57,742.136 1045.03,741.318 1045.49,740.458 1045.95,739.556 1046.4,738.614 1046.86,737.634 1047.32,736.617 1047.78,735.565 1048.24,734.479 1048.7,733.361 1049.16,732.212 1049.61,731.036 1050.07,729.832 1050.53,728.602 1050.99,727.349 1051.45,726.074 1051.91,724.779 1052.37,723.465 1052.82,722.133 1053.28,720.786 1053.74,719.425 1054.2,718.051 1054.66,716.665 1055.12,715.271 1055.58,713.867 1056.03,712.457 1056.49,711.041 1056.95,709.621 1057.41,708.198 1057.87,706.772 1058.33,705.346 1058.79,703.919 1059.24,702.494 1059.7,701.071 1060.16,699.65 1060.62,698.234 1061.08,696.821 1061.54,695.414 1062,694.012 1062.45,692.616 1062.91,691.227 1063.37,689.844 1063.83,688.469 1064.29,687.102 1064.75,685.742 1065.21,684.39 1065.66,683.046 1066.12,681.709 1066.58,680.38 1067.04,679.059 1067.5,677.744 1067.96,676.437 1068.42,675.136 1068.87,673.841 1069.33,672.552 1069.79,671.268 1070.25,669.989 1070.71,668.713 1071.17,667.44 1071.63,666.17 1072.08,664.901 1072.54,663.633 1073,662.365 1073.46,661.096 1073.92,659.825 1074.38,658.55 1074.84,657.272 1075.29,655.989 1075.75,654.7 1076.21,653.403 1076.67,652.099 1077.13,650.785 1077.59,649.461 1078.05,648.126 1078.5,646.778 1078.96,645.417 1079.42,644.041 1079.88,642.649 1080.34,641.241 1080.8,639.815 1081.26,638.371 1081.71,636.907 1082.17,635.422 1082.63,633.917 1083.09,632.389 1083.55,630.839 1084.01,629.265 1084.47,627.666 1084.92,626.043 1085.38,624.395 1085.84,622.721 1086.3,621.02 1086.76,619.293 1087.22,617.539 1087.68,615.758 1088.13,613.949 1088.59,612.114 1089.05,610.251 1089.51,608.361 1089.97,606.444 1090.43,604.501 1090.89,602.531 1091.34,600.535 1091.8,598.514 1092.26,596.469 1092.72,594.399 1093.18,592.307 1093.64,590.192 1094.1,588.056 1094.55,585.899 1095.01,583.724 1095.47,581.531 1095.93,579.321 1096.39,577.097 1096.85,574.858 1097.31,572.608 1097.76,570.347 1098.22,568.077 1098.68,565.801 1099.14,563.519 1099.6,561.234 1100.06,558.948 1100.52,556.662 1100.97,554.379 1101.43,552.101 1101.89,549.829 1102.35,547.567 1102.81,545.316 1103.27,543.079 1103.73,540.857 1104.18,538.654 1104.64,536.471 1105.1,534.31 1105.56,532.174 1106.02,530.066 1106.48,527.987 1106.94,525.94 1107.39,523.926 1107.85,521.949 1108.31,520.01 1108.77,518.112 1109.23,516.256 1109.69,514.445 1110.15,512.68 1110.6,510.964 1111.06,509.298 1111.52,507.685 1111.98,506.125 1112.44,504.62 1112.9,503.173 1113.36,501.784 1113.81,500.455 1114.27,499.187 1114.73,497.98 1115.19,496.838 1115.65,495.759 1116.11,494.745 1116.57,493.796 1117.02,492.914 1117.48,492.098 1117.94,491.35 1118.4,490.668 1118.86,490.053 1119.32,489.505 1119.78,489.024 1120.23,488.609 1120.69,488.26 1121.15,487.976 1121.61,487.756 1122.07,487.6 1122.53,487.506 1122.99,487.473 1123.44,487.501 1123.9,487.586 1124.36,487.729 1124.82,487.927 1125.28,488.178 1125.74,488.48 1126.2,488.831 1126.65,489.23 1127.11,489.673 1127.57,490.158 1128.03,490.683 1128.49,491.246 1128.95,491.843 1129.41,492.472 1129.86,493.129 1130.32,493.813 1130.78,494.519 1131.24,495.246 1131.7,495.989 1132.16,496.746 1132.62,497.513 1133.07,498.287 1133.53,499.066 1133.99,499.845 1134.45,500.621 1134.91,501.391 1135.37,502.153 1135.83,502.901 1136.28,503.634 1136.74,504.348 1137.2,505.04 1137.66,505.706 1138.12,506.344 1138.58,506.951 1139.04,507.523 1139.49,508.057 1139.95,508.552 1140.41,509.003 1140.87,509.409 1141.33,509.766 1141.79,510.073 1142.25,510.327 1142.7,510.525 1143.16,510.666 1143.62,510.748 1144.08,510.768 1144.54,510.725 1145,510.617 1145.46,510.444 1145.91,510.203 1146.37,509.893 1146.83,509.514 1147.29,509.064 1147.75,508.543 1148.21,507.95 1148.67,507.286 1149.12,506.548 1149.58,505.739 1150.04,504.857 1150.5,503.903 1150.96,502.877 1151.42,501.78 1151.88,500.613 1152.33,499.376 1152.79,498.071 1153.25,496.699 1153.71,495.26 1154.17,493.758 1154.63,492.192 1155.09,490.565 1155.54,488.879 1156,487.136 1156.46,485.338 1156.92,483.487 1157.38,481.586 1157.84,479.637 1158.3,477.643 1158.75,475.606 1159.21,473.53 1159.67,471.417 1160.13,469.269 1160.59,467.091 1161.05,464.886 1161.51,462.655 1161.97,460.404 1162.42,458.134 1162.88,455.85 1163.34,453.554 1163.8,451.25 1164.26,448.941 1164.72,446.631 1165.18,444.323 1165.63,442.02 1166.09,439.727 1166.55,437.445 1167.01,435.179 1167.47,432.932 1167.93,430.706 1168.39,428.506 1168.84,426.335 1169.3,424.194 1169.76,422.089 1170.22,420.021 1170.68,417.993 1171.14,416.008 1171.6,414.069 1172.05,412.179 1172.51,410.34 1172.97,408.554 1173.43,406.824 1173.89,405.151 1174.35,403.539 1174.81,401.989 1175.26,400.502 1175.72,399.081 1176.18,397.727 1176.64,396.442 1177.1,395.226 1177.56,394.082 1178.02,393.01 1178.47,392.011 1178.93,391.086 1179.39,390.235 1179.85,389.46 1180.31,388.76 1180.77,388.136 1181.23,387.588 1181.68,387.116 1182.14,386.72 1182.6,386.4 1183.06,386.155 1183.52,385.984 1183.98,385.888 1184.44,385.865 1184.89,385.915 1185.35,386.037 1185.81,386.229 1186.27,386.491 1186.73,386.821 1187.19,387.218 1187.65,387.681 1188.1,388.208 1188.56,388.798 1189.02,389.449 1189.48,390.159 1189.94,390.926 1190.4,391.749 1190.86,392.626 1191.31,393.555 1191.77,394.534 1192.23,395.562 1192.69,396.635 1193.15,397.752 1193.61,398.911 1194.07,400.11 1194.52,401.348 1194.98,402.621 1195.44,403.928 1195.9,405.267 1196.36,406.635 1196.82,408.032 1197.28,409.454 1197.73,410.901 1198.19,412.369 1198.65,413.858 1199.11,415.365 1199.57,416.889 1200.03,418.428 1200.49,419.98 1200.94,421.544 1201.4,423.118 1201.86,424.701 1202.32,426.291 1202.78,427.888 1203.24,429.49 1203.7,431.095 1204.15,432.703 1204.61,434.313 1205.07,435.923 1205.53,437.533 1205.99,439.143 1206.45,440.752 1206.91,442.358 1207.36,443.962 1207.82,445.563 1208.28,447.161 1208.74,448.755 1209.2,450.347 1209.66,451.934 1210.12,453.518 1210.57,455.099 1211.03,456.676 1211.49,458.25 1211.95,459.822 1212.41,461.391 1212.87,462.959 1213.33,464.525 1213.78,466.091 1214.24,467.657 1214.7,469.223 1215.16,470.791 1215.62,472.361 1216.08,473.933 1216.54,475.51 1216.99,477.092 1217.45,478.68 1217.91,480.274 1218.37,481.876 1218.83,483.487 1219.29,485.107 1219.75,486.738 1220.2,488.381 1220.66,490.037 1221.12,491.707 1221.58,493.391 1222.04,495.092 1222.5,496.809 1222.96,498.543 1223.41,500.296 1223.87,502.069 1224.33,503.862 1224.79,505.676 1225.25,507.512 1225.71,509.37 1226.17,511.251 1226.62,513.157 1227.08,515.086 1227.54,517.04 1228,519.019 1228.46,521.024 1228.92,523.054 1229.38,525.11 1229.83,527.193 1230.29,529.301 1230.75,531.435 1231.21,533.595 1231.67,535.781 1232.13,537.992 1232.59,540.228 1233.04,542.489 1233.5,544.774 1233.96,547.082 1234.42,549.413 1234.88,551.766 1235.34,554.141 1235.8,556.536 1236.25,558.95 1236.71,561.382 1237.17,563.832 1237.63,566.298 1238.09,568.778 1238.55,571.272 1239.01,573.779 1239.46,576.295 1239.92,578.822 1240.38,581.355 1240.84,583.895 1241.3,586.44 1241.76,588.988 1242.22,591.536 1242.67,594.085 1243.13,596.631 1243.59,599.174 1244.05,601.711 1244.51,604.24 1244.97,606.76 1245.43,609.27 1245.88,611.767 1246.34,614.249 1246.8,616.716 1247.26,619.164 1247.72,621.593 1248.18,624.001 1248.64,626.386 1249.09,628.746 1249.55,631.08 1250.01,633.387 1250.47,635.665 1250.93,637.912 1251.39,640.128 1251.85,642.31 1252.3,644.458 1252.76,646.571 1253.22,648.647 1253.68,650.685 1254.14,652.684 1254.6,654.643 1255.06,656.562 1255.51,658.44 1255.97,660.276 1256.43,662.069 1256.89,663.82 1257.35,665.527 1257.81,667.189 1258.27,668.808 1258.72,670.383 1259.18,671.913 1259.64,673.398 1260.1,674.84 1260.56,676.236 1261.02,677.589 1261.48,678.899 1261.93,680.164 1262.39,681.387 1262.85,682.568 1263.31,683.706 1263.77,684.804 1264.23,685.861 1264.69,686.879 1265.14,687.858 1265.6,688.799 1266.06,689.703 1266.52,690.572 1266.98,691.406 1267.44,692.206 1267.9,692.974 1268.35,693.711 1268.81,694.418 1269.27,695.096 1269.73,695.747 1270.19,696.372 1270.65,696.973 1271.11,697.551 1271.56,698.107 1272.02,698.642 1272.48,699.159 1272.94,699.658 1273.4,700.142 1273.86,700.611 1274.32,701.066 1274.77,701.511 1275.23,701.945 1275.69,702.37 1276.15,702.788 1276.61,703.199 1277.07,703.606 1277.53,704.01 1277.98,704.412 1278.44,704.812 1278.9,705.214 1279.36,705.616 1279.82,706.022 1280.28,706.431 1280.74,706.846 1281.19,707.266 1281.65,707.694 1282.11,708.129 1282.57,708.573 1283.03,709.027 1283.49,709.491 1283.95,709.966 1284.4,710.454 1284.86,710.953 1285.32,711.466 1285.78,711.993 1286.24,712.534 1286.7,713.089 1287.16,713.66 1287.61,714.245 1288.07,714.846 1288.53,715.463 1288.99,716.096 1289.45,716.745 1289.91,717.41 1290.37,718.091 1290.82,718.788 1291.28,719.501 1291.74,720.23 1292.2,720.975 1292.66,721.735 1293.12,722.51 1293.58,723.3 1294.03,724.104 1294.49,724.922 1294.95,725.754 1295.41,726.598 1295.87,727.456 1296.33,728.325 1296.79,729.205 1297.24,730.096 1297.7,730.996 1298.16,731.906 1298.62,732.825 1299.08,733.75 1299.54,734.683 1300,735.622 1300.45,736.565 1300.91,737.513 1301.37,738.464 1301.83,739.417 1302.29,740.371 1302.75,741.325 1303.21,742.279 1303.66,743.23 1304.12,744.179 1304.58,745.124 1305.04,746.063 1305.5,746.996 1305.96,747.922 1306.42,748.839 1306.87,749.746 1307.33,750.642 1307.79,751.526 1308.25,752.396 1308.71,753.252 1309.17,754.092 1309.63,754.915 1310.08,755.719 1310.54,756.504 1311,757.268 1311.46,758.01 1311.92,758.729 1312.38,759.423 1312.84,760.091 1313.29,760.732 1313.75,761.345 1314.21,761.928 1314.67,762.481 1315.13,763.001 1315.59,763.488 1316.05,763.941 1316.5,764.358 1316.96,764.738 1317.42,765.08 1317.88,765.383 1318.34,765.646 1318.8,765.868 1319.26,766.047 1319.71,766.182 1320.17,766.273 1320.63,766.319 1321.09,766.318 1321.55,766.269 1322.01,766.172 1322.47,766.026 1322.92,765.83 1323.38,765.583 1323.84,765.284 1324.3,764.933 1324.76,764.529 1325.22,764.071 1325.68,763.559 1326.13,762.992 1326.59,762.37 1327.05,761.692 1327.51,760.958 1327.97,760.167 1328.43,759.32 1328.89,758.415 1329.34,757.454 1329.8,756.435 1330.26,755.359 1330.72,754.225 1331.18,753.035 1331.64,751.787 1332.1,750.482 1332.55,749.121 1333.01,747.704 1333.47,746.23 1333.93,744.702 1334.39,743.118 1334.85,741.48 1335.31,739.789 1335.76,738.045 1336.22,736.249 1336.68,734.402 1337.14,732.505 1337.6,730.558 1338.06,728.564 1338.52,726.522 1338.97,724.435 1339.43,722.303 1339.89,720.129 1340.35,717.912 1340.81,715.656 1341.27,713.36 1341.73,711.028 1342.18,708.66 1342.64,706.258 1343.1,703.824 1343.56,701.359 1344.02,698.866 1344.48,696.346 1344.94,693.801 1345.39,691.234 1345.85,688.645 1346.31,686.037 1346.77,683.412 1347.23,680.773 1347.69,678.12 1348.15,675.456 1348.6,672.784 1349.06,670.105 1349.52,667.421 1349.98,664.734 1350.44,662.047 1350.9,659.362 1351.36,656.68 1351.81,654.004 1352.27,651.336 1352.73,648.677 1353.19,646.03 1353.65,643.396 1354.11,640.778 1354.57,638.177 1355.02,635.596 1355.48,633.035 1355.94,630.497 1356.4,627.983 1356.86,625.496 1357.32,623.035 1357.78,620.604 1358.23,618.203 1358.69,615.834 1359.15,613.498 1359.61,611.196 1360.07,608.929 1360.53,606.699 1360.99,604.506 1361.44,602.351 1361.9,600.235 1362.36,598.159 1362.82,596.123 1363.28,594.129 1363.74,592.175 1364.2,590.263 1364.65,588.393 1365.11,586.565 1365.57,584.779 1366.03,583.035 1366.49,581.334 1366.95,579.673 1367.41,578.055 1367.86,576.477 1368.32,574.941 1368.78,573.444 1369.24,571.987 1369.7,570.568 1370.16,569.187 1370.62,567.844 1371.07,566.536 1371.53,565.263 1371.99,564.025 1372.45,562.819 1372.91,561.645 1373.37,560.501 1373.83,559.386 1374.28,558.298 1374.74,557.237 1375.2,556.2 1375.66,555.186 1376.12,554.194 1376.58,553.221 1377.04,552.267 1377.49,551.33 1377.95,550.408 1378.41,549.499 1378.87,548.601 1379.33,547.714 1379.79,546.835 1380.25,545.963 1380.7,545.095 1381.16,544.231 1381.62,543.369 1382.08,542.506 1382.54,541.643 1383,540.776 1383.46,539.905 1383.91,539.028 1384.37,538.144 1384.83,537.251 1385.29,536.348 1385.75,535.434 1386.21,534.507 1386.67,533.567 1387.12,532.613 1387.58,531.644 1388.04,530.658 1388.5,529.655 1388.96,528.634 1389.42,527.595 1389.88,526.537 1390.33,525.46 1390.79,524.363 1391.25,523.246 1391.71,522.109 1392.17,520.952 1392.63,519.774 1393.09,518.577 1393.54,517.359 1394,516.122 1394.46,514.866 1394.92,513.591 1395.38,512.298 1395.84,510.988 1396.3,509.661 1396.75,508.318 1397.21,506.96 1397.67,505.588 1398.13,504.204 1398.59,502.808 1399.05,501.401 1399.51,499.985 1399.96,498.562 1400.42,497.132 1400.88,495.697 1401.34,494.259 1401.8,492.82 1402.26,491.38 1402.72,489.941 1403.17,488.506 1403.63,487.076 1404.09,485.653 1404.55,484.238 1405.01,482.833 1405.47,481.44 1405.93,480.061 1406.38,478.697 1406.84,477.351 1407.3,476.024 1407.76,474.717 1408.22,473.433 1408.68,472.172 1409.14,470.937 1409.59,469.73 1410.05,468.551 1410.51,467.402 1410.97,466.285 1411.43,465.2 1411.89,464.15 1412.35,463.134 1412.8,462.155 1413.26,461.213 1413.72,460.31 1414.18,459.445 1414.64,458.62 1415.1,457.836 1415.56,457.092 1416.01,456.39 1416.47,455.729 1416.93,455.111 1417.39,454.534 1417.85,453.999 1418.31,453.506 1418.77,453.055 1419.22,452.645 1419.68,452.276 1420.14,451.947 1420.6,451.658 1421.06,451.408 1421.52,451.195 1421.98,451.02 1422.43,450.88 1422.89,450.775 1423.35,450.704 1423.81,450.664 1424.27,450.656 1424.73,450.676 1425.19,450.724 1425.64,450.797 1426.1,450.894 1426.56,451.013 1427.02,451.153 1427.48,451.311 1427.94,451.485 1428.4,451.673 1428.85,451.873 1429.31,452.083 1429.77,452.3 1430.23,452.524 1430.69,452.75 1431.15,452.978 1431.61,453.205 1432.06,453.429 1432.52,453.648 1432.98,453.859 1433.44,454.06 1433.9,454.25 1434.36,454.426 1434.82,454.586 1435.27,454.729 1435.73,454.852 1436.19,454.954 1436.65,455.033 1437.11,455.087 1437.57,455.115 1438.03,455.115 1438.48,455.086 1438.94,455.027 1439.4,454.936 1439.86,454.812 1440.32,454.655 1440.78,454.463 1441.24,454.237 1441.69,453.974 1442.15,453.676 1442.61,453.341 1443.07,452.969 1443.53,452.561 1443.99,452.116 1444.45,451.634 1444.9,451.117 1445.36,450.564 1445.82,449.976 1446.28,449.354 1446.74,448.699 1447.2,448.012 1447.66,447.294 1448.11,446.546 1448.57,445.77 1449.03,444.968 1449.49,444.14 1449.95,443.29 1450.41,442.418 1450.87,441.527 1451.32,440.619 1451.78,439.697 1452.24,438.762 1452.7,437.817 1453.16,436.865 1453.62,435.908 1454.08,434.948 1454.53,433.99 1454.99,433.034 1455.45,432.085 1455.91,431.145 1456.37,430.217 1456.83,429.304 1457.29,428.408 1457.74,427.534 1458.2,426.684 1458.66,425.86 1459.12,425.067 1459.58,424.306 1460.04,423.581 1460.5,422.895 1460.95,422.251 1461.41,421.651 1461.87,421.098 1462.33,420.596 1462.79,420.146 1463.25,419.751 1463.71,419.413 1464.16,419.136 1464.62,418.922 1465.08,418.771 1465.54,418.688 1466,418.673 1466.46,418.729 1466.92,418.858 1467.37,419.06 1467.83,419.338 1468.29,419.693 1468.75,420.126 1469.21,420.638 1469.67,421.23 1470.13,421.903 1470.58,422.658 1471.04,423.495 1471.5,424.415 1471.96,425.417 1472.42,426.502 1472.88,427.67 1473.34,428.92 1473.79,430.252 1474.25,431.666 1474.71,433.16 1475.17,434.734 1475.63,436.387 1476.09,438.118 1476.55,439.925 1477,441.807 1477.46,443.763 1477.92,445.79 1478.38,447.887 1478.84,450.052 1479.3,452.283 1479.76,454.578 1480.21,456.934 1480.67,459.348 1481.13,461.82 1481.59,464.345 1482.05,466.922 1482.51,469.546 1482.97,472.217 1483.42,474.93 1483.88,477.683 1484.34,480.472 1484.8,483.295 1485.26,486.149 1485.72,489.03 1486.18,491.935 1486.63,494.861 1487.09,497.805 1487.55,500.763 1488.01,503.733 1488.47,506.711 1488.93,509.693 1489.39,512.678 1489.84,515.661 1490.3,518.64 1490.76,521.611 1491.22,524.572 1491.68,527.519 1492.14,530.45 1492.6,533.362 1493.05,536.252 1493.51,539.117 1493.97,541.955 1494.43,544.763 1494.89,547.54 1495.35,550.281 1495.81,552.987 1496.26,555.654 1496.72,558.28 1497.18,560.863 1497.64,563.403 1498.1,565.896 1498.56,568.342 1499.02,570.74 1499.47,573.087 1499.93,575.384 1500.39,577.628 1500.85,579.819 1501.31,581.957 1501.77,584.041 1502.23,586.069 1502.68,588.043 1503.14,589.962 1503.6,591.825 1504.06,593.633 1504.52,595.386 1504.98,597.085 1505.44,598.729 1505.9,600.319 1506.35,601.856 1506.81,603.341 1507.27,604.775 1507.73,606.158 1508.19,607.493 1508.65,608.779 1509.11,610.018 1509.56,611.212 1510.02,612.362 1510.48,613.47 1510.94,614.537 1511.4,615.566 1511.86,616.557 1512.32,617.513 1512.77,618.435 1513.23,619.326 1513.69,620.188 1514.15,621.022 1514.61,621.83 1515.07,622.615 1515.53,623.379 1515.98,624.124 1516.44,624.852 1516.9,625.565 1517.36,626.266 1517.82,626.956 1518.28,627.637 1518.74,628.312 1519.19,628.983 1519.65,629.651 1520.11,630.319 1520.57,630.99 1521.03,631.663 1521.49,632.343 1521.95,633.03 1522.4,633.726 1522.86,634.433 1523.32,635.153 1523.78,635.887 1524.24,636.637 1524.7,637.404 1525.16,638.189 1525.61,638.995 1526.07,639.821 1526.53,640.67 1526.99,641.543 1527.45,642.439 1527.91,643.361 1528.37,644.309 1528.82,645.283 1529.28,646.285 1529.74,647.314 1530.2,648.372 1530.66,649.458 1531.12,650.572 1531.58,651.716 1532.03,652.888 1532.49,654.09 1532.95,655.319 1533.41,656.578 1533.87,657.864 1534.33,659.178 1534.79,660.519 1535.24,661.887 1535.7,663.281 1536.16,664.7 1536.62,666.143 1537.08,667.609 1537.54,669.098 1538,670.608 1538.45,672.139 1538.91,673.688 1539.37,675.256 1539.83,676.84 1540.29,678.439 1540.75,680.052 1541.21,681.677 1541.66,683.313 1542.12,684.958 1542.58,686.611 1543.04,688.269 1543.5,689.933 1543.96,691.599 1544.42,693.266 1544.87,694.933 1545.33,696.597 1545.79,698.257 1546.25,699.912 1546.71,701.559 1547.17,703.197 1547.63,704.824 1548.08,706.439 1548.54,708.039 1549,709.623 1549.46,711.19 1549.92,712.738 1550.38,714.265 1550.84,715.77 1551.29,717.251 1551.75,718.707 1552.21,720.137 1552.67,721.538 1553.13,722.91 1553.59,724.252 1554.05,725.562 1554.5,726.839 1554.96,728.083 1555.42,729.291 1555.88,730.463 1556.34,731.599 1556.8,732.697 1557.26,733.757 1557.71,734.778 1558.17,735.76 1558.63,736.701 1559.09,737.602 1559.55,738.462 1560.01,739.282 1560.47,740.059 1560.92,740.796 1561.38,741.491 1561.84,742.145 1562.3,742.758 1562.76,743.329 1563.22,743.86 1563.68,744.351 1564.13,744.802 1564.59,745.214 1565.05,745.586 1565.51,745.921 1565.97,746.219 1566.43,746.48 1566.89,746.705 1567.34,746.896 1567.8,747.053 1568.26,747.177 1568.72,747.27 1569.18,747.333 1569.64,747.367 1570.1,747.373 1570.55,747.353 1571.01,747.307 1571.47,747.238 1571.93,747.147 1572.39,747.035 1572.85,746.904 1573.31,746.755 1573.76,746.59 1574.22,746.411 1574.68,746.219 1575.14,746.015 1575.6,745.801 1576.06,745.579 1576.52,745.351 1576.97,745.117 1577.43,744.88 1577.89,744.641 1578.35,744.401 1578.81,744.162 1579.27,743.925 1579.73,743.692 1580.18,743.464 1580.64,743.242 1581.1,743.028 1581.56,742.823 1582.02,742.628 1582.48,742.443 1582.94,742.271 1583.39,742.112 1583.85,741.966 1584.31,741.835 1584.77,741.719 1585.23,741.618 1585.69,741.535 1586.15,741.467 1586.6,741.417 1587.06,741.384 1587.52,741.369 1587.98,741.371 1588.44,741.39 1588.9,741.426 1589.36,741.479 1589.81,741.549 1590.27,741.634 1590.73,741.735 1591.19,741.851 1591.65,741.98 1592.11,742.122 1592.57,742.276 1593.02,742.44 1593.48,742.614 1593.94,742.796 1594.4,742.984 1594.86,743.177 1595.32,743.374 1595.78,743.571 1596.23,743.769 1596.69,743.964 1597.15,744.155 1597.61,744.339 1598.07,744.514 1598.53,744.679 1598.99,744.83 1599.44,744.966 1599.9,745.083 1600.36,745.179 1600.82,745.252 1601.28,745.3 1601.74,745.318 1602.2,745.305 1602.65,745.259 1603.11,745.175 1603.57,745.052 1604.03,744.887 1604.49,744.676 1604.95,744.418 1605.41,744.109 1605.86,743.747 1606.32,743.329 1606.78,742.853 1607.24,742.315 1607.7,741.714 1608.16,741.047 1608.62,740.31 1609.07,739.503 1609.53,738.623 1609.99,737.666 1610.45,736.633 1610.91,735.519 1611.37,734.324 1611.83,733.046 1612.28,731.682 1612.74,730.232 1613.2,728.694 1613.66,727.066 1614.12,725.348 1614.58,723.538 1615.04,721.636 1615.49,719.641 1615.95,717.551 1616.41,715.368 1616.87,713.09 1617.33,710.717 1617.79,708.25 1618.25,705.688 1618.7,703.033 1619.16,700.284 1619.62,697.442 1620.08,694.509 1620.54,691.485 1621,688.372 1621.46,685.171 1621.91,681.884 1622.37,678.512 1622.83,675.057 1623.29,671.521 1623.75,667.908 1624.21,664.218 1624.67,660.455 1625.12,656.621 1625.58,652.719 1626.04,648.752 1626.5,644.724 1626.96,640.637 1627.42,636.495 1627.88,632.301 1628.33,628.06 1628.79,623.773 1629.25,619.447 1629.71,615.084 1630.17,610.688 1630.63,606.264 1631.09,601.815 1631.54,597.346 1632,592.861 1632.46,588.364 1632.92,583.86 1633.38,579.352 1633.84,574.846 1634.3,570.346 1634.75,565.855 1635.21,561.38 1635.67,556.922 1636.13,552.488 1636.59,548.081 1637.05,543.706 1637.51,539.366 1637.96,535.067 1638.42,530.811 1638.88,526.604 1639.34,522.448 1639.8,518.348 1640.26,514.307 1640.72,510.329 1641.17,506.418 1641.63,502.576 1642.09,498.808 1642.55,495.116 1643.01,491.503 1643.47,487.972 1643.93,484.526 1644.38,481.166 1644.84,477.897 1645.3,474.719 1645.76,471.635 1646.22,468.647 1646.68,465.755 1647.14,462.963 1647.59,460.271 1648.05,457.68 1648.51,455.192 1648.97,452.806 1649.43,450.524 1649.89,448.346 1650.35,446.272 1650.8,444.303 1651.26,442.438 1651.72,440.677 1652.18,439.019 1652.64,437.463 1653.1,436.01 1653.56,434.657 1654.01,433.404 1654.47,432.25 1654.93,431.192 1655.39,430.229 1655.85,429.359 1656.31,428.58 1656.77,427.891 1657.22,427.289 1657.68,426.771 1658.14,426.335 1658.6,425.979 1659.06,425.699 1659.52,425.493 1659.98,425.358 1660.43,425.29 1660.89,425.288 1661.35,425.347 1661.81,425.464 1662.27,425.636 1662.73,425.859 1663.19,426.131 1663.64,426.447 1664.1,426.805 1664.56,427.199 1665.02,427.628 1665.48,428.088 1665.94,428.574 1666.4,429.083 1666.85,429.613 1667.31,430.158 1667.77,430.716 1668.23,431.284 1668.69,431.857 1669.15,432.432 1669.61,433.007 1670.06,433.577 1670.52,434.14 1670.98,434.692 1671.44,435.23 1671.9,435.752 1672.36,436.254 1672.82,436.734 1673.27,437.189 1673.73,437.616 1674.19,438.012 1674.65,438.376 1675.11,438.705 1675.57,438.996 1676.03,439.248 1676.48,439.459 1676.94,439.627 1677.4,439.751 1677.86,439.828 1678.32,439.857 1678.78,439.837 1679.24,439.766 1679.69,439.645 1680.15,439.471 1680.61,439.243 1681.07,438.963 1681.53,438.627 1681.99,438.238 1682.45,437.793 1682.9,437.293 1683.36,436.737 1683.82,436.127 1684.28,435.462 1684.74,434.742 1685.2,433.968 1685.66,433.141 1686.11,432.261 1686.57,431.329 1687.03,430.346 1687.49,429.313 1687.95,428.231 1688.41,427.101 1688.87,425.925 1689.32,424.703 1689.78,423.438 1690.24,422.131 1690.7,420.784 1691.16,419.398 1691.62,417.975 1692.08,416.517 1692.53,415.026 1692.99,413.504 1693.45,411.952 1693.91,410.374 1694.37,408.77 1694.83,407.144 1695.29,405.498 1695.74,403.833 1696.2,402.152 1696.66,400.457 1697.12,398.75 1697.58,397.035 1698.04,395.313 1698.5,393.586 1698.95,391.858 1699.41,390.129 1699.87,388.404 1700.33,386.683 1700.79,384.97 1701.25,383.266 1701.71,381.575 1702.16,379.898 1702.62,378.238 1703.08,376.597 1703.54,374.977 1704,373.381 1704.46,371.811 1704.92,370.268 1705.37,368.756 1705.83,367.276 1706.29,365.83 1706.75,364.421 1707.21,363.05 1707.67,361.72 1708.13,360.432 1708.58,359.189 1709.04,357.992 1709.5,356.842 1709.96,355.743 1710.42,354.695 1710.88,353.7 1711.34,352.761 1711.79,351.878 1712.25,351.052 1712.71,350.287 1713.17,349.582 1713.63,348.94 1714.09,348.362 1714.55,347.849 1715,347.403 1715.46,347.024 1715.92,346.714 1716.38,346.474 1716.84,346.305 1717.3,346.208 1717.76,346.184 1718.21,346.233 1718.67,346.358 1719.13,346.558 1719.59,346.835 1720.05,347.188 1720.51,347.62 1720.97,348.129 1721.42,348.718 1721.88,349.385 1722.34,350.133 1722.8,350.96 1723.26,351.868 1723.72,352.856 1724.18,353.926 1724.63,355.076 1725.09,356.307 1725.55,357.62 1726.01,359.013 1726.47,360.488 1726.93,362.043 1727.39,363.678 1727.84,365.394 1728.3,367.189 1728.76,369.064 1729.22,371.018 1729.68,373.05 1730.14,375.16 1730.6,377.347 1731.05,379.611 1731.51,381.949 1731.97,384.363 1732.43,386.85 1732.89,389.41 1733.35,392.042 1733.81,394.744 1734.26,397.515 1734.72,400.355 1735.18,403.261 1735.64,406.232 1736.1,409.268 1736.56,412.366 1737.02,415.524 1737.47,418.742 1737.93,422.018 1738.39,425.35 1738.85,428.735 1739.31,432.173 1739.77,435.661 1740.23,439.198 1740.68,442.782 1741.14,446.41 1741.6,450.08 1742.06,453.791 1742.52,457.54 1742.98,461.325 1743.44,465.144 1743.89,468.995 1744.35,472.876 1744.81,476.784 1745.27,480.717 1745.73,484.673 1746.19,488.649 1746.65,492.643 1747.1,496.653 1747.56,500.677 1748.02,504.713 1748.48,508.757 1748.94,512.808 1749.4,516.863 1749.86,520.921 1750.31,524.979 1750.77,529.035 1751.23,533.086 1751.69,537.131 1752.15,541.167 1752.61,545.193 1753.07,549.206 1753.52,553.205 1753.98,557.187 1754.44,561.15 1754.9,565.094 1755.36,569.015 1755.82,572.913 1756.28,576.786 1756.73,580.632 1757.19,584.449 1757.65,588.237 1758.11,591.994 1758.57,595.718 1759.03,599.408 1759.49,603.064 1759.94,606.684 1760.4,610.267 1760.86,613.812 1761.32,617.319 1761.78,620.786 1762.24,624.214 1762.7,627.601 1763.15,630.946 1763.61,634.25 1764.07,637.513 1764.53,640.732 1764.99,643.91 1765.45,647.045 1765.91,650.137 1766.36,653.187 1766.82,656.194 1767.28,659.158 1767.74,662.08 1768.2,664.96 1768.66,667.798 1769.12,670.595 1769.57,673.351 1770.03,676.066 1770.49,678.741 1770.95,681.376 1771.41,683.972 1771.87,686.53 1772.33,689.05 1772.78,691.533 1773.24,693.979 1773.7,696.389 1774.16,698.764 1774.62,701.105 1775.08,703.411 1775.54,705.685 1775.99,707.926 1776.45,710.135 1776.91,712.313 1777.37,714.461 1777.83,716.579 1778.29,718.668 1778.75,720.728 1779.2,722.76 1779.66,724.765 1780.12,726.742 1780.58,728.693 1781.04,730.618 1781.5,732.516 1781.96,734.389 1782.41,736.237 1782.87,738.06 1783.33,739.857 1783.79,741.63 1784.25,743.377 1784.71,745.1 1785.17,746.798 1785.62,748.471 1786.08,750.118 1786.54,751.74 1787,753.336 1787.46,754.906 1787.92,756.449 1788.38,757.965 1788.83,759.454 1789.29,760.914 1789.75,762.345 1790.21,763.747 1790.67,765.119 1791.13,766.459 1791.59,767.768 1792.04,769.044 1792.5,770.287 1792.96,771.495 1793.42,772.668 1793.88,773.805 1794.34,774.905 1794.8,775.967 1795.25,776.989 1795.71,777.972 1796.17,778.914 1796.63,779.814 1797.09,780.671 1797.55,781.484 1798.01,782.253 1798.46,782.977 1798.92,783.654 1799.38,784.285 1799.84,784.867 1800.3,785.401 1800.76,785.887 1801.22,786.323 1801.67,786.709 1802.13,787.044 1802.59,787.329 1803.05,787.563 1803.51,787.745 1803.97,787.877 1804.43,787.957 1804.88,787.986 1805.34,787.965 1805.8,787.893 1806.26,787.771 1806.72,787.599 1807.18,787.379 1807.64,787.11 1808.09,786.795 1808.55,786.433 1809.01,786.026 1809.47,785.576 1809.93,785.082 1810.39,784.548 1810.85,783.975 1811.3,783.364 1811.76,782.717 1812.22,782.036 1812.68,781.323 1813.14,780.58 1813.6,779.81 1814.06,779.015 1814.51,778.197 1814.97,777.359 1815.43,776.504 1815.89,775.634 1816.35,774.751 1816.81,773.86 1817.27,772.962 1817.72,772.062 1818.18,771.161 1818.64,770.262 1819.1,769.37 1819.56,768.487 1820.02,767.617 1820.48,766.761 1820.93,765.925 1821.39,765.11 1821.85,764.321 1822.31,763.559 1822.77,762.829 1823.23,762.134 1823.69,761.475 1824.14,760.858 1824.6,760.283 1825.06,759.755 1825.52,759.276 1825.98,758.848 1826.44,758.475 1826.9,758.158 1827.35,757.9 1827.81,757.704 1828.27,757.571 1828.73,757.503 1829.19,757.503 1829.65,757.571 1830.11,757.71 1830.56,757.92 1831.02,758.203 1831.48,758.56 1831.94,758.992 1832.4,759.498 1832.86,760.081 1833.32,760.739 1833.77,761.473 1834.23,762.282 1834.69,763.167 1835.15,764.127 1835.61,765.161 1836.07,766.267 1836.53,767.445 1836.98,768.693 1837.44,770.01 1837.9,771.394 1838.36,772.842 1838.82,774.353 1839.28,775.923 1839.74,777.551 1840.19,779.233 1840.65,780.966 1841.11,782.748 1841.57,784.574 1842.03,786.441 1842.49,788.346 1842.95,790.284 1843.4,792.251 1843.86,794.244 1844.32,796.257 1844.78,798.286 1845.24,800.326 1845.7,802.374 1846.16,804.424 1846.61,806.47 1847.07,808.509 1847.53,810.535 1847.99,812.542 1848.45,814.526 1848.91,816.481 1849.37,818.403 1849.83,820.285 1850.28,822.122 1850.74,823.91 1851.2,825.642 1851.66,827.314 1852.12,828.921 1852.58,830.456 1853.04,831.915 1853.49,833.293 1853.95,834.585 1854.41,835.786 1854.87,836.891 1855.33,837.896 1855.79,838.796 1856.25,839.586 1856.7,840.262 1857.16,840.82 1857.62,841.256 1858.08,841.567 1858.54,841.748 1859,841.796 1859.46,841.708 1859.91,841.48 1860.37,841.111 1860.83,840.596 1861.29,839.934 1861.75,839.123 1862.21,838.16 1862.67,837.043 1863.12,835.771 1863.58,834.344 1864.04,832.758 1864.5,831.015 1864.96,829.112 1865.42,827.05 1865.88,824.829 1866.33,822.448 1866.79,819.908 1867.25,817.21 1867.71,814.355 1868.17,811.342 1868.63,808.175 1869.09,804.853 1869.54,801.38 1870,797.756 1870.46,793.985 1870.92,790.068 1871.38,786.007 1871.84,781.807 1872.3,777.47 1872.75,772.998 1873.21,768.396 1873.67,763.667 1874.13,758.814 1874.59,753.841 1875.05,748.753 1875.51,743.554 1875.96,738.247 1876.42,732.837 1876.88,727.33 1877.34,721.728 1877.8,716.038 1878.26,710.263 1878.72,704.41 1879.17,698.482 1879.63,692.485 1880.09,686.424 1880.55,680.304 1881.01,674.13 1881.47,667.908 1881.93,661.643 1882.38,655.339 1882.84,649.003 1883.3,642.638 1883.76,636.252 1884.22,629.848 1884.68,623.432 1885.14,617.009 1885.59,610.584 1886.05,604.162 1886.51,597.748 1886.97,591.346 1887.43,584.963 1887.89,578.601 1888.35,572.266 1888.8,565.963 1889.26,559.695 1889.72,553.468 1890.18,547.284 1890.64,541.149 1891.1,535.066 1891.56,529.038 1892.01,523.071 1892.47,517.166 1892.93,511.328 1893.39,505.56 1893.85,499.865 1894.31,494.245 1894.77,488.704 1895.22,483.244 1895.68,477.869 1896.14,472.579 1896.6,467.378 1897.06,462.267 1897.52,457.248 1897.98,452.324 1898.43,447.495 1898.89,442.763 1899.35,438.13 1899.81,433.597 1900.27,429.164 1900.73,424.832 1901.19,420.603 1901.64,416.476 1902.1,412.453 1902.56,408.534 1903.02,404.718 1903.48,401.006 1903.94,397.397 1904.4,393.893 1904.85,390.492 1905.31,387.193 1905.77,383.997 1906.23,380.903 1906.69,377.91 1907.15,375.017 1907.61,372.224 1908.06,369.528 1908.52,366.93 1908.98,364.429 1909.44,362.022 1909.9,359.708 1910.36,357.487 1910.82,355.357 1911.27,353.316 1911.73,351.363 1912.19,349.496 1912.65,347.713 1913.11,346.013 1913.57,344.395 1914.03,342.855 1914.48,341.394 1914.94,340.008 1915.4,338.696 1915.86,337.456 1916.32,336.286 1916.78,335.185 1917.24,334.15 1917.69,333.18 1918.15,332.272 1918.61,331.425 1919.07,330.637 1919.53,329.906 1919.99,329.229 1920.45,328.606 1920.9,328.035 1921.36,327.512 1921.82,327.037 1922.28,326.608 1922.74,326.223 1923.2,325.88 1923.66,325.577 1924.11,325.313 1924.57,325.086 1925.03,324.894 1925.49,324.735 1925.95,324.609 1926.41,324.512 1926.87,324.445 1927.32,324.404 1927.78,324.389 1928.24,324.398 1928.7,324.43 1929.16,324.484 1929.62,324.557 1930.08,324.648 1930.53,324.757 1930.99,324.882 1931.45,325.022 1931.91,325.175 1932.37,325.34 1932.83,325.517 1933.29,325.704 1933.74,325.9 1934.2,326.105 1934.66,326.316 1935.12,326.534 1935.58,326.757 1936.04,326.984 1936.5,327.215 1936.95,327.449 1937.41,327.686 1937.87,327.923 1938.33,328.162 1938.79,328.401 1939.25,328.639 1939.71,328.877 1940.16,329.113 1940.62,329.347 1941.08,329.579 1941.54,329.808 1942,330.035 1942.46,330.258 1942.92,330.477 1943.37,330.693 1943.83,330.905 1944.29,331.112 1944.75,331.316 1945.21,331.515 1945.67,331.709 1946.13,331.899 1946.58,332.085 1947.04,332.267 1947.5,332.444 1947.96,332.617 1948.42,332.786 1948.88,332.951 1949.34,333.113 1949.79,333.271 1950.25,333.426 1950.71,333.578 1951.17,333.728 1951.63,333.875 1952.09,334.021 1952.55,334.165 1953,334.308 1953.46,334.45 1953.92,334.592 1954.38,334.734 1954.84,334.877 1955.3,335.02 1955.76,335.166 1956.21,335.313 1956.67,335.463 1957.13,335.616 1957.59,335.772 1958.05,335.932 1958.51,336.097 1958.97,336.266 1959.42,336.441 1959.88,336.622 1960.34,336.81 1960.8,337.004 1961.26,337.205 1961.72,337.414 1962.18,337.631 1962.63,337.857 1963.09,338.092 1963.55,338.336 1964.01,338.589 1964.47,338.852 1964.93,339.126 1965.39,339.41 1965.84,339.705 1966.3,340.011 1966.76,340.329 1967.22,340.657 1967.68,340.997 1968.14,341.349 1968.6,341.712 1969.05,342.088 1969.51,342.475 1969.97,342.873 1970.43,343.284 1970.89,343.706 1971.35,344.14 1971.81,344.585 1972.26,345.042 1972.72,345.51 1973.18,345.988 1973.64,346.478 1974.1,346.978 1974.56,347.488 1975.02,348.009 1975.47,348.538 1975.93,349.078 1976.39,349.626 1976.85,350.183 1977.31,350.748 1977.77,351.321 1978.23,351.902 1978.68,352.489 1979.14,353.084 1979.6,353.685 1980.06,354.292 1980.52,354.905 1980.98,355.523 1981.44,356.146 1981.89,356.774 1982.35,357.406 1982.81,358.042 1983.27,358.683 1983.73,359.327 1984.19,359.974 1984.65,360.625 1985.1,361.28 1985.56,361.937 1986.02,362.598 1986.48,363.262 1986.94,363.929 1987.4,364.6 1987.86,365.275 1988.31,365.953 1988.77,366.636 1989.23,367.324 1989.69,368.017 1990.15,368.715 1990.61,369.42 1991.07,370.132 1991.52,370.852 1991.98,371.581 1992.44,372.319 1992.9,373.068 1993.36,373.828 1993.82,374.601 1994.28,375.389 1994.73,376.192 1995.19,377.012 1995.65,377.85 1996.11,378.709 1996.57,379.589 1997.03,380.492 1997.49,381.421 1997.94,382.377 1998.4,383.363 1998.86,384.38 1999.32,385.43 1999.78,386.515 2000.24,387.639 2000.7,388.803 2001.15,390.01 2001.61,391.261 2002.07,392.561 2002.53,393.91 2002.99,395.312 2003.45,396.77 2003.91,398.286 2004.36,399.862 2004.82,401.502 2005.28,403.208 2005.74,404.983 2006.2,406.829 2006.66,408.75 2007.12,410.748 2007.57,412.825 2008.03,414.985 2008.49,417.23 2008.95,419.562 2009.41,421.985 2009.87,424.5 2010.33,427.11 2010.78,429.818 2011.24,432.625 2011.7,435.534 2012.16,438.547 2012.62,441.666 2013.08,444.892 2013.54,448.228 2013.99,451.676 2014.45,455.235 2014.91,458.909 2015.37,462.698 2015.83,466.604 2016.29,470.626 2016.75,474.766 2017.2,479.025 2017.66,483.402 2018.12,487.899 2018.58,492.514 2019.04,497.249 2019.5,502.102 2019.96,507.072 2020.41,512.16 2020.87,517.363 2021.33,522.681 2021.79,528.113 2022.25,533.656 2022.71,539.308 2023.17,545.069 2023.62,550.934 2024.08,556.902 2024.54,562.97 2025,569.135 2025.46,575.393 2025.92,581.741 2026.38,588.176 2026.83,594.693 2027.29,601.288 2027.75,607.957 2028.21,614.696 2028.67,621.499 2029.13,628.362 2029.59,635.28 2030.04,642.247 2030.5,649.257 2030.96,656.306 2031.42,663.387 2031.88,670.494 2032.34,677.622 2032.8,684.763 2033.25,691.912 2033.71,699.062 2034.17,706.206 2034.63,713.338 2035.09,720.451 2035.55,727.538 2036.01,734.593 2036.46,741.607 2036.92,748.575 2037.38,755.489 2037.84,762.343 2038.3,769.128 2038.76,775.839 2039.22,782.468 2039.67,789.009 2040.13,795.454 2040.59,801.797 2041.05,808.032 2041.51,814.15 2041.97,820.147 2042.43,826.016 2042.88,831.751 2043.34,837.345 2043.8,842.793 2044.26,848.089 2044.72,853.227 2045.18,858.203 2045.64,863.011 2046.09,867.647 2046.55,872.106 2047.01,876.383 2047.47,880.475 2047.93,884.377 2048.39,888.087 2048.85,891.601 2049.3,894.917 2049.76,898.03 2050.22,900.94 2050.68,903.645 2051.14,906.142 2051.6,908.431 2052.06,910.51 2052.51,912.379 2052.97,914.037 2053.43,915.485 2053.89,916.723 2054.35,917.752 2054.81,918.573 2055.27,919.187 2055.72,919.597 2056.18,919.804 2056.64,919.81 2057.1,919.619 2057.56,919.234 2058.02,918.658 2058.48,917.896 2058.93,916.95 2059.39,915.826 2059.85,914.528 2060.31,913.062 2060.77,911.431 2061.23,909.643 2061.69,907.703 2062.14,905.617 2062.6,903.39 2063.06,901.03 2063.52,898.544 2063.98,895.937 2064.44,893.218 2064.9,890.393 2065.35,887.469 2065.81,884.455 2066.27,881.357 2066.73,878.184 2067.19,874.942 2067.65,871.641 2068.11,868.287 2068.56,864.889 2069.02,861.455 2069.48,857.991 2069.94,854.507 2070.4,851.011 2070.86,847.508 2071.32,844.009 2071.77,840.519 2072.23,837.047 2072.69,833.599 2073.15,830.184 2073.61,826.808 2074.07,823.477 2074.53,820.199 2074.98,816.981 2075.44,813.827 2075.9,810.745 2076.36,807.74 2076.82,804.817 2077.28,801.982 2077.74,799.24 2078.19,796.595 2078.65,794.053 2079.11,791.616 2079.57,789.288 2080.03,787.074 2080.49,784.976 2080.95,782.997 2081.4,781.139 2081.86,779.404 2082.32,777.795 2082.78,776.312 2083.24,774.957 2083.7,773.73 2084.16,772.632 2084.61,771.662 2085.07,770.821 2085.53,770.107 2085.99,769.52 2086.45,769.058 2086.91,768.719 2087.37,768.503 2087.82,768.405 2088.28,768.424 2088.74,768.557 2089.2,768.8 2089.66,769.151 2090.12,769.605 2090.58,770.158 2091.03,770.807 2091.49,771.547 2091.95,772.372 2092.41,773.28 2092.87,774.263 2093.33,775.318 2093.79,776.438 2094.24,777.619 2094.7,778.855 2095.16,780.14 2095.62,781.468 2096.08,782.833 2096.54,784.23 2097,785.653 2097.45,787.095 2097.91,788.55 2098.37,790.014 2098.83,791.478 2099.29,792.939 2099.75,794.389 2100.21,795.823 2100.66,797.235 2101.12,798.62 2101.58,799.971 2102.04,801.285 2102.5,802.554 2102.96,803.776 2103.42,804.943 2103.87,806.052 2104.33,807.098 2104.79,808.076 2105.25,808.983 2105.71,809.814 2106.17,810.566 2106.63,811.235 2107.08,811.818 2107.54,812.312 2108,812.714 2108.46,813.021 2108.92,813.232 2109.38,813.344 2109.84,813.355 2110.29,813.264 2110.75,813.07 2111.21,812.772 2111.67,812.369 2112.13,811.86 2112.59,811.246 2113.05,810.526 2113.5,809.702 2113.96,808.772 2114.42,807.739 2114.88,806.603 2115.34,805.365 2115.8,804.028 2116.26,802.592 2116.71,801.059 2117.17,799.433 2117.63,797.714 2118.09,795.906 2118.55,794.011 2119.01,792.032 2119.47,789.971 2119.92,787.833 2120.38,785.619 2120.84,783.334 2121.3,780.98 2121.76,778.562 2122.22,776.082 2122.68,773.545 2123.13,770.953 2123.59,768.311 2124.05,765.623 2124.51,762.891 2124.97,760.12 2125.43,757.314 2125.89,754.475 2126.34,751.609 2126.8,748.717 2127.26,745.804 2127.72,742.874 2128.18,739.929 2128.64,736.972 2129.1,734.008 2129.55,731.038 2130.01,728.066 2130.47,725.095 2130.93,722.128 2131.39,719.165 2131.85,716.211 2132.31,713.268 2132.76,710.336 2133.22,707.419 2133.68,704.517 2134.14,701.633 2134.6,698.767 2135.06,695.921 2135.52,693.095 2135.97,690.291 2136.43,687.509 2136.89,684.75 2137.35,682.012 2137.81,679.298 2138.27,676.606 2138.73,673.935 2139.18,671.287 2139.64,668.659 2140.1,666.051 2140.56,663.462 2141.02,660.891 2141.48,658.337 2141.94,655.797 2142.39,653.271 2142.85,650.756 2143.31,648.251 2143.77,645.754 2144.23,643.262 2144.69,640.774 2145.15,638.287 2145.6,635.799 2146.06,633.308 2146.52,630.81 2146.98,628.304 2147.44,625.786 2147.9,623.255 2148.36,620.708 2148.81,618.142 2149.27,615.554 2149.73,612.942 2150.19,610.303 2150.65,607.635 2151.11,604.935 2151.57,602.201 2152.02,599.431 2152.48,596.621 2152.94,593.77 2153.4,590.876 2153.86,587.937 2154.32,584.95 2154.78,581.915 2155.23,578.828 2155.69,575.689 2156.15,572.496 2156.61,569.249 2157.07,565.944 2157.53,562.583 2157.99,559.164 2158.44,555.685 2158.9,552.148 2159.36,548.55 2159.82,544.893 2160.28,541.176 2160.74,537.4 2161.2,533.564 2161.65,529.67 2162.11,525.717 2162.57,521.707 2163.03,517.641 2163.49,513.521 2163.95,509.346 2164.41,505.12 2164.86,500.844 2165.32,496.519 2165.78,492.148 2166.24,487.734 2166.7,483.277 2167.16,478.781 2167.62,474.249 2168.07,469.684 2168.53,465.087 2168.99,460.463 2169.45,455.814 2169.91,451.144 2170.37,446.456 2170.83,441.753 2171.28,437.039 2171.74,432.318 2172.2,427.593 2172.66,422.869 2173.12,418.148 2173.58,413.434 2174.04,408.732 2174.49,404.046 2174.95,399.379 2175.41,394.734 2175.87,390.117 2176.33,385.531 2176.79,380.98 2177.25,376.468 2177.7,371.998 2178.16,367.574 2178.62,363.201 2179.08,358.881 2179.54,354.618 2180,350.416 2180.46,346.279 2180.91,342.209 2181.37,338.21 2181.83,334.284 2182.29,330.436 2182.75,326.668 2183.21,322.982 2183.67,319.382 2184.12,315.869 2184.58,312.447 2185.04,309.118 2185.5,305.883 2185.96,302.745 2186.42,299.706 2186.88,296.767 2187.33,293.929 2187.79,291.195 2188.25,288.565 2188.71,286.041 2189.17,283.623 2189.63,281.312 2190.09,279.109 2190.54,277.014 2191,275.027 2191.46,273.149 2191.92,271.379 2192.38,269.718 2192.84,268.164 2193.3,266.719 2193.76,265.38 2194.21,264.147 2194.67,263.02 2195.13,261.996 2195.59,261.077 2196.05,260.259 2196.51,259.541 2196.97,258.923 2197.42,258.402 2197.88,257.977 2198.34,257.646 2198.8,257.407 2199.26,257.258 2199.72,257.198 2200.18,257.223 2200.63,257.333 2201.09,257.524 2201.55,257.794 2202.01,258.142 2202.47,258.564 2202.93,259.058 2203.39,259.623 2203.84,260.255 2204.3,260.951 2204.76,261.711 2205.22,262.53 2205.68,263.406 2206.14,264.338 2206.6,265.322 2207.05,266.356 2207.51,267.438 2207.97,268.565 2208.43,269.734 2208.89,270.944 2209.35,272.192 2209.81,273.476 2210.26,274.793 2210.72,276.142 2211.18,277.52 2211.64,278.925 2212.1,280.355 2212.56,281.808 2213.02,283.282 2213.47,284.775 2213.93,286.286 2214.39,287.812 2214.85,289.352 2215.31,290.905 2215.77,292.468 2216.23,294.04 2216.68,295.621 2217.14,297.207 2217.6,298.799 2218.06,300.395 2218.52,301.993 2218.98,303.593 2219.44,305.193 2219.89,306.793 2220.35,308.392 2220.81,309.988 2221.27,311.58 2221.73,313.169 2222.19,314.753 2222.65,316.332 2223.1,317.904 2223.56,319.47 2224.02,321.029 2224.48,322.58 2224.94,324.123 2225.4,325.657 2225.86,327.182 2226.31,328.697 2226.77,330.203 2227.23,331.699 2227.69,333.185 2228.15,334.66 2228.61,336.124 2229.07,337.577 2229.52,339.019 2229.98,340.45 2230.44,341.869 2230.9,343.277 2231.36,344.673 2231.82,346.057 2232.28,347.43 2232.73,348.79 2233.19,350.139 2233.65,351.476 2234.11,352.8 2234.57,354.113 2235.03,355.414 2235.49,356.704 2235.94,357.981 2236.4,359.247 2236.86,360.501 2237.32,361.744 2237.78,362.975 2238.24,364.195 2238.7,365.404 2239.15,366.602 2239.61,367.79 2240.07,368.967 2240.53,370.134 2240.99,371.291 2241.45,372.438 2241.91,373.576 2242.36,374.706 2242.82,375.827 2243.28,376.939 2243.74,378.045 2244.2,379.143 2244.66,380.235 2245.12,381.32 2245.57,382.401 2246.03,383.476 2246.49,384.548 2246.95,385.616 2247.41,386.682 2247.87,387.746 2248.33,388.809 2248.78,389.872 2249.24,390.935 2249.7,392.001 2250.16,393.07 2250.62,394.143 2251.08,395.22 2251.54,396.304 2251.99,397.395 2252.45,398.495 2252.91,399.605 2253.37,400.726 2253.83,401.86 2254.29,403.007 2254.75,404.17 2255.2,405.349 2255.66,406.547 2256.12,407.764 2256.58,409.003 2257.04,410.264 2257.5,411.55 2257.96,412.861 2258.41,414.2 2258.87,415.568 2259.33,416.967 2259.79,418.399 2260.25,419.864 2260.71,421.365 2261.17,422.903 2261.62,424.48 2262.08,426.097 2262.54,427.757 2263,429.46 2263.46,431.208 2263.92,433.002 2264.38,434.845 2264.83,436.737 2265.29,438.681 2265.75,440.676 2266.21,442.725 2266.67,444.829 2267.13,446.989 2267.59,449.206 2268.04,451.481 2268.5,453.815 2268.96,456.21 2269.42,458.665 2269.88,461.182 2270.34,463.762 2270.8,466.405 2271.25,469.111 2271.71,471.882 2272.17,474.717 2272.63,477.617 2273.09,480.581 2273.55,483.611 2274.01,486.705 2274.46,489.864 2274.92,493.088 2275.38,496.376 2275.84,499.728 2276.3,503.143 2276.76,506.62 2277.22,510.16 2277.67,513.761 2278.13,517.421 2278.59,521.141 2279.05,524.919 2279.51,528.754 2279.97,532.644 2280.43,536.588 2280.88,540.584 2281.34,544.631 2281.8,548.728 2282.26,552.872 2282.72,557.061 2283.18,561.294 2283.64,565.568 2284.09,569.882 2284.55,574.233 2285.01,578.619 2285.47,583.038 2285.93,587.488 2286.39,591.965 2286.85,596.468 2287.3,600.994 2287.76,605.541 2288.22,610.105 2288.68,614.686 2289.14,619.278 2289.6,623.881 2290.06,628.492 2290.51,633.107 2290.97,637.725 2291.43,642.341 2291.89,646.955 2292.35,651.563 2292.81,656.162 2293.27,660.75 2293.72,665.324 2294.18,669.882 2294.64,674.421 2295.1,678.938 2295.56,683.432 2296.02,687.898 2296.48,692.336 2296.93,696.743 2297.39,701.117 2297.85,705.454 2298.31,709.754 2298.77,714.013 2299.23,718.231 2299.69,722.404 2300.14,726.531 2300.6,730.61 2301.06,734.64 2301.52,738.618 2301.98,742.543 2302.44,746.414 2302.9,750.228 2303.35,753.985 2303.81,757.684 2304.27,761.322 2304.73,764.899 2305.19,768.414 2305.65,771.865 2306.11,775.253 2306.56,778.575 2307.02,781.831 2307.48,785.021 2307.94,788.144 2308.4,791.199 2308.86,794.187 2309.32,797.105 2309.77,799.955 2310.23,802.736 2310.69,805.447 2311.15,808.089 2311.61,810.661 2312.07,813.164 2312.53,815.597 2312.98,817.96 2313.44,820.255 2313.9,822.48 2314.36,824.636 2314.82,826.723 2315.28,828.742 2315.74,830.693 2316.19,832.576 2316.65,834.392 2317.11,836.141 2317.57,837.824 2318.03,839.44 2318.49,840.991 2318.95,842.476 2319.4,843.897 2319.86,845.254 2320.32,846.548 2320.78,847.778 2321.24,848.946 2321.7,850.052 2322.16,851.096 2322.61,852.08 2323.07,853.003 2323.53,853.867 2323.99,854.671 2324.45,855.416 2324.91,856.103 2325.37,856.733 2325.82,857.305 2326.28,857.82 2326.74,858.279 2327.2,858.682 2327.66,859.029 2328.12,859.322 2328.58,859.559 2329.03,859.743 2329.49,859.873 2329.95,859.95 2330.41,859.973 2330.87,859.945 2331.33,859.863 2331.79,859.73 2332.24,859.546 2332.7,859.31 2333.16,859.024 2333.62,858.687 2334.08,858.3 2334.54,857.863 2335,857.377 2335.45,856.841 2335.91,856.257 2336.37,855.625 2336.83,854.944 2337.29,854.216 2337.75,853.44 2338.21,852.618 2338.66,851.749 2339.12,850.834 2339.58,849.872 2340.04,848.866 2340.5,847.814 2340.96,846.719 2341.42,845.578 2341.87,844.395 2342.33,843.168 2342.79,841.899 2343.25,840.587 2343.71,839.234 2344.17,837.84 2344.63,836.406 2345.08,834.931 2345.54,833.418 2346,831.865 2346.46,830.275 2346.92,828.648 2347.38,826.983 2347.84,825.283 2348.29,823.548 2348.75,821.778 2349.21,819.974 2349.67,818.137 2350.13,816.268 2350.59,814.368 2351.05,812.437 2351.5,810.476 2351.96,808.486 2352.42,806.468 2352.88,804.423 2353.34,802.351 2353.8,800.254 2354.26,798.132 2354.71,795.986 2355.17,793.817 2355.63,791.626 2356.09,789.414 2356.55,787.182 2357.01,784.931 2357.47,782.661 2357.92,780.374 2358.38,778.07 2358.84,775.751 2359.3,773.416 2359.76,771.068 2360.22,768.707 2360.68,766.333 2361.13,763.949 2361.59,761.554 2362.05,759.149 2362.51,756.736 2362.97,754.315 2363.43,751.887 2363.89,749.452 2364.34,747.013 2364.8,744.568 2365.26,742.12 2365.72,739.669 2366.18,737.216 2366.64,734.761 2367.1,732.306 2367.55,729.85 2368.01,727.395 2368.47,724.942 2368.93,722.49 2369.39,720.041 2369.85,717.596 2370.31,715.154 2370.76,712.717 2371.22,710.286 2371.68,707.86 2372.14,705.44 2372.6,703.028 2373.06,700.623 2373.52,698.226 2373.97,695.838 2374.43,693.459 2374.89,691.09 2375.35,688.731 2375.81,686.382 2376.27,684.045 2376.73,681.719 2377.18,679.405 2377.64,677.104 2378.1,674.815 2378.56,672.54 2379.02,670.279 2379.48,668.032 2379.94,665.799 2380.39,663.581 2380.85,661.378 2381.31,659.191 2381.77,657.019 2382.23,654.864 2382.69,652.725 2383.15,650.603 2383.6,648.499 2384.06,646.411 2384.52,644.341 2384.98,642.29 2385.44,640.256 2385.9,638.24 2386.36,636.243 2386.81,634.264 2387.27,632.305 2387.73,630.364 2388.19,628.442 2388.65,626.539 2389.11,624.656 2389.57,622.792 2390.02,620.947 2390.48,619.121 2390.94,617.314 2391.4,615.527 2391.86,613.758 2392.32,612.009 2392.78,610.278 2393.23,608.566 2393.69,606.872 2394.15,605.196 2394.61,603.538 2395.07,601.898 2395.53,600.274 2395.99,598.667 2396.44,597.076 2396.9,595.501 2397.36,593.941 2397.82,592.396 2398.28,590.864 2398.74,589.346 2399.2,587.84 2399.65,586.346 2400.11,584.862 2400.57,583.389 2401.03,581.925 2401.49,580.468 2401.95,579.019 2402.41,577.576 2402.86,576.137 2403.32,574.703 2403.78,573.27 2404.24,571.839 2404.7,570.408 2405.16,568.975 2405.62,567.539 2406.07,566.099 2406.53,564.654 2406.99,563.201 2407.45,561.739 2407.91,560.266 2408.37,558.782 2408.83,557.284 2409.28,555.77 2409.74,554.239 2410.2,552.69 2410.66,551.119 2411.12,549.527 2411.58,547.91 2412.04,546.267 2412.49,544.597 2412.95,542.897 2413.41,541.166 2413.87,539.402 2414.33,537.603 2414.79,535.767 2415.25,533.894 2415.7,531.98 2416.16,530.024 2416.62,528.025 2417.08,525.981 2417.54,523.89 2418,521.752 2418.46,519.564 2418.91,517.324 2419.37,515.033 2419.83,512.687 2420.29,510.287 2420.75,507.831 2421.21,505.317 2421.67,502.746 2422.12,500.115 2422.58,497.424 2423.04,494.673 2423.5,491.86 2423.96,488.985 2424.42,486.048 2424.88,483.048 2425.33,479.985 2425.79,476.859 2426.25,473.67 2426.71,470.418 2427.17,467.103 2427.63,463.726 2428.09,460.286 2428.54,456.786 2429,453.224 2429.46,449.603 2429.92,445.923 2430.38,442.186 2430.84,438.392 2431.3,434.542 2431.75,430.639 2432.21,426.684 2432.67,422.679 2433.13,418.625 2433.59,414.525 2434.05,410.381 2434.51,406.194 2434.96,401.968 2435.42,397.705 2435.88,393.407 2436.34,389.077 2436.8,384.718 2437.26,380.332 2437.72,375.924 2438.17,371.495 2438.63,367.049 2439.09,362.59 2439.55,358.121 2440.01,353.645 2440.47,349.165 2440.93,344.686 2441.38,340.211 2441.84,335.744 2442.3,331.288 2442.76,326.848 2443.22,322.427 2443.68,318.029 2444.14,313.658 2444.59,309.318 2445.05,305.013 2445.51,300.746 2445.97,296.523 2446.43,292.346 2446.89,288.22 2447.35,284.149 2447.8,280.136 2448.26,276.186 2448.72,272.302 2449.18,268.488 2449.64,264.748 2450.1,261.086 2450.56,257.504 2451.01,254.008 2451.47,250.6 2451.93,247.283 2452.39,244.061 2452.85,240.938 2453.31,237.915 2453.77,234.997 2454.22,232.186 2454.68,229.486 2455.14,226.898 2455.6,224.425 2456.06,222.07 2456.52,219.835 2456.98,217.722 2457.43,215.733 2457.89,213.87 2458.35,212.136 2458.81,210.53 2459.27,209.056 2459.73,207.713 2460.19,206.504 2460.64,205.429 2461.1,204.489 2461.56,203.685 2462.02,203.017 2462.48,202.486 2462.94,202.091 2463.4,201.833 2463.85,201.712 2464.31,201.727 2464.77,201.878 2465.23,202.164 2465.69,202.584 2466.15,203.137 2466.61,203.823 2467.06,204.641 2467.52,205.587 2467.98,206.662 2468.44,207.863 2468.9,209.189 2469.36,210.637 2469.82,212.206 2470.27,213.893 2470.73,215.696 2471.19,217.613 2471.65,219.64 2472.11,221.775 2472.57,224.015 2473.03,226.358 2473.48,228.8 2473.94,231.338 2474.4,233.969 2474.86,236.689 2475.32,239.496 2475.78,242.386 2476.24,245.355 2476.69,248.4 2477.15,251.517 2477.61,254.702 2478.07,257.953 2478.53,261.264 2478.99,264.633 2479.45,268.055 2479.9,271.527 2480.36,275.045 2480.82,278.605 2481.28,282.204 2481.74,285.837 2482.2,289.501 2482.66,293.192 2483.11,296.906 2483.57,300.64 2484.03,304.39 2484.49,308.152 2484.95,311.923 2485.41,315.7 2485.87,319.478 2486.32,323.254 2486.78,327.026 2487.24,330.79 2487.7,334.542 2488.16,338.28 2488.62,342 2489.08,345.701 2489.53,349.378 2489.99,353.029 2490.45,356.652 2490.91,360.244 2491.37,363.803 2491.83,367.326 2492.29,370.811 2492.74,374.257 2493.2,377.66 2493.66,381.02 2494.12,384.334 2494.58,387.601 2495.04,390.819 2495.5,393.988 2495.95,397.105 2496.41,400.17 2496.87,403.182 2497.33,406.139 2497.79,409.041 2498.25,411.887 2498.71,414.677 2499.16,417.41 2499.62,420.086 2500.08,422.705 2500.54,425.266 2501,427.77 2501.46,430.217 2501.92,432.606 2502.37,434.939 2502.83,437.216 2503.29,439.436 2503.75,441.601 2504.21,443.712 2504.67,445.769 2505.13,447.772 2505.58,449.724 2506.04,451.625 2506.5,453.475 2506.96,455.277 2507.42,457.031 2507.88,458.739 2508.34,460.402 2508.79,462.021 2509.25,463.598 2509.71,465.134 2510.17,466.631 2510.63,468.091 2511.09,469.514 2511.55,470.902 2512,472.258 2512.46,473.583 2512.92,474.878 2513.38,476.145 2513.84,477.386 2514.3,478.602 2514.76,479.796 2515.21,480.969 2515.67,482.123 2516.13,483.259 2516.59,484.379 2517.05,485.485 2517.51,486.579 2517.97,487.661 2518.42,488.735 2518.88,489.801 2519.34,490.861 2519.8,491.917 2520.26,492.97 2520.72,494.022 2521.18,495.074 2521.63,496.128 2522.09,497.185 2522.55,498.247 2523.01,499.315 2523.47,500.39 2523.93,501.474 2524.39,502.568 2524.84,503.673 2525.3,504.791 2525.76,505.923 2526.22,507.069 2526.68,508.232 2527.14,509.411 2527.6,510.609 2528.05,511.826 2528.51,513.064 2528.97,514.323 2529.43,515.604 2529.89,516.908 2530.35,518.236 2530.81,519.59 2531.26,520.969 2531.72,522.375 2532.18,523.809 2532.64,525.271 2533.1,526.763 2533.56,528.284 2534.02,529.837 2534.47,531.421 2534.93,533.037 2535.39,534.687 2535.85,536.371 2536.31,538.089 2536.77,539.843 2537.23,541.633 2537.69,543.46 2538.14,545.324 2538.6,547.227 2539.06,549.169 2539.52,551.151 2539.98,553.174 2540.44,555.238 2540.9,557.344 2541.35,559.492 2541.81,561.685 2542.27,563.922 2542.73,566.204 2543.19,568.531 2543.65,570.905 2544.11,573.327 2544.56,575.796 2545.02,578.315 2545.48,580.882 2545.94,583.5 2546.4,586.168 2546.86,588.888 2547.32,591.66 2547.77,594.485 2548.23,597.363 2548.69,600.295 2549.15,603.282 2549.61,606.324 2550.07,609.421 2550.53,612.573 2550.98,615.783 2551.44,619.049 2551.9,622.372 2552.36,625.752 2552.82,629.189 2553.28,632.684 2553.74,636.237 2554.19,639.848 2554.65,643.516 2555.11,647.241 2555.57,651.024 2556.03,654.864 2556.49,658.76 2556.95,662.712 2557.4,666.72 2557.86,670.783 2558.32,674.9 2558.78,679.071 2559.24,683.293 2559.7,687.568 2560.16,691.892 2560.61,696.265 2561.07,700.686 2561.53,705.153 2561.99,709.665 2562.45,714.219 2562.91,718.815 2563.37,723.45 2563.82,728.121 2564.28,732.828 2564.74,737.568 2565.2,742.337 2565.66,747.135 2566.12,751.958 2566.58,756.804 2567.03,761.669 2567.49,766.552 2567.95,771.448 2568.41,776.356 2568.87,781.271 2569.33,786.19 2569.79,791.111 2570.24,796.03 2570.7,800.942 2571.16,805.846 2571.62,810.737 2572.08,815.611 2572.54,820.465 2573,825.294 2573.45,830.096 2573.91,834.866 2574.37,839.601 2574.83,844.295 2575.29,848.947 2575.75,853.551 2576.21,858.104 2576.66,862.602 2577.12,867.041 2577.58,871.417 2578.04,875.726 2578.5,879.965 2578.96,884.129 2579.42,888.216 2579.87,892.221 2580.33,896.141 2580.79,899.972 2581.25,903.711 2581.71,907.355 2582.17,910.9 2582.63,914.343 2583.08,917.682 2583.54,920.913 2584,924.034 2584.46,927.042 2584.92,929.934 2585.38,932.709 2585.84,935.363 2586.29,937.896 2586.75,940.304 2587.21,942.587 2587.67,944.742 2588.13,946.768 2588.59,948.665 2589.05,950.43 2589.5,952.063 2589.96,953.564 2590.42,954.931 2590.88,956.165 2591.34,957.265 2591.8,958.231 2592.26,959.064 2592.71,959.763 2593.17,960.33 2593.63,960.764 2594.09,961.068 2594.55,961.241 2595.01,961.286 2595.47,961.204 2595.92,960.995 2596.38,960.663 2596.84,960.208 2597.3,959.634 2597.76,958.941 2598.22,958.133 2598.68,957.211 2599.13,956.179 2599.59,955.039 2600.05,953.794 2600.51,952.447 2600.97,951.001 2601.43,949.459 2601.89,947.825 2602.34,946.1 2602.8,944.29 2603.26,942.397 2603.72,940.425 2604.18,938.378 2604.64,936.258 2605.1,934.07 2605.55,931.817 2606.01,929.503 2606.47,927.132 2606.93,924.706 2607.39,922.23 2607.85,919.707 2608.31,917.142 2608.76,914.536 2609.22,911.894 2609.68,909.22 2610.14,906.516 2610.6,903.786 2611.06,901.032 2611.52,898.26 2611.97,895.47 2612.43,892.667 2612.89,889.852 2613.35,887.029 2613.81,884.201 2614.27,881.37 2614.73,878.538 2615.18,875.707 2615.64,872.881 2616.1,870.059 2616.56,867.246 2617.02,864.442 2617.48,861.648 2617.94,858.867 2618.39,856.1 2618.85,853.347 2619.31,850.61 2619.77,847.89 2620.23,845.188 2620.69,842.503 2621.15,839.837 2621.6,837.19 2622.06,834.562 2622.52,831.953 2622.98,829.363 2623.44,826.792 2623.9,824.239 2624.36,821.704 2624.81,819.187 2625.27,816.686 2625.73,814.202 2626.19,811.733 2626.65,809.278 2627.11,806.836 2627.57,804.406 2628.02,801.987 2628.48,799.578 2628.94,797.177 2629.4,794.782 2629.86,792.393 2630.32,790.008 2630.78,787.625 2631.23,785.243 2631.69,782.861 2632.15,780.476 2632.61,778.087 2633.07,775.693 2633.53,773.291 2633.99,770.881 2634.44,768.461 2634.9,766.029 2635.36,763.584 2635.82,761.125 2636.28,758.649 2636.74,756.157 2637.2,753.645 2637.65,751.114 2638.11,748.562 2638.57,745.989 2639.03,743.392 2639.49,740.771 2639.95,738.126 2640.41,735.455 2640.86,732.758 2641.32,730.035 2641.78,727.285 2642.24,724.508 2642.7,721.703 2643.16,718.87 2643.62,716.01 2644.07,713.122 2644.53,710.207 2644.99,707.266 2645.45,704.297 2645.91,701.302 2646.37,698.282 2646.83,695.238 2647.28,692.169 2647.74,689.078 2648.2,685.965 2648.66,682.831 2649.12,679.678 2649.58,676.506 2650.04,673.318 2650.49,670.114 2650.95,666.897 2651.41,663.667 2651.87,660.427 2652.33,657.178 2652.79,653.922 2653.25,650.661 2653.7,647.396 2654.16,644.131 2654.62,640.865 2655.08,637.603 2655.54,634.344 2656,631.092 2656.46,627.849 2656.91,624.616 2657.37,621.395 2657.83,618.189 2658.29,614.999 2658.75,611.827 2659.21,608.675 2659.67,605.544 2660.12,602.438 2660.58,599.356 2661.04,596.302 2661.5,593.276 2661.96,590.28 2662.42,587.315 2662.88,584.384 2663.33,581.486 2663.79,578.624 2664.25,575.798 2664.71,573.009 2665.17,570.259 2665.63,567.548 2666.09,564.876 2666.54,562.244 2667,559.654 2667.46,557.104 2667.92,554.595 2668.38,552.128 2668.84,549.702 2669.3,547.318 2669.75,544.974 2670.21,542.671 2670.67,540.408 2671.13,538.185 2671.59,536.001 2672.05,533.854 2672.51,531.745 2672.96,529.672 2673.42,527.634 2673.88,525.63 2674.34,523.658 2674.8,521.717 2675.26,519.806 2675.72,517.923 2676.17,516.066 2676.63,514.234 2677.09,512.424 2677.55,510.636 2678.01,508.867 2678.47,507.115 2678.93,505.378 2679.38,503.654 2679.84,501.941 2680.3,500.238 2680.76,498.541 2681.22,496.849 2681.68,495.16 2682.14,493.471 2682.59,491.78 2683.05,490.087 2683.51,488.387 2683.97,486.68 "/>
<path clip-path="url(#clip952)" d="M391.103 576.29 L391.562 574.987 L392.02 573.577 L392.479 572.377 L392.938 571.542 L393.396 571.184 L393.855 571.188 L394.313 571.103 L394.772 571.013 L395.23 571.351 L395.689 571.917 L396.148 572.529 L396.606 573.27 L397.065 574.374 L397.523 575.425 L397.982 575.806 L398.44 574.685 L398.899 572.385 L399.358 569.961 L399.816 568.553 L400.275 568.564 L400.733 569.863 L401.192 572.114 L401.65 574.403 L402.109 576.648 L402.568 578.952 L403.026 581.213 L403.485 583.154 L403.943 584.663 L404.402 585.63 L404.86 585.803 L405.319 585.342 L405.778 583.999 L406.236 582.099 L406.695 579.907 L407.153 577.913 L407.612 576.665 L408.07 576.047 L408.529 575.808 L408.988 575.925 L409.446 576.071 L409.905 575.99 L410.363 576.381 L410.822 577.047 L411.28 577.796 L411.739 578.493 L412.198 579.139 L412.656 579.739 L413.115 580.593 L413.573 581.865 L414.032 583.31 L414.49 584.842 L414.949 585.803 L415.408 586.22 L415.866 586.378 L416.325 586.339 L416.783 585.948 L417.242 585.328 L417.7 584.349 L418.159 582.752 L418.618 580.621 L419.076 578.277 L419.535 576.157 L419.993 574.739 L420.452 574.482 L420.911 575.589 L421.369 577.525 L421.828 579.846 L422.286 582.192 L422.745 584.419 L423.203 586.853 L423.662 588.903 L424.121 590.602 L424.579 592.188 L425.038 593.871 L425.496 595.838 L425.955 597.472 L426.413 597.961 L426.872 596.947 L427.331 594.972 L427.789 592.204 L428.248 589.124 L428.706 585.86 L429.165 582.502 L429.623 579.337 L430.082 576.717 L430.541 574.931 L430.999 574.294 L431.458 574.544 L431.916 575.294 L432.375 576.556 L432.833 577.998 L433.292 579.509 L433.751 580.673 L434.209 581.391 L434.668 581.823 L435.126 582.373 L435.585 582.908 L436.043 583.295 L436.502 584.028 L436.961 584.992 L437.419 586.137 L437.878 587.559 L438.336 588.61 L438.795 589.539 L439.253 590.602 L439.712 591.733 L440.171 592.695 L440.629 593.245 L441.088 593.531 L441.546 593.892 L442.005 594.258 L442.463 593.916 L442.922 593.228 L443.381 592.181 L443.839 590.612 L444.298 588.725 L444.756 586.652 L445.215 584.671 L445.673 582.636 L446.132 580.471 L446.591 578.449 L447.049 577.402 L447.508 577.812 L447.966 580.026 L448.425 583.497 L448.883 586.953 L449.342 589.614 L449.801 590.787 L450.259 589.946 L450.718 587.823 L451.176 584.839 L451.635 580.848 L452.093 576.788 L452.552 573.359 L453.011 570.547 L453.469 568.637 L453.928 568.11 L454.386 568.779 L454.845 570.529 L455.304 573.387 L455.762 576.831 L456.221 580.532 L456.679 583.873 L457.138 586.183 L457.596 586.939 L458.055 586.452 L458.514 585.238 L458.972 583.68 L459.431 582.521 L459.889 581.809 L460.348 581.495 L460.806 581.586 L461.265 581.946 L461.724 582.646 L462.182 583.175 L462.641 583.454 L463.099 583.682 L463.558 583.785 L464.016 583.299 L464.475 582.394 L464.934 581.087 L465.392 579.74 L465.851 578.823 L466.309 578.319 L466.768 577.822 L467.226 576.961 L467.685 575.769 L468.144 574.585 L468.602 573.538 L469.061 573.161 L469.519 573.492 L469.978 574.414 L470.436 575.546 L470.895 576.734 L471.354 577.944 L471.812 579.272 L472.271 580.029 L472.729 579.6 L473.188 578.102 L473.646 576.402 L474.105 574.984 L474.564 573.825 L475.022 573.206 L475.481 573.622 L475.939 575.448 L476.398 578.227 L476.856 581.539 L477.315 584.512 L477.774 587.669 L478.232 591.11 L478.691 594.73 L479.149 598.256 L479.608 601.295 L480.066 603.552 L480.525 604.521 L480.984 604.281 L481.442 603.349 L481.901 601.797 L482.359 600.609 L482.818 600.359 L483.276 601.421 L483.735 603.217 L484.194 605.396 L484.652 607.061 L485.111 608.227 L485.569 609.19 L486.028 609.614 L486.486 609.749 L486.945 609.623 L487.404 609.593 L487.862 610.456 L488.321 612.351 L488.779 615.01 L489.238 618.056 L489.697 621.21 L490.155 624.172 L490.614 626.926 L491.072 629.374 L491.531 631.121 L491.989 632.476 L492.448 633.349 L492.907 633.988 L493.365 634.522 L493.824 635.051 L494.282 635.513 L494.741 635.894 L495.199 636.446 L495.658 637.488 L496.117 638.771 L496.575 640.569 L497.034 642.231 L497.492 643.355 L497.951 643.643 L498.409 643.243 L498.868 642.5 L499.327 641.379 L499.785 640.428 L500.244 639.751 L500.702 639.48 L501.161 639.325 L501.619 639.025 L502.078 638.057 L502.537 636.873 L502.995 635.608 L503.454 634.565 L503.912 633.874 L504.371 633.14 L504.829 632.522 L505.288 631.947 L505.747 631.895 L506.205 632.65 L506.664 633.647 L507.122 634.57 L507.581 635.021 L508.039 634.858 L508.498 634.151 L508.957 632.817 L509.415 630.883 L509.874 628.367 L510.332 625.77 L510.791 623.122 L511.249 620.884 L511.708 619.348 L512.167 618.592 L512.625 618.459 L513.084 618.926 L513.542 619.413 L514.001 619.604 L514.459 619.994 L514.918 620.771 L515.377 621.892 L515.835 623.349 L516.294 624.503 L516.752 625.156 L517.211 624.735 L517.669 623.342 L518.128 621.137 L518.587 618.488 L519.045 615.776 L519.504 613.484 L519.962 611.355 L520.421 609.459 L520.879 607.462 L521.338 605.494 L521.797 603.444 L522.255 601.408 L522.714 599.862 L523.172 598.602 L523.631 597.649 L524.09 596.519 L524.548 595.443 L525.007 594.286 L525.465 592.489 L525.924 590.129 L526.382 587.291 L526.841 583.955 L527.3 580.44 L527.758 577.102 L528.217 574.914 L528.675 574.174 L529.134 574.975 L529.592 577.106 L530.051 579.832 L530.51 582.26 L530.968 583.914 L531.427 584.724 L531.885 584.876 L532.344 584.213 L532.802 583.43 L533.261 582.608 L533.72 582.185 L534.178 582.072 L534.637 582.12 L535.095 581.683 L535.554 580.347 L536.012 578.18 L536.471 575.422 L536.93 572.63 L537.388 569.987 L537.847 567.688 L538.305 565.969 L538.764 565.167 L539.222 565.109 L539.681 565.477 L540.14 566.052 L540.598 566.544 L541.057 566.51 L541.515 565.939 L541.974 565.175 L542.432 564.873 L542.891 565.51 L543.35 566.384 L543.808 567.094 L544.267 567.272 L544.725 566.631 L545.184 566.149 L545.642 566.486 L546.101 567.697 L546.56 569.08 L547.018 570.354 L547.477 571.356 L547.935 572.162 L548.394 573.127 L548.852 574.52 L549.311 576.488 L549.77 578.957 L550.228 581.863 L550.687 585.446 L551.145 589.638 L551.604 593.885 L552.062 598.142 L552.521 602.538 L552.98 606.685 L553.438 609.96 L553.897 612.615 L554.355 614.933 L554.814 617.132 L555.272 619.061 L555.731 620.786 L556.19 621.986 L556.648 622.693 L557.107 623.087 L557.565 622.972 L558.024 622.712 L558.483 622.591 L558.941 623.499 L559.4 625.467 L559.858 628.332 L560.317 631.706 L560.775 635.105 L561.234 638.235 L561.693 640.911 L562.151 642.768 L562.61 643.857 L563.068 644.463 L563.527 644.979 L563.985 645.623 L564.444 646.414 L564.903 647.257 L565.361 648.042 L565.82 648.984 L566.278 650.475 L566.737 652.821 L567.195 655.559 L567.654 658.255 L568.113 660.404 L568.571 661.855 L569.03 662.456 L569.488 662.219 L569.947 661.715 L570.405 661.35 L570.864 661.42 L571.323 662.012 L571.781 663.202 L572.24 664.695 L572.698 666.133 L573.157 667.345 L573.615 668.087 L574.074 668.541 L574.533 668.809 L574.991 669.373 L575.45 670.462 L575.908 671.927 L576.367 673.759 L576.825 675.55 L577.284 677.106 L577.743 677.818 L578.201 677.568 L578.66 676.576 L579.118 675.469 L579.577 674.838 L580.035 674.869 L580.494 675.237 L580.953 675.898 L581.411 676.668 L581.87 677.232 L582.328 677.375 L582.787 677.493 L583.245 677.181 L583.704 675.746 L584.163 673.734 L584.621 671.482 L585.08 668.61 L585.538 665.787 L585.997 663.319 L586.455 661.48 L586.914 660.485 L587.373 659.884 L587.831 659.906 L588.29 660.461 L588.748 661.37 L589.207 662.464 L589.665 663.02 L590.124 662.336 L590.583 660.082 L591.041 656.52 L591.5 652.633 L591.958 649.248 L592.417 646.396 L592.876 644.216 L593.334 642.961 L593.793 642.623 L594.251 642.953 L594.71 643.539 L595.168 644.16 L595.627 644.709 L596.086 644.657 L596.544 643.612 L597.003 641.514 L597.461 638.569 L597.92 635.94 L598.378 633.774 L598.837 632.313 L599.296 631.503 L599.754 631.601 L600.213 632.475 L600.671 633.564 L601.13 633.881 L601.588 632.656 L602.047 629.63 L602.506 625.489 L602.964 620.958 L603.423 616.438 L603.881 612.194 L604.34 608.878 L604.798 606.616 L605.257 605.297 L605.716 604.996 L606.174 605.862 L606.633 607.748 L607.091 610.244 L607.55 612.4 L608.008 613.93 L608.467 614.563 L608.926 614.61 L609.384 614.337 L609.843 614.194 L610.301 613.948 L610.76 613.145 L611.218 612.136 L611.677 611.062 L612.136 609.636 L612.594 608.069 L613.053 606.739 L613.511 606.217 L613.97 606.735 L614.428 607.878 L614.887 609.251 L615.346 610.503 L615.804 611.157 L616.263 611.032 L616.721 610.58 L617.18 610.223 L617.638 610.25 L618.097 610.477 L618.556 610.346 L619.014 609.895 L619.473 609.135 L619.931 607.9 L620.39 606.283 L620.848 604.518 L621.307 602.261 L621.766 599.271 L622.224 595.725 L622.683 592.294 L623.141 589.656 L623.6 587.836 L624.058 587.182 L624.517 587.309 L624.976 587.858 L625.434 588.742 L625.893 589.855 L626.351 591.303 L626.81 592.961 L627.269 594.151 L627.727 594.512 L628.186 594.467 L628.644 593.95 L629.103 593.277 L629.561 592.512 L630.02 591.467 L630.479 590.024 L630.937 588.317 L631.396 586.187 L631.854 583.331 L632.313 580.416 L632.771 577.953 L633.23 575.785 L633.689 574.002 L634.147 572.265 L634.606 570.584 L635.064 569.153 L635.523 567.98 L635.981 566.899 L636.44 566.097 L636.899 565.588 L637.357 565.399 L637.816 565.876 L638.274 566.532 L638.733 567.388 L639.191 567.981 L639.65 567.979 L640.109 566.868 L640.567 564.619 L641.026 561.272 L641.484 557.774 L641.943 554.806 L642.401 552.424 L642.86 550.831 L643.319 549.946 L643.777 549.238 L644.236 548.085 L644.694 546.603 L645.153 544.537 L645.611 541.777 L646.07 538.291 L646.529 534.154 L646.987 529.38 L647.446 524.234 L647.904 519.669 L648.363 516.247 L648.821 514.235 L649.28 513.367 L649.739 513.161 L650.197 513.035 L650.656 512.584 L651.114 511.85 L651.573 511.342 L652.031 510.471 L652.49 508.926 L652.949 506.863 L653.407 504.472 L653.866 502.246 L654.324 500.638 L654.783 499.341 L655.241 497.795 L655.7 495.709 L656.159 493.262 L656.617 490.64 L657.076 488.631 L657.534 487.164 L657.993 486.198 L658.451 485.895 L658.91 486.28 L659.369 486.56 L659.827 486.288 L660.286 485.765 L660.744 484.991 L661.203 483.929 L661.662 482.414 L662.12 481.092 L662.579 480.642 L663.037 481.282 L663.496 482.6 L663.954 484.621 L664.413 487.059 L664.872 489.434 L665.33 491.175 L665.789 492.224 L666.247 493.086 L666.706 493.818 L667.164 494.132 L667.623 494.005 L668.082 493.377 L668.54 492.625 L668.999 491.69 L669.457 490.609 L669.916 489.854 L670.374 489.471 L670.833 489.81 L671.292 491.103 L671.75 493.457 L672.209 496.268 L672.667 499.393 L673.126 502.683 L673.584 505.952 L674.043 509.274 L674.502 512.51 L674.96 515.197 L675.419 517.403 L675.877 519.466 L676.336 521.603 L676.794 523.906 L677.253 526.048 L677.712 527.743 L678.17 529.056 L678.629 529.782 L679.087 530.658 L679.546 532.118 L680.004 533.958 L680.463 535.967 L680.922 537.772 L681.38 539.398 L681.839 541.166 L682.297 543.288 L682.756 545.504 L683.214 547.685 L683.673 549.627 L684.132 551.605 L684.59 553.962 L685.049 556.861 L685.507 560.118 L685.966 562.438 L686.424 563.421 L686.883 563.036 L687.342 561.755 L687.8 559.487 L688.259 556.969 L688.717 554.679 L689.176 552.739 L689.634 551.733 L690.093 552.155 L690.552 553.984 L691.01 556.612 L691.469 559.498 L691.927 561.859 L692.386 563.791 L692.844 565.545 L693.303 567.024 L693.762 568.284 L694.22 569.042 L694.679 569.398 L695.137 569.284 L695.596 568.83 L696.055 568.174 L696.513 567.721 L696.972 567.707 L697.43 568.469 L697.889 569.567 L698.347 570.487 L698.806 570.939 L699.265 571.362 L699.723 571.948 L700.182 572.53 L700.64 572.082 L701.099 570.364 L701.557 567.715 L702.016 564.821 L702.475 561.786 L702.933 558.536 L703.392 555.398 L703.85 552.965 L704.309 551.158 L704.767 549.599 L705.226 548.238 L705.685 547.141 L706.143 546.313 L706.602 545.921 L707.06 546.156 L707.519 547.069 L707.977 548.307 L708.436 549.303 L708.895 550.319 L709.353 551.271 L709.812 551.882 L710.27 552.343 L710.729 552.446 L711.187 552.386 L711.646 551.928 L712.105 550.961 L712.563 549.199 L713.022 546.772 L713.48 544.588 L713.939 542.964 L714.397 541.939 L714.856 541.429 L715.315 541.06 L715.773 540.804 L716.232 540.623 L716.69 540.287 L717.149 539.382 L717.607 537.742 L718.066 535.133 L718.525 532.096 L718.983 529.37 L719.442 527.772 L719.9 527.776 L720.359 529.191 L720.817 531.67 L721.276 534.523 L721.735 537.041 L722.193 538.832 L722.652 539.831 L723.11 539.375 L723.569 537.74 L724.027 535.978 L724.486 534.797 L724.945 534.855 L725.403 535.87 L725.862 537.294 L726.32 539.014 L726.779 540.548 L727.237 542.026 L727.696 543.348 L728.155 544.521 L728.613 545.507 L729.072 545.857 L729.53 545.435 L729.989 544.822 L730.448 544.567 L730.906 545.081 L731.365 546.688 L731.823 549.159 L732.282 552.506 L732.74 556.438 L733.199 560.596 L733.658 563.715 L734.116 565.529 L734.575 565.96 L735.033 565.769 L735.492 565.34 L735.95 564.748 L736.409 564.462 L736.868 565.114 L737.326 566.503 L737.785 568.689 L738.243 571.42 L738.702 574.295 L739.16 577.239 L739.619 579.781 L740.078 581.99 L740.536 583.946 L740.995 586.026 L741.453 588.604 L741.912 591.377 L742.37 594.226 L742.829 597.45 L743.288 600.813 L743.746 604.139 L744.205 606.925 L744.663 608.88 L745.122 610.494 L745.58 611.945 L746.039 613.227 L746.498 614.385 L746.956 615.742 L747.415 617.196 L747.873 618.631 L748.332 619.804 L748.79 621.244 L749.249 622.875 L749.708 624.973 L750.166 627.356 L750.625 629.703 L751.083 632.209 L751.542 635.213 L752 638.833 L752.459 642.278 L752.918 645.083 L753.376 647.641 L753.835 649.98 L754.293 651.8 L754.752 653.101 L755.21 653.653 L755.669 653.655 L756.128 653.243 L756.586 652.835 L757.045 653.081 L757.503 654.016 L757.962 655.238 L758.42 656.887 L758.879 658.966 L759.338 661.312 L759.796 664.197 L760.255 667.006 L760.713 669.752 L761.172 672.222 L761.63 673.84 L762.089 674.637 L762.548 674.946 L763.006 675.091 L763.465 675.125 L763.923 675.182 L764.382 675.376 L764.841 675.856 L765.299 676.912 L765.758 678.56 L766.216 680.444 L766.675 682.173 L767.133 683.528 L767.592 684.451 L768.051 685.009 L768.509 685.843 L768.968 687.067 L769.426 688.92 L769.885 690.725 L770.343 692.353 L770.802 693.387 L771.261 694.096 L771.719 694.15 L772.178 693.461 L772.636 692.444 L773.095 691.31 L773.553 690.36 L774.012 689.917 L774.471 690.373 L774.929 691.458 L775.388 692.691 L775.846 694.103 L776.305 695.728 L776.763 697.137 L777.222 697.383 L777.681 696.274 L778.139 694.54 L778.598 692.293 L779.056 689.807 L779.515 687.611 L779.973 686.13 L780.432 685.593 L780.891 686.092 L781.349 687.169 L781.808 688.456 L782.266 689.868 L782.725 691.591 L783.183 693.248 L783.642 694.601 L784.101 695.196 L784.559 695.316 L785.018 694.892 L785.476 694.282 L785.935 693.384 L786.393 692.492 L786.852 691.728 L787.311 691.019 L787.769 690.127 L788.228 688.841 L788.686 687.44 L789.145 686.156 L789.603 684.947 L790.062 683.226 L790.521 680.871 L790.979 678.122 L791.438 675.565 L791.896 673.461 L792.355 672.181 L792.813 672.077 L793.272 672.823 L793.731 673.617 L794.189 674.009 L794.648 673.491 L795.106 672.37 L795.565 670.509 L796.023 667.968 L796.482 665.362 L796.941 663.289 L797.399 661.878 L797.858 661.014 L798.316 660.43 L798.775 660.395 L799.234 660.967 L799.692 662.373 L800.151 664.438 L800.609 666.8 L801.068 669.119 L801.526 670.955 L801.985 672.007 L802.444 672.179 L802.902 671.82 L803.361 671.138 L803.819 670.188 L804.278 668.702 L804.736 666.803 L805.195 664.754 L805.654 663.012 L806.112 661.607 L806.571 660.622 L807.029 659.646 L807.488 658.87 L807.946 658.296 L808.405 658.159 L808.864 658.33 L809.322 658.918 L809.781 659.777 L810.239 660.347 L810.698 660.454 L811.156 659.547 L811.615 657.553 L812.074 654.842 L812.532 651.909 L812.991 649.133 L813.449 646.594 L813.908 643.991 L814.366 641.382 L814.825 639.276 L815.284 637.611 L815.742 636.099 L816.201 634.332 L816.659 632.005 L817.118 629.28 L817.576 626.415 L818.035 623.532 L818.494 620.812 L818.952 618.557 L819.411 617.512 L819.869 617.727 L820.328 618.821 L820.786 619.816 L821.245 620.554 L821.704 620.836 L822.162 620.949 L822.621 620.819 L823.079 620.388 L823.538 620.059 L823.996 620.075 L824.455 620.712 L824.914 621.623 L825.372 622.361 L825.831 623.04 L826.289 623.193 L826.748 622.56 L827.206 621.162 L827.665 619.575 L828.124 617.88 L828.582 616.497 L829.041 615.405 L829.499 613.606 L829.958 611.057 L830.416 607.856 L830.875 604.256 L831.334 600.605 L831.792 597.138 L832.251 594.041 L832.709 591.818 L833.168 590.615 L833.627 589.76 L834.085 588.984 L834.544 588.373 L835.002 588.367 L835.461 589.193 L835.919 590.032 L836.378 590.291 L836.837 590.038 L837.295 589.488 L837.754 588.82 L838.212 588.14 L838.671 587.087 L839.129 586.041 L839.588 585.266 L840.047 585.478 L840.505 586.455 L840.964 588.002 L841.422 589.626 L841.881 591.066 L842.339 592.469 L842.798 593.988 L843.257 595.336 L843.715 596.562 L844.174 597.312 L844.632 596.92 L845.091 595.928 L845.549 594.446 L846.008 592.647 L846.467 590.532 L846.925 588.446 L847.384 586.526 L847.842 585.033 L848.301 583.837 L848.759 583.223 L849.218 584.052 L849.677 586.321 L850.135 589.742 L850.594 593.609 L851.052 597.292 L851.511 600.498 L851.969 603.447 L852.428 606.024 L852.887 607.476 L853.345 607.705 L853.804 606.846 L854.262 605.727 L854.721 604.776 L855.179 604.367 L855.638 604.428 L856.097 604.713 L856.555 604.69 L857.014 604.606 L857.472 605.011 L857.931 605.824 L858.389 607.275 L858.848 609.471 L859.307 612.353 L859.765 615.694 L860.224 619.153 L860.682 622.462 L861.141 624.807 L861.599 625.366 L862.058 624.073 L862.517 621.436 L862.975 618.083 L863.434 615.068 L863.892 613.135 L864.351 612.248 L864.809 612.494 L865.268 613.934 L865.727 616.142 L866.185 618.661 L866.644 621.06 L867.102 622.328 L867.561 622.343 L868.02 621.689 L868.478 620.635 L868.937 619.105 L869.395 617.161 L869.854 615.114 L870.312 612.921 L870.771 610.707 L871.23 608.98 L871.688 608.079 L872.147 608.483 L872.605 610.138 L873.064 612.056 L873.522 613.649 L873.981 614.352 L874.44 614.037 L874.898 612.727 L875.357 610.596 L875.815 607.976 L876.274 605.246 L876.732 602.546 L877.191 600.204 L877.65 598.447 L878.108 597.34 L878.567 597.025 L879.025 597.494 L879.484 598.744 L879.942 599.854 L880.401 600.2 L880.86 599.227 L881.318 597.264 L881.777 594.256 L882.235 590.936 L882.694 587.363 L883.152 583.611 L883.611 579.623 L884.07 575.666 L884.528 571.964 L884.987 568.507 L885.445 565.146 L885.904 561.837 L886.362 558.58 L886.821 555.407 L887.28 552.104 L887.738 548.458 L888.197 544.629 L888.655 540.935 L889.114 537.168 L889.572 533.377 L890.031 529.661 L890.49 526.661 L890.948 524.054 L891.407 521.657 L891.865 519.432 L892.324 517.293 L892.782 515.614 L893.241 514.492 L893.7 513.137 L894.158 511.652 L894.617 510.151 L895.075 508.209 L895.534 505.929 L895.992 503.47 L896.451 500.737 L896.91 497.536 L897.368 494.024 L897.827 490.437 L898.285 487.353 L898.744 484.6 L899.202 482.108 L899.661 479.809 L900.12 477.751 L900.578 475.772 L901.037 473.763 L901.495 471.733 L901.954 469.606 L902.413 467.666 L902.871 465.85 L903.33 464.379 L903.788 463.168 L904.247 461.895 L904.705 460.895 L905.164 460.252 L905.623 459.457 L906.081 458.219 L906.54 456.178 L906.998 453.843 L907.457 451.555 L907.915 449.463 L908.374 447.699 L908.833 445.795 L909.291 443.593 L909.75 441.368 L910.208 439.713 L910.667 438.861 L911.125 438.817 L911.584 439.488 L912.043 439.811 L912.501 439.257 L912.96 438.118 L913.418 436.83 L913.877 435.916 L914.335 435.504 L914.794 435.932 L915.253 437.252 L915.711 439.124 L916.17 441.203 L916.628 442.773 L917.087 443.567 L917.545 443.726 L918.004 443.087 L918.463 441.807 L918.921 439.823 L919.38 437.345 L919.838 435.031 L920.297 433.239 L920.755 432.002 L921.214 431.773 L921.673 432.377 L922.131 433.255 L922.59 434.503 L923.048 436.45 L923.507 439.267 L923.965 442.715 L924.424 446.238 L924.883 449.458 L925.341 452.263 L925.8 454.64 L926.258 457.162 L926.717 459.768 L927.175 462.146 L927.634 464.373 L928.093 466.008 L928.551 466.748 L929.01 466.53 L929.468 466.073 L929.927 465.954 L930.385 466.324 L930.844 467.973 L931.303 471.191 L931.761 475.683 L932.22 480.402 L932.678 484.774 L933.137 488.696 L933.595 492.126 L934.054 495.13 L934.513 497.711 L934.971 500.075 L935.43 501.98 L935.888 503.633 L936.347 505.06 L936.806 506.101 L937.264 507.123 L937.723 508.04 L938.181 509.229 L938.64 510.429 L939.098 511.712 L939.557 513.17 L940.016 514.993 L940.474 517.022 L940.933 519.085 L941.391 520.76 L941.85 522.256 L942.308 523.881 L942.767 525.338 L943.226 526.415 L943.684 527.208 L944.143 527.845 L944.601 528.433 L945.06 529.059 L945.518 529.528 L945.977 530.288 L946.436 531.483 L946.894 533.01 L947.353 535.177 L947.811 537.955 L948.27 540.941 L948.728 543.662 L949.187 545.672 L949.646 547.288 L950.104 548.67 L950.563 550.255 L951.021 552.268 L951.48 554.288 L951.938 556.044 L952.397 557.334 L952.856 558.099 L953.314 558.217 L953.773 557.933 L954.231 557.065 L954.69 555.821 L955.148 554.478 L955.607 553.301 L956.066 552.735 L956.524 552.737 L956.983 553.382 L957.441 554.257 L957.9 555.711 L958.358 557.885 L958.817 560.451 L959.276 563.473 L959.734 566.532 L960.193 569.17 L960.651 571.182 L961.11 572.862 L961.568 574.134 L962.027 574.839 L962.486 574.785 L962.944 574.092 L963.403 573.127 L963.861 572.198 L964.32 571.119 L964.778 569.806 L965.237 569.22 L965.696 569.616 L966.154 570.815 L966.613 572.147 L967.071 572.818 L967.53 573.115 L967.988 573.14 L968.447 572.936 L968.906 572.585 L969.364 572.37 L969.823 572.229 L970.281 571.705 L970.74 570.684 L971.199 569.655 L971.657 569.431 L972.116 569.737 L972.574 570.713 L973.033 572.194 L973.491 573.596 L973.95 574.896 L974.409 575.92 L974.867 576.677 L975.326 576.935 L975.784 576.429 L976.243 575.203 L976.701 573.623 L977.16 572.279 L977.619 571.696 L978.077 572.1 L978.536 573.196 L978.994 574.919 L979.453 577.052 L979.911 579.358 L980.37 581.953 L980.829 584.2 L981.287 585.932 L981.746 587.292 L982.204 587.973 L982.663 587.566 L983.121 586.199 L983.58 584.71 L984.039 583.467 L984.497 582.759 L984.956 582.895 L985.414 584.157 L985.873 586.612 L986.331 589.478 L986.79 591.939 L987.249 593.602 L987.707 594.29 L988.166 594.373 L988.624 594.097 L989.083 593.836 L989.541 593.29 L990 592.31 L990.459 591.227 L990.917 590.285 L991.376 589.883 L991.834 590.336 L992.293 591.555 L992.751 593.152 L993.21 594.837 L993.669 596.377 L994.127 598.164 L994.586 600.554 L995.044 603.579 L995.503 607.225 L995.961 611.216 L996.42 614.718 L996.879 617.371 L997.337 619.237 L997.796 620.642 L998.254 621.527 L998.713 621.472 L999.171 620.794 L999.63 620.058 L1000.09 619.873 L1000.55 620.63 L1001.01 621.894 L1001.46 623.425 L1001.92 625.423 L1002.38 627.75 L1002.84 630.913 L1003.3 634.77 L1003.76 639.085 L1004.22 643.325 L1004.67 646.788 L1005.13 649.371 L1005.59 651.061 L1006.05 652.145 L1006.51 653.14 L1006.97 654.425 L1007.43 656.305 L1007.88 658.866 L1008.34 661.74 L1008.8 664.609 L1009.26 667.099 L1009.72 669.319 L1010.18 671.47 L1010.64 673.108 L1011.09 674.293 L1011.55 675.036 L1012.01 675.619 L1012.47 676.247 L1012.93 677.328 L1013.39 678.872 L1013.85 681.087 L1014.3 683.965 L1014.76 687.544 L1015.22 691.599 L1015.68 695.509 L1016.14 698.659 L1016.6 700.871 L1017.06 701.75 L1017.51 701.622 L1017.97 700.887 L1018.43 700.048 L1018.89 699.934 L1019.35 700.482 L1019.81 701.653 L1020.27 703.565 L1020.72 705.589 L1021.18 707.597 L1021.64 709.543 L1022.1 711.625 L1022.56 713.685 L1023.02 716.29 L1023.48 719.429 L1023.93 722.834 L1024.39 726.35 L1024.85 729.898 L1025.31 733.046 L1025.77 735.109 L1026.23 735.87 L1026.69 736.207 L1027.14 736.675 L1027.6 737.551 L1028.06 739.116 L1028.52 741.146 L1028.98 743.365 L1029.44 745.224 L1029.9 746.885 L1030.35 748.288 L1030.81 749.395 L1031.27 750.91 L1031.73 752.638 L1032.19 754.266 L1032.65 755.656 L1033.11 756.273 L1033.56 756.261 L1034.02 755.922 L1034.48 755.384 L1034.94 754.727 L1035.4 753.912 L1035.86 753.244 L1036.32 753.109 L1036.77 753.88 L1037.23 755.461 L1037.69 757.545 L1038.15 759.712 L1038.61 761.374 L1039.07 762.527 L1039.53 762.663 L1039.98 761.909 L1040.44 760.637 L1040.9 759.399 L1041.36 758.14 L1041.82 756.762 L1042.28 755.25 L1042.74 754.027 L1043.19 753.205 L1043.65 752.463 L1044.11 751.695 L1044.57 750.459 L1045.03 748.809 L1045.49 747.061 L1045.95 744.868 L1046.4 742.221 L1046.86 739.368 L1047.32 737.05 L1047.78 735.216 L1048.24 733.637 L1048.7 732.064 L1049.16 730.878 L1049.61 730.214 L1050.07 730.335 L1050.53 730.901 L1050.99 731.237 L1051.45 730.999 L1051.91 730.461 L1052.37 729.485 L1052.82 727.896 L1053.28 726.018 L1053.74 724.114 L1054.2 722.613 L1054.66 721.331 L1055.12 720.45 L1055.58 719.846 L1056.03 719.404 L1056.49 719.057 L1056.95 718.957 L1057.41 718.937 L1057.87 718.586 L1058.33 717.534 L1058.79 715.871 L1059.24 713.372 L1059.7 710.351 L1060.16 707.389 L1060.62 704.175 L1061.08 701.413 L1061.54 699.459 L1062 698.455 L1062.45 698.175 L1062.91 698.034 L1063.37 697.779 L1063.83 696.913 L1064.29 694.915 L1064.75 692.423 L1065.21 689.897 L1065.66 687.515 L1066.12 685.501 L1066.58 684.041 L1067.04 683.128 L1067.5 682.911 L1067.96 683.001 L1068.42 683.28 L1068.87 683.021 L1069.33 681.9 L1069.79 680.035 L1070.25 677.966 L1070.71 675.985 L1071.17 674.079 L1071.63 671.748 L1072.08 668.56 L1072.54 664.627 L1073 660.74 L1073.46 657.909 L1073.92 656.277 L1074.38 655.848 L1074.84 656.459 L1075.29 657.717 L1075.75 659.209 L1076.21 660.521 L1076.67 661.585 L1077.13 662.013 L1077.59 661.784 L1078.05 661.539 L1078.5 661.56 L1078.96 661.248 L1079.42 660.451 L1079.88 658.979 L1080.34 656.973 L1080.8 654.891 L1081.26 652.432 L1081.71 649.355 L1082.17 645.958 L1082.63 642.776 L1083.09 639.89 L1083.55 637.614 L1084.01 635.759 L1084.47 633.927 L1084.92 632.042 L1085.38 629.8 L1085.84 627.244 L1086.3 624.584 L1086.76 622.39 L1087.22 620.588 L1087.68 618.785 L1088.13 616.825 L1088.59 614.825 L1089.05 613.001 L1089.51 611.099 L1089.97 609.057 L1090.43 606.651 L1090.89 604.037 L1091.34 601.633 L1091.8 599.47 L1092.26 597.512 L1092.72 595.918 L1093.18 594.255 L1093.64 592.296 L1094.1 589.828 L1094.55 587.18 L1095.01 584.206 L1095.47 580.988 L1095.93 577.455 L1096.39 573.62 L1096.85 569.39 L1097.31 564.773 L1097.76 560.118 L1098.22 556.128 L1098.68 552.703 L1099.14 550.656 L1099.6 549.79 L1100.06 550.029 L1100.52 550.51 L1100.97 550.766 L1101.43 550.528 L1101.89 549.806 L1102.35 548.673 L1102.81 547.432 L1103.27 545.784 L1103.73 543.528 L1104.18 541.219 L1104.64 538.975 L1105.1 536.716 L1105.56 534.503 L1106.02 532.386 L1106.48 530.441 L1106.94 528.566 L1107.39 527.131 L1107.85 525.445 L1108.31 523.424 L1108.77 521.213 L1109.23 518.72 L1109.69 516.144 L1110.15 513.366 L1110.6 510.763 L1111.06 508.556 L1111.52 506.769 L1111.98 505.633 L1112.44 504.908 L1112.9 503.761 L1113.36 502.727 L1113.81 501.691 L1114.27 500.178 L1114.73 498.561 L1115.19 497.225 L1115.65 496.784 L1116.11 496.657 L1116.57 496.314 L1117.02 495.647 L1117.48 494.804 L1117.94 494.074 L1118.4 493.734 L1118.86 494.103 L1119.32 495.023 L1119.78 496.446 L1120.23 498.091 L1120.69 499.738 L1121.15 501.018 L1121.61 501.645 L1122.07 501.749 L1122.53 501.407 L1122.99 500.993 L1123.44 500.508 L1123.9 500.095 L1124.36 500.047 L1124.82 500.151 L1125.28 500.508 L1125.74 500.926 L1126.2 501.528 L1126.65 501.967 L1127.11 502.548 L1127.57 502.968 L1128.03 503.211 L1128.49 502.69 L1128.95 501.602 L1129.41 500.532 L1129.86 499.576 L1130.32 498.369 L1130.78 496.984 L1131.24 495.642 L1131.7 494.686 L1132.16 494.427 L1132.62 494.996 L1133.07 496.496 L1133.53 498.699 L1133.99 500.622 L1134.45 502.146 L1134.91 503.558 L1135.37 504.443 L1135.83 505.087 L1136.28 506.007 L1136.74 507.388 L1137.2 508.57 L1137.66 509.218 L1138.12 509.797 L1138.58 510.491 L1139.04 511.812 L1139.49 513.838 L1139.95 516.059 L1140.41 517.988 L1140.87 519.618 L1141.33 520.938 L1141.79 522.278 L1142.25 523.563 L1142.7 524.769 L1143.16 526.125 L1143.62 526.933 L1144.08 526.677 L1144.54 524.781 L1145 521.262 L1145.46 517.135 L1145.91 512.733 L1146.37 508.649 L1146.83 505.451 L1147.29 503.311 L1147.75 502.195 L1148.21 502.017 L1148.67 502.713 L1149.12 503.783 L1149.58 504.864 L1150.04 505.655 L1150.5 505.491 L1150.96 504.057 L1151.42 501.806 L1151.88 499.144 L1152.33 496.198 L1152.79 493.377 L1153.25 491.11 L1153.71 489.621 L1154.17 488.569 L1154.63 487.757 L1155.09 487.41 L1155.54 487.401 L1156 487.44 L1156.46 487.252 L1156.92 486.479 L1157.38 485.182 L1157.84 483.531 L1158.3 481.482 L1158.75 479.401 L1159.21 477.369 L1159.67 475.351 L1160.13 473.316 L1160.59 470.94 L1161.05 468.536 L1161.51 465.753 L1161.97 462.151 L1162.42 458.254 L1162.88 454.795 L1163.34 451.85 L1163.8 449.553 L1164.26 447.696 L1164.72 446.139 L1165.18 445.061 L1165.63 444.459 L1166.09 444.085 L1166.55 443.109 L1167.01 441.572 L1167.47 439.602 L1167.93 436.897 L1168.39 433.773 L1168.84 430.397 L1169.3 426.894 L1169.76 423.488 L1170.22 420.288 L1170.68 417.492 L1171.14 415.153 L1171.6 413.743 L1172.05 413.181 L1172.51 413.702 L1172.97 414.99 L1173.43 416.592 L1173.89 417.901 L1174.35 418.666 L1174.81 418.645 L1175.26 417.854 L1175.72 416.351 L1176.18 414.357 L1176.64 411.658 L1177.1 408.549 L1177.56 405.741 L1178.02 403.023 L1178.47 400.702 L1178.93 398.873 L1179.39 396.841 L1179.85 394.854 L1180.31 393.646 L1180.77 393.362 L1181.23 393.762 L1181.68 394.797 L1182.14 396.424 L1182.6 398.131 L1183.06 399.511 L1183.52 399.957 L1183.98 399.567 L1184.44 398.813 L1184.89 397.843 L1185.35 396.616 L1185.81 395.248 L1186.27 394.056 L1186.73 393.439 L1187.19 393.616 L1187.65 394.526 L1188.1 395.472 L1188.56 395.913 L1189.02 396.037 L1189.48 396.532 L1189.94 397.32 L1190.4 398.297 L1190.86 399.681 L1191.31 401.246 L1191.77 402.395 L1192.23 402.968 L1192.69 403.402 L1193.15 404.207 L1193.61 404.953 L1194.07 405.554 L1194.52 406.119 L1194.98 406.886 L1195.44 407.65 L1195.9 408.607 L1196.36 409.674 L1196.82 411.366 L1197.28 413.722 L1197.73 416.845 L1198.19 420.71 L1198.65 425.01 L1199.11 429.443 L1199.57 433.511 L1200.03 436.923 L1200.49 439.756 L1200.94 442.054 L1201.4 443.529 L1201.86 443.776 L1202.32 443.146 L1202.78 441.918 L1203.24 440.882 L1203.7 440.22 L1204.15 439.893 L1204.61 439.835 L1205.07 440.132 L1205.53 440.756 L1205.99 441.723 L1206.45 443.197 L1206.91 445.248 L1207.36 447.558 L1207.82 450.203 L1208.28 453.599 L1208.74 457.558 L1209.2 461.705 L1209.66 465.407 L1210.12 468.415 L1210.57 470.366 L1211.03 471.326 L1211.49 471.829 L1211.95 472.432 L1212.41 472.988 L1212.87 473.373 L1213.33 473.429 L1213.78 473.503 L1214.24 473.969 L1214.7 475.008 L1215.16 476.672 L1215.62 478.407 L1216.08 480.738 L1216.54 483.563 L1216.99 486.854 L1217.45 490.086 L1217.91 492.596 L1218.37 494.496 L1218.83 495.489 L1219.29 495.463 L1219.75 495.562 L1220.2 495.917 L1220.66 496.959 L1221.12 498.795 L1221.58 500.93 L1222.04 502.597 L1222.5 503.456 L1222.96 503.539 L1223.41 503.75 L1223.87 504.422 L1224.33 505.232 L1224.79 506.393 L1225.25 507.881 L1225.71 509.39 L1226.17 510.696 L1226.62 512.285 L1227.08 514.449 L1227.54 517.153 L1228 520.496 L1228.46 523.652 L1228.92 526.339 L1229.38 528.065 L1229.83 529.46 L1230.29 531.045 L1230.75 532.691 L1231.21 534.57 L1231.67 537.047 L1232.13 540.314 L1232.59 543.91 L1233.04 547.106 L1233.5 549.84 L1233.96 552.215 L1234.42 554.436 L1234.88 556.637 L1235.34 558.584 L1235.8 560.156 L1236.25 561.484 L1236.71 563.091 L1237.17 565.293 L1237.63 568.593 L1238.09 572.651 L1238.55 577.015 L1239.01 580.961 L1239.46 584.529 L1239.92 588.105 L1240.38 592.217 L1240.84 596.606 L1241.3 600.938 L1241.76 604.791 L1242.22 607.589 L1242.67 609.212 L1243.13 609.901 L1243.59 610.279 L1244.05 611.06 L1244.51 612.741 L1244.97 615.419 L1245.43 618.445 L1245.88 621.54 L1246.34 624.934 L1246.8 628.814 L1247.26 632.544 L1247.72 635.612 L1248.18 637.943 L1248.64 639.675 L1249.09 641.225 L1249.55 642.959 L1250.01 644.883 L1250.47 647.246 L1250.93 649.798 L1251.39 652.058 L1251.85 653.835 L1252.3 655.284 L1252.76 656.804 L1253.22 659.102 L1253.68 661.926 L1254.14 664.955 L1254.6 667.852 L1255.06 670.07 L1255.51 671.279 L1255.97 671.824 L1256.43 672.129 L1256.89 672.294 L1257.35 672.627 L1257.81 673.391 L1258.27 674.578 L1258.72 675.763 L1259.18 676.928 L1259.64 677.723 L1260.1 678.266 L1260.56 678.504 L1261.02 679.064 L1261.48 680.285 L1261.93 681.92 L1262.39 683.903 L1262.85 686.605 L1263.31 690.253 L1263.77 694.528 L1264.23 698.778 L1264.69 702.285 L1265.14 704.074 L1265.6 704.145 L1266.06 702.987 L1266.52 701.743 L1266.98 700.945 L1267.44 700.871 L1267.9 701.295 L1268.35 702.199 L1268.81 703.038 L1269.27 703.457 L1269.73 703.682 L1270.19 703.558 L1270.65 703.045 L1271.11 702.375 L1271.56 701.452 L1272.02 700.369 L1272.48 699.508 L1272.94 699.029 L1273.4 699.149 L1273.86 700.033 L1274.32 701.235 L1274.77 702.968 L1275.23 704.654 L1275.69 705.594 L1276.15 706.211 L1276.61 706.667 L1277.07 707.1 L1277.53 707.633 L1277.98 707.899 L1278.44 708.326 L1278.9 709.066 L1279.36 710.37 L1279.82 712.369 L1280.28 714.802 L1280.74 717.428 L1281.19 719.534 L1281.65 721.128 L1282.11 721.773 L1282.57 721.655 L1283.03 721.148 L1283.49 720.992 L1283.95 721.265 L1284.4 721.471 L1284.86 721.557 L1285.32 721.185 L1285.78 720.236 L1286.24 719.042 L1286.7 717.856 L1287.16 716.553 L1287.61 715.613 L1288.07 715.377 L1288.53 715.386 L1288.99 715.581 L1289.45 716.161 L1289.91 717.161 L1290.37 718.703 L1290.82 720.604 L1291.28 722.343 L1291.74 723.647 L1292.2 724.48 L1292.66 725.217 L1293.12 725.412 L1293.58 725.13 L1294.03 724.951 L1294.49 725.367 L1294.95 726.298 L1295.41 727.696 L1295.87 729.618 L1296.33 732.068 L1296.79 734.581 L1297.24 736.713 L1297.7 737.89 L1298.16 738.071 L1298.62 737.846 L1299.08 737.649 L1299.54 738.173 L1300 739.489 L1300.45 741.65 L1300.91 744.095 L1301.37 746.034 L1301.83 747.303 L1302.29 747.298 L1302.75 746.175 L1303.21 744.293 L1303.66 742.659 L1304.12 741.562 L1304.58 740.891 L1305.04 740.751 L1305.5 741.539 L1305.96 743.194 L1306.42 745.531 L1306.87 748.001 L1307.33 750.5 L1307.79 753.144 L1308.25 755.832 L1308.71 758.521 L1309.17 761.291 L1309.63 764.034 L1310.08 766.475 L1310.54 768.299 L1311 769.306 L1311.46 769.566 L1311.92 769.28 L1312.38 768.87 L1312.84 768.576 L1313.29 769.084 L1313.75 770.428 L1314.21 772.693 L1314.67 775.483 L1315.13 777.929 L1315.59 779.72 L1316.05 780.699 L1316.5 781.036 L1316.96 781.083 L1317.42 781.261 L1317.88 781.255 L1318.34 780.687 L1318.8 779.121 L1319.26 776.509 L1319.71 773.513 L1320.17 770.029 L1320.63 766.077 L1321.09 762.451 L1321.55 759.597 L1322.01 757.519 L1322.47 756.627 L1322.92 757.278 L1323.38 758.969 L1323.84 760.941 L1324.3 762.585 L1324.76 763.622 L1325.22 763.618 L1325.68 762.891 L1326.13 761.483 L1326.59 760.437 L1327.05 760.179 L1327.51 760.425 L1327.97 760.905 L1328.43 760.969 L1328.89 760.62 L1329.34 760.174 L1329.8 760.177 L1330.26 760.515 L1330.72 761.124 L1331.18 761.369 L1331.64 760.699 L1332.1 758.64 L1332.55 755.648 L1333.01 752.205 L1333.47 748.363 L1333.93 744.412 L1334.39 741.29 L1334.85 739.331 L1335.31 738.354 L1335.76 738.115 L1336.22 738.031 L1336.68 738.113 L1337.14 738.341 L1337.6 738.52 L1338.06 737.912 L1338.52 736.102 L1338.97 733.32 L1339.43 729.764 L1339.89 725.824 L1340.35 721.645 L1340.81 717.584 L1341.27 714.182 L1341.73 711.603 L1342.18 709.816 L1342.64 708.716 L1343.1 707.683 L1343.56 706.549 L1344.02 705.587 L1344.48 704.495 L1344.94 702.91 L1345.39 700.795 L1345.85 698.312 L1346.31 695.614 L1346.77 692.454 L1347.23 688.975 L1347.69 685.514 L1348.15 682.453 L1348.6 679.557 L1349.06 676.58 L1349.52 673.809 L1349.98 671.258 L1350.44 668.805 L1350.9 666.018 L1351.36 662.939 L1351.81 659.761 L1352.27 656.478 L1352.73 653.028 L1353.19 649.421 L1353.65 645.86 L1354.11 642.209 L1354.57 638.698 L1355.02 635.69 L1355.48 633.298 L1355.94 631.775 L1356.4 630.9 L1356.86 630.208 L1357.32 629.715 L1357.78 629.204 L1358.23 628.223 L1358.69 626.584 L1359.15 624.15 L1359.61 620.912 L1360.07 616.833 L1360.53 612.398 L1360.99 608.259 L1361.44 604.723 L1361.9 601.735 L1362.36 599.408 L1362.82 597.436 L1363.28 595.778 L1363.74 594.466 L1364.2 593.182 L1364.65 591.175 L1365.11 588.656 L1365.57 585.914 L1366.03 583.057 L1366.49 580.127 L1366.95 577.792 L1367.41 576.553 L1367.86 575.742 L1368.32 575.346 L1368.78 575.024 L1369.24 574.782 L1369.7 574.888 L1370.16 574.759 L1370.62 573.837 L1371.07 572.136 L1371.53 570.092 L1371.99 567.878 L1372.45 565.724 L1372.91 563.915 L1373.37 562.981 L1373.83 563.074 L1374.28 564.494 L1374.74 566.89 L1375.2 569.252 L1375.66 570.932 L1376.12 571.162 L1376.58 570.221 L1377.04 568.338 L1377.49 565.937 L1377.95 563.303 L1378.41 560.385 L1378.87 557.227 L1379.33 554.413 L1379.79 552.172 L1380.25 550.723 L1380.7 550.278 L1381.16 549.965 L1381.62 549.19 L1382.08 547.788 L1382.54 545.921 L1383 543.624 L1383.46 541.312 L1383.91 539.088 L1384.37 537.149 L1384.83 536.25 L1385.29 536.758 L1385.75 538.283 L1386.21 540.364 L1386.67 542.201 L1387.12 543.637 L1387.58 544.031 L1388.04 543.595 L1388.5 542.472 L1388.96 541.026 L1389.42 538.94 L1389.88 536.348 L1390.33 533.273 L1390.79 530.025 L1391.25 527.126 L1391.71 524.403 L1392.17 521.85 L1392.63 519.868 L1393.09 518.146 L1393.54 516.943 L1394 516.513 L1394.46 516.458 L1394.92 516.608 L1395.38 516.655 L1395.84 516.758 L1396.3 517.245 L1396.75 518.135 L1397.21 518.759 L1397.67 518.548 L1398.13 517.512 L1398.59 515.67 L1399.05 512.981 L1399.51 509.831 L1399.96 506.586 L1400.42 503.777 L1400.88 501.5 L1401.34 499.416 L1401.8 497.46 L1402.26 495.841 L1402.72 494.287 L1403.17 492.851 L1403.63 491.731 L1404.09 490.621 L1404.55 489.571 L1405.01 488.743 L1405.47 487.842 L1405.93 487.074 L1406.38 486.193 L1406.84 485.476 L1407.3 484.969 L1407.76 484.271 L1408.22 483.149 L1408.68 481.329 L1409.14 479.07 L1409.59 476.388 L1410.05 473.724 L1410.51 471.219 L1410.97 469.217 L1411.43 468.161 L1411.89 468.136 L1412.35 468.742 L1412.8 469.722 L1413.26 471.092 L1413.72 472.635 L1414.18 473.718 L1414.64 473.953 L1415.1 473.37 L1415.56 472.079 L1416.01 470.094 L1416.47 467.385 L1416.93 464 L1417.39 460.299 L1417.85 456.868 L1418.31 454.172 L1418.77 452.726 L1419.22 452.443 L1419.68 453.169 L1420.14 454.711 L1420.6 456.843 L1421.06 458.858 L1421.52 460.053 L1421.98 460.76 L1422.43 460.693 L1422.89 459.788 L1423.35 458.613 L1423.81 457.267 L1424.27 455.418 L1424.73 453.333 L1425.19 451.095 L1425.64 449.232 L1426.1 448.197 L1426.56 448.114 L1427.02 448.983 L1427.48 450.36 L1427.94 451.965 L1428.4 453.954 L1428.85 455.891 L1429.31 457.566 L1429.77 459.15 L1430.23 460.573 L1430.69 461.209 L1431.15 461.112 L1431.61 460.71 L1432.06 460.41 L1432.52 460.307 L1432.98 460.383 L1433.44 460.054 L1433.9 459.991 L1434.36 460.089 L1434.82 459.759 L1435.27 459.104 L1435.73 458.325 L1436.19 457.225 L1436.65 455.775 L1437.11 454.818 L1437.57 454.56 L1438.03 454.627 L1438.48 455.262 L1438.94 455.989 L1439.4 456.64 L1439.86 456.952 L1440.32 457.25 L1440.78 457.853 L1441.24 458.78 L1441.69 460.117 L1442.15 461.877 L1442.61 463.684 L1443.07 464.996 L1443.53 465.482 L1443.99 464.831 L1444.45 463.258 L1444.9 461.082 L1445.36 458.47 L1445.82 455.778 L1446.28 453.699 L1446.74 452.434 L1447.2 451.323 L1447.66 450.007 L1448.11 448.394 L1448.57 447.081 L1449.03 446.557 L1449.49 446.411 L1449.95 445.96 L1450.41 444.886 L1450.87 443.298 L1451.32 441.23 L1451.78 439.34 L1452.24 438.107 L1452.7 437.305 L1453.16 436.466 L1453.62 435.636 L1454.08 435.428 L1454.53 435.916 L1454.99 436.678 L1455.45 437.539 L1455.91 438.101 L1456.37 438.319 L1456.83 438.284 L1457.29 437.638 L1457.74 436.802 L1458.2 435.18 L1458.66 432.856 L1459.12 430.481 L1459.58 428.528 L1460.04 426.747 L1460.5 425.329 L1460.95 424.725 L1461.41 424.707 L1461.87 425.327 L1462.33 426.704 L1462.79 428.4 L1463.25 430.226 L1463.71 431.599 L1464.16 432.248 L1464.62 432.05 L1465.08 430.956 L1465.54 429.42 L1466 427.738 L1466.46 426.227 L1466.92 424.901 L1467.37 423.837 L1467.83 423.114 L1468.29 422.937 L1468.75 423.387 L1469.21 424.134 L1469.67 425.063 L1470.13 426.146 L1470.58 427.767 L1471.04 429.729 L1471.5 431.65 L1471.96 433.816 L1472.42 435.622 L1472.88 436.74 L1473.34 436.984 L1473.79 437.19 L1474.25 438.154 L1474.71 440.11 L1475.17 442.826 L1475.63 445.399 L1476.09 447.488 L1476.55 449.334 L1477 451.484 L1477.46 454.4 L1477.92 458.115 L1478.38 462.213 L1478.84 465.952 L1479.3 468.808 L1479.76 470.543 L1480.21 471.501 L1480.67 472.117 L1481.13 472.768 L1481.59 473.813 L1482.05 475.324 L1482.51 477.113 L1482.97 478.939 L1483.42 480.827 L1483.88 482.789 L1484.34 485.168 L1484.8 487.702 L1485.26 490.365 L1485.72 492.843 L1486.18 495.23 L1486.63 498.001 L1487.09 501.177 L1487.55 504.707 L1488.01 508.482 L1488.47 512.588 L1488.93 517.317 L1489.39 522.193 L1489.84 527.073 L1490.3 531.583 L1490.76 535.389 L1491.22 538.953 L1491.68 542.413 L1492.14 545.477 L1492.6 548.701 L1493.05 552.054 L1493.51 555.342 L1493.97 558.328 L1494.43 561.177 L1494.89 564.017 L1495.35 566.716 L1495.81 569.353 L1496.26 571.585 L1496.72 573.3 L1497.18 574.455 L1497.64 575.334 L1498.1 576.285 L1498.56 577.391 L1499.02 578.894 L1499.47 580.755 L1499.93 582.592 L1500.39 583.807 L1500.85 584.732 L1501.31 586.253 L1501.77 588.255 L1502.23 590.401 L1502.68 592.191 L1503.14 593.508 L1503.6 594.975 L1504.06 596.34 L1504.52 597.231 L1504.98 598.036 L1505.44 599.074 L1505.9 600.792 L1506.35 603.385 L1506.81 606.473 L1507.27 609.597 L1507.73 612.61 L1508.19 615.086 L1508.65 617.343 L1509.11 619.544 L1509.56 621.526 L1510.02 623.496 L1510.48 625.409 L1510.94 627.019 L1511.4 628.229 L1511.86 629.302 L1512.32 630.238 L1512.77 630.847 L1513.23 631.363 L1513.69 631.458 L1514.15 630.977 L1514.61 629.963 L1515.07 628.672 L1515.53 627.777 L1515.98 627.681 L1516.44 628.943 L1516.9 631.281 L1517.36 634.258 L1517.82 637.13 L1518.28 639.384 L1518.74 640.818 L1519.19 641.701 L1519.65 642.752 L1520.11 643.83 L1520.57 644.939 L1521.03 645.866 L1521.49 646.707 L1521.95 647.256 L1522.4 647.756 L1522.86 648.554 L1523.32 649.525 L1523.78 650.5 L1524.24 651.028 L1524.7 650.748 L1525.16 649.594 L1525.61 647.99 L1526.07 646.25 L1526.53 645.021 L1526.99 644.758 L1527.45 645.268 L1527.91 646.052 L1528.37 646.899 L1528.82 647.643 L1529.28 648.286 L1529.74 648.826 L1530.2 649.293 L1530.66 650.116 L1531.12 651.385 L1531.58 653.502 L1532.03 656.454 L1532.49 660.169 L1532.95 664.378 L1533.41 668.726 L1533.87 672.523 L1534.33 675.335 L1534.79 677.3 L1535.24 678.483 L1535.7 679.031 L1536.16 678.554 L1536.62 677.621 L1537.08 676.489 L1537.54 675.757 L1538 675.911 L1538.45 677.153 L1538.91 679.228 L1539.37 681.869 L1539.83 684.613 L1540.29 687.479 L1540.75 690.557 L1541.21 693.637 L1541.66 696.743 L1542.12 699.503 L1542.58 701.594 L1543.04 702.818 L1543.5 703.096 L1543.96 702.62 L1544.42 702.063 L1544.87 702.188 L1545.33 703.015 L1545.79 704.516 L1546.25 706.559 L1546.71 709.329 L1547.17 712.535 L1547.63 715.835 L1548.08 719.121 L1548.54 722.016 L1549 724.496 L1549.46 726.509 L1549.92 728.527 L1550.38 730.197 L1550.84 731.461 L1551.29 732.459 L1551.75 733.29 L1552.21 733.579 L1552.67 733.272 L1553.13 732.287 L1553.59 730.782 L1554.05 729.131 L1554.5 727.657 L1554.96 727.343 L1555.42 727.957 L1555.88 729.356 L1556.34 731.472 L1556.8 734.249 L1557.26 737.737 L1557.71 741.463 L1558.17 744.86 L1558.63 747.54 L1559.09 749.51 L1559.55 750.973 L1560.01 752.532 L1560.47 754.476 L1560.92 756.269 L1561.38 757.508 L1561.84 757.977 L1562.3 758.027 L1562.76 757.821 L1563.22 757.148 L1563.68 756.564 L1564.13 756.438 L1564.59 756.39 L1565.05 756.217 L1565.51 756.174 L1565.97 755.736 L1566.43 754.696 L1566.89 753.097 L1567.34 751.376 L1567.8 750.178 L1568.26 749.463 L1568.72 748.925 L1569.18 748.76 L1569.64 748.245 L1570.1 746.913 L1570.55 745.227 L1571.01 744.031 L1571.47 744.131 L1571.93 745.262 L1572.39 747.049 L1572.85 749.134 L1573.31 751.189 L1573.76 752.449 L1574.22 752.65 L1574.68 752.454 L1575.14 752.576 L1575.6 753.223 L1576.06 753.899 L1576.52 754.199 L1576.97 754.195 L1577.43 754.114 L1577.89 753.896 L1578.35 753.141 L1578.81 752.002 L1579.27 750.313 L1579.73 747.768 L1580.18 745.078 L1580.64 742.925 L1581.1 741.688 L1581.56 741.204 L1582.02 741.714 L1582.48 742.869 L1582.94 744.173 L1583.39 745.268 L1583.85 745.834 L1584.31 745.926 L1584.77 745.892 L1585.23 745.911 L1585.69 746.4 L1586.15 747.641 L1586.6 749.164 L1587.06 750.944 L1587.52 752.96 L1587.98 755.214 L1588.44 757.577 L1588.9 759.656 L1589.36 760.778 L1589.81 760.594 L1590.27 759.01 L1590.73 756.443 L1591.19 753.906 L1591.65 751.713 L1592.11 749.929 L1592.57 748.852 L1593.02 748.518 L1593.48 748.602 L1593.94 748.931 L1594.4 749.347 L1594.86 749.842 L1595.32 750.102 L1595.78 750.455 L1596.23 751.01 L1596.69 751.938 L1597.15 753.406 L1597.61 755.146 L1598.07 757.06 L1598.53 758.353 L1598.99 758.706 L1599.44 758.361 L1599.9 757.706 L1600.36 756.368 L1600.82 754.083 L1601.28 750.863 L1601.74 747.395 L1602.2 744.234 L1602.65 741.903 L1603.11 740.883 L1603.57 741.518 L1604.03 743.373 L1604.49 745.631 L1604.95 747.434 L1605.41 748.293 L1605.86 748.005 L1606.32 746.434 L1606.78 744.152 L1607.24 741.49 L1607.7 738.906 L1608.16 736.708 L1608.62 735.253 L1609.07 734.399 L1609.53 734.063 L1609.99 733.888 L1610.45 733.685 L1610.91 732.601 L1611.37 730.917 L1611.83 728.933 L1612.28 727.131 L1612.74 725.863 L1613.2 725.209 L1613.66 725.501 L1614.12 726.509 L1614.58 727.842 L1615.04 728.947 L1615.49 729.293 L1615.95 728.726 L1616.41 727.096 L1616.87 724.479 L1617.33 721.102 L1617.79 716.783 L1618.25 711.759 L1618.7 706.426 L1619.16 700.954 L1619.62 696.145 L1620.08 692.132 L1620.54 688.905 L1621 686.271 L1621.46 683.865 L1621.91 681.712 L1622.37 679.25 L1622.83 676.58 L1623.29 673.646 L1623.75 670.185 L1624.21 665.682 L1624.67 660.385 L1625.12 654.914 L1625.58 649.724 L1626.04 644.968 L1626.5 640.743 L1626.96 637.19 L1627.42 634.354 L1627.88 631.609 L1628.33 628.61 L1628.79 625.475 L1629.25 622.002 L1629.71 617.918 L1630.17 612.969 L1630.63 607.539 L1631.09 602.582 L1631.54 598.637 L1632 595.843 L1632.46 594.071 L1632.92 592.874 L1633.38 591.76 L1633.84 590.571 L1634.3 588.878 L1634.75 585.975 L1635.21 581.802 L1635.67 576.382 L1636.13 570.111 L1636.59 563.178 L1637.05 555.774 L1637.51 548.268 L1637.96 540.587 L1638.42 533.165 L1638.88 526.766 L1639.34 521.189 L1639.8 516.179 L1640.26 511.375 L1640.72 506.611 L1641.17 501.992 L1641.63 497.655 L1642.09 493.823 L1642.55 490.665 L1643.01 487.976 L1643.47 485.493 L1643.93 482.802 L1644.38 479.904 L1644.84 477.01 L1645.3 474.287 L1645.76 471.911 L1646.22 469.62 L1646.68 467.396 L1647.14 465.107 L1647.59 463.028 L1648.05 461.162 L1648.51 459.17 L1648.97 456.497 L1649.43 453.316 L1649.89 450.284 L1650.35 447.856 L1650.8 445.67 L1651.26 443.881 L1651.72 442.698 L1652.18 442.147 L1652.64 441.754 L1653.1 441.112 L1653.56 440.624 L1654.01 440.859 L1654.47 441.508 L1654.93 442.034 L1655.39 441.911 L1655.85 441.087 L1656.31 440.078 L1656.77 439.54 L1657.22 439.603 L1657.68 440.159 L1658.14 440.999 L1658.6 441.955 L1659.06 442.83 L1659.52 443.24 L1659.98 442.882 L1660.43 441.912 L1660.89 440.418 L1661.35 438.498 L1661.81 436.358 L1662.27 434.506 L1662.73 432.77 L1663.19 431.362 L1663.64 430.418 L1664.1 429.79 L1664.56 429.355 L1665.02 429.775 L1665.48 430.883 L1665.94 432.296 L1666.4 433.824 L1666.85 435.113 L1667.31 436.161 L1667.77 437.079 L1668.23 438.239 L1668.69 439.638 L1669.15 441.169 L1669.61 442.52 L1670.06 443.718 L1670.52 444.782 L1670.98 445.985 L1671.44 447.348 L1671.9 448.436 L1672.36 448.999 L1672.82 449.051 L1673.27 449.27 L1673.73 449.386 L1674.19 449.744 L1674.65 450.238 L1675.11 450.773 L1675.57 450.9 L1676.03 450.929 L1676.48 450.663 L1676.94 449.792 L1677.4 448.219 L1677.86 446.385 L1678.32 444.599 L1678.78 443.095 L1679.24 441.717 L1679.69 440.816 L1680.15 440.223 L1680.61 439.816 L1681.07 439.447 L1681.53 439.352 L1681.99 439.85 L1682.45 440.41 L1682.9 440.529 L1683.36 439.833 L1683.82 438.304 L1684.28 436.103 L1684.74 434.083 L1685.2 432.856 L1685.66 432.603 L1686.11 432.769 L1686.57 433.04 L1687.03 433.721 L1687.49 434.419 L1687.95 434.834 L1688.41 435.235 L1688.87 435.533 L1689.32 435.621 L1689.78 435.457 L1690.24 435.684 L1690.7 436.19 L1691.16 436.569 L1691.62 436.57 L1692.08 436.496 L1692.53 435.978 L1692.99 434.77 L1693.45 432.582 L1693.91 429.735 L1694.37 426.311 L1694.83 422.991 L1695.29 419.642 L1695.74 416.351 L1696.2 413.322 L1696.66 410.651 L1697.12 408.438 L1697.58 406.507 L1698.04 404.187 L1698.5 401.139 L1698.95 397.53 L1699.41 393.635 L1699.87 390.104 L1700.33 387.285 L1700.79 385.41 L1701.25 384.046 L1701.71 382.514 L1702.16 380.608 L1702.62 379.041 L1703.08 377.801 L1703.54 376.79 L1704 375.754 L1704.46 374.617 L1704.92 373.63 L1705.37 373.205 L1705.83 372.702 L1706.29 372.172 L1706.75 371.503 L1707.21 370.925 L1707.67 370.102 L1708.13 368.462 L1708.58 365.714 L1709.04 362.444 L1709.5 359.472 L1709.96 357.132 L1710.42 355.357 L1710.88 354.425 L1711.34 354.089 L1711.79 354.175 L1712.25 354.586 L1712.71 355.062 L1713.17 355.181 L1713.63 355.031 L1714.09 354.607 L1714.55 354.353 L1715 354.393 L1715.46 354.383 L1715.92 354.427 L1716.38 354.817 L1716.84 355.573 L1717.3 356.289 L1717.76 356.617 L1718.21 356.59 L1718.67 356.636 L1719.13 356.733 L1719.59 357.436 L1720.05 358.128 L1720.51 358.273 L1720.97 358.419 L1721.42 358.7 L1721.88 359.11 L1722.34 359.525 L1722.8 360.022 L1723.26 360.578 L1723.72 361.023 L1724.18 361.511 L1724.63 362.105 L1725.09 362.408 L1725.55 362.72 L1726.01 363.071 L1726.47 363.364 L1726.93 363.601 L1727.39 363.92 L1727.84 364.876 L1728.3 366.653 L1728.76 369.39 L1729.22 372.827 L1729.68 377.089 L1730.14 381.852 L1730.6 386.715 L1731.05 391.924 L1731.51 396.739 L1731.97 401.231 L1732.43 405.016 L1732.89 407.883 L1733.35 409.791 L1733.81 410.737 L1734.26 411.172 L1734.72 411.784 L1735.18 412.733 L1735.64 414.015 L1736.1 416.029 L1736.56 418.912 L1737.02 422.674 L1737.47 426.969 L1737.93 431.055 L1738.39 434.708 L1738.85 437.758 L1739.31 440.39 L1739.77 442.935 L1740.23 445.814 L1740.68 449.068 L1741.14 452.843 L1741.6 456.934 L1742.06 461.675 L1742.52 466.874 L1742.98 472.248 L1743.44 477.006 L1743.89 480.396 L1744.35 482.568 L1744.81 484.153 L1745.27 486.17 L1745.73 488.983 L1746.19 492.342 L1746.65 495.849 L1747.1 499.628 L1747.56 504.153 L1748.02 509.163 L1748.48 514.524 L1748.94 520.195 L1749.4 526.297 L1749.86 532.546 L1750.31 538.581 L1750.77 544.103 L1751.23 549.261 L1751.69 553.99 L1752.15 558.586 L1752.61 563.131 L1753.07 567.673 L1753.52 571.664 L1753.98 574.797 L1754.44 577.289 L1754.9 579.188 L1755.36 580.647 L1755.82 582.004 L1756.28 583.565 L1756.73 585.21 L1757.19 587.228 L1757.65 589.7 L1758.11 592.795 L1758.57 596.821 L1759.03 601.756 L1759.49 607.523 L1759.94 613.365 L1760.4 618.685 L1760.86 623.096 L1761.32 626.517 L1761.78 629.331 L1762.24 631.855 L1762.7 635.015 L1763.15 638.83 L1763.61 643.012 L1764.07 646.942 L1764.53 650.834 L1764.99 654.754 L1765.45 658.526 L1765.91 661.776 L1766.36 664.478 L1766.82 666.665 L1767.28 668.259 L1767.74 669.251 L1768.2 670.003 L1768.66 671.004 L1769.12 672.879 L1769.57 675.681 L1770.03 679.206 L1770.49 683.209 L1770.95 687.715 L1771.41 692.347 L1771.87 696.979 L1772.33 701.393 L1772.78 705.433 L1773.24 708.85 L1773.7 711.632 L1774.16 713.736 L1774.62 715.091 L1775.08 716.255 L1775.54 717.594 L1775.99 719.387 L1776.45 721.233 L1776.91 723.171 L1777.37 725.064 L1777.83 726.867 L1778.29 728.404 L1778.75 729.535 L1779.2 730.43 L1779.66 731.452 L1780.12 732.969 L1780.58 734.505 L1781.04 736.652 L1781.5 739.231 L1781.96 742.063 L1782.41 744.798 L1782.87 747.658 L1783.33 750.378 L1783.79 752.687 L1784.25 753.799 L1784.71 753.459 L1785.17 752.199 L1785.62 751.078 L1786.08 750.988 L1786.54 752.048 L1787 754.138 L1787.46 756.842 L1787.92 759.665 L1788.38 762.084 L1788.83 764.179 L1789.29 766.215 L1789.75 768.028 L1790.21 770.001 L1790.67 772.674 L1791.13 775.584 L1791.59 778.305 L1792.04 780.773 L1792.5 782.803 L1792.96 784.308 L1793.42 784.952 L1793.88 784.768 L1794.34 784.257 L1794.8 783.694 L1795.25 783.356 L1795.71 783.07 L1796.17 783.134 L1796.63 783.086 L1797.09 782.972 L1797.55 783.274 L1798.01 783.78 L1798.46 784.364 L1798.92 785.508 L1799.38 787.14 L1799.84 788.944 L1800.3 790.905 L1800.76 792.88 L1801.22 794.425 L1801.67 795.223 L1802.13 795.23 L1802.59 795.199 L1803.05 795.303 L1803.51 795.625 L1803.97 795.685 L1804.43 795.67 L1804.88 795.721 L1805.34 795.874 L1805.8 795.883 L1806.26 795.821 L1806.72 795.44 L1807.18 794.85 L1807.64 794.078 L1808.09 792.783 L1808.55 791.059 L1809.01 789.098 L1809.47 787.571 L1809.93 786.943 L1810.39 786.99 L1810.85 787.52 L1811.3 788.344 L1811.76 789.374 L1812.22 790.138 L1812.68 790.74 L1813.14 790.642 L1813.6 789.69 L1814.06 788.232 L1814.51 786.639 L1814.97 784.978 L1815.43 783.455 L1815.89 782.421 L1816.35 781.972 L1816.81 782.171 L1817.27 782.6 L1817.72 783.143 L1818.18 783.456 L1818.64 783.124 L1819.1 782.275 L1819.56 780.638 L1820.02 778.736 L1820.48 776.99 L1820.93 775.313 L1821.39 773.858 L1821.85 772.849 L1822.31 771.878 L1822.77 771.069 L1823.23 770.132 L1823.69 769.007 L1824.14 767.668 L1824.6 765.789 L1825.06 764.046 L1825.52 762.976 L1825.98 762.281 L1826.44 761.952 L1826.9 761.832 L1827.35 761.745 L1827.81 762.001 L1828.27 762.806 L1828.73 763.692 L1829.19 764.264 L1829.65 764.172 L1830.11 763.771 L1830.56 763.773 L1831.02 764.093 L1831.48 765.153 L1831.94 766.678 L1832.4 768.392 L1832.86 770.347 L1833.32 772.35 L1833.77 774.381 L1834.23 776.112 L1834.69 777.78 L1835.15 779.491 L1835.61 780.459 L1836.07 780.463 L1836.53 779.203 L1836.98 777.009 L1837.44 774.732 L1837.9 772.983 L1838.36 772.118 L1838.82 772.673 L1839.28 774.582 L1839.74 777.945 L1840.19 782.201 L1840.65 786.646 L1841.11 790.427 L1841.57 793.059 L1842.03 794.875 L1842.49 796.016 L1842.95 796.713 L1843.4 796.969 L1843.86 797.031 L1844.32 797.138 L1844.78 797.933 L1845.24 800.147 L1845.7 803.396 L1846.16 807.253 L1846.61 811.46 L1847.07 815.861 L1847.53 820.23 L1847.99 824.304 L1848.45 827.896 L1848.91 830.98 L1849.37 833.287 L1849.83 835.334 L1850.28 837.145 L1850.74 838.571 L1851.2 839.486 L1851.66 839.607 L1852.12 838.996 L1852.58 837.744 L1853.04 836.4 L1853.49 835.752 L1853.95 836.402 L1854.41 838.156 L1854.87 841.315 L1855.33 845.424 L1855.79 849.621 L1856.25 853.299 L1856.7 856.209 L1857.16 858.156 L1857.62 859.025 L1858.08 858.992 L1858.54 858.249 L1859 857.052 L1859.46 855.971 L1859.91 855.077 L1860.37 854.44 L1860.83 853.836 L1861.29 853.275 L1861.75 852.332 L1862.21 850.493 L1862.67 847.666 L1863.12 844.165 L1863.58 839.956 L1864.04 835.942 L1864.5 832.79 L1864.96 830.102 L1865.42 827.298 L1865.88 823.92 L1866.33 820.521 L1866.79 817.349 L1867.25 814.669 L1867.71 812.582 L1868.17 810.62 L1868.63 808.829 L1869.09 807.132 L1869.54 805.35 L1870 803.127 L1870.46 800.738 L1870.92 798.102 L1871.38 794.995 L1871.84 791.526 L1872.3 787.637 L1872.75 783.669 L1873.21 780.163 L1873.67 777.019 L1874.13 773.761 L1874.59 770.137 L1875.05 765.744 L1875.51 760.595 L1875.96 754.841 L1876.42 748.489 L1876.88 741.426 L1877.34 733.545 L1877.8 725.074 L1878.26 716.525 L1878.72 708.579 L1879.17 701.139 L1879.63 694.084 L1880.09 687.094 L1880.55 679.845 L1881.01 672.161 L1881.47 664.532 L1881.93 657.56 L1882.38 651.265 L1882.84 645.279 L1883.3 639.38 L1883.76 633.405 L1884.22 627.516 L1884.68 621.55 L1885.14 615.574 L1885.59 609.418 L1886.05 603.175 L1886.51 596.869 L1886.97 590.328 L1887.43 584.169 L1887.89 578.583 L1888.35 573.067 L1888.8 567.204 L1889.26 560.593 L1889.72 553.302 L1890.18 545.742 L1890.64 537.748 L1891.1 530.095 L1891.56 523.093 L1892.01 516.778 L1892.47 511.275 L1892.93 506.637 L1893.39 502.706 L1893.85 498.963 L1894.31 495.547 L1894.77 491.731 L1895.22 487.506 L1895.68 482.844 L1896.14 478.068 L1896.6 473.55 L1897.06 469.474 L1897.52 465.516 L1897.98 461.718 L1898.43 457.333 L1898.89 452.176 L1899.35 446.187 L1899.81 439.622 L1900.27 432.928 L1900.73 426.415 L1901.19 420.6 L1901.64 415.368 L1902.1 410.549 L1902.56 406.261 L1903.02 402.494 L1903.48 399.168 L1903.94 396.273 L1904.4 393.49 L1904.85 390.973 L1905.31 389.34 L1905.77 388.732 L1906.23 388.658 L1906.69 388.363 L1907.15 387.489 L1907.61 385.873 L1908.06 383.39 L1908.52 380.105 L1908.98 376.345 L1909.44 372.428 L1909.9 368.241 L1910.36 364.089 L1910.82 360.015 L1911.27 355.872 L1911.73 351.674 L1912.19 347.409 L1912.65 342.932 L1913.11 338.542 L1913.57 334.739 L1914.03 331.475 L1914.48 329.431 L1914.94 329.014 L1915.4 329.922 L1915.86 331.527 L1916.32 333.398 L1916.78 335.521 L1917.24 337.711 L1917.69 339.84 L1918.15 341.984 L1918.61 344.383 L1919.07 346.672 L1919.53 348.066 L1919.99 348.425 L1920.45 347.932 L1920.9 346.97 L1921.36 346.131 L1921.82 345.427 L1922.28 344.49 L1922.74 343.71 L1923.2 342.975 L1923.66 342.596 L1924.11 342.218 L1924.57 341.356 L1925.03 340.113 L1925.49 338.3 L1925.95 336.455 L1926.41 334.454 L1926.87 332.685 L1927.32 331.403 L1927.78 330.499 L1928.24 329.38 L1928.7 327.996 L1929.16 326.788 L1929.62 326.221 L1930.08 326.356 L1930.53 326.971 L1930.99 328.073 L1931.45 329.513 L1931.91 331.132 L1932.37 333.399 L1932.83 335.735 L1933.29 337.522 L1933.74 338.199 L1934.2 337.773 L1934.66 336.345 L1935.12 334.458 L1935.58 332.682 L1936.04 331.344 L1936.5 330.303 L1936.95 329.471 L1937.41 329.036 L1937.87 329.102 L1938.33 329.703 L1938.79 330.962 L1939.25 332.629 L1939.71 334.478 L1940.16 336.117 L1940.62 337.428 L1941.08 337.966 L1941.54 337.917 L1942 337.464 L1942.46 336.977 L1942.92 336.727 L1943.37 336.966 L1943.83 337.32 L1944.29 337.173 L1944.75 336.201 L1945.21 334.681 L1945.67 333.032 L1946.13 331.694 L1946.58 330.906 L1947.04 331.068 L1947.5 332.059 L1947.96 333.733 L1948.42 336.066 L1948.88 339.11 L1949.34 342.174 L1949.79 344.228 L1950.25 344.724 L1950.71 343.761 L1951.17 342.007 L1951.63 340.28 L1952.09 339.353 L1952.55 339.284 L1953 339.946 L1953.46 340.913 L1953.92 342.283 L1954.38 343.704 L1954.84 344.9 L1955.3 345.884 L1955.76 346.935 L1956.21 347.572 L1956.67 347.624 L1957.13 347.137 L1957.59 346.425 L1958.05 345.828 L1958.51 345.577 L1958.97 345.491 L1959.42 345.922 L1959.88 346.425 L1960.34 347.148 L1960.8 347.638 L1961.26 347.573 L1961.72 346.821 L1962.18 345.478 L1962.63 343.455 L1963.09 341.023 L1963.55 338.653 L1964.01 336.886 L1964.47 336.287 L1964.93 337.144 L1965.39 338.909 L1965.84 341.267 L1966.3 344.02 L1966.76 346.702 L1967.22 349.513 L1967.68 352.014 L1968.14 353.777 L1968.6 354.455 L1969.05 354.372 L1969.51 353.511 L1969.97 351.993 L1970.43 350.812 L1970.89 349.892 L1971.35 349.669 L1971.81 349.51 L1972.26 349.341 L1972.72 349.448 L1973.18 350.1 L1973.64 351.048 L1974.1 352.19 L1974.56 353.207 L1975.02 353.747 L1975.47 354.121 L1975.93 354.412 L1976.39 354.767 L1976.85 355.285 L1977.31 355.748 L1977.77 356.169 L1978.23 356.151 L1978.68 355.936 L1979.14 355.858 L1979.6 355.668 L1980.06 355.346 L1980.52 354.928 L1980.98 354.789 L1981.44 355.303 L1981.89 356.665 L1982.35 358.726 L1982.81 361.173 L1983.27 363.442 L1983.73 364.88 L1984.19 365.212 L1984.65 364.926 L1985.1 364.308 L1985.56 363.76 L1986.02 363.304 L1986.48 363.238 L1986.94 363.378 L1987.4 363.776 L1987.86 364.239 L1988.31 364.903 L1988.77 365.799 L1989.23 366.886 L1989.69 367.873 L1990.15 368.721 L1990.61 369.639 L1991.07 370.871 L1991.52 372.733 L1991.98 374.955 L1992.44 377.502 L1992.9 380.088 L1993.36 382.374 L1993.82 384.494 L1994.28 386.209 L1994.73 387.25 L1995.19 387.379 L1995.65 386.4 L1996.11 384.713 L1996.57 383.21 L1997.03 382.173 L1997.49 381.952 L1997.94 382.523 L1998.4 383.654 L1998.86 385.378 L1999.32 387.578 L1999.78 390.044 L2000.24 392.554 L2000.7 394.753 L2001.15 396.522 L2001.61 397.929 L2002.07 399.466 L2002.53 400.893 L2002.99 401.404 L2003.45 401.506 L2003.91 401.898 L2004.36 402.905 L2004.82 404.42 L2005.28 406.288 L2005.74 408.593 L2006.2 411.587 L2006.66 414.889 L2007.12 418.188 L2007.57 421.375 L2008.03 424.543 L2008.49 427.544 L2008.95 430.308 L2009.41 433.17 L2009.87 436.057 L2010.33 439.008 L2010.78 441.555 L2011.24 443.281 L2011.7 444.594 L2012.16 446.061 L2012.62 447.802 L2013.08 450.155 L2013.54 453.146 L2013.99 456.728 L2014.45 460.814 L2014.91 465.166 L2015.37 469.817 L2015.83 474.579 L2016.29 479.52 L2016.75 484.5 L2017.2 489.494 L2017.66 494.822 L2018.12 500.656 L2018.58 506.884 L2019.04 513.206 L2019.5 519.33 L2019.96 525.039 L2020.41 530.908 L2020.87 537.263 L2021.33 543.962 L2021.79 550.088 L2022.25 555.386 L2022.71 560.504 L2023.17 565.345 L2023.62 569.83 L2024.08 574.182 L2024.54 577.955 L2025 581.825 L2025.46 586.678 L2025.92 592.96 L2026.38 600.278 L2026.83 607.876 L2027.29 615.596 L2027.75 623.094 L2028.21 630.24 L2028.67 637.132 L2029.13 644.223 L2029.59 651.734 L2030.04 659.843 L2030.5 668.264 L2030.96 676.342 L2031.42 683.94 L2031.88 690.549 L2032.34 696.536 L2032.8 701.984 L2033.25 706.896 L2033.71 711.413 L2034.17 716.061 L2034.63 721.006 L2035.09 726.479 L2035.55 732.893 L2036.01 739.771 L2036.46 747.627 L2036.92 756.367 L2037.38 766.163 L2037.84 776.77 L2038.3 787.708 L2038.76 798.172 L2039.22 807.723 L2039.67 815.6 L2040.13 821.975 L2040.59 827.731 L2041.05 833.005 L2041.51 837.876 L2041.97 842.448 L2042.43 846.721 L2042.88 850.669 L2043.34 853.945 L2043.8 856.201 L2044.26 857.727 L2044.72 859.207 L2045.18 861.351 L2045.64 863.85 L2046.09 866.688 L2046.55 869.969 L2047.01 873.829 L2047.47 877.979 L2047.93 882.389 L2048.39 886.836 L2048.85 891.076 L2049.3 894.947 L2049.76 898.31 L2050.22 901.174 L2050.68 903.971 L2051.14 906.868 L2051.6 909.727 L2052.06 912.422 L2052.51 914.935 L2052.97 917.005 L2053.43 918.56 L2053.89 919.746 L2054.35 920.629 L2054.81 921.289 L2055.27 922.303 L2055.72 923.424 L2056.18 924.594 L2056.64 925.403 L2057.1 925.85 L2057.56 925.882 L2058.02 925.543 L2058.48 924.714 L2058.93 923.759 L2059.39 922.736 L2059.85 921.471 L2060.31 919.567 L2060.77 917.152 L2061.23 914.307 L2061.69 911.04 L2062.14 907.957 L2062.6 905.042 L2063.06 902.004 L2063.52 898.4 L2063.98 893.999 L2064.44 889.141 L2064.9 884.316 L2065.35 879.503 L2065.81 875.863 L2066.27 873.511 L2066.73 872.051 L2067.19 871.074 L2067.65 869.724 L2068.11 868.026 L2068.56 866.109 L2069.02 863.873 L2069.48 861.179 L2069.94 857.901 L2070.4 853.96 L2070.86 849.883 L2071.32 845.882 L2071.77 841.948 L2072.23 838.041 L2072.69 833.978 L2073.15 829.618 L2073.61 824.781 L2074.07 819.69 L2074.53 814.396 L2074.98 809.355 L2075.44 805.28 L2075.9 802.579 L2076.36 801.292 L2076.82 801.207 L2077.28 801.843 L2077.74 802.665 L2078.19 803.258 L2078.65 802.911 L2079.11 801.312 L2079.57 798.507 L2080.03 794.397 L2080.49 789.113 L2080.95 783.241 L2081.4 777.81 L2081.86 773.217 L2082.32 769.167 L2082.78 765.843 L2083.24 763.695 L2083.7 762.47 L2084.16 762.186 L2084.61 762.343 L2085.07 763.121 L2085.53 764.67 L2085.99 767.061 L2086.45 769.684 L2086.91 772.507 L2087.37 774.722 L2087.82 776.469 L2088.28 777.537 L2088.74 777.93 L2089.2 777.853 L2089.66 777.548 L2090.12 777.3 L2090.58 777.146 L2091.03 777.08 L2091.49 777.053 L2091.95 777.192 L2092.41 777.584 L2092.87 778.121 L2093.33 778.732 L2093.79 779.734 L2094.24 781.346 L2094.7 783.605 L2095.16 786.102 L2095.62 788.577 L2096.08 790.591 L2096.54 791.836 L2097 792.372 L2097.45 792.724 L2097.91 793.461 L2098.37 794.838 L2098.83 797.06 L2099.29 800.04 L2099.75 803.126 L2100.21 805.612 L2100.66 807.444 L2101.12 808.901 L2101.58 810.445 L2102.04 812.02 L2102.5 812.969 L2102.96 813.159 L2103.42 812.691 L2103.87 811.733 L2104.33 810.603 L2104.79 809.636 L2105.25 808.263 L2105.71 807.174 L2106.17 806.502 L2106.63 806.746 L2107.08 807.884 L2107.54 809.509 L2108 811.398 L2108.46 813.42 L2108.92 815.62 L2109.38 817.577 L2109.84 819.082 L2110.29 820.432 L2110.75 821.527 L2111.21 821.93 L2111.67 821.34 L2112.13 819.68 L2112.59 817.048 L2113.05 813.981 L2113.5 811.117 L2113.96 809.041 L2114.42 807.75 L2114.88 807.152 L2115.34 806.52 L2115.8 805.583 L2116.26 804.186 L2116.71 802.294 L2117.17 800.092 L2117.63 797.693 L2118.09 795.326 L2118.55 792.938 L2119.01 790.701 L2119.47 788.277 L2119.92 786.025 L2120.38 783.956 L2120.84 781.716 L2121.3 779.377 L2121.76 777.18 L2122.22 775.53 L2122.68 774.039 L2123.13 772.55 L2123.59 771.1 L2124.05 769.236 L2124.51 766.772 L2124.97 764.413 L2125.43 762.347 L2125.89 760.509 L2126.34 758.795 L2126.8 757.605 L2127.26 756.417 L2127.72 754.735 L2128.18 752.113 L2128.64 748.675 L2129.1 744.395 L2129.55 740.053 L2130.01 736.31 L2130.47 733.047 L2130.93 729.858 L2131.39 726.333 L2131.85 722.709 L2132.31 719.328 L2132.76 716.165 L2133.22 713.257 L2133.68 710.58 L2134.14 707.695 L2134.6 704.504 L2135.06 700.945 L2135.52 697.413 L2135.97 694.05 L2136.43 691.022 L2136.89 688.102 L2137.35 685.577 L2137.81 683.511 L2138.27 681.441 L2138.73 678.973 L2139.18 676.137 L2139.64 672.956 L2140.1 669.405 L2140.56 665.598 L2141.02 661.564 L2141.48 657.492 L2141.94 654.075 L2142.39 651.29 L2142.85 649.088 L2143.31 647.406 L2143.77 646.012 L2144.23 644.451 L2144.69 642.513 L2145.15 640.179 L2145.6 637.77 L2146.06 635.481 L2146.52 633.694 L2146.98 631.986 L2147.44 629.703 L2147.9 627.218 L2148.36 624.63 L2148.81 622.302 L2149.27 620.625 L2149.73 619.235 L2150.19 617.352 L2150.65 614.475 L2151.11 611.199 L2151.57 607.338 L2152.02 603.231 L2152.48 599.681 L2152.94 597.115 L2153.4 595.295 L2153.86 593.429 L2154.32 591.369 L2154.78 589.21 L2155.23 586.897 L2155.69 584.332 L2156.15 581.582 L2156.61 578.619 L2157.07 574.994 L2157.53 570.607 L2157.99 565.833 L2158.44 560.92 L2158.9 555.596 L2159.36 550.07 L2159.82 544.908 L2160.28 540.568 L2160.74 537.422 L2161.2 535.395 L2161.65 533.687 L2162.11 531.355 L2162.57 527.823 L2163.03 523.419 L2163.49 519.082 L2163.95 515.499 L2164.41 512.618 L2164.86 509.999 L2165.32 506.801 L2165.78 502.592 L2166.24 497.721 L2166.7 492.556 L2167.16 487.262 L2167.62 482.274 L2168.07 477.609 L2168.53 472.9 L2168.99 467.714 L2169.45 461.631 L2169.91 455.007 L2170.37 448.352 L2170.83 442.395 L2171.28 436.525 L2171.74 430.4 L2172.2 423.877 L2172.66 417.309 L2173.12 411.127 L2173.58 406.198 L2174.04 402.504 L2174.49 399.757 L2174.95 397.628 L2175.41 395.648 L2175.87 393.217 L2176.33 389.869 L2176.79 385.469 L2177.25 380.162 L2177.7 374.664 L2178.16 369.365 L2178.62 364.12 L2179.08 359.063 L2179.54 354.063 L2180 349.12 L2180.46 344.608 L2180.91 340.221 L2181.37 335.681 L2181.83 330.407 L2182.29 324.96 L2182.75 320.468 L2183.21 317.38 L2183.67 315.405 L2184.12 314.089 L2184.58 312.686 L2185.04 311.243 L2185.5 309.172 L2185.96 306.149 L2186.42 302.349 L2186.88 298.618 L2187.33 295.369 L2187.79 292.425 L2188.25 289.55 L2188.71 286.557 L2189.17 283.583 L2189.63 280.944 L2190.09 278.744 L2190.54 276.648 L2191 274.76 L2191.46 273.28 L2191.92 272.486 L2192.38 271.845 L2192.84 271.084 L2193.3 270.146 L2193.76 268.799 L2194.21 267.209 L2194.67 265.356 L2195.13 263.313 L2195.59 261.189 L2196.05 259.267 L2196.51 257.665 L2196.97 256.587 L2197.42 256.096 L2197.88 256.356 L2198.34 257.008 L2198.8 257.749 L2199.26 258.501 L2199.72 259.666 L2200.18 261.058 L2200.63 262.68 L2201.09 264.588 L2201.55 266.64 L2202.01 268.585 L2202.47 270.175 L2202.93 271.6 L2203.39 272.631 L2203.84 272.626 L2204.3 271.898 L2204.76 271.225 L2205.22 270.747 L2205.68 270.561 L2206.14 270.731 L2206.6 271.13 L2207.05 271.6 L2207.51 272.158 L2207.97 272.701 L2208.43 273.492 L2208.89 275.048 L2209.35 277.608 L2209.81 280.656 L2210.26 284.046 L2210.72 287.501 L2211.18 290.471 L2211.64 293.245 L2212.1 295.771 L2212.56 297.994 L2213.02 300.143 L2213.47 302.041 L2213.93 303.645 L2214.39 304.975 L2214.85 305.914 L2215.31 306.431 L2215.77 306.87 L2216.23 307.428 L2216.68 308 L2217.14 308.389 L2217.6 308.576 L2218.06 308.24 L2218.52 307.53 L2218.98 306.969 L2219.44 306.748 L2219.89 307.033 L2220.35 307.898 L2220.81 309.728 L2221.27 312.463 L2221.73 315.948 L2222.19 319.263 L2222.65 322.216 L2223.1 324.032 L2223.56 324.898 L2224.02 325.496 L2224.48 326.286 L2224.94 327.27 L2225.4 328.962 L2225.86 330.692 L2226.31 331.982 L2226.77 332.651 L2227.23 332.824 L2227.69 333.323 L2228.15 334.45 L2228.61 336.255 L2229.07 338.195 L2229.52 340.115 L2229.98 342.036 L2230.44 344.333 L2230.9 347.035 L2231.36 350.116 L2231.82 353.026 L2232.28 355.54 L2232.73 357.791 L2233.19 359.828 L2233.65 362.101 L2234.11 364.39 L2234.57 366.743 L2235.03 369.029 L2235.49 370.672 L2235.94 371.354 L2236.4 371.476 L2236.86 371.497 L2237.32 371.631 L2237.78 371.348 L2238.24 370.723 L2238.7 370.096 L2239.15 370.048 L2239.61 370.609 L2240.07 371.321 L2240.53 372.516 L2240.99 373.905 L2241.45 375.48 L2241.91 377.294 L2242.36 379.139 L2242.82 381.475 L2243.28 384.042 L2243.74 386.23 L2244.2 387.833 L2244.66 388.823 L2245.12 389.387 L2245.57 390.249 L2246.03 391.446 L2246.49 392.916 L2246.95 394.385 L2247.41 395.683 L2247.87 396.443 L2248.33 396.572 L2248.78 396.853 L2249.24 397.55 L2249.7 398.566 L2250.16 399.599 L2250.62 400.29 L2251.08 401.156 L2251.54 402.353 L2251.99 403.614 L2252.45 404.874 L2252.91 405.917 L2253.37 406.68 L2253.83 406.957 L2254.29 407.023 L2254.75 407.511 L2255.2 408.449 L2255.66 409.589 L2256.12 411.061 L2256.58 413.143 L2257.04 415.838 L2257.5 418.871 L2257.96 421.888 L2258.41 425.052 L2258.87 428.391 L2259.33 431.602 L2259.79 434.093 L2260.25 435.812 L2260.71 436.813 L2261.17 437.016 L2261.62 436.659 L2262.08 436.505 L2262.54 436.595 L2263 436.742 L2263.46 436.941 L2263.92 437.403 L2264.38 438.403 L2264.83 439.531 L2265.29 440.751 L2265.75 441.846 L2266.21 443.621 L2266.67 446.146 L2267.13 449.611 L2267.59 453.318 L2268.04 456.942 L2268.5 460.298 L2268.96 463.733 L2269.42 467.18 L2269.88 470.325 L2270.34 473.764 L2270.8 477.654 L2271.25 481.506 L2271.71 484.977 L2272.17 488.289 L2272.63 491.697 L2273.09 495.364 L2273.55 498.689 L2274.01 501.077 L2274.46 502.726 L2274.92 504.293 L2275.38 506.147 L2275.84 508.147 L2276.3 510.439 L2276.76 513.439 L2277.22 517.008 L2277.67 520.922 L2278.13 524.688 L2278.59 527.976 L2279.05 530.744 L2279.51 533.328 L2279.97 535.756 L2280.43 538.616 L2280.88 542.095 L2281.34 546.231 L2281.8 550.888 L2282.26 556.007 L2282.72 561.436 L2283.18 566.816 L2283.64 571.742 L2284.09 575.851 L2284.55 579.367 L2285.01 582.696 L2285.47 586.274 L2285.93 590.026 L2286.39 593.616 L2286.85 597.801 L2287.3 602.673 L2287.76 607.784 L2288.22 612.863 L2288.68 618.003 L2289.14 623.593 L2289.6 629.387 L2290.06 635.175 L2290.51 640.695 L2290.97 645.473 L2291.43 649.996 L2291.89 654.515 L2292.35 659.086 L2292.81 663.506 L2293.27 667.934 L2293.72 672.968 L2294.18 678.521 L2294.64 683.774 L2295.1 688.734 L2295.56 693.792 L2296.02 699.251 L2296.48 704.557 L2296.93 709.467 L2297.39 713.956 L2297.85 717.87 L2298.31 721.805 L2298.77 725.963 L2299.23 730.416 L2299.69 734.619 L2300.14 738.219 L2300.6 741.346 L2301.06 744.32 L2301.52 746.9 L2301.98 749.452 L2302.44 752.212 L2302.9 755.304 L2303.35 759.053 L2303.81 763.151 L2304.27 767.435 L2304.73 771.813 L2305.19 776.073 L2305.65 780.02 L2306.11 783.797 L2306.56 787.397 L2307.02 790.963 L2307.48 794.169 L2307.94 797.22 L2308.4 799.819 L2308.86 802.087 L2309.32 804.173 L2309.77 806.17 L2310.23 808.452 L2310.69 810.748 L2311.15 813.197 L2311.61 815.832 L2312.07 818.623 L2312.53 821.218 L2312.98 824.042 L2313.44 827 L2313.9 830.026 L2314.36 832.949 L2314.82 835.667 L2315.28 837.84 L2315.74 839.646 L2316.19 841.054 L2316.65 842.108 L2317.11 843.101 L2317.57 844.554 L2318.03 846.645 L2318.49 849.329 L2318.95 852.391 L2319.4 855.718 L2319.86 858.282 L2320.32 859.751 L2320.78 859.705 L2321.24 858.663 L2321.7 857.404 L2322.16 856.208 L2322.61 855.528 L2323.07 855.485 L2323.53 856.595 L2323.99 858.347 L2324.45 860.795 L2324.91 863.449 L2325.37 865.864 L2325.82 867.519 L2326.28 868.282 L2326.74 867.948 L2327.2 866.949 L2327.66 865.79 L2328.12 864.815 L2328.58 863.858 L2329.03 863.054 L2329.49 862.532 L2329.95 862.576 L2330.41 862.795 L2330.87 863.107 L2331.33 863.169 L2331.79 862.732 L2332.24 862.154 L2332.7 861.575 L2333.16 861.298 L2333.62 861.786 L2334.08 862.736 L2334.54 863.514 L2335 864.032 L2335.45 864.246 L2335.91 864.446 L2336.37 864.892 L2336.83 865.166 L2337.29 865.071 L2337.75 864.67 L2338.21 863.777 L2338.66 861.822 L2339.12 858.94 L2339.58 855.454 L2340.04 851.906 L2340.5 848.924 L2340.96 846.71 L2341.42 845.276 L2341.87 844.218 L2342.33 843.089 L2342.79 842.326 L2343.25 842.217 L2343.71 843.145 L2344.17 844.883 L2344.63 846.76 L2345.08 847.976 L2345.54 847.864 L2346 846.293 L2346.46 843.858 L2346.92 841.1 L2347.38 838.253 L2347.84 835.412 L2348.29 832.346 L2348.75 829.153 L2349.21 825.859 L2349.67 822.623 L2350.13 819.402 L2350.59 816.008 L2351.05 811.663 L2351.5 807.367 L2351.96 803.9 L2352.42 801.391 L2352.88 800 L2353.34 799.336 L2353.8 798.94 L2354.26 798.585 L2354.71 798.421 L2355.17 798.111 L2355.63 797.397 L2356.09 795.781 L2356.55 793.086 L2357.01 789.643 L2357.47 785.609 L2357.92 781.388 L2358.38 777.448 L2358.84 773.698 L2359.3 770.572 L2359.76 768.27 L2360.22 767.253 L2360.68 766.823 L2361.13 766.074 L2361.59 764.73 L2362.05 762.678 L2362.51 760.201 L2362.97 757.608 L2363.43 754.847 L2363.89 752.344 L2364.34 750.474 L2364.8 749.013 L2365.26 747.405 L2365.72 745.252 L2366.18 742.79 L2366.64 739.905 L2367.1 736.855 L2367.55 733.908 L2368.01 730.825 L2368.47 727.789 L2368.93 725.017 L2369.39 722.625 L2369.85 720.442 L2370.31 718.662 L2370.76 717.261 L2371.22 716.382 L2371.68 715.22 L2372.14 713.125 L2372.6 710.238 L2373.06 706.55 L2373.52 702.237 L2373.97 697.603 L2374.43 693.123 L2374.89 689.191 L2375.35 686.359 L2375.81 684.397 L2376.27 682.76 L2376.73 680.967 L2377.18 679.245 L2377.64 677.593 L2378.1 675.71 L2378.56 673.419 L2379.02 670.699 L2379.48 667.682 L2379.94 664.6 L2380.39 661.639 L2380.85 659.267 L2381.31 657.256 L2381.77 655.096 L2382.23 652.388 L2382.69 649.455 L2383.15 647.078 L2383.6 645.501 L2384.06 644.355 L2384.52 643.136 L2384.98 641.488 L2385.44 639.603 L2385.9 637.86 L2386.36 636.285 L2386.81 634.701 L2387.27 633.391 L2387.73 632.472 L2388.19 631.904 L2388.65 631.86 L2389.11 632.119 L2389.57 632.359 L2390.02 632.435 L2390.48 631.951 L2390.94 631.02 L2391.4 629.55 L2391.86 627.453 L2392.32 624.56 L2392.78 620.77 L2393.23 616.166 L2393.69 611.417 L2394.15 606.905 L2394.61 603.163 L2395.07 600.903 L2395.53 599.845 L2395.99 599.385 L2396.44 598.945 L2396.9 598.21 L2397.36 597.165 L2397.82 595.991 L2398.28 594.616 L2398.74 593.361 L2399.2 592.132 L2399.65 590.908 L2400.11 589.996 L2400.57 589.387 L2401.03 589.206 L2401.49 589.596 L2401.95 590.218 L2402.41 590.468 L2402.86 590.038 L2403.32 589.02 L2403.78 587.03 L2404.24 583.915 L2404.7 580.302 L2405.16 576.703 L2405.62 573.27 L2406.07 570.549 L2406.53 569.078 L2406.99 568.562 L2407.45 568.375 L2407.91 567.683 L2408.37 566.132 L2408.83 564.101 L2409.28 561.375 L2409.74 557.988 L2410.2 554.157 L2410.66 550.494 L2411.12 547.648 L2411.58 545.592 L2412.04 544.224 L2412.49 543.22 L2412.95 542.024 L2413.41 541.034 L2413.87 540.01 L2414.33 538.902 L2414.79 537.704 L2415.25 536.062 L2415.7 533.964 L2416.16 531.666 L2416.62 529.575 L2417.08 527.702 L2417.54 525.531 L2418 522.332 L2418.46 518.248 L2418.91 513.593 L2419.37 508.818 L2419.83 504.673 L2420.29 501.612 L2420.75 499.336 L2421.21 497.166 L2421.67 495.355 L2422.12 493.814 L2422.58 492.412 L2423.04 490.612 L2423.5 488.227 L2423.96 485.215 L2424.42 482.131 L2424.88 479.633 L2425.33 477.758 L2425.79 475.965 L2426.25 473.907 L2426.71 471.216 L2427.17 468.056 L2427.63 464.984 L2428.09 462.181 L2428.54 459.568 L2429 457.16 L2429.46 455.055 L2429.92 452.992 L2430.38 451.071 L2430.84 448.863 L2431.3 445.76 L2431.75 441.718 L2432.21 436.853 L2432.67 431.6 L2433.13 425.938 L2433.59 420.118 L2434.05 413.985 L2434.51 408.029 L2434.96 402.304 L2435.42 396.573 L2435.88 390.841 L2436.34 385.405 L2436.8 380.411 L2437.26 376.021 L2437.72 372.509 L2438.17 368.942 L2438.63 365.142 L2439.09 360.968 L2439.55 356.84 L2440.01 353.018 L2440.47 349.854 L2440.93 347.477 L2441.38 345.435 L2441.84 343.51 L2442.3 341.116 L2442.76 337.82 L2443.22 333.867 L2443.68 329.719 L2444.14 325.423 L2444.59 320.714 L2445.05 315.414 L2445.51 309.792 L2445.97 304.298 L2446.43 298.91 L2446.89 293.656 L2447.35 288.506 L2447.8 283.691 L2448.26 279.622 L2448.72 276.384 L2449.18 273.683 L2449.64 271.269 L2450.1 268.696 L2450.56 266.098 L2451.01 263.512 L2451.47 260.24 L2451.93 256.449 L2452.39 252.555 L2452.85 248.29 L2453.31 243.243 L2453.77 237.882 L2454.22 232.609 L2454.68 227.632 L2455.14 223.344 L2455.6 219.875 L2456.06 216.529 L2456.52 213.098 L2456.98 209.688 L2457.43 206.246 L2457.89 203.113 L2458.35 200.994 L2458.81 200.323 L2459.27 201.037 L2459.73 203.281 L2460.19 206.791 L2460.64 210.463 L2461.1 213.192 L2461.56 215.126 L2462.02 216.359 L2462.48 216.865 L2462.94 216.49 L2463.4 215.655 L2463.85 214.84 L2464.31 214.484 L2464.77 214.499 L2465.23 214.265 L2465.69 213.586 L2466.15 212.816 L2466.61 212.071 L2467.06 211.531 L2467.52 211.328 L2467.98 211.672 L2468.44 212.326 L2468.9 213.115 L2469.36 213.922 L2469.82 214.804 L2470.27 215.905 L2470.73 217.206 L2471.19 218.934 L2471.65 221.357 L2472.11 224.277 L2472.57 227.481 L2473.03 230.962 L2473.48 235.224 L2473.94 240.399 L2474.4 245.992 L2474.86 251.397 L2475.32 256.119 L2475.78 259.583 L2476.24 261.879 L2476.69 263.531 L2477.15 265.075 L2477.61 266.624 L2478.07 268.206 L2478.53 270.287 L2478.99 273.196 L2479.45 276.566 L2479.9 280.189 L2480.36 283.75 L2480.82 287.449 L2481.28 291.111 L2481.74 294.943 L2482.2 299.145 L2482.66 303.714 L2483.11 308.617 L2483.57 313.894 L2484.03 319.044 L2484.49 323.947 L2484.95 328.396 L2485.41 331.915 L2485.87 334.632 L2486.32 337.136 L2486.78 340.07 L2487.24 343.496 L2487.7 347.181 L2488.16 351.147 L2488.62 355.068 L2489.08 358.606 L2489.53 361.561 L2489.99 364.147 L2490.45 366.38 L2490.91 368.301 L2491.37 369.693 L2491.83 371.208 L2492.29 373.653 L2492.74 377.113 L2493.2 381.611 L2493.66 386.865 L2494.12 392.484 L2494.58 397.697 L2495.04 402.269 L2495.5 406.01 L2495.95 409.249 L2496.41 412.324 L2496.87 415.302 L2497.33 417.974 L2497.79 420.013 L2498.25 421.919 L2498.71 423.671 L2499.16 425.36 L2499.62 427.171 L2500.08 429.272 L2500.54 431.433 L2501 433.284 L2501.46 434.857 L2501.92 436.143 L2502.37 437.269 L2502.83 438.091 L2503.29 438.659 L2503.75 438.992 L2504.21 439.587 L2504.67 440.904 L2505.13 442.827 L2505.58 445.159 L2506.04 447.788 L2506.5 450.453 L2506.96 453.279 L2507.42 455.972 L2507.88 458.413 L2508.34 461.213 L2508.79 464.222 L2509.25 467.435 L2509.71 470.791 L2510.17 473.94 L2510.63 476.462 L2511.09 477.883 L2511.55 478.318 L2512 477.975 L2512.46 477.255 L2512.92 476.472 L2513.38 476.323 L2513.84 476.914 L2514.3 479.042 L2514.76 482.094 L2515.21 485.62 L2515.67 488.971 L2516.13 491.702 L2516.59 493.718 L2517.05 495.071 L2517.51 495.697 L2517.97 495.151 L2518.42 493.779 L2518.88 492.176 L2519.34 491.048 L2519.8 490.991 L2520.26 492.319 L2520.72 494.823 L2521.18 497.203 L2521.63 499.273 L2522.09 501.108 L2522.55 502.844 L2523.01 504.572 L2523.47 506.591 L2523.93 508.758 L2524.39 510.843 L2524.84 512.279 L2525.3 512.847 L2525.76 512.948 L2526.22 513.132 L2526.68 513.619 L2527.14 514.833 L2527.6 516.295 L2528.05 517.82 L2528.51 519.029 L2528.97 519.446 L2529.43 519.325 L2529.89 519.015 L2530.35 518.72 L2530.81 518.798 L2531.26 519.433 L2531.72 520.67 L2532.18 522.463 L2532.64 524.701 L2533.1 527.33 L2533.56 530.416 L2534.02 534.171 L2534.47 538.391 L2534.93 542.797 L2535.39 547.242 L2535.85 551.106 L2536.31 554.45 L2536.77 557.409 L2537.23 560.061 L2537.69 562.174 L2538.14 564.139 L2538.6 566.701 L2539.06 569.829 L2539.52 573.081 L2539.98 575.556 L2540.44 577.098 L2540.9 577.899 L2541.35 577.799 L2541.81 577.392 L2542.27 577.343 L2542.73 577.856 L2543.19 579.212 L2543.65 580.88 L2544.11 582.299 L2544.56 583.275 L2545.02 584.14 L2545.48 585.338 L2545.94 587.15 L2546.4 589.543 L2546.86 592.603 L2547.32 596.378 L2547.77 600.705 L2548.23 605.465 L2548.69 610.857 L2549.15 616.586 L2549.61 622.188 L2550.07 627.063 L2550.53 630.651 L2550.98 633.164 L2551.44 635.038 L2551.9 636.667 L2552.36 638.111 L2552.82 639.945 L2553.28 642.478 L2553.74 645.737 L2554.19 649.973 L2554.65 655.026 L2555.11 660.383 L2555.57 665.077 L2556.03 668.49 L2556.49 671.189 L2556.95 674.09 L2557.4 677.394 L2557.86 681.853 L2558.32 687.214 L2558.78 692.904 L2559.24 698.386 L2559.7 703.528 L2560.16 707.674 L2560.61 711.086 L2561.07 714.408 L2561.53 717.546 L2561.99 720.939 L2562.45 724.484 L2562.91 727.481 L2563.37 729.83 L2563.82 732.426 L2564.28 736.177 L2564.74 740.827 L2565.2 746.333 L2565.66 752.602 L2566.12 758.759 L2566.58 764.64 L2567.03 770.352 L2567.49 775.674 L2567.95 780.709 L2568.41 785.219 L2568.87 789.493 L2569.33 793.869 L2569.79 798.208 L2570.24 802.874 L2570.7 808.301 L2571.16 814.332 L2571.62 820.29 L2572.08 826.216 L2572.54 832.147 L2573 838.152 L2573.45 844.041 L2573.91 849.373 L2574.37 854.175 L2574.83 858.598 L2575.29 862.252 L2575.75 865.015 L2576.21 867.389 L2576.66 870.22 L2577.12 873.543 L2577.58 877.145 L2578.04 880.784 L2578.5 884.105 L2578.96 887.464 L2579.42 891.625 L2579.87 896.202 L2580.33 900.738 L2580.79 905.219 L2581.25 909.278 L2581.71 913.12 L2582.17 916.779 L2582.63 920.705 L2583.08 925.063 L2583.54 929.509 L2584 933.362 L2584.46 936.634 L2584.92 939.826 L2585.38 943.253 L2585.84 946.89 L2586.29 950.601 L2586.75 954.579 L2587.21 958.657 L2587.67 962.276 L2588.13 964.924 L2588.59 966.445 L2589.05 967.396 L2589.5 968.389 L2589.96 969.282 L2590.42 969.904 L2590.88 970.05 L2591.34 969.563 L2591.8 968.385 L2592.26 966.773 L2592.71 965.004 L2593.17 963.618 L2593.63 962.445 L2594.09 961.563 L2594.55 961.018 L2595.01 960.864 L2595.47 961.067 L2595.92 961.052 L2596.38 960.767 L2596.84 960.144 L2597.3 959.364 L2597.76 958.79 L2598.22 958.666 L2598.68 958.743 L2599.13 958.831 L2599.59 958.845 L2600.05 958.55 L2600.51 957.713 L2600.97 956.102 L2601.43 953.957 L2601.89 951.451 L2602.34 949.302 L2602.8 947.705 L2603.26 946.458 L2603.72 945.461 L2604.18 943.945 L2604.64 941.08 L2605.1 936.816 L2605.55 931.837 L2606.01 927.031 L2606.47 922.97 L2606.93 919.77 L2607.39 917.045 L2607.85 914.716 L2608.31 912.435 L2608.76 909.827 L2609.22 906.894 L2609.68 903.747 L2610.14 900.447 L2610.6 897.81 L2611.06 896.116 L2611.52 895.273 L2611.97 894.791 L2612.43 894.374 L2612.89 894.082 L2613.35 893.65 L2613.81 892.719 L2614.27 891.126 L2614.73 888.737 L2615.18 885.389 L2615.64 881.178 L2616.1 876.417 L2616.56 871.303 L2617.02 866.305 L2617.48 861.825 L2617.94 858.047 L2618.39 854.91 L2618.85 852.028 L2619.31 849.419 L2619.77 846.933 L2620.23 844.5 L2620.69 842.067 L2621.15 839.737 L2621.6 837.306 L2622.06 835.004 L2622.52 833.025 L2622.98 831.498 L2623.44 830.013 L2623.9 828.051 L2624.36 825.452 L2624.81 822.484 L2625.27 819.127 L2625.73 815.347 L2626.19 811.305 L2626.65 807.275 L2627.11 803.513 L2627.57 800.272 L2628.02 797.611 L2628.48 795.829 L2628.94 794.616 L2629.4 793.467 L2629.86 792.03 L2630.32 789.848 L2630.78 787.15 L2631.23 784.423 L2631.69 781.954 L2632.15 780.043 L2632.61 778.813 L2633.07 777.791 L2633.53 776.91 L2633.99 775.866 L2634.44 774.475 L2634.9 772.366 L2635.36 769.592 L2635.82 766.573 L2636.28 763.391 L2636.74 760.041 L2637.2 756.132 L2637.65 751.332 L2638.11 746.29 L2638.57 741.684 L2639.03 737.73 L2639.49 734.552 L2639.95 731.791 L2640.41 729.378 L2640.86 727.336 L2641.32 725.342 L2641.78 723.525 L2642.24 721.717 L2642.7 719.788 L2643.16 717.377 L2643.62 714.054 L2644.07 710.487 L2644.53 707.241 L2644.99 704.172 L2645.45 701.513 L2645.91 699.277 L2646.37 697.055 L2646.83 694.864 L2647.28 692.472 L2647.74 690.299 L2648.2 688.397 L2648.66 685.969 L2649.12 682.583 L2649.58 678.007 L2650.04 673.219 L2650.49 668.832 L2650.95 665.478 L2651.41 663.127 L2651.87 661.264 L2652.33 659.148 L2652.79 656.435 L2653.25 652.977 L2653.7 649.219 L2654.16 645.806 L2654.62 642.456 L2655.08 639.259 L2655.54 636.028 L2656 632.586 L2656.46 628.76 L2656.91 624.902 L2657.37 621.492 L2657.83 618.732 L2658.29 616.49 L2658.75 614.506 L2659.21 612.234 L2659.67 609.773 L2660.12 607.195 L2660.58 604.339 L2661.04 601.146 L2661.5 597.638 L2661.96 594 L2662.42 590.268 L2662.88 586.345 L2663.33 582.247 L2663.79 578.621 L2664.25 575.477 L2664.71 573.143 L2665.17 570.991 L2665.63 568.156 L2666.09 564.666 L2666.54 561.32 L2667 558.483 L2667.46 555.946 L2667.92 553.318 L2668.38 550.814 L2668.84 548.265 L2669.3 545.651 L2669.75 543.24 L2670.21 541.32 L2670.67 539.662 L2671.13 537.857 L2671.59 536.501 L2672.05 535.85 L2672.51 535.042 L2672.96 533.595 L2673.42 531.087 L2673.88 527.557 L2674.34 523.331 L2674.8 519.021 L2675.26 515.507 L2675.72 512.853 L2676.17 510.975 L2676.63 509.958 L2677.09 509.494 L2677.55 509.772 L2678.01 510.422 L2678.47 510.885 L2678.93 510.247 L2679.38 508.529 L2679.84 505.743 L2680.3 502.078 L2680.76 498.348 L2681.22 495.082 L2681.68 492.488 L2682.14 491.047 L2682.59 491.198 L2683.05 492.695 L2683.51 494.756 L2683.97 498.593 L2683.97 477.795 L2683.51 479.145 L2683.05 479.358 L2682.59 478.789 L2682.14 478.881 L2681.68 480.341 L2681.22 482.931 L2680.76 486.215 L2680.3 489.981 L2679.84 493.68 L2679.38 496.492 L2678.93 498.227 L2678.47 498.873 L2678.01 498.413 L2677.55 497.764 L2677.09 497.487 L2676.63 497.951 L2676.17 498.967 L2675.72 500.845 L2675.26 503.499 L2674.8 507.014 L2674.34 511.324 L2673.88 515.55 L2673.42 519.079 L2672.96 521.588 L2672.51 523.035 L2672.05 523.843 L2671.59 524.494 L2671.13 525.85 L2670.67 527.655 L2670.21 529.312 L2669.75 531.233 L2669.3 533.644 L2668.84 536.258 L2668.38 538.807 L2667.92 541.311 L2667.46 543.939 L2667 546.476 L2666.54 549.313 L2666.09 552.659 L2665.63 556.149 L2665.17 558.984 L2664.71 561.136 L2664.25 563.47 L2663.79 566.614 L2663.33 570.24 L2662.88 574.338 L2662.42 578.261 L2661.96 581.993 L2661.5 585.631 L2661.04 589.139 L2660.58 592.331 L2660.12 595.188 L2659.67 597.766 L2659.21 600.227 L2658.75 602.499 L2658.29 604.483 L2657.83 606.724 L2657.37 609.485 L2656.91 612.895 L2656.46 616.753 L2656 620.579 L2655.54 624.021 L2655.08 627.252 L2654.62 630.449 L2654.16 633.799 L2653.7 637.212 L2653.25 640.97 L2652.79 644.428 L2652.33 647.141 L2651.87 649.257 L2651.41 651.12 L2650.95 653.471 L2650.49 656.825 L2650.04 661.212 L2649.58 665.999 L2649.12 670.576 L2648.66 673.961 L2648.2 676.389 L2647.74 678.291 L2647.28 680.465 L2646.83 682.857 L2646.37 685.048 L2645.91 687.27 L2645.45 689.505 L2644.99 692.165 L2644.53 695.234 L2644.07 698.48 L2643.62 702.047 L2643.16 705.37 L2642.7 707.781 L2642.24 709.71 L2641.78 711.518 L2641.32 713.335 L2640.86 715.329 L2640.41 717.371 L2639.95 719.784 L2639.49 722.545 L2639.03 725.722 L2638.57 729.676 L2638.11 734.283 L2637.65 739.325 L2637.2 744.125 L2636.74 748.034 L2636.28 751.384 L2635.82 754.566 L2635.36 757.584 L2634.9 760.359 L2634.44 762.468 L2633.99 763.859 L2633.53 764.903 L2633.07 765.783 L2632.61 766.806 L2632.15 768.036 L2631.69 769.947 L2631.23 772.416 L2630.78 775.143 L2630.32 777.84 L2629.86 780.023 L2629.4 781.46 L2628.94 782.609 L2628.48 783.822 L2628.02 785.604 L2627.57 788.264 L2627.11 791.506 L2626.65 795.268 L2626.19 799.298 L2625.73 803.34 L2625.27 807.12 L2624.81 810.477 L2624.36 813.445 L2623.9 816.044 L2623.44 818.006 L2622.98 819.491 L2622.52 821.018 L2622.06 822.996 L2621.6 825.299 L2621.15 827.73 L2620.69 830.059 L2620.23 832.493 L2619.77 834.926 L2619.31 837.412 L2618.85 840.021 L2618.39 842.902 L2617.94 846.04 L2617.48 849.818 L2617.02 854.298 L2616.56 859.296 L2616.1 864.41 L2615.64 869.171 L2615.18 873.381 L2614.73 876.73 L2614.27 879.119 L2613.81 880.712 L2613.35 881.643 L2612.89 882.075 L2612.43 882.367 L2611.97 882.784 L2611.52 883.266 L2611.06 884.108 L2610.6 885.803 L2610.14 888.44 L2609.68 891.74 L2609.22 894.887 L2608.76 897.82 L2608.31 900.428 L2607.85 902.709 L2607.39 905.038 L2606.93 907.763 L2606.47 910.962 L2606.01 915.024 L2605.55 919.829 L2605.1 924.809 L2604.64 929.073 L2604.18 931.938 L2603.72 933.453 L2603.26 934.451 L2602.8 935.698 L2602.34 937.295 L2601.89 939.443 L2601.43 941.949 L2600.97 944.095 L2600.51 945.706 L2600.05 946.543 L2599.59 946.838 L2599.13 946.824 L2598.68 946.736 L2598.22 946.659 L2597.76 946.782 L2597.3 947.357 L2596.84 948.137 L2596.38 948.76 L2595.92 949.045 L2595.47 949.06 L2595.01 948.856 L2594.55 949.011 L2594.09 949.556 L2593.63 950.438 L2593.17 951.61 L2592.71 952.997 L2592.26 954.766 L2591.8 956.377 L2591.34 957.556 L2590.88 958.043 L2590.42 957.897 L2589.96 957.274 L2589.5 956.382 L2589.05 955.389 L2588.59 954.438 L2588.13 952.917 L2587.67 950.269 L2587.21 946.65 L2586.75 942.572 L2586.29 938.594 L2585.84 934.883 L2585.38 931.246 L2584.92 927.819 L2584.46 924.627 L2584 921.355 L2583.54 917.502 L2583.08 913.056 L2582.63 908.698 L2582.17 904.772 L2581.71 901.113 L2581.25 897.271 L2580.79 893.211 L2580.33 888.73 L2579.87 884.195 L2579.42 879.618 L2578.96 875.457 L2578.5 872.098 L2578.04 868.777 L2577.58 865.138 L2577.12 861.535 L2576.66 858.213 L2576.21 855.382 L2575.75 853.008 L2575.29 850.245 L2574.83 846.591 L2574.37 842.168 L2573.91 837.366 L2573.45 832.034 L2573 826.145 L2572.54 820.14 L2572.08 814.209 L2571.62 808.283 L2571.16 802.325 L2570.7 796.294 L2570.24 790.867 L2569.79 786.201 L2569.33 781.862 L2568.87 777.486 L2568.41 773.212 L2567.95 768.702 L2567.49 763.667 L2567.03 758.344 L2566.58 752.633 L2566.12 746.752 L2565.66 740.595 L2565.2 734.326 L2564.74 728.82 L2564.28 724.17 L2563.82 720.418 L2563.37 717.823 L2562.91 715.474 L2562.45 712.477 L2561.99 708.932 L2561.53 705.538 L2561.07 702.401 L2560.61 699.079 L2560.16 695.666 L2559.7 691.521 L2559.24 686.379 L2558.78 680.897 L2558.32 675.207 L2557.86 669.846 L2557.4 665.387 L2556.95 662.083 L2556.49 659.182 L2556.03 656.483 L2555.57 653.069 L2555.11 648.376 L2554.65 643.019 L2554.19 637.966 L2553.74 633.729 L2553.28 630.471 L2552.82 627.938 L2552.36 626.104 L2551.9 624.66 L2551.44 623.03 L2550.98 621.156 L2550.53 618.644 L2550.07 615.056 L2549.61 610.181 L2549.15 604.579 L2548.69 598.85 L2548.23 593.458 L2547.77 588.697 L2547.32 584.371 L2546.86 580.596 L2546.4 577.536 L2545.94 575.143 L2545.48 573.331 L2545.02 572.133 L2544.56 571.268 L2544.11 570.292 L2543.65 568.872 L2543.19 567.205 L2542.73 565.848 L2542.27 565.335 L2541.81 565.385 L2541.35 565.792 L2540.9 565.892 L2540.44 565.09 L2539.98 563.548 L2539.52 561.073 L2539.06 557.822 L2538.6 554.694 L2538.14 552.132 L2537.69 550.167 L2537.23 548.054 L2536.77 545.402 L2536.31 542.443 L2535.85 539.099 L2535.39 535.235 L2534.93 530.79 L2534.47 526.383 L2534.02 522.164 L2533.56 518.408 L2533.1 515.323 L2532.64 512.694 L2532.18 510.456 L2531.72 508.663 L2531.26 507.426 L2530.81 506.791 L2530.35 506.713 L2529.89 507.007 L2529.43 507.318 L2528.97 507.439 L2528.51 507.021 L2528.05 505.813 L2527.6 504.288 L2527.14 502.825 L2526.68 501.612 L2526.22 501.125 L2525.76 500.941 L2525.3 500.84 L2524.84 500.272 L2524.39 498.836 L2523.93 496.751 L2523.47 494.584 L2523.01 492.565 L2522.55 490.837 L2522.09 489.101 L2521.63 487.266 L2521.18 485.196 L2520.72 482.816 L2520.26 480.312 L2519.8 478.984 L2519.34 479.041 L2518.88 480.169 L2518.42 481.771 L2517.97 483.143 L2517.51 483.689 L2517.05 483.063 L2516.59 481.71 L2516.13 479.695 L2515.67 476.963 L2515.21 473.613 L2514.76 470.087 L2514.3 467.035 L2513.84 464.907 L2513.38 464.316 L2512.92 464.464 L2512.46 465.247 L2512 465.968 L2511.55 466.31 L2511.09 465.876 L2510.63 464.455 L2510.17 461.933 L2509.71 458.784 L2509.25 455.428 L2508.79 452.215 L2508.34 449.205 L2507.88 446.406 L2507.42 443.965 L2506.96 441.272 L2506.5 438.446 L2506.04 435.781 L2505.58 433.152 L2505.13 430.82 L2504.67 428.897 L2504.21 427.58 L2503.75 426.985 L2503.29 426.652 L2502.83 426.084 L2502.37 425.261 L2501.92 424.136 L2501.46 422.85 L2501 421.277 L2500.54 419.426 L2500.08 417.264 L2499.62 415.163 L2499.16 413.353 L2498.71 411.663 L2498.25 409.912 L2497.79 408.006 L2497.33 405.967 L2496.87 403.295 L2496.41 400.317 L2495.95 397.242 L2495.5 394.003 L2495.04 390.262 L2494.58 385.69 L2494.12 380.477 L2493.66 374.857 L2493.2 369.603 L2492.74 365.106 L2492.29 361.646 L2491.83 359.201 L2491.37 357.685 L2490.91 356.294 L2490.45 354.373 L2489.99 352.139 L2489.53 349.554 L2489.08 346.599 L2488.62 343.061 L2488.16 339.14 L2487.7 335.174 L2487.24 331.489 L2486.78 328.063 L2486.32 325.129 L2485.87 322.625 L2485.41 319.907 L2484.95 316.389 L2484.49 311.94 L2484.03 307.037 L2483.57 301.887 L2483.11 296.609 L2482.66 291.707 L2482.2 287.137 L2481.74 282.935 L2481.28 279.103 L2480.82 275.441 L2480.36 271.743 L2479.9 268.182 L2479.45 264.559 L2478.99 261.189 L2478.53 258.279 L2478.07 256.199 L2477.61 254.616 L2477.15 253.068 L2476.69 251.524 L2476.24 249.872 L2475.78 247.576 L2475.32 244.112 L2474.86 239.39 L2474.4 233.985 L2473.94 228.391 L2473.48 223.217 L2473.03 218.955 L2472.57 215.474 L2472.11 212.269 L2471.65 209.35 L2471.19 206.927 L2470.73 205.199 L2470.27 203.898 L2469.82 202.797 L2469.36 201.915 L2468.9 201.108 L2468.44 200.319 L2467.98 199.665 L2467.52 199.32 L2467.06 199.524 L2466.61 200.064 L2466.15 200.809 L2465.69 201.579 L2465.23 202.258 L2464.77 202.491 L2464.31 202.477 L2463.85 202.833 L2463.4 203.648 L2462.94 204.483 L2462.48 204.858 L2462.02 204.352 L2461.56 203.119 L2461.1 201.185 L2460.64 198.456 L2460.19 194.784 L2459.73 191.274 L2459.27 189.029 L2458.81 188.316 L2458.35 188.987 L2457.89 191.105 L2457.43 194.239 L2456.98 197.681 L2456.52 201.091 L2456.06 204.522 L2455.6 207.868 L2455.14 211.337 L2454.68 215.625 L2454.22 220.602 L2453.77 225.874 L2453.31 231.235 L2452.85 236.283 L2452.39 240.548 L2451.93 244.442 L2451.47 248.232 L2451.01 251.505 L2450.56 254.091 L2450.1 256.689 L2449.64 259.261 L2449.18 261.676 L2448.72 264.376 L2448.26 267.615 L2447.8 271.684 L2447.35 276.499 L2446.89 281.648 L2446.43 286.903 L2445.97 292.291 L2445.51 297.785 L2445.05 303.407 L2444.59 308.707 L2444.14 313.415 L2443.68 317.712 L2443.22 321.86 L2442.76 325.813 L2442.3 329.109 L2441.84 331.503 L2441.38 333.428 L2440.93 335.47 L2440.47 337.847 L2440.01 341.01 L2439.55 344.833 L2439.09 348.96 L2438.63 353.135 L2438.17 356.935 L2437.72 360.502 L2437.26 364.014 L2436.8 368.404 L2436.34 373.397 L2435.88 378.834 L2435.42 384.566 L2434.96 390.296 L2434.51 396.022 L2434.05 401.978 L2433.59 408.111 L2433.13 413.931 L2432.67 419.593 L2432.21 424.846 L2431.75 429.711 L2431.3 433.753 L2430.84 436.856 L2430.38 439.064 L2429.92 440.985 L2429.46 443.048 L2429 445.153 L2428.54 447.561 L2428.09 450.173 L2427.63 452.977 L2427.17 456.049 L2426.71 459.209 L2426.25 461.9 L2425.79 463.958 L2425.33 465.75 L2424.88 467.626 L2424.42 470.124 L2423.96 473.208 L2423.5 476.22 L2423.04 478.605 L2422.58 480.405 L2422.12 481.807 L2421.67 483.348 L2421.21 485.159 L2420.75 487.328 L2420.29 489.604 L2419.83 492.665 L2419.37 496.811 L2418.91 501.586 L2418.46 506.24 L2418 510.325 L2417.54 513.524 L2417.08 515.694 L2416.62 517.568 L2416.16 519.658 L2415.7 521.957 L2415.25 524.054 L2414.79 525.697 L2414.33 526.894 L2413.87 528.003 L2413.41 529.027 L2412.95 530.017 L2412.49 531.212 L2412.04 532.217 L2411.58 533.585 L2411.12 535.641 L2410.66 538.487 L2410.2 542.15 L2409.74 545.981 L2409.28 549.368 L2408.83 552.094 L2408.37 554.124 L2407.91 555.676 L2407.45 556.368 L2406.99 556.554 L2406.53 557.071 L2406.07 558.542 L2405.62 561.262 L2405.16 564.696 L2404.7 568.295 L2404.24 571.908 L2403.78 575.023 L2403.32 577.012 L2402.86 578.031 L2402.41 578.461 L2401.95 578.211 L2401.49 577.589 L2401.03 577.198 L2400.57 577.38 L2400.11 577.989 L2399.65 578.9 L2399.2 580.125 L2398.74 581.354 L2398.28 582.608 L2397.82 583.983 L2397.36 585.157 L2396.9 586.203 L2396.44 586.937 L2395.99 587.377 L2395.53 587.838 L2395.07 588.896 L2394.61 591.156 L2394.15 594.897 L2393.69 599.41 L2393.23 604.159 L2392.78 608.763 L2392.32 612.553 L2391.86 615.446 L2391.4 617.543 L2390.94 619.012 L2390.48 619.944 L2390.02 620.427 L2389.57 620.352 L2389.11 620.112 L2388.65 619.853 L2388.19 619.897 L2387.73 620.465 L2387.27 621.384 L2386.81 622.694 L2386.36 624.278 L2385.9 625.853 L2385.44 627.596 L2384.98 629.481 L2384.52 631.129 L2384.06 632.348 L2383.6 633.494 L2383.15 635.071 L2382.69 637.447 L2382.23 640.381 L2381.77 643.089 L2381.31 645.249 L2380.85 647.26 L2380.39 649.632 L2379.94 652.593 L2379.48 655.675 L2379.02 658.691 L2378.56 661.412 L2378.1 663.703 L2377.64 665.586 L2377.18 667.238 L2376.73 668.96 L2376.27 670.753 L2375.81 672.39 L2375.35 674.352 L2374.89 677.184 L2374.43 681.116 L2373.97 685.596 L2373.52 690.23 L2373.06 694.543 L2372.6 698.231 L2372.14 701.118 L2371.68 703.213 L2371.22 704.375 L2370.76 705.253 L2370.31 706.655 L2369.85 708.434 L2369.39 710.618 L2368.93 713.01 L2368.47 715.781 L2368.01 718.818 L2367.55 721.901 L2367.1 724.848 L2366.64 727.898 L2366.18 730.783 L2365.72 733.245 L2365.26 735.398 L2364.8 737.005 L2364.34 738.467 L2363.89 740.337 L2363.43 742.839 L2362.97 745.601 L2362.51 748.193 L2362.05 750.67 L2361.59 752.723 L2361.13 754.067 L2360.68 754.816 L2360.22 755.246 L2359.76 756.263 L2359.3 758.565 L2358.84 761.691 L2358.38 765.441 L2357.92 769.381 L2357.47 773.602 L2357.01 777.636 L2356.55 781.079 L2356.09 783.774 L2355.63 785.389 L2355.17 786.104 L2354.71 786.414 L2354.26 786.578 L2353.8 786.932 L2353.34 787.329 L2352.88 787.993 L2352.42 789.384 L2351.96 791.893 L2351.5 795.36 L2351.05 799.656 L2350.59 804.001 L2350.13 807.395 L2349.67 810.615 L2349.21 813.852 L2348.75 817.145 L2348.29 820.338 L2347.84 823.404 L2347.38 826.246 L2346.92 829.093 L2346.46 831.851 L2346 834.286 L2345.54 835.857 L2345.08 835.969 L2344.63 834.753 L2344.17 832.876 L2343.71 831.138 L2343.25 830.21 L2342.79 830.319 L2342.33 831.081 L2341.87 832.211 L2341.42 833.269 L2340.96 834.703 L2340.5 836.917 L2340.04 839.899 L2339.58 843.447 L2339.12 846.933 L2338.66 849.815 L2338.21 851.77 L2337.75 852.663 L2337.29 853.064 L2336.83 853.159 L2336.37 852.885 L2335.91 852.439 L2335.45 852.239 L2335 852.025 L2334.54 851.507 L2334.08 850.729 L2333.62 849.779 L2333.16 849.29 L2332.7 849.568 L2332.24 850.147 L2331.79 850.724 L2331.33 851.162 L2330.87 851.1 L2330.41 850.788 L2329.95 850.568 L2329.49 850.525 L2329.03 851.047 L2328.58 851.851 L2328.12 852.808 L2327.66 853.783 L2327.2 854.942 L2326.74 855.941 L2326.28 856.275 L2325.82 855.512 L2325.37 853.857 L2324.91 851.442 L2324.45 848.787 L2323.99 846.339 L2323.53 844.588 L2323.07 843.478 L2322.61 843.521 L2322.16 844.2 L2321.7 845.397 L2321.24 846.656 L2320.78 847.698 L2320.32 847.744 L2319.86 846.275 L2319.4 843.71 L2318.95 840.384 L2318.49 837.322 L2318.03 834.638 L2317.57 832.547 L2317.11 831.093 L2316.65 830.1 L2316.19 829.047 L2315.74 827.639 L2315.28 825.833 L2314.82 823.66 L2314.36 820.942 L2313.9 818.018 L2313.44 814.992 L2312.98 812.035 L2312.53 809.211 L2312.07 806.616 L2311.61 803.825 L2311.15 801.19 L2310.69 798.741 L2310.23 796.444 L2309.77 794.162 L2309.32 792.166 L2308.86 790.08 L2308.4 787.812 L2307.94 785.213 L2307.48 782.162 L2307.02 778.956 L2306.56 775.39 L2306.11 771.79 L2305.65 768.013 L2305.19 764.065 L2304.73 759.806 L2304.27 755.428 L2303.81 751.144 L2303.35 747.046 L2302.9 743.297 L2302.44 740.205 L2301.98 737.445 L2301.52 734.892 L2301.06 732.313 L2300.6 729.339 L2300.14 726.212 L2299.69 722.612 L2299.23 718.409 L2298.77 713.956 L2298.31 709.798 L2297.85 705.863 L2297.39 701.948 L2296.93 697.46 L2296.48 692.55 L2296.02 687.244 L2295.56 681.785 L2295.1 676.727 L2294.64 671.767 L2294.18 666.513 L2293.72 660.961 L2293.27 655.927 L2292.81 651.499 L2292.35 647.079 L2291.89 642.508 L2291.43 637.988 L2290.97 633.466 L2290.51 628.688 L2290.06 623.167 L2289.6 617.38 L2289.14 611.585 L2288.68 605.996 L2288.22 600.856 L2287.76 595.777 L2287.3 590.666 L2286.85 585.794 L2286.39 581.609 L2285.93 578.019 L2285.47 574.266 L2285.01 570.689 L2284.55 567.36 L2284.09 563.843 L2283.64 559.735 L2283.18 554.809 L2282.72 549.429 L2282.26 544 L2281.8 538.881 L2281.34 534.224 L2280.88 530.088 L2280.43 526.609 L2279.97 523.749 L2279.51 521.321 L2279.05 518.737 L2278.59 515.969 L2278.13 512.68 L2277.67 508.915 L2277.22 505.001 L2276.76 501.432 L2276.3 498.432 L2275.84 496.14 L2275.38 494.14 L2274.92 492.285 L2274.46 490.719 L2274.01 489.07 L2273.55 486.682 L2273.09 483.357 L2272.63 479.69 L2272.17 476.282 L2271.71 472.97 L2271.25 469.499 L2270.8 465.647 L2270.34 461.757 L2269.88 458.318 L2269.42 455.173 L2268.96 451.726 L2268.5 448.291 L2268.04 444.935 L2267.59 441.311 L2267.13 437.604 L2266.67 434.139 L2266.21 431.613 L2265.75 429.839 L2265.29 428.744 L2264.83 427.524 L2264.38 426.396 L2263.92 425.396 L2263.46 424.934 L2263 424.734 L2262.54 424.588 L2262.08 424.498 L2261.62 424.652 L2261.17 425.009 L2260.71 424.806 L2260.25 423.805 L2259.79 422.086 L2259.33 419.595 L2258.87 416.384 L2258.41 413.045 L2257.96 409.881 L2257.5 406.864 L2257.04 403.831 L2256.58 401.136 L2256.12 399.054 L2255.66 397.582 L2255.2 396.442 L2254.75 395.504 L2254.29 395.015 L2253.83 394.95 L2253.37 394.672 L2252.91 393.91 L2252.45 392.867 L2251.99 391.607 L2251.54 390.345 L2251.08 389.149 L2250.62 388.282 L2250.16 387.592 L2249.7 386.558 L2249.24 385.543 L2248.78 384.846 L2248.33 384.565 L2247.87 384.436 L2247.41 383.675 L2246.95 382.378 L2246.49 380.909 L2246.03 379.439 L2245.57 378.242 L2245.12 377.38 L2244.66 376.816 L2244.2 375.825 L2243.74 374.223 L2243.28 372.034 L2242.82 369.468 L2242.36 367.131 L2241.91 365.287 L2241.45 363.472 L2240.99 361.897 L2240.53 360.509 L2240.07 359.314 L2239.61 358.602 L2239.15 358.04 L2238.7 358.089 L2238.24 358.715 L2237.78 359.34 L2237.32 359.624 L2236.86 359.49 L2236.4 359.468 L2235.94 359.347 L2235.49 358.664 L2235.03 357.022 L2234.57 354.736 L2234.11 352.382 L2233.65 350.094 L2233.19 347.821 L2232.73 345.783 L2232.28 343.532 L2231.82 341.018 L2231.36 338.109 L2230.9 335.027 L2230.44 332.326 L2229.98 330.029 L2229.52 328.107 L2229.07 326.188 L2228.61 324.247 L2228.15 322.443 L2227.69 321.316 L2227.23 320.817 L2226.77 320.644 L2226.31 319.975 L2225.86 318.685 L2225.4 316.955 L2224.94 315.263 L2224.48 314.279 L2224.02 313.488 L2223.56 312.891 L2223.1 312.024 L2222.65 310.208 L2222.19 307.256 L2221.73 303.941 L2221.27 300.455 L2220.81 297.721 L2220.35 295.891 L2219.89 295.025 L2219.44 294.741 L2218.98 294.962 L2218.52 295.522 L2218.06 296.233 L2217.6 296.569 L2217.14 296.382 L2216.68 295.993 L2216.23 295.42 L2215.77 294.863 L2215.31 294.424 L2214.85 293.907 L2214.39 292.968 L2213.93 291.638 L2213.47 290.034 L2213.02 288.136 L2212.56 285.987 L2212.1 283.764 L2211.64 281.238 L2211.18 278.464 L2210.72 275.494 L2210.26 272.039 L2209.81 268.649 L2209.35 265.6 L2208.89 263.041 L2208.43 261.485 L2207.97 260.694 L2207.51 260.15 L2207.05 259.593 L2206.6 259.123 L2206.14 258.724 L2205.68 258.553 L2205.22 258.74 L2204.76 259.218 L2204.3 259.891 L2203.84 260.619 L2203.39 260.624 L2202.93 259.593 L2202.47 258.167 L2202.01 256.577 L2201.55 254.633 L2201.09 252.58 L2200.63 250.673 L2200.18 249.051 L2199.72 247.659 L2199.26 246.494 L2198.8 245.741 L2198.34 245.001 L2197.88 244.348 L2197.42 244.089 L2196.97 244.58 L2196.51 245.657 L2196.05 247.26 L2195.59 249.181 L2195.13 251.306 L2194.67 253.349 L2194.21 255.202 L2193.76 256.792 L2193.3 258.139 L2192.84 259.076 L2192.38 259.837 L2191.92 260.478 L2191.46 261.273 L2191 262.753 L2190.54 264.64 L2190.09 266.737 L2189.63 268.937 L2189.17 271.576 L2188.71 274.55 L2188.25 277.543 L2187.79 280.418 L2187.33 283.362 L2186.88 286.611 L2186.42 290.342 L2185.96 294.142 L2185.5 297.165 L2185.04 299.236 L2184.58 300.679 L2184.12 302.081 L2183.67 303.398 L2183.21 305.373 L2182.75 308.461 L2182.29 312.953 L2181.83 318.399 L2181.37 323.673 L2180.91 328.213 L2180.46 332.601 L2180 337.113 L2179.54 342.056 L2179.08 347.056 L2178.62 352.113 L2178.16 357.357 L2177.7 362.657 L2177.25 368.154 L2176.79 373.462 L2176.33 377.862 L2175.87 381.209 L2175.41 383.64 L2174.95 385.621 L2174.49 387.749 L2174.04 390.497 L2173.58 394.191 L2173.12 399.12 L2172.66 405.302 L2172.2 411.87 L2171.74 418.392 L2171.28 424.518 L2170.83 430.388 L2170.37 436.345 L2169.91 443 L2169.45 449.624 L2168.99 455.706 L2168.53 460.893 L2168.07 465.601 L2167.62 470.267 L2167.16 475.255 L2166.7 480.549 L2166.24 485.714 L2165.78 490.584 L2165.32 494.793 L2164.86 497.992 L2164.41 500.611 L2163.95 503.492 L2163.49 507.075 L2163.03 511.412 L2162.57 515.816 L2162.11 519.348 L2161.65 521.68 L2161.2 523.388 L2160.74 525.414 L2160.28 528.561 L2159.82 532.901 L2159.36 538.063 L2158.9 543.589 L2158.44 548.912 L2157.99 553.826 L2157.53 558.599 L2157.07 562.987 L2156.61 566.611 L2156.15 569.575 L2155.69 572.325 L2155.23 574.889 L2154.78 577.202 L2154.32 579.362 L2153.86 581.422 L2153.4 583.288 L2152.94 585.108 L2152.48 587.674 L2152.02 591.224 L2151.57 595.331 L2151.11 599.192 L2150.65 602.468 L2150.19 605.345 L2149.73 607.228 L2149.27 608.618 L2148.81 610.294 L2148.36 612.623 L2147.9 615.211 L2147.44 617.695 L2146.98 619.978 L2146.52 621.687 L2146.06 623.474 L2145.6 625.762 L2145.15 628.172 L2144.69 630.505 L2144.23 632.444 L2143.77 634.005 L2143.31 635.398 L2142.85 637.08 L2142.39 639.283 L2141.94 642.068 L2141.48 645.484 L2141.02 649.557 L2140.56 653.59 L2140.1 657.398 L2139.64 660.949 L2139.18 664.13 L2138.73 666.966 L2138.27 669.434 L2137.81 671.504 L2137.35 673.57 L2136.89 676.095 L2136.43 679.014 L2135.97 682.043 L2135.52 685.405 L2135.06 688.938 L2134.6 692.497 L2134.14 695.688 L2133.68 698.573 L2133.22 701.25 L2132.76 704.158 L2132.31 707.32 L2131.85 710.702 L2131.39 714.326 L2130.93 717.851 L2130.47 721.04 L2130.01 724.302 L2129.55 728.046 L2129.1 732.388 L2128.64 736.668 L2128.18 740.106 L2127.72 742.727 L2127.26 744.41 L2126.8 745.598 L2126.34 746.787 L2125.89 748.502 L2125.43 750.34 L2124.97 752.406 L2124.51 754.765 L2124.05 757.229 L2123.59 759.093 L2123.13 760.543 L2122.68 762.032 L2122.22 763.523 L2121.76 765.173 L2121.3 767.37 L2120.84 769.709 L2120.38 771.949 L2119.92 774.017 L2119.47 776.27 L2119.01 778.694 L2118.55 780.931 L2118.09 783.318 L2117.63 785.686 L2117.17 788.085 L2116.71 790.286 L2116.26 792.179 L2115.8 793.576 L2115.34 794.512 L2114.88 795.144 L2114.42 795.743 L2113.96 797.034 L2113.5 799.11 L2113.05 801.974 L2112.59 805.041 L2112.13 807.673 L2111.67 809.332 L2111.21 809.923 L2110.75 809.52 L2110.29 808.425 L2109.84 807.075 L2109.38 805.57 L2108.92 803.613 L2108.46 801.413 L2108 799.39 L2107.54 797.502 L2107.08 795.877 L2106.63 794.739 L2106.17 794.495 L2105.71 795.167 L2105.25 796.256 L2104.79 797.629 L2104.33 798.596 L2103.87 799.726 L2103.42 800.684 L2102.96 801.151 L2102.5 800.962 L2102.04 800.013 L2101.58 798.438 L2101.12 796.894 L2100.66 795.437 L2100.21 793.604 L2099.75 791.119 L2099.29 788.032 L2098.83 785.053 L2098.37 782.831 L2097.91 781.453 L2097.45 780.717 L2097 780.365 L2096.54 779.829 L2096.08 778.584 L2095.62 776.57 L2095.16 774.095 L2094.7 771.598 L2094.24 769.338 L2093.79 767.727 L2093.33 766.725 L2092.87 766.113 L2092.41 765.576 L2091.95 765.184 L2091.49 765.046 L2091.03 765.072 L2090.58 765.139 L2090.12 765.292 L2089.66 765.541 L2089.2 765.846 L2088.74 765.923 L2088.28 765.53 L2087.82 764.462 L2087.37 762.715 L2086.91 760.5 L2086.45 757.677 L2085.99 755.054 L2085.53 752.663 L2085.07 751.114 L2084.61 750.336 L2084.16 750.179 L2083.7 750.463 L2083.24 751.688 L2082.78 753.836 L2082.32 757.159 L2081.86 761.209 L2081.4 765.803 L2080.95 771.234 L2080.49 777.105 L2080.03 782.39 L2079.57 786.5 L2079.11 789.304 L2078.65 790.903 L2078.19 791.25 L2077.74 790.658 L2077.28 789.836 L2076.82 789.199 L2076.36 789.285 L2075.9 790.572 L2075.44 793.273 L2074.98 797.348 L2074.53 802.388 L2074.07 807.683 L2073.61 812.774 L2073.15 817.611 L2072.69 821.971 L2072.23 826.034 L2071.77 829.941 L2071.32 833.875 L2070.86 837.876 L2070.4 841.953 L2069.94 845.894 L2069.48 849.172 L2069.02 851.866 L2068.56 854.101 L2068.11 856.019 L2067.65 857.717 L2067.19 859.066 L2066.73 860.044 L2066.27 861.504 L2065.81 863.856 L2065.35 867.496 L2064.9 872.309 L2064.44 877.134 L2063.98 881.992 L2063.52 886.392 L2063.06 889.997 L2062.6 893.035 L2062.14 895.95 L2061.69 899.032 L2061.23 902.3 L2060.77 905.145 L2060.31 907.56 L2059.85 909.464 L2059.39 910.729 L2058.93 911.752 L2058.48 912.707 L2058.02 913.535 L2057.56 913.875 L2057.1 913.843 L2056.64 913.396 L2056.18 912.587 L2055.72 911.417 L2055.27 910.296 L2054.81 909.282 L2054.35 908.622 L2053.89 907.738 L2053.43 906.553 L2052.97 904.998 L2052.51 902.928 L2052.06 900.415 L2051.6 897.719 L2051.14 894.861 L2050.68 891.964 L2050.22 889.167 L2049.76 886.303 L2049.3 882.94 L2048.85 879.069 L2048.39 874.828 L2047.93 870.382 L2047.47 865.972 L2047.01 861.822 L2046.55 857.962 L2046.09 854.68 L2045.64 851.843 L2045.18 849.343 L2044.72 847.2 L2044.26 845.72 L2043.8 844.194 L2043.34 841.938 L2042.88 838.662 L2042.43 834.713 L2041.97 830.441 L2041.51 825.868 L2041.05 820.998 L2040.59 815.724 L2040.13 809.968 L2039.67 803.593 L2039.22 795.716 L2038.76 786.165 L2038.3 775.7 L2037.84 764.763 L2037.38 754.156 L2036.92 744.36 L2036.46 735.62 L2036.01 727.763 L2035.55 720.886 L2035.09 714.472 L2034.63 708.998 L2034.17 704.054 L2033.71 699.406 L2033.25 694.889 L2032.8 689.977 L2032.34 684.529 L2031.88 678.542 L2031.42 671.933 L2030.96 664.335 L2030.5 656.257 L2030.04 647.836 L2029.59 639.727 L2029.13 632.215 L2028.67 625.124 L2028.21 618.232 L2027.75 611.087 L2027.29 603.588 L2026.83 595.869 L2026.38 588.27 L2025.92 580.953 L2025.46 574.671 L2025 569.817 L2024.54 565.948 L2024.08 562.174 L2023.62 557.823 L2023.17 553.338 L2022.71 548.496 L2022.25 543.379 L2021.79 538.081 L2021.33 531.955 L2020.87 525.256 L2020.41 518.901 L2019.96 513.031 L2019.5 507.322 L2019.04 501.199 L2018.58 494.877 L2018.12 488.649 L2017.66 482.815 L2017.2 477.487 L2016.75 472.493 L2016.29 467.513 L2015.83 462.572 L2015.37 457.81 L2014.91 453.159 L2014.45 448.807 L2013.99 444.721 L2013.54 441.139 L2013.08 438.148 L2012.62 435.795 L2012.16 434.054 L2011.7 432.587 L2011.24 431.274 L2010.78 429.548 L2010.33 427 L2009.87 424.05 L2009.41 421.163 L2008.95 418.301 L2008.49 415.536 L2008.03 412.536 L2007.57 409.368 L2007.12 406.181 L2006.66 402.882 L2006.2 399.58 L2005.74 396.586 L2005.28 394.28 L2004.82 392.413 L2004.36 390.898 L2003.91 389.891 L2003.45 389.498 L2002.99 389.396 L2002.53 388.886 L2002.07 387.459 L2001.61 385.921 L2001.15 384.515 L2000.7 382.745 L2000.24 380.547 L1999.78 378.037 L1999.32 375.571 L1998.86 373.371 L1998.4 371.647 L1997.94 370.516 L1997.49 369.945 L1997.03 370.166 L1996.57 371.202 L1996.11 372.705 L1995.65 374.393 L1995.19 375.372 L1994.73 375.242 L1994.28 374.202 L1993.82 372.486 L1993.36 370.366 L1992.9 368.081 L1992.44 365.495 L1991.98 362.948 L1991.52 360.726 L1991.07 358.864 L1990.61 357.632 L1990.15 356.714 L1989.69 355.866 L1989.23 354.879 L1988.77 353.791 L1988.31 352.896 L1987.86 352.232 L1987.4 351.768 L1986.94 351.37 L1986.48 351.23 L1986.02 351.296 L1985.56 351.753 L1985.1 352.3 L1984.65 352.919 L1984.19 353.205 L1983.73 352.873 L1983.27 351.435 L1982.81 349.166 L1982.35 346.719 L1981.89 344.658 L1981.44 343.295 L1980.98 342.782 L1980.52 342.921 L1980.06 343.338 L1979.6 343.66 L1979.14 343.85 L1978.68 343.929 L1978.23 344.144 L1977.77 344.162 L1977.31 343.741 L1976.85 343.278 L1976.39 342.759 L1975.93 342.404 L1975.47 342.114 L1975.02 341.739 L1974.56 341.2 L1974.1 340.183 L1973.64 339.041 L1973.18 338.093 L1972.72 337.44 L1972.26 337.333 L1971.81 337.503 L1971.35 337.662 L1970.89 337.885 L1970.43 338.805 L1969.97 339.986 L1969.51 341.504 L1969.05 342.365 L1968.6 342.448 L1968.14 341.77 L1967.68 340.007 L1967.22 337.506 L1966.76 334.695 L1966.3 332.013 L1965.84 329.26 L1965.39 326.901 L1964.93 325.137 L1964.47 324.28 L1964.01 324.879 L1963.55 326.646 L1963.09 329.016 L1962.63 331.448 L1962.18 333.471 L1961.72 334.814 L1961.26 335.565 L1960.8 335.631 L1960.34 335.141 L1959.88 334.417 L1959.42 333.915 L1958.97 333.484 L1958.51 333.569 L1958.05 333.82 L1957.59 334.418 L1957.13 335.13 L1956.67 335.617 L1956.21 335.565 L1955.76 334.928 L1955.3 333.876 L1954.84 332.893 L1954.38 331.697 L1953.92 330.276 L1953.46 328.905 L1953 327.939 L1952.55 327.277 L1952.09 327.346 L1951.63 328.272 L1951.17 330 L1950.71 331.754 L1950.25 332.717 L1949.79 332.22 L1949.34 330.167 L1948.88 327.103 L1948.42 324.059 L1947.96 321.726 L1947.5 320.052 L1947.04 319.061 L1946.58 318.899 L1946.13 319.687 L1945.67 321.024 L1945.21 322.674 L1944.75 324.194 L1944.29 325.166 L1943.83 325.313 L1943.37 324.959 L1942.92 324.72 L1942.46 324.97 L1942 325.457 L1941.54 325.909 L1941.08 325.959 L1940.62 325.421 L1940.16 324.11 L1939.71 322.47 L1939.25 320.622 L1938.79 318.955 L1938.33 317.696 L1937.87 317.095 L1937.41 317.029 L1936.95 317.464 L1936.5 318.296 L1936.04 319.337 L1935.58 320.675 L1935.12 322.451 L1934.66 324.338 L1934.2 325.765 L1933.74 326.192 L1933.29 325.515 L1932.83 323.728 L1932.37 321.392 L1931.91 319.125 L1931.45 317.506 L1930.99 316.066 L1930.53 314.964 L1930.08 314.349 L1929.62 314.214 L1929.16 314.781 L1928.7 315.989 L1928.24 317.373 L1927.78 318.492 L1927.32 319.396 L1926.87 320.677 L1926.41 322.447 L1925.95 324.448 L1925.49 326.293 L1925.03 328.106 L1924.57 329.349 L1924.11 330.21 L1923.66 330.589 L1923.2 330.967 L1922.74 331.702 L1922.28 332.483 L1921.82 333.42 L1921.36 334.124 L1920.9 334.963 L1920.45 335.925 L1919.99 336.417 L1919.53 336.059 L1919.07 334.665 L1918.61 332.375 L1918.15 329.976 L1917.69 327.832 L1917.24 325.704 L1916.78 323.514 L1916.32 321.391 L1915.86 319.52 L1915.4 317.915 L1914.94 317.007 L1914.48 317.424 L1914.03 319.468 L1913.57 322.732 L1913.11 326.535 L1912.65 330.925 L1912.19 335.402 L1911.73 339.667 L1911.27 343.865 L1910.82 348.008 L1910.36 352.082 L1909.9 356.234 L1909.44 360.421 L1908.98 364.338 L1908.52 368.098 L1908.06 371.382 L1907.61 373.866 L1907.15 375.481 L1906.69 376.356 L1906.23 376.651 L1905.77 376.725 L1905.31 377.333 L1904.85 378.966 L1904.4 381.483 L1903.94 384.265 L1903.48 387.161 L1903.02 390.487 L1902.56 394.254 L1902.1 398.541 L1901.64 403.361 L1901.19 408.592 L1900.73 414.408 L1900.27 420.92 L1899.81 427.614 L1899.35 434.18 L1898.89 440.169 L1898.43 445.326 L1897.98 449.711 L1897.52 453.509 L1897.06 457.466 L1896.6 461.543 L1896.14 466.061 L1895.68 470.837 L1895.22 475.499 L1894.77 479.724 L1894.31 483.54 L1893.85 486.956 L1893.39 490.699 L1892.93 494.629 L1892.47 499.268 L1892.01 504.77 L1891.56 511.086 L1891.1 518.087 L1890.64 525.741 L1890.18 533.735 L1889.72 541.295 L1889.26 548.585 L1888.8 555.197 L1888.35 561.06 L1887.89 566.576 L1887.43 572.161 L1886.97 578.321 L1886.51 584.862 L1886.05 591.168 L1885.59 597.411 L1885.14 603.567 L1884.68 609.542 L1884.22 615.508 L1883.76 621.398 L1883.3 627.373 L1882.84 633.272 L1882.38 639.258 L1881.93 645.553 L1881.47 652.525 L1881.01 660.154 L1880.55 667.837 L1880.09 675.087 L1879.63 682.076 L1879.17 689.132 L1878.72 696.572 L1878.26 704.517 L1877.8 713.067 L1877.34 721.538 L1876.88 729.419 L1876.42 736.482 L1875.96 742.834 L1875.51 748.588 L1875.05 753.737 L1874.59 758.13 L1874.13 761.754 L1873.67 765.012 L1873.21 768.156 L1872.75 771.662 L1872.3 775.63 L1871.84 779.519 L1871.38 782.988 L1870.92 786.095 L1870.46 788.731 L1870 791.12 L1869.54 793.343 L1869.09 795.124 L1868.63 796.822 L1868.17 798.612 L1867.71 800.575 L1867.25 802.662 L1866.79 805.342 L1866.33 808.514 L1865.88 811.913 L1865.42 815.29 L1864.96 818.095 L1864.5 820.783 L1864.04 823.935 L1863.58 827.949 L1863.12 832.158 L1862.67 835.658 L1862.21 838.486 L1861.75 840.325 L1861.29 841.268 L1860.83 841.829 L1860.37 842.432 L1859.91 843.07 L1859.46 843.964 L1859 845.045 L1858.54 846.242 L1858.08 846.984 L1857.62 847.017 L1857.16 846.149 L1856.7 844.202 L1856.25 841.292 L1855.79 837.614 L1855.33 833.416 L1854.87 829.307 L1854.41 826.148 L1853.95 824.395 L1853.49 823.745 L1853.04 824.393 L1852.58 825.737 L1852.12 826.989 L1851.66 827.599 L1851.2 827.478 L1850.74 826.563 L1850.28 825.138 L1849.83 823.327 L1849.37 821.28 L1848.91 818.973 L1848.45 815.889 L1847.99 812.297 L1847.53 808.223 L1847.07 803.854 L1846.61 799.453 L1846.16 795.246 L1845.7 791.389 L1845.24 788.14 L1844.78 785.926 L1844.32 785.131 L1843.86 785.024 L1843.4 784.962 L1842.95 784.706 L1842.49 784.009 L1842.03 782.867 L1841.57 781.052 L1841.11 778.42 L1840.65 774.639 L1840.19 770.194 L1839.74 765.938 L1839.28 762.574 L1838.82 760.665 L1838.36 760.111 L1837.9 760.976 L1837.44 762.725 L1836.98 765.002 L1836.53 767.195 L1836.07 768.455 L1835.61 768.451 L1835.15 767.484 L1834.69 765.773 L1834.23 764.104 L1833.77 762.373 L1833.32 760.342 L1832.86 758.34 L1832.4 756.385 L1831.94 754.67 L1831.48 753.146 L1831.02 752.086 L1830.56 751.766 L1830.11 751.764 L1829.65 752.164 L1829.19 752.257 L1828.73 751.684 L1828.27 750.799 L1827.81 749.994 L1827.35 749.738 L1826.9 749.825 L1826.44 749.945 L1825.98 750.274 L1825.52 750.969 L1825.06 752.038 L1824.6 753.781 L1824.14 755.661 L1823.69 757 L1823.23 758.125 L1822.77 759.062 L1822.31 759.871 L1821.85 760.842 L1821.39 761.851 L1820.93 763.306 L1820.48 764.983 L1820.02 766.729 L1819.56 768.63 L1819.1 770.268 L1818.64 771.117 L1818.18 771.449 L1817.72 771.136 L1817.27 770.593 L1816.81 770.163 L1816.35 769.964 L1815.89 770.414 L1815.43 771.448 L1814.97 772.971 L1814.51 774.632 L1814.06 776.224 L1813.6 777.682 L1813.14 778.635 L1812.68 778.733 L1812.22 778.131 L1811.76 777.367 L1811.3 776.337 L1810.85 775.512 L1810.39 774.983 L1809.93 774.936 L1809.47 775.564 L1809.01 777.091 L1808.55 779.052 L1808.09 780.775 L1807.64 782.071 L1807.18 782.843 L1806.72 783.433 L1806.26 783.814 L1805.8 783.876 L1805.34 783.867 L1804.88 783.714 L1804.43 783.662 L1803.97 783.677 L1803.51 783.618 L1803.05 783.295 L1802.59 783.191 L1802.13 783.223 L1801.67 783.215 L1801.22 782.418 L1800.76 780.872 L1800.3 778.898 L1799.84 776.937 L1799.38 775.133 L1798.92 773.501 L1798.46 772.357 L1798.01 771.772 L1797.55 771.267 L1797.09 770.965 L1796.63 771.079 L1796.17 771.127 L1795.71 771.062 L1795.25 771.349 L1794.8 771.687 L1794.34 772.25 L1793.88 772.761 L1793.42 772.945 L1792.96 772.3 L1792.5 770.796 L1792.04 768.765 L1791.59 766.298 L1791.13 763.577 L1790.67 760.667 L1790.21 757.994 L1789.75 756.021 L1789.29 754.208 L1788.83 752.172 L1788.38 750.076 L1787.92 747.658 L1787.46 744.835 L1787 742.131 L1786.54 740.04 L1786.08 738.981 L1785.62 739.071 L1785.17 740.192 L1784.71 741.451 L1784.25 741.792 L1783.79 740.68 L1783.33 738.371 L1782.87 735.65 L1782.41 732.79 L1781.96 730.056 L1781.5 727.224 L1781.04 724.645 L1780.58 722.497 L1780.12 720.962 L1779.66 719.444 L1779.2 718.423 L1778.75 717.528 L1778.29 716.397 L1777.83 714.86 L1777.37 713.056 L1776.91 711.164 L1776.45 709.226 L1775.99 707.379 L1775.54 705.587 L1775.08 704.248 L1774.62 703.083 L1774.16 701.729 L1773.7 699.625 L1773.24 696.842 L1772.78 693.426 L1772.33 689.386 L1771.87 684.972 L1771.41 680.34 L1770.95 675.708 L1770.49 671.201 L1770.03 667.199 L1769.57 663.674 L1769.12 660.872 L1768.66 658.996 L1768.2 657.996 L1767.74 657.244 L1767.28 656.252 L1766.82 654.658 L1766.36 652.471 L1765.91 649.769 L1765.45 646.519 L1764.99 642.747 L1764.53 638.827 L1764.07 634.935 L1763.61 631.004 L1763.15 626.823 L1762.7 623.008 L1762.24 619.848 L1761.78 617.324 L1761.32 614.51 L1760.86 611.089 L1760.4 606.678 L1759.94 601.358 L1759.49 595.516 L1759.03 589.749 L1758.57 584.814 L1758.11 580.788 L1757.65 577.693 L1757.19 575.22 L1756.73 573.203 L1756.28 571.558 L1755.82 569.997 L1755.36 568.64 L1754.9 567.181 L1754.44 565.282 L1753.98 562.79 L1753.52 559.656 L1753.07 555.665 L1752.61 551.124 L1752.15 546.579 L1751.69 541.983 L1751.23 537.253 L1750.77 532.096 L1750.31 526.574 L1749.86 520.539 L1749.4 514.29 L1748.94 508.187 L1748.48 502.516 L1748.02 497.156 L1747.56 492.146 L1747.1 487.621 L1746.65 483.842 L1746.19 480.335 L1745.73 476.976 L1745.27 474.163 L1744.81 472.146 L1744.35 470.56 L1743.89 468.389 L1743.44 464.998 L1742.98 460.241 L1742.52 454.867 L1742.06 449.668 L1741.6 444.926 L1741.14 440.836 L1740.68 437.06 L1740.23 433.806 L1739.77 430.928 L1739.31 428.382 L1738.85 425.751 L1738.39 422.701 L1737.93 419.048 L1737.47 414.962 L1737.02 410.667 L1736.56 406.905 L1736.1 404.021 L1735.64 402.008 L1735.18 400.726 L1734.72 399.776 L1734.26 399.164 L1733.81 398.729 L1733.35 397.784 L1732.89 395.876 L1732.43 393.009 L1731.97 389.224 L1731.51 384.732 L1731.05 379.917 L1730.6 374.708 L1730.14 369.845 L1729.68 365.082 L1729.22 360.82 L1728.76 357.383 L1728.3 354.645 L1727.84 352.869 L1727.39 351.913 L1726.93 351.594 L1726.47 351.356 L1726.01 351.064 L1725.55 350.712 L1725.09 350.401 L1724.63 350.098 L1724.18 349.504 L1723.72 349.016 L1723.26 348.57 L1722.8 348.015 L1722.34 347.517 L1721.88 347.103 L1721.42 346.693 L1720.97 346.412 L1720.51 346.265 L1720.05 346.12 L1719.59 345.428 L1719.13 344.726 L1718.67 344.629 L1718.21 344.583 L1717.76 344.61 L1717.3 344.282 L1716.84 343.565 L1716.38 342.81 L1715.92 342.42 L1715.46 342.376 L1715 342.386 L1714.55 342.346 L1714.09 342.599 L1713.63 343.024 L1713.17 343.174 L1712.71 343.055 L1712.25 342.579 L1711.79 342.168 L1711.34 342.082 L1710.88 342.417 L1710.42 343.349 L1709.96 345.125 L1709.5 347.464 L1709.04 350.437 L1708.58 353.707 L1708.13 356.455 L1707.67 358.095 L1707.21 358.917 L1706.75 359.496 L1706.29 360.164 L1705.83 360.694 L1705.37 361.198 L1704.92 361.623 L1704.46 362.61 L1704 363.747 L1703.54 364.782 L1703.08 365.794 L1702.62 367.034 L1702.16 368.601 L1701.71 370.507 L1701.25 372.039 L1700.79 373.403 L1700.33 375.278 L1699.87 378.097 L1699.41 381.628 L1698.95 385.522 L1698.5 389.132 L1698.04 392.18 L1697.58 394.5 L1697.12 396.43 L1696.66 398.644 L1696.2 401.314 L1695.74 404.344 L1695.29 407.635 L1694.83 410.984 L1694.37 414.304 L1693.91 417.727 L1693.45 420.575 L1692.99 422.762 L1692.53 423.971 L1692.08 424.489 L1691.62 424.563 L1691.16 424.562 L1690.7 424.183 L1690.24 423.677 L1689.78 423.45 L1689.32 423.613 L1688.87 423.526 L1688.41 423.227 L1687.95 422.827 L1687.49 422.411 L1687.03 421.713 L1686.57 421.033 L1686.11 420.762 L1685.66 420.596 L1685.2 420.849 L1684.74 422.075 L1684.28 424.096 L1683.82 426.297 L1683.36 427.825 L1682.9 428.522 L1682.45 428.402 L1681.99 427.843 L1681.53 427.345 L1681.07 427.44 L1680.61 427.808 L1680.15 428.216 L1679.69 428.809 L1679.24 429.709 L1678.78 431.088 L1678.32 432.591 L1677.86 434.377 L1677.4 436.212 L1676.94 437.785 L1676.48 438.656 L1676.03 438.922 L1675.57 438.893 L1675.11 438.766 L1674.65 438.23 L1674.19 437.737 L1673.73 437.379 L1673.27 437.263 L1672.82 437.044 L1672.36 436.992 L1671.9 436.428 L1671.44 435.341 L1670.98 433.978 L1670.52 432.775 L1670.06 431.711 L1669.61 430.513 L1669.15 429.162 L1668.69 427.63 L1668.23 426.232 L1667.77 425.072 L1667.31 424.154 L1666.85 423.106 L1666.4 421.817 L1665.94 420.289 L1665.48 418.876 L1665.02 417.768 L1664.56 417.348 L1664.1 417.783 L1663.64 418.411 L1663.19 419.355 L1662.73 420.763 L1662.27 422.499 L1661.81 424.351 L1661.35 426.49 L1660.89 428.411 L1660.43 429.905 L1659.98 430.875 L1659.52 431.232 L1659.06 430.823 L1658.6 429.948 L1658.14 428.992 L1657.68 428.152 L1657.22 427.596 L1656.77 427.533 L1656.31 428.071 L1655.85 429.079 L1655.39 429.904 L1654.93 430.027 L1654.47 429.501 L1654.01 428.852 L1653.56 428.617 L1653.1 429.104 L1652.64 429.747 L1652.18 430.14 L1651.72 430.691 L1651.26 431.873 L1650.8 433.663 L1650.35 435.849 L1649.89 438.276 L1649.43 441.308 L1648.97 444.489 L1648.51 447.163 L1648.05 449.154 L1647.59 451.021 L1647.14 453.1 L1646.68 455.389 L1646.22 457.613 L1645.76 459.904 L1645.3 462.28 L1644.84 465.003 L1644.38 467.897 L1643.93 470.795 L1643.47 473.486 L1643.01 475.969 L1642.55 478.658 L1642.09 481.816 L1641.63 485.648 L1641.17 489.985 L1640.72 494.604 L1640.26 499.368 L1639.8 504.172 L1639.34 509.182 L1638.88 514.759 L1638.42 521.157 L1637.96 528.58 L1637.51 536.261 L1637.05 543.767 L1636.59 551.171 L1636.13 558.104 L1635.67 564.375 L1635.21 569.794 L1634.75 573.968 L1634.3 576.871 L1633.84 578.564 L1633.38 579.752 L1632.92 580.867 L1632.46 582.063 L1632 583.836 L1631.54 586.63 L1631.09 590.575 L1630.63 595.531 L1630.17 600.962 L1629.71 605.911 L1629.25 609.995 L1628.79 613.468 L1628.33 616.603 L1627.88 619.602 L1627.42 622.347 L1626.96 625.183 L1626.5 628.736 L1626.04 632.961 L1625.58 637.717 L1625.12 642.907 L1624.67 648.377 L1624.21 653.675 L1623.75 658.177 L1623.29 661.639 L1622.83 664.572 L1622.37 667.242 L1621.91 669.705 L1621.46 671.858 L1621 674.264 L1620.54 676.898 L1620.08 680.125 L1619.62 684.138 L1619.16 688.947 L1618.7 694.419 L1618.25 699.752 L1617.79 704.776 L1617.33 709.095 L1616.87 712.472 L1616.41 715.089 L1615.95 716.719 L1615.49 717.285 L1615.04 716.94 L1614.58 715.835 L1614.12 714.501 L1613.66 713.494 L1613.2 713.202 L1612.74 713.856 L1612.28 715.124 L1611.83 716.926 L1611.37 718.91 L1610.91 720.593 L1610.45 721.677 L1609.99 721.881 L1609.53 722.056 L1609.07 722.392 L1608.62 723.245 L1608.16 724.701 L1607.7 726.899 L1607.24 729.483 L1606.78 732.145 L1606.32 734.427 L1605.86 735.998 L1605.41 736.286 L1604.95 735.426 L1604.49 733.624 L1604.03 731.366 L1603.57 729.511 L1603.11 728.876 L1602.65 729.896 L1602.2 732.227 L1601.74 735.388 L1601.28 738.855 L1600.82 742.076 L1600.36 744.361 L1599.9 745.699 L1599.44 746.354 L1598.99 746.698 L1598.53 746.346 L1598.07 745.052 L1597.61 743.139 L1597.15 741.399 L1596.69 739.931 L1596.23 739.002 L1595.78 738.448 L1595.32 738.095 L1594.86 737.835 L1594.4 737.34 L1593.94 736.923 L1593.48 736.595 L1593.02 736.511 L1592.57 736.845 L1592.11 737.921 L1591.65 739.706 L1591.19 741.898 L1590.73 744.436 L1590.27 747.003 L1589.81 748.587 L1589.36 748.771 L1588.9 747.649 L1588.44 745.569 L1587.98 743.207 L1587.52 740.953 L1587.06 738.937 L1586.6 737.157 L1586.15 735.634 L1585.69 734.393 L1585.23 733.903 L1584.77 733.885 L1584.31 733.919 L1583.85 733.827 L1583.39 733.261 L1582.94 732.166 L1582.48 730.861 L1582.02 729.707 L1581.56 729.197 L1581.1 729.681 L1580.64 730.918 L1580.18 733.07 L1579.73 735.761 L1579.27 738.306 L1578.81 739.995 L1578.35 741.133 L1577.89 741.889 L1577.43 742.107 L1576.97 742.188 L1576.52 742.192 L1576.06 741.891 L1575.6 741.216 L1575.14 740.569 L1574.68 740.447 L1574.22 740.643 L1573.76 740.442 L1573.31 739.182 L1572.85 737.127 L1572.39 735.042 L1571.93 733.255 L1571.47 732.123 L1571.01 732.024 L1570.55 733.22 L1570.1 734.906 L1569.64 736.238 L1569.18 736.753 L1568.72 736.918 L1568.26 737.456 L1567.8 738.171 L1567.34 739.368 L1566.89 741.089 L1566.43 742.689 L1565.97 743.728 L1565.51 744.167 L1565.05 744.21 L1564.59 744.382 L1564.13 744.431 L1563.68 744.557 L1563.22 745.141 L1562.76 745.814 L1562.3 746.02 L1561.84 745.97 L1561.38 745.501 L1560.92 744.262 L1560.47 742.469 L1560.01 740.525 L1559.55 738.966 L1559.09 737.502 L1558.63 735.533 L1558.17 732.853 L1557.71 729.456 L1557.26 725.729 L1556.8 722.242 L1556.34 719.465 L1555.88 717.348 L1555.42 715.95 L1554.96 715.336 L1554.5 715.65 L1554.05 717.123 L1553.59 718.774 L1553.13 720.279 L1552.67 721.264 L1552.21 721.571 L1551.75 721.283 L1551.29 720.452 L1550.84 719.454 L1550.38 718.19 L1549.92 716.519 L1549.46 714.501 L1549 712.489 L1548.54 710.008 L1548.08 707.114 L1547.63 703.828 L1547.17 700.528 L1546.71 697.322 L1546.25 694.552 L1545.79 692.509 L1545.33 691.008 L1544.87 690.181 L1544.42 690.056 L1543.96 690.613 L1543.5 691.089 L1543.04 690.811 L1542.58 689.586 L1542.12 687.496 L1541.66 684.735 L1541.21 681.629 L1540.75 678.549 L1540.29 675.472 L1539.83 672.606 L1539.37 669.861 L1538.91 667.221 L1538.45 665.146 L1538 663.904 L1537.54 663.749 L1537.08 664.482 L1536.62 665.614 L1536.16 666.547 L1535.7 667.023 L1535.24 666.475 L1534.79 665.293 L1534.33 663.328 L1533.87 660.516 L1533.41 656.719 L1532.95 652.371 L1532.49 648.161 L1532.03 644.447 L1531.58 641.495 L1531.12 639.377 L1530.66 638.109 L1530.2 637.286 L1529.74 636.819 L1529.28 636.278 L1528.82 635.636 L1528.37 634.892 L1527.91 634.045 L1527.45 633.261 L1526.99 632.751 L1526.53 633.014 L1526.07 634.243 L1525.61 635.983 L1525.16 637.587 L1524.7 638.741 L1524.24 639.021 L1523.78 638.493 L1523.32 637.518 L1522.86 636.547 L1522.4 635.749 L1521.95 635.249 L1521.49 634.7 L1521.03 633.858 L1520.57 632.931 L1520.11 631.823 L1519.65 630.745 L1519.19 629.694 L1518.74 628.81 L1518.28 627.376 L1517.82 625.123 L1517.36 622.251 L1516.9 619.274 L1516.44 616.936 L1515.98 615.674 L1515.53 615.77 L1515.07 616.665 L1514.61 617.955 L1514.15 618.97 L1513.69 619.45 L1513.23 619.356 L1512.77 618.84 L1512.32 618.231 L1511.86 617.295 L1511.4 616.222 L1510.94 615.011 L1510.48 613.402 L1510.02 611.488 L1509.56 609.519 L1509.11 607.536 L1508.65 605.336 L1508.19 603.079 L1507.73 600.603 L1507.27 597.589 L1506.81 594.466 L1506.35 591.378 L1505.9 588.785 L1505.44 587.066 L1504.98 586.029 L1504.52 585.223 L1504.06 584.333 L1503.6 582.968 L1503.14 581.501 L1502.68 580.184 L1502.23 578.394 L1501.77 576.247 L1501.31 574.246 L1500.85 572.724 L1500.39 571.8 L1499.93 570.585 L1499.47 568.748 L1499.02 566.887 L1498.56 565.384 L1498.1 564.277 L1497.64 563.327 L1497.18 562.447 L1496.72 561.293 L1496.26 559.577 L1495.81 557.345 L1495.35 554.709 L1494.89 552.01 L1494.43 549.169 L1493.97 546.32 L1493.51 543.335 L1493.05 540.047 L1492.6 536.694 L1492.14 533.469 L1491.68 530.405 L1491.22 526.946 L1490.76 523.382 L1490.3 519.576 L1489.84 515.066 L1489.39 510.186 L1488.93 505.31 L1488.47 500.581 L1488.01 496.474 L1487.55 492.7 L1487.09 489.17 L1486.63 485.993 L1486.18 483.223 L1485.72 480.836 L1485.26 478.357 L1484.8 475.695 L1484.34 473.161 L1483.88 470.781 L1483.42 468.82 L1482.97 466.931 L1482.51 465.105 L1482.05 463.317 L1481.59 461.805 L1481.13 460.761 L1480.67 460.11 L1480.21 459.493 L1479.76 458.536 L1479.3 456.801 L1478.84 453.944 L1478.38 450.206 L1477.92 446.108 L1477.46 442.392 L1477 439.476 L1476.55 437.327 L1476.09 435.481 L1475.63 433.392 L1475.17 430.818 L1474.71 428.103 L1474.25 426.147 L1473.79 425.183 L1473.34 424.977 L1472.88 424.732 L1472.42 423.615 L1471.96 421.809 L1471.5 419.643 L1471.04 417.722 L1470.58 415.759 L1470.13 414.138 L1469.67 413.055 L1469.21 412.127 L1468.75 411.379 L1468.29 410.93 L1467.83 411.107 L1467.37 411.829 L1466.92 412.893 L1466.46 414.22 L1466 415.731 L1465.54 417.413 L1465.08 418.948 L1464.62 420.043 L1464.16 420.241 L1463.71 419.592 L1463.25 418.219 L1462.79 416.393 L1462.33 414.697 L1461.87 413.32 L1461.41 412.7 L1460.95 412.717 L1460.5 413.322 L1460.04 414.74 L1459.58 416.521 L1459.12 418.474 L1458.66 420.848 L1458.2 423.173 L1457.74 424.795 L1457.29 425.631 L1456.83 426.277 L1456.37 426.312 L1455.91 426.094 L1455.45 425.532 L1454.99 424.67 L1454.53 423.909 L1454.08 423.421 L1453.62 423.629 L1453.16 424.459 L1452.7 425.298 L1452.24 426.099 L1451.78 427.333 L1451.32 429.223 L1450.87 431.291 L1450.41 432.878 L1449.95 433.953 L1449.49 434.404 L1449.03 434.55 L1448.57 435.073 L1448.11 436.387 L1447.66 438 L1447.2 439.316 L1446.74 440.426 L1446.28 441.692 L1445.82 443.77 L1445.36 446.463 L1444.9 449.075 L1444.45 451.251 L1443.99 452.824 L1443.53 453.474 L1443.07 452.989 L1442.61 451.677 L1442.15 449.87 L1441.69 448.109 L1441.24 446.773 L1440.78 445.846 L1440.32 445.243 L1439.86 444.945 L1439.4 444.633 L1438.94 443.982 L1438.48 443.255 L1438.03 442.62 L1437.57 442.553 L1437.11 442.811 L1436.65 443.768 L1436.19 445.218 L1435.73 446.318 L1435.27 447.096 L1434.82 447.752 L1434.36 448.082 L1433.9 447.984 L1433.44 448.046 L1432.98 448.376 L1432.52 448.3 L1432.06 448.403 L1431.61 448.702 L1431.15 449.105 L1430.69 449.202 L1430.23 448.566 L1429.77 447.143 L1429.31 445.558 L1428.85 443.884 L1428.4 441.947 L1427.94 439.958 L1427.48 438.353 L1427.02 436.976 L1426.56 436.106 L1426.1 436.19 L1425.64 437.224 L1425.19 439.088 L1424.73 441.325 L1424.27 443.411 L1423.81 445.259 L1423.35 446.606 L1422.89 447.781 L1422.43 448.686 L1421.98 448.753 L1421.52 448.045 L1421.06 446.851 L1420.6 444.836 L1420.14 442.704 L1419.68 441.162 L1419.22 440.436 L1418.77 440.719 L1418.31 442.165 L1417.85 444.861 L1417.39 448.292 L1416.93 451.993 L1416.47 455.378 L1416.01 458.087 L1415.56 460.072 L1415.1 461.363 L1414.64 461.945 L1414.18 461.711 L1413.72 460.628 L1413.26 459.084 L1412.8 457.715 L1412.35 456.735 L1411.89 456.129 L1411.43 456.154 L1410.97 457.21 L1410.51 459.212 L1410.05 461.717 L1409.59 464.381 L1409.14 467.062 L1408.68 469.321 L1408.22 471.142 L1407.76 472.264 L1407.3 472.962 L1406.84 473.469 L1406.38 474.186 L1405.93 475.067 L1405.47 475.835 L1405.01 476.736 L1404.55 477.563 L1404.09 478.614 L1403.63 479.723 L1403.17 480.843 L1402.72 482.28 L1402.26 483.834 L1401.8 485.453 L1401.34 487.409 L1400.88 489.493 L1400.42 491.769 L1399.96 494.578 L1399.51 497.824 L1399.05 500.973 L1398.59 503.662 L1398.13 505.505 L1397.67 506.54 L1397.21 506.752 L1396.75 506.128 L1396.3 505.238 L1395.84 504.751 L1395.38 504.647 L1394.92 504.6 L1394.46 504.451 L1394 504.505 L1393.54 504.936 L1393.09 506.139 L1392.63 507.861 L1392.17 509.842 L1391.71 512.396 L1391.25 515.119 L1390.79 518.018 L1390.33 521.266 L1389.88 524.341 L1389.42 526.933 L1388.96 529.019 L1388.5 530.465 L1388.04 531.588 L1387.58 532.023 L1387.12 531.63 L1386.67 530.194 L1386.21 528.357 L1385.75 526.276 L1385.29 524.75 L1384.83 524.242 L1384.37 525.142 L1383.91 527.081 L1383.46 529.305 L1383 531.617 L1382.54 533.914 L1382.08 535.781 L1381.62 537.182 L1381.16 537.957 L1380.7 538.271 L1380.25 538.716 L1379.79 540.165 L1379.33 542.406 L1378.87 545.22 L1378.41 548.378 L1377.95 551.295 L1377.49 553.93 L1377.04 556.331 L1376.58 558.214 L1376.12 559.154 L1375.66 558.925 L1375.2 557.245 L1374.74 554.883 L1374.28 552.487 L1373.83 551.067 L1373.37 550.974 L1372.91 551.908 L1372.45 553.717 L1371.99 555.871 L1371.53 558.085 L1371.07 560.128 L1370.62 561.83 L1370.16 562.752 L1369.7 562.881 L1369.24 562.775 L1368.78 563.017 L1368.32 563.339 L1367.86 563.735 L1367.41 564.546 L1366.95 565.785 L1366.49 568.12 L1366.03 571.049 L1365.57 573.906 L1365.11 576.649 L1364.65 579.168 L1364.2 581.175 L1363.74 582.458 L1363.28 583.771 L1362.82 585.429 L1362.36 587.401 L1361.9 589.727 L1361.44 592.716 L1360.99 596.252 L1360.53 600.39 L1360.07 604.826 L1359.61 608.905 L1359.15 612.143 L1358.69 614.577 L1358.23 616.216 L1357.78 617.197 L1357.32 617.708 L1356.86 618.201 L1356.4 618.892 L1355.94 619.767 L1355.48 621.291 L1355.02 623.683 L1354.57 626.691 L1354.11 630.202 L1353.65 633.853 L1353.19 637.414 L1352.73 641.021 L1352.27 644.47 L1351.81 647.754 L1351.36 650.932 L1350.9 654.011 L1350.44 656.797 L1349.98 659.251 L1349.52 661.802 L1349.06 664.573 L1348.6 667.55 L1348.15 670.446 L1347.69 673.506 L1347.23 676.968 L1346.77 680.447 L1346.31 683.607 L1345.85 686.304 L1345.39 688.788 L1344.94 690.903 L1344.48 692.487 L1344.02 693.58 L1343.56 694.542 L1343.1 695.675 L1342.64 696.709 L1342.18 697.808 L1341.73 699.596 L1341.27 702.175 L1340.81 705.577 L1340.35 709.638 L1339.89 713.817 L1339.43 717.757 L1338.97 721.313 L1338.52 724.095 L1338.06 725.904 L1337.6 726.512 L1337.14 726.334 L1336.68 726.106 L1336.22 726.024 L1335.76 726.108 L1335.31 726.347 L1334.85 727.324 L1334.39 729.283 L1333.93 732.405 L1333.47 736.355 L1333.01 740.198 L1332.55 743.641 L1332.1 746.633 L1331.64 748.692 L1331.18 749.362 L1330.72 749.116 L1330.26 748.508 L1329.8 748.17 L1329.34 748.166 L1328.89 748.613 L1328.43 748.962 L1327.97 748.897 L1327.51 748.418 L1327.05 748.172 L1326.59 748.43 L1326.13 749.475 L1325.68 750.884 L1325.22 751.611 L1324.76 751.615 L1324.3 750.578 L1323.84 748.933 L1323.38 746.962 L1322.92 745.27 L1322.47 744.62 L1322.01 745.512 L1321.55 747.59 L1321.09 750.443 L1320.63 754.07 L1320.17 758.022 L1319.71 761.506 L1319.26 764.502 L1318.8 767.114 L1318.34 768.68 L1317.88 769.248 L1317.42 769.254 L1316.96 769.075 L1316.5 769.029 L1316.05 768.691 L1315.59 767.712 L1315.13 765.922 L1314.67 763.476 L1314.21 760.686 L1313.75 758.421 L1313.29 757.077 L1312.84 756.569 L1312.38 756.863 L1311.92 757.273 L1311.46 757.559 L1311 757.298 L1310.54 756.292 L1310.08 754.468 L1309.63 752.027 L1309.17 749.283 L1308.71 746.514 L1308.25 743.824 L1307.79 741.136 L1307.33 738.493 L1306.87 735.994 L1306.42 733.524 L1305.96 731.187 L1305.5 729.532 L1305.04 728.744 L1304.58 728.884 L1304.12 729.554 L1303.66 730.651 L1303.21 732.286 L1302.75 734.167 L1302.29 735.291 L1301.83 735.296 L1301.37 734.027 L1300.91 732.088 L1300.45 729.642 L1300 727.482 L1299.54 726.166 L1299.08 725.642 L1298.62 725.839 L1298.16 726.064 L1297.7 725.883 L1297.24 724.706 L1296.79 722.574 L1296.33 720.061 L1295.87 717.611 L1295.41 715.689 L1294.95 714.291 L1294.49 713.36 L1294.03 712.944 L1293.58 713.123 L1293.12 713.405 L1292.66 713.21 L1292.2 712.473 L1291.74 711.64 L1291.28 710.336 L1290.82 708.597 L1290.37 706.696 L1289.91 705.154 L1289.45 704.153 L1288.99 703.574 L1288.53 703.378 L1288.07 703.37 L1287.61 703.605 L1287.16 704.546 L1286.7 705.849 L1286.24 707.035 L1285.78 708.229 L1285.32 709.178 L1284.86 709.55 L1284.4 709.464 L1283.95 709.258 L1283.49 708.985 L1283.03 709.141 L1282.57 709.648 L1282.11 709.766 L1281.65 709.121 L1281.19 707.527 L1280.74 705.421 L1280.28 702.794 L1279.82 700.362 L1279.36 698.363 L1278.9 697.059 L1278.44 696.318 L1277.98 695.892 L1277.53 695.626 L1277.07 695.093 L1276.61 694.66 L1276.15 694.204 L1275.69 693.586 L1275.23 692.647 L1274.77 690.961 L1274.32 689.228 L1273.86 688.026 L1273.4 687.142 L1272.94 687.022 L1272.48 687.501 L1272.02 688.362 L1271.56 689.445 L1271.11 690.367 L1270.65 691.038 L1270.19 691.551 L1269.73 691.674 L1269.27 691.45 L1268.81 691.031 L1268.35 690.192 L1267.9 689.288 L1267.44 688.864 L1266.98 688.937 L1266.52 689.735 L1266.06 690.98 L1265.6 692.138 L1265.14 692.067 L1264.69 690.277 L1264.23 686.771 L1263.77 682.521 L1263.31 678.246 L1262.85 674.598 L1262.39 671.896 L1261.93 669.913 L1261.48 668.278 L1261.02 667.056 L1260.56 666.497 L1260.1 666.259 L1259.64 665.715 L1259.18 664.921 L1258.72 663.755 L1258.27 662.57 L1257.81 661.384 L1257.35 660.62 L1256.89 660.286 L1256.43 660.122 L1255.97 659.816 L1255.51 659.272 L1255.06 658.063 L1254.6 655.845 L1254.14 652.948 L1253.68 649.919 L1253.22 647.095 L1252.76 644.797 L1252.3 643.277 L1251.85 641.827 L1251.39 640.05 L1250.93 637.79 L1250.47 635.239 L1250.01 632.876 L1249.55 630.952 L1249.09 629.218 L1248.64 627.668 L1248.18 625.936 L1247.72 623.605 L1247.26 620.537 L1246.8 616.807 L1246.34 612.927 L1245.88 609.533 L1245.43 606.438 L1244.97 603.412 L1244.51 600.734 L1244.05 599.052 L1243.59 598.271 L1243.13 597.893 L1242.67 597.204 L1242.22 595.582 L1241.76 592.784 L1241.3 588.93 L1240.84 584.598 L1240.38 580.21 L1239.92 576.098 L1239.46 572.522 L1239.01 568.954 L1238.55 565.008 L1238.09 560.644 L1237.63 556.585 L1237.17 553.286 L1236.71 551.083 L1236.25 549.477 L1235.8 548.149 L1235.34 546.577 L1234.88 544.63 L1234.42 542.429 L1233.96 540.208 L1233.5 537.833 L1233.04 535.099 L1232.59 531.902 L1232.13 528.307 L1231.67 525.04 L1231.21 522.562 L1230.75 520.684 L1230.29 519.038 L1229.83 517.453 L1229.38 516.058 L1228.92 514.332 L1228.46 511.645 L1228 508.489 L1227.54 505.146 L1227.08 502.442 L1226.62 500.277 L1226.17 498.689 L1225.71 497.383 L1225.25 495.873 L1224.79 494.386 L1224.33 493.224 L1223.87 492.415 L1223.41 491.743 L1222.96 491.532 L1222.5 491.449 L1222.04 490.589 L1221.58 488.923 L1221.12 486.788 L1220.66 484.951 L1220.2 483.91 L1219.75 483.554 L1219.29 483.456 L1218.83 483.482 L1218.37 482.489 L1217.91 480.588 L1217.45 478.079 L1216.99 474.846 L1216.54 471.555 L1216.08 468.73 L1215.62 466.399 L1215.16 464.665 L1214.7 463.001 L1214.24 461.962 L1213.78 461.496 L1213.33 461.422 L1212.87 461.366 L1212.41 460.98 L1211.95 460.425 L1211.49 459.822 L1211.03 459.319 L1210.57 458.358 L1210.12 456.408 L1209.66 453.4 L1209.2 449.697 L1208.74 445.55 L1208.28 441.592 L1207.82 438.195 L1207.36 435.551 L1206.91 433.241 L1206.45 431.19 L1205.99 429.716 L1205.53 428.749 L1205.07 428.125 L1204.61 427.827 L1204.15 427.886 L1203.7 428.213 L1203.24 428.874 L1202.78 429.911 L1202.32 431.138 L1201.86 431.769 L1201.4 431.521 L1200.94 430.047 L1200.49 427.748 L1200.03 424.916 L1199.57 421.504 L1199.11 417.436 L1198.65 413.003 L1198.19 408.703 L1197.73 404.838 L1197.28 401.715 L1196.82 399.359 L1196.36 397.667 L1195.9 396.599 L1195.44 395.643 L1194.98 394.879 L1194.52 394.112 L1194.07 393.547 L1193.61 392.945 L1193.15 392.2 L1192.69 391.395 L1192.23 390.961 L1191.77 390.388 L1191.31 389.239 L1190.86 387.674 L1190.4 386.289 L1189.94 385.313 L1189.48 384.525 L1189.02 384.029 L1188.56 383.906 L1188.1 383.465 L1187.65 382.518 L1187.19 381.608 L1186.73 381.432 L1186.27 382.048 L1185.81 383.24 L1185.35 384.609 L1184.89 385.836 L1184.44 386.806 L1183.98 387.56 L1183.52 387.95 L1183.06 387.504 L1182.6 386.123 L1182.14 384.416 L1181.68 382.79 L1181.23 381.755 L1180.77 381.355 L1180.31 381.638 L1179.85 382.847 L1179.39 384.834 L1178.93 386.866 L1178.47 388.695 L1178.02 391.016 L1177.56 393.734 L1177.1 396.542 L1176.64 399.651 L1176.18 402.35 L1175.72 404.344 L1175.26 405.847 L1174.81 406.638 L1174.35 406.659 L1173.89 405.894 L1173.43 404.584 L1172.97 402.983 L1172.51 401.695 L1172.05 401.174 L1171.6 401.736 L1171.14 403.146 L1170.68 405.484 L1170.22 408.281 L1169.76 411.48 L1169.3 414.886 L1168.84 418.39 L1168.39 421.766 L1167.93 424.89 L1167.47 427.595 L1167.01 429.565 L1166.55 431.102 L1166.09 432.078 L1165.63 432.452 L1165.18 433.054 L1164.72 434.132 L1164.26 435.688 L1163.8 437.546 L1163.34 439.843 L1162.88 442.788 L1162.42 446.247 L1161.97 450.144 L1161.51 453.746 L1161.05 456.528 L1160.59 458.933 L1160.13 461.309 L1159.67 463.344 L1159.21 465.361 L1158.75 467.394 L1158.3 469.475 L1157.84 471.524 L1157.38 473.175 L1156.92 474.471 L1156.46 475.244 L1156 475.433 L1155.54 475.394 L1155.09 475.402 L1154.63 475.75 L1154.17 476.562 L1153.71 477.613 L1153.25 479.103 L1152.79 481.37 L1152.33 484.19 L1151.88 487.137 L1151.42 489.799 L1150.96 492.05 L1150.5 493.484 L1150.04 493.647 L1149.58 492.857 L1149.12 491.776 L1148.67 490.706 L1148.21 490.01 L1147.75 490.188 L1147.29 491.304 L1146.83 493.444 L1146.37 496.641 L1145.91 500.726 L1145.46 505.128 L1145 509.255 L1144.54 512.773 L1144.08 514.67 L1143.62 514.926 L1143.16 514.118 L1142.7 512.761 L1142.25 511.556 L1141.79 510.271 L1141.33 508.931 L1140.87 507.611 L1140.41 505.98 L1139.95 504.052 L1139.49 501.831 L1139.04 499.804 L1138.58 498.484 L1138.12 497.79 L1137.66 497.211 L1137.2 496.563 L1136.74 495.381 L1136.28 494 L1135.83 493.079 L1135.37 492.436 L1134.91 491.551 L1134.45 490.139 L1133.99 488.615 L1133.53 486.691 L1133.07 484.489 L1132.62 482.989 L1132.16 482.42 L1131.7 482.678 L1131.24 483.635 L1130.78 484.976 L1130.32 486.362 L1129.86 487.569 L1129.41 488.525 L1128.95 489.594 L1128.49 490.683 L1128.03 491.203 L1127.57 490.96 L1127.11 490.54 L1126.65 489.959 L1126.2 489.52 L1125.74 488.919 L1125.28 488.501 L1124.82 488.144 L1124.36 488.039 L1123.9 488.087 L1123.44 488.501 L1122.99 488.986 L1122.53 489.399 L1122.07 489.742 L1121.61 489.637 L1121.15 489.011 L1120.69 487.731 L1120.23 486.083 L1119.78 484.439 L1119.32 483.015 L1118.86 482.095 L1118.4 481.727 L1117.94 482.067 L1117.48 482.797 L1117.02 483.64 L1116.57 484.307 L1116.11 484.65 L1115.65 484.776 L1115.19 485.217 L1114.73 486.554 L1114.27 488.171 L1113.81 489.683 L1113.36 490.72 L1112.9 491.754 L1112.44 492.901 L1111.98 493.626 L1111.52 494.762 L1111.06 496.548 L1110.6 498.756 L1110.15 501.359 L1109.69 504.137 L1109.23 506.712 L1108.77 509.206 L1108.31 511.417 L1107.85 513.438 L1107.39 515.123 L1106.94 516.559 L1106.48 518.434 L1106.02 520.379 L1105.56 522.496 L1105.1 524.709 L1104.64 526.968 L1104.18 529.212 L1103.73 531.52 L1103.27 533.777 L1102.81 535.425 L1102.35 536.666 L1101.89 537.799 L1101.43 538.521 L1100.97 538.759 L1100.52 538.502 L1100.06 538.022 L1099.6 537.783 L1099.14 538.649 L1098.68 540.696 L1098.22 544.12 L1097.76 548.111 L1097.31 552.766 L1096.85 557.383 L1096.39 561.613 L1095.93 565.448 L1095.47 568.981 L1095.01 572.199 L1094.55 575.173 L1094.1 577.821 L1093.64 580.289 L1093.18 582.248 L1092.72 583.911 L1092.26 585.504 L1091.8 587.462 L1091.34 589.626 L1090.89 592.03 L1090.43 594.644 L1089.97 597.05 L1089.51 599.092 L1089.05 600.994 L1088.59 602.817 L1088.13 604.818 L1087.68 606.778 L1087.22 608.581 L1086.76 610.383 L1086.3 612.576 L1085.84 615.236 L1085.38 617.792 L1084.92 620.034 L1084.47 621.92 L1084.01 623.752 L1083.55 625.606 L1083.09 627.883 L1082.63 630.769 L1082.17 633.95 L1081.71 637.348 L1081.26 640.425 L1080.8 642.884 L1080.34 644.966 L1079.88 646.972 L1079.42 648.444 L1078.96 649.241 L1078.5 649.552 L1078.05 649.531 L1077.59 649.777 L1077.13 650.006 L1076.67 649.578 L1076.21 648.513 L1075.75 647.202 L1075.29 645.71 L1074.84 644.452 L1074.38 643.84 L1073.92 644.27 L1073.46 645.902 L1073 648.733 L1072.54 652.62 L1072.08 656.552 L1071.63 659.74 L1071.17 662.071 L1070.71 663.978 L1070.25 665.959 L1069.79 668.027 L1069.33 669.893 L1068.87 671.014 L1068.42 671.273 L1067.96 670.993 L1067.5 670.904 L1067.04 671.121 L1066.58 672.034 L1066.12 673.494 L1065.66 675.508 L1065.21 677.889 L1064.75 680.416 L1064.29 682.908 L1063.83 684.905 L1063.37 685.772 L1062.91 686.027 L1062.45 686.168 L1062 686.447 L1061.54 687.452 L1061.08 689.406 L1060.62 692.168 L1060.16 695.382 L1059.7 698.344 L1059.24 701.364 L1058.79 703.864 L1058.33 705.527 L1057.87 706.579 L1057.41 706.93 L1056.95 706.95 L1056.49 707.05 L1056.03 707.396 L1055.58 707.839 L1055.12 708.443 L1054.66 709.323 L1054.2 710.606 L1053.74 712.107 L1053.28 714.011 L1052.82 715.889 L1052.37 717.478 L1051.91 718.454 L1051.45 718.992 L1050.99 719.23 L1050.53 718.894 L1050.07 718.328 L1049.61 718.207 L1049.16 718.871 L1048.7 720.057 L1048.24 721.63 L1047.78 723.208 L1047.32 725.043 L1046.86 727.361 L1046.4 730.213 L1045.95 732.861 L1045.49 735.054 L1045.03 736.802 L1044.57 738.451 L1044.11 739.688 L1043.65 740.455 L1043.19 741.198 L1042.74 742.02 L1042.28 743.242 L1041.82 744.755 L1041.36 746.132 L1040.9 747.392 L1040.44 748.629 L1039.98 749.902 L1039.53 750.656 L1039.07 750.519 L1038.61 749.367 L1038.15 747.705 L1037.69 745.538 L1037.23 743.454 L1036.77 741.873 L1036.32 741.102 L1035.86 741.237 L1035.4 741.904 L1034.94 742.719 L1034.48 743.377 L1034.02 743.915 L1033.56 744.254 L1033.11 744.265 L1032.65 743.649 L1032.19 742.259 L1031.73 740.631 L1031.27 738.902 L1030.81 737.388 L1030.35 736.281 L1029.9 734.878 L1029.44 733.217 L1028.98 731.357 L1028.52 729.139 L1028.06 727.109 L1027.6 725.544 L1027.14 724.667 L1026.69 724.2 L1026.23 723.863 L1025.77 723.102 L1025.31 721.039 L1024.85 717.891 L1024.39 714.343 L1023.93 710.827 L1023.48 707.422 L1023.02 704.283 L1022.56 701.678 L1022.1 699.618 L1021.64 697.535 L1021.18 695.589 L1020.72 693.582 L1020.27 691.558 L1019.81 689.645 L1019.35 688.475 L1018.89 687.926 L1018.43 688.04 L1017.97 688.88 L1017.51 689.614 L1017.06 689.742 L1016.6 688.864 L1016.14 686.651 L1015.68 683.502 L1015.22 679.592 L1014.76 675.537 L1014.3 671.958 L1013.85 669.08 L1013.39 666.865 L1012.93 665.321 L1012.47 664.239 L1012.01 663.612 L1011.55 663.029 L1011.09 662.286 L1010.64 661.101 L1010.18 659.463 L1009.72 657.312 L1009.26 655.092 L1008.8 652.602 L1008.34 649.733 L1007.88 646.859 L1007.43 644.298 L1006.97 642.417 L1006.51 641.133 L1006.05 640.138 L1005.59 639.054 L1005.13 637.363 L1004.67 634.781 L1004.22 631.317 L1003.76 627.078 L1003.3 622.762 L1002.84 618.906 L1002.38 615.743 L1001.92 613.416 L1001.46 611.418 L1001.01 609.887 L1000.55 608.623 L1000.09 607.866 L999.63 608.051 L999.171 608.787 L998.713 609.465 L998.254 609.52 L997.796 608.635 L997.337 607.23 L996.879 605.364 L996.42 602.711 L995.961 599.209 L995.503 595.218 L995.044 591.572 L994.586 588.547 L994.127 586.156 L993.669 584.37 L993.21 582.83 L992.751 581.145 L992.293 579.548 L991.834 578.329 L991.376 577.876 L990.917 578.278 L990.459 579.22 L990 580.303 L989.541 581.283 L989.083 581.828 L988.624 582.089 L988.166 582.365 L987.707 582.282 L987.249 581.594 L986.79 579.931 L986.331 577.471 L985.873 574.604 L985.414 572.15 L984.956 570.888 L984.497 570.751 L984.039 571.46 L983.58 572.703 L983.121 574.191 L982.663 575.559 L982.204 575.965 L981.746 575.285 L981.287 573.925 L980.829 572.192 L980.37 569.945 L979.911 567.35 L979.453 565.045 L978.994 562.912 L978.536 561.188 L978.077 560.093 L977.619 559.689 L977.16 560.272 L976.701 561.616 L976.243 563.196 L975.784 564.422 L975.326 564.928 L974.867 564.67 L974.409 563.913 L973.95 562.889 L973.491 561.588 L973.033 560.186 L972.574 558.706 L972.116 557.729 L971.657 557.424 L971.199 557.648 L970.74 558.677 L970.281 559.697 L969.823 560.222 L969.364 560.363 L968.906 560.578 L968.447 560.929 L967.988 561.133 L967.53 561.108 L967.071 560.81 L966.613 560.14 L966.154 558.808 L965.696 557.609 L965.237 557.212 L964.778 557.799 L964.32 559.111 L963.861 560.19 L963.403 561.119 L962.944 562.085 L962.486 562.778 L962.027 562.832 L961.568 562.127 L961.11 560.855 L960.651 559.175 L960.193 557.163 L959.734 554.525 L959.276 551.466 L958.817 548.443 L958.358 545.877 L957.9 543.703 L957.441 542.249 L956.983 541.375 L956.524 540.73 L956.066 540.728 L955.607 541.294 L955.148 542.47 L954.69 543.814 L954.231 545.058 L953.773 545.926 L953.314 546.21 L952.856 546.092 L952.397 545.327 L951.938 544.037 L951.48 542.281 L951.021 540.261 L950.563 538.248 L950.104 536.663 L949.646 535.281 L949.187 533.665 L948.728 531.655 L948.27 528.934 L947.811 525.947 L947.353 523.17 L946.894 521.003 L946.436 519.476 L945.977 518.28 L945.518 517.521 L945.06 517.052 L944.601 516.426 L944.143 515.837 L943.684 515.201 L943.226 514.408 L942.767 513.331 L942.308 511.873 L941.85 510.249 L941.391 508.752 L940.933 507.078 L940.474 505.014 L940.016 502.986 L939.557 501.163 L939.098 499.705 L938.64 498.422 L938.181 497.222 L937.723 496.033 L937.264 495.116 L936.806 494.094 L936.347 493.052 L935.888 491.625 L935.43 489.973 L934.971 488.068 L934.513 485.704 L934.054 483.123 L933.595 480.119 L933.137 476.688 L932.678 472.767 L932.22 468.395 L931.761 463.676 L931.303 459.184 L930.844 455.966 L930.385 454.317 L929.927 453.947 L929.468 454.066 L929.01 454.522 L928.551 454.74 L928.093 454 L927.634 452.366 L927.175 450.138 L926.717 447.76 L926.258 445.155 L925.8 442.632 L925.341 440.255 L924.883 437.45 L924.424 434.231 L923.965 430.708 L923.507 427.26 L923.048 424.443 L922.59 422.496 L922.131 421.248 L921.673 420.37 L921.214 419.766 L920.755 419.995 L920.297 421.232 L919.838 423.024 L919.38 425.338 L918.921 427.816 L918.463 429.8 L918.004 431.08 L917.545 431.719 L917.087 431.56 L916.628 430.766 L916.17 429.196 L915.711 427.117 L915.253 425.245 L914.794 423.925 L914.335 423.497 L913.877 423.909 L913.418 424.822 L912.96 426.11 L912.501 427.25 L912.043 427.804 L911.584 427.48 L911.125 426.81 L910.667 426.854 L910.208 427.706 L909.75 429.361 L909.291 431.586 L908.833 433.788 L908.374 435.692 L907.915 437.456 L907.457 439.548 L906.998 441.836 L906.54 444.171 L906.081 446.212 L905.623 447.45 L905.164 448.245 L904.705 448.888 L904.247 449.888 L903.788 451.161 L903.33 452.372 L902.871 453.843 L902.413 455.659 L901.954 457.599 L901.495 459.726 L901.037 461.755 L900.578 463.765 L900.12 465.744 L899.661 467.802 L899.202 470.101 L898.744 472.593 L898.285 475.346 L897.827 478.43 L897.368 482.017 L896.91 485.529 L896.451 488.73 L895.992 491.462 L895.534 493.922 L895.075 496.202 L894.617 498.144 L894.158 499.645 L893.7 501.13 L893.241 502.484 L892.782 503.607 L892.324 505.286 L891.865 507.425 L891.407 509.649 L890.948 512.047 L890.49 514.654 L890.031 517.653 L889.572 521.37 L889.114 525.16 L888.655 528.928 L888.197 532.622 L887.738 536.451 L887.28 540.097 L886.821 543.4 L886.362 546.573 L885.904 549.83 L885.445 553.139 L884.987 556.5 L884.528 559.957 L884.07 563.659 L883.611 567.616 L883.152 571.604 L882.694 575.356 L882.235 578.928 L881.777 582.249 L881.318 585.256 L880.86 587.22 L880.401 588.193 L879.942 587.847 L879.484 586.737 L879.025 585.487 L878.567 585.018 L878.108 585.333 L877.65 586.44 L877.191 588.196 L876.732 590.539 L876.274 593.239 L875.815 595.969 L875.357 598.589 L874.898 600.72 L874.44 602.03 L873.981 602.345 L873.522 601.642 L873.064 600.048 L872.605 598.131 L872.147 596.476 L871.688 596.072 L871.23 596.973 L870.771 598.699 L870.312 600.914 L869.854 603.107 L869.395 605.153 L868.937 607.097 L868.478 608.628 L868.02 609.682 L867.561 610.336 L867.102 610.321 L866.644 609.053 L866.185 606.653 L865.727 604.134 L865.268 601.927 L864.809 600.486 L864.351 600.241 L863.892 601.128 L863.434 603.061 L862.975 606.076 L862.517 609.428 L862.058 612.066 L861.599 613.358 L861.141 612.8 L860.682 610.455 L860.224 607.146 L859.765 603.687 L859.307 600.346 L858.848 597.463 L858.389 595.268 L857.931 593.817 L857.472 593.004 L857.014 592.599 L856.555 592.682 L856.097 592.706 L855.638 592.421 L855.179 592.359 L854.721 592.769 L854.262 593.72 L853.804 594.839 L853.345 595.697 L852.887 595.469 L852.428 594.017 L851.969 591.44 L851.511 588.49 L851.052 585.284 L850.594 581.602 L850.135 577.735 L849.677 574.314 L849.218 572.045 L848.759 571.216 L848.301 571.83 L847.842 573.026 L847.384 574.519 L846.925 576.439 L846.467 578.525 L846.008 580.64 L845.549 582.439 L845.091 583.921 L844.632 584.913 L844.174 585.305 L843.715 584.555 L843.257 583.329 L842.798 581.981 L842.339 580.461 L841.881 579.058 L841.422 577.619 L840.964 575.995 L840.505 574.448 L840.047 573.47 L839.588 573.259 L839.129 574.034 L838.671 575.08 L838.212 576.133 L837.754 576.813 L837.295 577.481 L836.837 578.031 L836.378 578.284 L835.919 578.025 L835.461 577.186 L835.002 576.36 L834.544 576.365 L834.085 576.976 L833.627 577.752 L833.168 578.608 L832.709 579.811 L832.251 582.034 L831.792 585.131 L831.334 588.598 L830.875 592.249 L830.416 595.848 L829.958 599.05 L829.499 601.598 L829.041 603.398 L828.582 604.49 L828.124 605.872 L827.665 607.568 L827.206 609.155 L826.748 610.553 L826.289 611.186 L825.831 611.033 L825.372 610.354 L824.914 609.616 L824.455 608.705 L823.996 608.068 L823.538 608.051 L823.079 608.381 L822.621 608.812 L822.162 608.942 L821.704 608.829 L821.245 608.547 L820.786 607.809 L820.328 606.814 L819.869 605.72 L819.411 605.505 L818.952 606.55 L818.494 608.805 L818.035 611.524 L817.576 614.408 L817.118 617.273 L816.659 619.998 L816.201 622.325 L815.742 624.092 L815.284 625.604 L814.825 627.269 L814.366 629.375 L813.908 631.984 L813.449 634.587 L812.991 637.126 L812.532 639.902 L812.074 642.835 L811.615 645.546 L811.156 647.539 L810.698 648.447 L810.239 648.34 L809.781 647.77 L809.322 646.91 L808.864 646.323 L808.405 646.152 L807.946 646.289 L807.488 646.863 L807.029 647.639 L806.571 648.614 L806.112 649.6 L805.654 651.005 L805.195 652.747 L804.736 654.796 L804.278 656.694 L803.819 658.181 L803.361 659.13 L802.902 659.812 L802.444 660.171 L801.985 660 L801.526 658.948 L801.068 657.112 L800.609 654.793 L800.151 652.43 L799.692 650.366 L799.234 648.96 L798.775 648.388 L798.316 648.423 L797.858 649.006 L797.399 649.871 L796.941 651.281 L796.482 653.355 L796.023 655.961 L795.565 658.501 L795.106 660.363 L794.648 661.484 L794.189 662.001 L793.731 661.609 L793.272 660.816 L792.813 660.07 L792.355 660.174 L791.896 661.453 L791.438 663.558 L790.979 666.115 L790.521 668.863 L790.062 671.219 L789.603 672.94 L789.145 674.149 L788.686 675.433 L788.228 676.833 L787.769 678.12 L787.311 679.011 L786.852 679.72 L786.393 680.485 L785.935 681.377 L785.476 682.275 L785.018 682.884 L784.559 683.309 L784.101 683.189 L783.642 682.594 L783.183 681.241 L782.725 679.584 L782.266 677.861 L781.808 676.449 L781.349 675.161 L780.891 674.084 L780.432 673.586 L779.973 674.123 L779.515 675.604 L779.056 677.799 L778.598 680.286 L778.139 682.533 L777.681 684.267 L777.222 685.376 L776.763 685.13 L776.305 683.721 L775.846 682.095 L775.388 680.684 L774.929 679.451 L774.471 678.366 L774.012 677.91 L773.553 678.353 L773.095 679.303 L772.636 680.437 L772.178 681.454 L771.719 682.143 L771.261 682.089 L770.802 681.38 L770.343 680.346 L769.885 678.717 L769.426 676.913 L768.968 675.06 L768.509 673.836 L768.051 673.001 L767.592 672.444 L767.133 671.521 L766.675 670.166 L766.216 668.436 L765.758 666.553 L765.299 664.905 L764.841 663.849 L764.382 663.369 L763.923 663.175 L763.465 663.118 L763.006 663.084 L762.548 662.938 L762.089 662.629 L761.63 661.833 L761.172 660.214 L760.713 657.745 L760.255 654.999 L759.796 652.19 L759.338 649.305 L758.879 646.959 L758.42 644.88 L757.962 643.231 L757.503 642.009 L757.045 641.073 L756.586 640.828 L756.128 641.236 L755.669 641.648 L755.21 641.645 L754.752 641.093 L754.293 639.793 L753.835 637.973 L753.376 635.634 L752.918 633.075 L752.459 630.27 L752 626.826 L751.542 623.206 L751.083 620.202 L750.625 617.696 L750.166 615.349 L749.708 612.966 L749.249 610.868 L748.79 609.237 L748.332 607.797 L747.873 606.624 L747.415 605.189 L746.956 603.735 L746.498 602.378 L746.039 601.22 L745.58 599.938 L745.122 598.487 L744.663 596.873 L744.205 594.918 L743.746 592.132 L743.288 588.806 L742.829 585.443 L742.37 582.219 L741.912 579.37 L741.453 576.596 L740.995 574.019 L740.536 571.938 L740.078 569.982 L739.619 567.774 L739.16 565.231 L738.702 562.287 L738.243 559.413 L737.785 556.682 L737.326 554.496 L736.868 553.107 L736.409 552.455 L735.95 552.741 L735.492 553.332 L735.033 553.762 L734.575 553.952 L734.116 553.522 L733.658 551.708 L733.199 548.589 L732.74 544.431 L732.282 540.499 L731.823 537.152 L731.365 534.681 L730.906 533.073 L730.448 532.56 L729.989 532.815 L729.53 533.428 L729.072 533.85 L728.613 533.5 L728.155 532.514 L727.696 531.341 L727.237 530.018 L726.779 528.541 L726.32 527.007 L725.862 525.287 L725.403 523.863 L724.945 522.847 L724.486 522.79 L724.027 523.971 L723.569 525.733 L723.11 527.367 L722.652 527.823 L722.193 526.825 L721.735 525.034 L721.276 522.516 L720.817 519.663 L720.359 517.184 L719.9 515.768 L719.442 515.765 L718.983 517.363 L718.525 520.089 L718.066 523.126 L717.607 525.735 L717.149 527.375 L716.69 528.279 L716.232 528.616 L715.773 528.797 L715.315 529.052 L714.856 529.422 L714.397 529.932 L713.939 530.957 L713.48 532.58 L713.022 534.765 L712.563 537.192 L712.105 538.953 L711.646 539.921 L711.187 540.379 L710.729 540.439 L710.27 540.336 L709.812 539.875 L709.353 539.264 L708.895 538.312 L708.436 537.296 L707.977 536.3 L707.519 535.062 L707.06 534.149 L706.602 533.914 L706.143 534.306 L705.685 535.134 L705.226 536.23 L704.767 537.592 L704.309 539.15 L703.85 540.957 L703.392 543.391 L702.933 546.528 L702.475 549.779 L702.016 552.814 L701.557 555.707 L701.099 558.357 L700.64 560.075 L700.182 560.522 L699.723 559.941 L699.265 559.355 L698.806 558.932 L698.347 558.479 L697.889 557.56 L697.43 556.462 L696.972 555.699 L696.513 555.713 L696.055 556.167 L695.596 556.823 L695.137 557.277 L694.679 557.39 L694.22 557.035 L693.762 556.276 L693.303 555.017 L692.844 553.538 L692.386 551.784 L691.927 549.851 L691.469 547.491 L691.01 544.605 L690.552 541.977 L690.093 540.148 L689.634 539.726 L689.176 540.732 L688.717 542.672 L688.259 544.962 L687.8 547.479 L687.342 549.748 L686.883 551.029 L686.424 551.414 L685.966 550.431 L685.507 548.11 L685.049 544.854 L684.59 541.955 L684.132 539.598 L683.673 537.62 L683.214 535.678 L682.756 533.497 L682.297 531.281 L681.839 529.159 L681.38 527.391 L680.922 525.765 L680.463 523.96 L680.004 521.951 L679.546 520.111 L679.087 518.651 L678.629 517.775 L678.17 517.049 L677.712 515.736 L677.253 514.041 L676.794 511.898 L676.336 509.596 L675.877 507.459 L675.419 505.396 L674.96 503.19 L674.502 500.503 L674.043 497.267 L673.584 493.945 L673.126 490.676 L672.667 487.386 L672.209 484.261 L671.75 481.45 L671.292 479.096 L670.833 477.802 L670.374 477.464 L669.916 477.846 L669.457 478.602 L668.999 479.683 L668.54 480.618 L668.082 481.37 L667.623 481.998 L667.164 482.125 L666.706 481.811 L666.247 481.079 L665.789 480.216 L665.33 479.168 L664.872 477.427 L664.413 475.052 L663.954 472.613 L663.496 470.593 L663.037 469.275 L662.579 468.635 L662.12 469.085 L661.662 470.407 L661.203 471.922 L660.744 472.984 L660.286 473.757 L659.827 474.281 L659.369 474.553 L658.91 474.272 L658.451 473.888 L657.993 474.191 L657.534 475.157 L657.076 476.624 L656.617 478.632 L656.159 481.255 L655.7 483.702 L655.241 485.787 L654.783 487.334 L654.324 488.631 L653.866 490.239 L653.407 492.464 L652.949 494.856 L652.49 496.919 L652.031 498.463 L651.573 499.334 L651.114 499.843 L650.656 500.577 L650.197 501.028 L649.739 501.154 L649.28 501.36 L648.821 502.228 L648.363 504.24 L647.904 507.661 L647.446 512.226 L646.987 517.373 L646.529 522.147 L646.07 526.284 L645.611 529.77 L645.153 532.53 L644.694 534.595 L644.236 536.078 L643.777 537.231 L643.319 537.938 L642.86 538.824 L642.401 540.417 L641.943 542.799 L641.484 545.767 L641.026 549.265 L640.567 552.612 L640.109 554.861 L639.65 555.971 L639.191 555.974 L638.733 555.38 L638.274 554.524 L637.816 553.869 L637.357 553.391 L636.899 553.581 L636.44 554.09 L635.981 554.892 L635.523 555.973 L635.064 557.146 L634.606 558.576 L634.147 560.258 L633.689 561.995 L633.23 563.777 L632.771 565.945 L632.313 568.409 L631.854 571.324 L631.396 574.18 L630.937 576.31 L630.479 578.016 L630.02 579.46 L629.561 580.505 L629.103 581.27 L628.644 581.943 L628.186 582.459 L627.727 582.504 L627.269 582.144 L626.81 580.954 L626.351 579.296 L625.893 577.848 L625.434 576.734 L624.976 575.851 L624.517 575.302 L624.058 575.175 L623.6 575.828 L623.141 577.649 L622.683 580.287 L622.224 583.718 L621.766 587.264 L621.307 590.254 L620.848 592.511 L620.39 594.276 L619.931 595.893 L619.473 597.128 L619.014 597.888 L618.556 598.339 L618.097 598.47 L617.638 598.243 L617.18 598.216 L616.721 598.573 L616.263 599.025 L615.804 599.15 L615.346 598.496 L614.887 597.244 L614.428 595.871 L613.97 594.728 L613.511 594.21 L613.053 594.732 L612.594 596.062 L612.136 597.628 L611.677 599.055 L611.218 600.128 L610.76 601.138 L610.301 601.941 L609.843 602.187 L609.384 602.33 L608.926 602.603 L608.467 602.556 L608.008 601.923 L607.55 600.393 L607.091 598.236 L606.633 595.741 L606.174 593.855 L605.716 592.988 L605.257 593.29 L604.798 594.609 L604.34 596.871 L603.881 600.187 L603.423 604.431 L602.964 608.951 L602.506 613.482 L602.047 617.623 L601.588 620.649 L601.13 621.874 L600.671 621.557 L600.213 620.468 L599.754 619.594 L599.296 619.496 L598.837 620.306 L598.378 621.767 L597.92 623.933 L597.461 626.562 L597.003 629.507 L596.544 631.605 L596.086 632.65 L595.627 632.702 L595.168 632.153 L594.71 631.531 L594.251 630.946 L593.793 630.616 L593.334 630.954 L592.876 632.208 L592.417 634.388 L591.958 637.241 L591.5 640.626 L591.041 644.512 L590.583 648.074 L590.124 650.329 L589.665 651.013 L589.207 650.457 L588.748 649.363 L588.29 648.454 L587.831 647.899 L587.373 647.876 L586.914 648.477 L586.455 649.473 L585.997 651.312 L585.538 653.78 L585.08 656.603 L584.621 659.474 L584.163 661.727 L583.704 663.739 L583.245 665.173 L582.787 665.486 L582.328 665.368 L581.87 665.225 L581.411 664.661 L580.953 663.891 L580.494 663.23 L580.035 662.862 L579.577 662.831 L579.118 663.462 L578.66 664.569 L578.201 665.561 L577.743 665.811 L577.284 665.099 L576.825 663.543 L576.367 661.752 L575.908 659.92 L575.45 658.455 L574.991 657.366 L574.533 656.802 L574.074 656.534 L573.615 656.079 L573.157 655.338 L572.698 654.126 L572.24 652.688 L571.781 651.195 L571.323 650.005 L570.864 649.413 L570.405 649.343 L569.947 649.708 L569.488 650.212 L569.03 650.448 L568.571 649.848 L568.113 648.397 L567.654 646.248 L567.195 643.552 L566.737 640.814 L566.278 638.468 L565.82 636.977 L565.361 636.034 L564.903 635.249 L564.444 634.406 L563.985 633.615 L563.527 632.972 L563.068 632.456 L562.61 631.85 L562.151 630.761 L561.693 628.904 L561.234 626.227 L560.775 623.097 L560.317 619.699 L559.858 616.325 L559.4 613.46 L558.941 611.492 L558.483 610.583 L558.024 610.705 L557.565 610.965 L557.107 611.08 L556.648 610.686 L556.19 609.979 L555.731 608.779 L555.272 607.054 L554.814 605.125 L554.355 602.926 L553.897 600.608 L553.438 597.953 L552.98 594.678 L552.521 590.531 L552.062 586.135 L551.604 581.878 L551.145 577.631 L550.687 573.438 L550.228 569.856 L549.77 566.95 L549.311 564.481 L548.852 562.512 L548.394 561.12 L547.935 560.155 L547.477 559.349 L547.018 558.347 L546.56 557.073 L546.101 555.69 L545.642 554.479 L545.184 554.141 L544.725 554.624 L544.267 555.265 L543.808 555.087 L543.35 554.376 L542.891 553.503 L542.432 552.866 L541.974 553.168 L541.515 553.932 L541.057 554.503 L540.598 554.537 L540.14 554.044 L539.681 553.47 L539.222 553.102 L538.764 553.16 L538.305 553.962 L537.847 555.681 L537.388 557.98 L536.93 560.623 L536.471 563.415 L536.012 566.172 L535.554 568.34 L535.095 569.676 L534.637 570.112 L534.178 570.065 L533.72 570.177 L533.261 570.601 L532.802 571.423 L532.344 572.205 L531.885 572.869 L531.427 572.717 L530.968 571.907 L530.51 570.253 L530.051 567.825 L529.592 565.098 L529.134 562.968 L528.675 562.166 L528.217 562.906 L527.758 565.095 L527.3 568.433 L526.841 571.948 L526.382 575.284 L525.924 578.122 L525.465 580.481 L525.007 582.279 L524.548 583.436 L524.09 584.511 L523.631 585.642 L523.172 586.594 L522.714 587.854 L522.255 589.401 L521.797 591.437 L521.338 593.487 L520.879 595.455 L520.421 597.452 L519.962 599.348 L519.504 601.477 L519.045 603.769 L518.587 606.481 L518.128 609.129 L517.669 611.335 L517.211 612.728 L516.752 613.149 L516.294 612.496 L515.835 611.342 L515.377 609.885 L514.918 608.763 L514.459 607.987 L514.001 607.597 L513.542 607.406 L513.084 606.919 L512.625 606.452 L512.167 606.585 L511.708 607.341 L511.249 608.877 L510.791 611.115 L510.332 613.763 L509.874 616.36 L509.415 618.876 L508.957 620.81 L508.498 622.144 L508.039 622.851 L507.581 623.014 L507.122 622.562 L506.664 621.64 L506.205 620.643 L505.747 619.888 L505.288 619.94 L504.829 620.514 L504.371 621.133 L503.912 621.867 L503.454 622.558 L502.995 623.601 L502.537 624.866 L502.078 626.049 L501.619 627.018 L501.161 627.318 L500.702 627.473 L500.244 627.743 L499.785 628.42 L499.327 629.372 L498.868 630.493 L498.409 631.236 L497.951 631.636 L497.492 631.348 L497.034 630.224 L496.575 628.562 L496.117 626.764 L495.658 625.481 L495.199 624.439 L494.741 623.887 L494.282 623.506 L493.824 623.044 L493.365 622.515 L492.907 621.981 L492.448 621.342 L491.989 620.469 L491.531 619.114 L491.072 617.367 L490.614 614.918 L490.155 612.165 L489.697 609.203 L489.238 606.049 L488.779 603.003 L488.321 600.344 L487.862 598.448 L487.404 597.585 L486.945 597.616 L486.486 597.742 L486.028 597.607 L485.569 597.183 L485.111 596.22 L484.652 595.054 L484.194 593.389 L483.735 591.21 L483.276 589.413 L482.818 588.352 L482.359 588.602 L481.901 589.79 L481.442 591.341 L480.984 592.273 L480.525 592.514 L480.066 591.545 L479.608 589.288 L479.149 586.249 L478.691 582.722 L478.232 579.103 L477.774 575.662 L477.315 572.505 L476.856 569.532 L476.398 566.22 L475.939 563.441 L475.481 561.615 L475.022 561.198 L474.564 561.818 L474.105 562.977 L473.646 564.395 L473.188 566.095 L472.729 567.593 L472.271 568.022 L471.812 567.265 L471.354 565.937 L470.895 564.727 L470.436 563.539 L469.978 562.406 L469.519 561.485 L469.061 561.154 L468.602 561.531 L468.144 562.578 L467.685 563.762 L467.226 564.954 L466.768 565.815 L466.309 566.312 L465.851 566.816 L465.392 567.733 L464.934 569.08 L464.475 570.387 L464.016 571.291 L463.558 571.778 L463.099 571.674 L462.641 571.447 L462.182 571.168 L461.724 570.638 L461.265 569.939 L460.806 569.579 L460.348 569.488 L459.889 569.802 L459.431 570.514 L458.972 571.672 L458.514 573.231 L458.055 574.445 L457.596 574.932 L457.138 574.176 L456.679 571.866 L456.221 568.525 L455.762 564.824 L455.304 561.38 L454.845 558.522 L454.386 556.772 L453.928 556.103 L453.469 556.63 L453.011 558.54 L452.552 561.352 L452.093 564.781 L451.635 568.841 L451.176 572.831 L450.718 575.816 L450.259 577.939 L449.801 578.779 L449.342 577.607 L448.883 574.946 L448.425 571.49 L447.966 568.019 L447.508 565.805 L447.049 565.395 L446.591 566.441 L446.132 568.464 L445.673 570.629 L445.215 572.663 L444.756 574.645 L444.298 576.718 L443.839 578.605 L443.381 580.173 L442.922 581.221 L442.463 581.909 L442.005 582.251 L441.546 581.885 L441.088 581.524 L440.629 581.238 L440.171 580.687 L439.712 579.726 L439.253 578.595 L438.795 577.531 L438.336 576.603 L437.878 575.551 L437.419 574.13 L436.961 572.984 L436.502 572.021 L436.043 571.288 L435.585 570.9 L435.126 570.366 L434.668 569.816 L434.209 569.384 L433.751 568.665 L433.292 567.502 L432.833 565.99 L432.375 564.549 L431.916 563.287 L431.458 562.537 L430.999 562.287 L430.541 562.924 L430.082 564.71 L429.623 567.33 L429.165 570.495 L428.706 573.853 L428.248 577.117 L427.789 580.197 L427.331 582.965 L426.872 584.939 L426.413 585.953 L425.955 585.465 L425.496 583.831 L425.038 581.864 L424.579 580.181 L424.121 578.595 L423.662 576.896 L423.203 574.845 L422.745 572.412 L422.286 570.185 L421.828 567.839 L421.369 565.518 L420.911 563.582 L420.452 562.475 L419.993 562.732 L419.535 564.15 L419.076 566.27 L418.618 568.614 L418.159 570.745 L417.7 572.342 L417.242 573.321 L416.783 573.941 L416.325 574.332 L415.866 574.371 L415.408 574.212 L414.949 573.796 L414.49 572.835 L414.032 571.303 L413.573 569.858 L413.115 568.586 L412.656 567.732 L412.198 567.132 L411.739 566.486 L411.28 565.788 L410.822 565.04 L410.363 564.374 L409.905 563.983 L409.446 564.064 L408.988 563.918 L408.529 563.801 L408.07 564.04 L407.612 564.658 L407.153 565.906 L406.695 567.9 L406.236 570.092 L405.778 571.992 L405.319 573.335 L404.86 573.796 L404.402 573.623 L403.943 572.656 L403.485 571.146 L403.026 569.206 L402.568 566.944 L402.109 564.641 L401.65 562.396 L401.192 560.107 L400.733 557.856 L400.275 556.557 L399.816 556.545 L399.358 557.954 L398.899 560.378 L398.44 562.678 L397.982 563.799 L397.523 563.419 L397.065 562.369 L396.606 561.266 L396.148 560.528 L395.689 559.918 L395.23 559.355 L394.772 559.017 L394.313 559.108 L393.855 559.206 L393.396 559.26 L392.938 559.789 L392.479 561.022 L392.02 563.012 L391.562 565.805 L391.103 569.262  Z" fill="#ffa500" fill-rule="evenodd" fill-opacity="0.3"/>
<polyline clip-path="url(#clip952)" style="stroke:#ffa500; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" stroke-dasharray="32, 20" points="391.103,572.776 391.562,570.396 392.02,568.294 392.479,566.699 392.938,565.666 393.396,565.222 393.855,565.197 394.313,565.106 394.772,565.015 395.23,565.353 395.689,565.917 396.148,566.529 396.606,567.268 397.065,568.371 397.523,569.422 397.982,569.803 398.44,568.682 398.899,566.381 399.358,563.957 399.816,562.549 400.275,562.561 400.733,563.859 401.192,566.11 401.65,568.399 402.109,570.645 402.568,572.948 403.026,575.21 403.485,577.15 403.943,578.66 404.402,579.626 404.86,579.799 405.319,579.339 405.778,577.995 406.236,576.095 406.695,573.904 407.153,571.91 407.612,570.662 408.07,570.043 408.529,569.804 408.988,569.922 409.446,570.067 409.905,569.986 410.363,570.378 410.822,571.043 411.28,571.792 411.739,572.489 412.198,573.135 412.656,573.736 413.115,574.59 413.573,575.862 414.032,577.307 414.49,578.839 414.949,579.8 415.408,580.216 415.866,580.375 416.325,580.336 416.783,579.945 417.242,579.324 417.7,578.345 418.159,576.749 418.618,574.617 419.076,572.273 419.535,570.154 419.993,568.736 420.452,568.478 420.911,569.586 421.369,571.521 421.828,573.843 422.286,576.188 422.745,578.415 423.203,580.849 423.662,582.899 424.121,584.598 424.579,586.185 425.038,587.868 425.496,589.835 425.955,591.468 426.413,591.957 426.872,590.943 427.331,588.968 427.789,586.2 428.248,583.12 428.706,579.857 429.165,576.499 429.623,573.334 430.082,570.714 430.541,568.927 430.999,568.291 431.458,568.54 431.916,569.29 432.375,570.552 432.833,571.994 433.292,573.505 433.751,574.669 434.209,575.387 434.668,575.82 435.126,576.369 435.585,576.904 436.043,577.292 436.502,578.024 436.961,578.988 437.419,580.133 437.878,581.555 438.336,582.606 438.795,583.535 439.253,584.598 439.712,585.729 440.171,586.691 440.629,587.241 441.088,587.528 441.546,587.889 442.005,588.254 442.463,587.913 442.922,587.224 443.381,586.177 443.839,584.609 444.298,582.721 444.756,580.648 445.215,578.667 445.673,576.632 446.132,574.468 446.591,572.445 447.049,571.398 447.508,571.809 447.966,574.023 448.425,577.494 448.883,580.95 449.342,583.61 449.801,584.783 450.259,583.943 450.718,581.819 451.176,578.835 451.635,574.844 452.093,570.785 452.552,567.355 453.011,564.543 453.469,562.634 453.928,562.106 454.386,562.776 454.845,564.525 455.304,567.383 455.762,570.828 456.221,574.528 456.679,577.87 457.138,580.179 457.596,580.935 458.055,580.448 458.514,579.234 458.972,577.676 459.431,576.518 459.889,575.806 460.348,575.491 460.806,575.582 461.265,575.942 461.724,576.642 462.182,577.172 462.641,577.451 463.099,577.678 463.558,577.782 464.016,577.295 464.475,576.39 464.934,575.083 465.392,573.736 465.851,572.82 466.309,572.315 466.768,571.819 467.226,570.957 467.685,569.766 468.144,568.582 468.602,567.535 469.061,567.158 469.519,567.489 469.978,568.41 470.436,569.542 470.895,570.73 471.354,571.941 471.812,573.269 472.271,574.025 472.729,573.596 473.188,572.098 473.646,570.399 474.105,568.981 474.564,567.822 475.022,567.202 475.481,567.618 475.939,569.444 476.398,572.223 476.856,575.536 477.315,578.509 477.774,581.665 478.232,585.106 478.691,588.726 479.149,592.253 479.608,595.292 480.066,597.549 480.525,598.517 480.984,598.277 481.442,597.345 481.901,595.793 482.359,594.606 482.818,594.356 483.276,595.417 483.735,597.214 484.194,599.392 484.652,601.058 485.111,602.224 485.569,603.186 486.028,603.611 486.486,603.746 486.945,603.619 487.404,603.589 487.862,604.452 488.321,606.348 488.779,609.007 489.238,612.053 489.697,615.206 490.155,618.168 490.614,620.922 491.072,623.37 491.531,625.118 491.989,626.473 492.448,627.346 492.907,627.985 493.365,628.518 493.824,629.048 494.282,629.51 494.741,629.891 495.199,630.443 495.658,631.484 496.117,632.767 496.575,634.565 497.034,636.227 497.492,637.351 497.951,637.639 498.409,637.239 498.868,636.497 499.327,635.376 499.785,634.424 500.244,633.747 500.702,633.476 501.161,633.322 501.619,633.021 502.078,632.053 502.537,630.869 502.995,629.604 503.454,628.561 503.912,627.87 504.371,627.137 504.829,626.518 505.288,625.944 505.747,625.891 506.205,626.647 506.664,627.643 507.122,628.566 507.581,629.017 508.039,628.854 508.498,628.147 508.957,626.814 509.415,624.879 509.874,622.363 510.332,619.767 510.791,617.118 511.249,614.88 511.708,613.345 512.167,612.588 512.625,612.456 513.084,612.922 513.542,613.409 514.001,613.6 514.459,613.991 514.918,614.767 515.377,615.889 515.835,617.345 516.294,618.5 516.752,619.152 517.211,618.731 517.669,617.338 518.128,615.133 518.587,612.484 519.045,609.772 519.504,607.481 519.962,605.351 520.421,603.455 520.879,601.458 521.338,599.49 521.797,597.44 522.255,595.404 522.714,593.858 523.172,592.598 523.631,591.645 524.09,590.515 524.548,589.439 525.007,588.282 525.465,586.485 525.924,584.126 526.382,581.288 526.841,577.952 527.3,574.436 527.758,571.098 528.217,568.91 528.675,568.17 529.134,568.971 529.592,571.102 530.051,573.828 530.51,576.257 530.968,577.91 531.427,578.721 531.885,578.873 532.344,578.209 532.802,577.426 533.261,576.604 533.72,576.181 534.178,576.069 534.637,576.116 535.095,575.68 535.554,574.343 536.012,572.176 536.471,569.418 536.93,566.627 537.388,563.983 537.847,561.684 538.305,559.965 538.764,559.163 539.222,559.106 539.681,559.473 540.14,560.048 540.598,560.541 541.057,560.506 541.515,559.936 541.974,559.172 542.432,558.869 542.891,559.506 543.35,560.38 543.808,561.091 544.267,561.269 544.725,560.628 545.184,560.145 545.642,560.483 546.101,561.694 546.56,563.076 547.018,564.351 547.477,565.353 547.935,566.158 548.394,567.123 548.852,568.516 549.311,570.485 549.77,572.954 550.228,575.859 550.687,579.442 551.145,583.635 551.604,587.881 552.062,592.139 552.521,596.534 552.98,600.681 553.438,603.957 553.897,606.612 554.355,608.93 554.814,611.129 555.272,613.058 555.731,614.782 556.19,615.983 556.648,616.69 557.107,617.084 557.565,616.968 558.024,616.708 558.483,616.587 558.941,617.496 559.4,619.464 559.858,622.329 560.317,625.703 560.775,629.101 561.234,632.231 561.693,634.907 562.151,636.765 562.61,637.854 563.068,638.459 563.527,638.975 563.985,639.619 564.444,640.41 564.903,641.253 565.361,642.038 565.82,642.98 566.278,644.472 566.737,646.817 567.195,649.555 567.654,652.252 568.113,654.401 568.571,655.851 569.03,656.452 569.488,656.215 569.947,655.712 570.405,655.347 570.864,655.416 571.323,656.008 571.781,657.199 572.24,658.692 572.698,660.129 573.157,661.341 573.615,662.083 574.074,662.538 574.533,662.806 574.991,663.369 575.45,664.458 575.908,665.923 576.367,667.756 576.825,669.546 577.284,671.102 577.743,671.814 578.201,671.564 578.66,670.573 579.118,669.466 579.577,668.835 580.035,668.866 580.494,669.233 580.953,669.894 581.411,670.665 581.87,671.228 582.328,671.371 582.787,671.49 583.245,671.177 583.704,669.742 584.163,667.731 584.621,665.478 585.08,662.607 585.538,659.784 585.997,657.315 586.455,655.476 586.914,654.481 587.373,653.88 587.831,653.903 588.29,654.457 588.748,655.367 589.207,656.461 589.665,657.016 590.124,656.333 590.583,654.078 591.041,650.516 591.5,646.63 591.958,643.244 592.417,640.392 592.876,638.212 593.334,636.958 593.793,636.62 594.251,636.95 594.71,637.535 595.168,638.156 595.627,638.706 596.086,638.653 596.544,637.608 597.003,635.511 597.461,632.565 597.92,629.937 598.378,627.771 598.837,626.31 599.296,625.499 599.754,625.597 600.213,626.471 600.671,627.56 601.13,627.877 601.588,626.653 602.047,623.627 602.506,619.485 602.964,614.955 603.423,610.435 603.881,606.19 604.34,602.875 604.798,600.613 605.257,599.293 605.716,598.992 606.174,599.858 606.633,601.745 607.091,604.24 607.55,606.397 608.008,607.926 608.467,608.56 608.926,608.606 609.384,608.334 609.843,608.191 610.301,607.944 610.76,607.141 611.218,606.132 611.677,605.058 612.136,603.632 612.594,602.065 613.053,600.736 613.511,600.213 613.97,600.731 614.428,601.875 614.887,603.247 615.346,604.5 615.804,605.153 616.263,605.029 616.721,604.577 617.18,604.22 617.638,604.247 618.097,604.474 618.556,604.342 619.014,603.891 619.473,603.132 619.931,601.896 620.39,600.279 620.848,598.515 621.307,596.257 621.766,593.267 622.224,589.722 622.683,586.291 623.141,583.653 623.6,581.832 624.058,581.179 624.517,581.306 624.976,581.855 625.434,582.738 625.893,583.852 626.351,585.3 626.81,586.958 627.269,588.147 627.727,588.508 628.186,588.463 628.644,587.947 629.103,587.273 629.561,586.509 630.02,585.463 630.479,584.02 630.937,582.313 631.396,580.184 631.854,577.328 632.313,574.413 632.771,571.949 633.23,569.781 633.689,567.998 634.147,566.261 634.606,564.58 635.064,563.149 635.523,561.977 635.981,560.896 636.44,560.094 636.899,559.584 637.357,559.395 637.816,559.873 638.274,560.528 638.733,561.384 639.191,561.977 639.65,561.975 640.109,560.865 640.567,558.616 641.026,555.269 641.484,551.77 641.943,548.802 642.401,546.421 642.86,544.828 643.319,543.942 643.777,543.234 644.236,542.082 644.694,540.599 645.153,538.533 645.611,535.774 646.07,532.287 646.529,528.151 646.987,523.377 647.446,518.23 647.904,513.665 648.363,510.243 648.821,508.232 649.28,507.363 649.739,507.158 650.197,507.032 650.656,506.58 651.114,505.846 651.573,505.338 652.031,504.467 652.49,502.922 652.949,500.86 653.407,498.468 653.866,496.243 654.324,494.635 654.783,493.338 655.241,491.791 655.7,489.706 656.159,487.259 656.617,484.636 657.076,482.628 657.534,481.161 657.993,480.195 658.451,479.892 658.91,480.276 659.369,480.557 659.827,480.284 660.286,479.761 660.744,478.987 661.203,477.926 661.662,476.41 662.12,475.089 662.579,474.639 663.037,475.278 663.496,476.597 663.954,478.617 664.413,481.055 664.872,483.43 665.33,485.172 665.789,486.22 666.247,487.082 666.706,487.815 667.164,488.128 667.623,488.002 668.082,487.374 668.54,486.622 668.999,485.687 669.457,484.605 669.916,483.85 670.374,483.468 670.833,483.806 671.292,485.1 671.75,487.453 672.209,490.265 672.667,493.389 673.126,496.679 673.584,499.948 674.043,503.27 674.502,506.507 674.96,509.193 675.419,511.399 675.877,513.463 676.336,515.599 676.794,517.902 677.253,520.044 677.712,521.739 678.17,523.053 678.629,523.778 679.087,524.654 679.546,526.114 680.004,527.954 680.463,529.963 680.922,531.769 681.38,533.395 681.839,535.162 682.297,537.284 682.756,539.501 683.214,541.682 683.673,543.623 684.132,545.601 684.59,547.958 685.049,550.857 685.507,554.114 685.966,556.434 686.424,557.417 686.883,557.032 687.342,555.751 687.8,553.483 688.259,550.965 688.717,548.675 689.176,546.736 689.634,545.729 690.093,546.152 690.552,547.98 691.01,550.609 691.469,553.494 691.927,555.855 692.386,557.787 692.844,559.541 693.303,561.021 693.762,562.28 694.22,563.039 694.679,563.394 695.137,563.281 695.596,562.827 696.055,562.17 696.513,561.717 696.972,561.703 697.43,562.465 697.889,563.564 698.347,564.483 698.806,564.935 699.265,565.358 699.723,565.945 700.182,566.526 700.64,566.079 701.099,564.361 701.557,561.711 702.016,558.818 702.475,555.782 702.933,552.532 703.392,549.395 703.85,546.961 704.309,545.154 704.767,543.596 705.226,542.234 705.685,541.138 706.143,540.309 706.602,539.917 707.06,540.152 707.519,541.065 707.977,542.304 708.436,543.3 708.895,544.315 709.353,545.267 709.812,545.878 710.27,546.34 710.729,546.443 711.187,546.382 711.646,545.925 712.105,544.957 712.563,543.195 713.022,540.768 713.48,538.584 713.939,536.96 714.397,535.935 714.856,535.426 715.315,535.056 715.773,534.801 716.232,534.62 716.69,534.283 717.149,533.379 717.607,531.738 718.066,529.129 718.525,526.092 718.983,523.367 719.442,521.768 719.9,521.772 720.359,523.188 720.817,525.667 721.276,528.52 721.735,531.037 722.193,532.828 722.652,533.827 723.11,533.371 723.569,531.737 724.027,529.975 724.486,528.793 724.945,528.851 725.403,529.866 725.862,531.29 726.32,533.01 726.779,534.544 727.237,536.022 727.696,537.344 728.155,538.518 728.613,539.503 729.072,539.854 729.53,539.432 729.989,538.818 730.448,538.563 730.906,539.077 731.365,540.684 731.823,543.156 732.282,546.502 732.74,550.435 733.199,554.592 733.658,557.711 734.116,559.525 734.575,559.956 735.033,559.765 735.492,559.336 735.95,558.745 736.409,558.459 736.868,559.11 737.326,560.499 737.785,562.685 738.243,565.417 738.702,568.291 739.16,571.235 739.619,573.778 740.078,575.986 740.536,577.942 740.995,580.022 741.453,582.6 741.912,585.374 742.37,588.223 742.829,591.446 743.288,594.81 743.746,598.136 744.205,600.922 744.663,602.877 745.122,604.49 745.58,605.942 746.039,607.223 746.498,608.381 746.956,609.738 747.415,611.193 747.873,612.627 748.332,613.8 748.79,615.24 749.249,616.872 749.708,618.969 750.166,621.352 750.625,623.7 751.083,626.206 751.542,629.209 752,632.83 752.459,636.274 752.918,639.079 753.376,641.637 753.835,643.977 754.293,645.796 754.752,647.097 755.21,647.649 755.669,647.651 756.128,647.24 756.586,646.831 757.045,647.077 757.503,648.013 757.962,649.234 758.42,650.883 758.879,652.962 759.338,655.308 759.796,658.193 760.255,661.002 760.713,663.748 761.172,666.218 761.63,667.837 762.089,668.633 762.548,668.942 763.006,669.088 763.465,669.122 763.923,669.178 764.382,669.372 764.841,669.853 765.299,670.908 765.758,672.557 766.216,674.44 766.675,676.169 767.133,677.525 767.592,678.447 768.051,679.005 768.509,679.839 768.968,681.064 769.426,682.917 769.885,684.721 770.343,686.349 770.802,687.384 771.261,688.092 771.719,688.146 772.178,687.457 772.636,686.441 773.095,685.306 773.553,684.356 774.012,683.913 774.471,684.369 774.929,685.454 775.388,686.687 775.846,688.099 776.305,689.725 776.763,691.133 777.222,691.38 777.681,690.271 778.139,688.536 778.598,686.29 779.056,683.803 779.515,681.608 779.973,680.126 780.432,679.59 780.891,680.088 781.349,681.165 781.808,682.453 782.266,683.865 782.725,685.587 783.183,687.244 783.642,688.597 784.101,689.192 784.559,689.312 785.018,688.888 785.476,688.279 785.935,687.381 786.393,686.489 786.852,685.724 787.311,685.015 787.769,684.124 788.228,682.837 788.686,681.436 789.145,680.153 789.603,678.943 790.062,677.222 790.521,674.867 790.979,672.119 791.438,669.561 791.896,667.457 792.355,666.177 792.813,666.074 793.272,666.82 793.731,667.613 794.189,668.005 794.648,667.487 795.106,666.367 795.565,664.505 796.023,661.965 796.482,659.358 796.941,657.285 797.399,655.875 797.858,655.01 798.316,654.426 798.775,654.392 799.234,654.964 799.692,656.369 800.151,658.434 800.609,660.796 801.068,663.116 801.526,664.951 801.985,666.003 802.444,666.175 802.902,665.816 803.361,665.134 803.819,664.185 804.278,662.698 804.736,660.8 805.195,658.75 805.654,657.009 806.112,655.603 806.571,654.618 807.029,653.643 807.488,652.866 807.946,652.293 808.405,652.155 808.864,652.326 809.322,652.914 809.781,653.774 810.239,654.343 810.698,654.45 811.156,653.543 811.615,651.55 812.074,648.838 812.532,645.905 812.991,643.129 813.449,640.59 813.908,637.987 814.366,635.379 814.825,633.273 815.284,631.608 815.742,630.096 816.201,628.329 816.659,626.002 817.118,623.276 817.576,620.412 818.035,617.528 818.494,614.809 818.952,612.554 819.411,611.508 819.869,611.723 820.328,612.817 820.786,613.812 821.245,614.55 821.704,614.833 822.162,614.945 822.621,614.816 823.079,614.384 823.538,614.055 823.996,614.072 824.455,614.709 824.914,615.62 825.372,616.357 825.831,617.036 826.289,617.19 826.748,616.556 827.206,615.158 827.665,613.571 828.124,611.876 828.582,610.493 829.041,609.402 829.499,607.602 829.958,605.053 830.416,601.852 830.875,598.253 831.334,594.601 831.792,591.135 832.251,588.038 832.709,585.814 833.168,584.612 833.627,583.756 834.085,582.98 834.544,582.369 835.002,582.363 835.461,583.19 835.919,584.029 836.378,584.288 836.837,584.034 837.295,583.484 837.754,582.816 838.212,582.136 838.671,581.084 839.129,580.038 839.588,579.263 840.047,579.474 840.505,580.451 840.964,581.999 841.422,583.622 841.881,585.062 842.339,586.465 842.798,587.984 843.257,589.333 843.715,590.559 844.174,591.309 844.632,590.916 845.091,589.924 845.549,588.443 846.008,586.643 846.467,584.528 846.925,582.442 847.384,580.522 847.842,579.029 848.301,577.833 848.759,577.219 849.218,578.048 849.677,580.318 850.135,583.738 850.594,587.606 851.052,591.288 851.511,594.494 851.969,597.443 852.428,600.02 852.887,601.472 853.345,601.701 853.804,600.842 854.262,599.724 854.721,598.772 855.179,598.363 855.638,598.424 856.097,598.709 856.555,598.686 857.014,598.603 857.472,599.007 857.931,599.821 858.389,601.271 858.848,603.467 859.307,606.35 859.765,609.69 860.224,613.15 860.682,616.459 861.141,618.803 861.599,619.362 862.058,618.069 862.517,615.432 862.975,612.08 863.434,609.065 863.892,607.132 864.351,606.244 864.809,606.49 865.268,607.93 865.727,610.138 866.185,612.657 866.644,615.056 867.102,616.324 867.561,616.339 868.02,615.686 868.478,614.631 868.937,613.101 869.395,611.157 869.854,609.11 870.312,606.917 870.771,604.703 871.23,602.977 871.688,602.076 872.147,602.479 872.605,604.135 873.064,606.052 873.522,607.645 873.981,608.349 874.44,608.033 874.898,606.723 875.357,604.592 875.815,601.972 876.274,599.243 876.732,596.542 877.191,594.2 877.65,592.443 878.108,591.336 878.567,591.021 879.025,591.49 879.484,592.74 879.942,593.85 880.401,594.197 880.86,593.223 881.318,591.26 881.777,588.252 882.235,584.932 882.694,581.359 883.152,577.608 883.611,573.62 884.07,569.662 884.528,565.961 884.987,562.504 885.445,559.143 885.904,555.833 886.362,552.576 886.821,549.403 887.28,546.101 887.738,542.454 888.197,538.625 888.655,534.932 889.114,531.164 889.572,527.374 890.031,523.657 890.49,520.657 890.948,518.051 891.407,515.653 891.865,513.429 892.324,511.289 892.782,509.611 893.241,508.488 893.7,507.134 894.158,505.648 894.617,504.147 895.075,502.206 895.534,499.925 895.992,497.466 896.451,494.734 896.91,491.533 897.368,488.02 897.827,484.433 898.285,481.349 898.744,478.596 899.202,476.105 899.661,473.806 900.12,471.747 900.578,469.769 901.037,467.759 901.495,465.73 901.954,463.602 902.413,461.663 902.871,459.847 903.33,458.375 903.788,457.165 904.247,455.892 904.705,454.892 905.164,454.248 905.623,453.453 906.081,452.216 906.54,450.174 906.998,447.84 907.457,445.551 907.915,443.459 908.374,441.695 908.833,439.791 909.291,437.589 909.75,435.364 910.208,433.709 910.667,432.858 911.125,432.814 911.584,433.484 912.043,433.808 912.501,433.254 912.96,432.114 913.418,430.826 913.877,429.912 914.335,429.501 914.794,429.928 915.253,431.249 915.711,433.12 916.17,435.2 916.628,436.769 917.087,437.563 917.545,437.723 918.004,437.083 918.463,435.803 918.921,433.819 919.38,431.341 919.838,429.027 920.297,427.236 920.755,425.998 921.214,425.769 921.673,426.374 922.131,427.252 922.59,428.5 923.048,430.446 923.507,433.264 923.965,436.712 924.424,440.235 924.883,443.454 925.341,446.259 925.8,448.636 926.258,451.159 926.717,453.764 927.175,456.142 927.634,458.369 928.093,460.004 928.551,460.744 929.01,460.526 929.468,460.069 929.927,459.95 930.385,460.321 930.844,461.969 931.303,465.187 931.761,469.68 932.22,474.399 932.678,478.77 933.137,482.692 933.595,486.123 934.054,489.126 934.513,491.707 934.971,494.071 935.43,495.976 935.888,497.629 936.347,499.056 936.806,500.098 937.264,501.119 937.723,502.037 938.181,503.226 938.64,504.426 939.098,505.708 939.557,507.167 940.016,508.989 940.474,511.018 940.933,513.082 941.391,514.756 941.85,516.252 942.308,517.877 942.767,519.334 943.226,520.411 943.684,521.204 944.143,521.841 944.601,522.429 945.06,523.055 945.518,523.525 945.977,524.284 946.436,525.48 946.894,527.006 947.353,529.173 947.811,531.951 948.27,534.937 948.728,537.658 949.187,539.668 949.646,541.285 950.104,542.667 950.563,544.251 951.021,546.264 951.48,548.284 951.938,550.041 952.397,551.33 952.856,552.096 953.314,552.213 953.773,551.93 954.231,551.062 954.69,549.817 955.148,548.474 955.607,547.298 956.066,546.732 956.524,546.733 956.983,547.379 957.441,548.253 957.9,549.707 958.358,551.881 958.817,554.447 959.276,557.469 959.734,560.529 960.193,563.166 960.651,565.179 961.11,566.859 961.568,568.131 962.027,568.836 962.486,568.782 962.944,568.089 963.403,567.123 963.861,566.194 964.32,565.115 964.778,563.803 965.237,563.216 965.696,563.612 966.154,564.812 966.613,566.144 967.071,566.814 967.53,567.111 967.988,567.137 968.447,566.933 968.906,566.581 969.364,566.366 969.823,566.225 970.281,565.701 970.74,564.68 971.199,563.651 971.657,563.428 972.116,563.733 972.574,564.709 973.033,566.19 973.491,567.592 973.95,568.893 974.409,569.916 974.867,570.674 975.326,570.931 975.784,570.426 976.243,569.199 976.701,567.62 977.16,566.275 977.619,565.692 978.077,566.096 978.536,567.192 978.994,568.916 979.453,571.049 979.911,573.354 980.37,575.949 980.829,578.196 981.287,579.928 981.746,581.289 982.204,581.969 982.663,581.563 983.121,580.195 983.58,578.706 984.039,577.464 984.497,576.755 984.956,576.891 985.414,578.154 985.873,580.608 986.331,583.475 986.79,585.935 987.249,587.598 987.707,588.286 988.166,588.369 988.624,588.093 989.083,587.832 989.541,587.286 990,586.306 990.459,585.223 990.917,584.282 991.376,583.88 991.834,584.332 992.293,585.552 992.751,587.149 993.21,588.833 993.669,590.373 994.127,592.16 994.586,594.551 995.044,597.575 995.503,601.221 995.961,605.212 996.42,608.714 996.879,611.368 997.337,613.233 997.796,614.638 998.254,615.524 998.713,615.468 999.171,614.791 999.63,614.054 1000.09,613.869 1000.55,614.627 1001.01,615.89 1001.46,617.422 1001.92,619.419 1002.38,621.746 1002.84,624.909 1003.3,628.766 1003.76,633.082 1004.22,637.321 1004.67,640.785 1005.13,643.367 1005.59,645.058 1006.05,646.141 1006.51,647.136 1006.97,648.421 1007.43,650.302 1007.88,652.863 1008.34,655.737 1008.8,658.606 1009.26,661.096 1009.72,663.316 1010.18,665.466 1010.64,667.105 1011.09,668.289 1011.55,669.032 1012.01,669.616 1012.47,670.243 1012.93,671.324 1013.39,672.869 1013.85,675.083 1014.3,677.961 1014.76,681.541 1015.22,685.596 1015.68,689.505 1016.14,692.655 1016.6,694.868 1017.06,695.746 1017.51,695.618 1017.97,694.884 1018.43,694.044 1018.89,693.93 1019.35,694.478 1019.81,695.649 1020.27,697.561 1020.72,699.585 1021.18,701.593 1021.64,703.539 1022.1,705.622 1022.56,707.682 1023.02,710.286 1023.48,713.426 1023.93,716.831 1024.39,720.347 1024.85,723.895 1025.31,727.043 1025.77,729.105 1026.23,729.866 1026.69,730.203 1027.14,730.671 1027.6,731.548 1028.06,733.113 1028.52,735.143 1028.98,737.361 1029.44,739.221 1029.9,740.882 1030.35,742.284 1030.81,743.391 1031.27,744.906 1031.73,746.634 1032.19,748.262 1032.65,749.653 1033.11,750.269 1033.56,750.258 1034.02,749.918 1034.48,749.38 1034.94,748.723 1035.4,747.908 1035.86,747.241 1036.32,747.105 1036.77,747.877 1037.23,749.458 1037.69,751.542 1038.15,753.709 1038.61,755.371 1039.07,756.523 1039.53,756.659 1039.98,755.906 1040.44,754.633 1040.9,753.395 1041.36,752.136 1041.82,750.759 1042.28,749.246 1042.74,748.023 1043.19,747.201 1043.65,746.459 1044.11,745.692 1044.57,744.455 1045.03,742.805 1045.49,741.057 1045.95,738.864 1046.4,736.217 1046.86,733.365 1047.32,731.047 1047.78,729.212 1048.24,727.634 1048.7,726.06 1049.16,724.875 1049.61,724.21 1050.07,724.332 1050.53,724.897 1050.99,725.233 1051.45,724.995 1051.91,724.458 1052.37,723.481 1052.82,721.893 1053.28,720.014 1053.74,718.11 1054.2,716.61 1054.66,715.327 1055.12,714.447 1055.58,713.843 1056.03,713.4 1056.49,713.053 1056.95,712.954 1057.41,712.934 1057.87,712.582 1058.33,711.531 1058.79,709.868 1059.24,707.368 1059.7,704.348 1060.16,701.386 1060.62,698.171 1061.08,695.409 1061.54,693.455 1062,692.451 1062.45,692.171 1062.91,692.03 1063.37,691.776 1063.83,690.909 1064.29,688.911 1064.75,686.419 1065.21,683.893 1065.66,681.511 1066.12,679.497 1066.58,678.038 1067.04,677.125 1067.5,676.907 1067.96,676.997 1068.42,677.276 1068.87,677.017 1069.33,675.897 1069.79,674.031 1070.25,671.963 1070.71,669.981 1071.17,668.075 1071.63,665.744 1072.08,662.556 1072.54,658.624 1073,654.737 1073.46,651.906 1073.92,650.274 1074.38,649.844 1074.84,650.456 1075.29,651.714 1075.75,653.206 1076.21,654.517 1076.67,655.581 1077.13,656.009 1077.59,655.78 1078.05,655.535 1078.5,655.556 1078.96,655.244 1079.42,654.448 1079.88,652.976 1080.34,650.97 1080.8,648.888 1081.26,646.429 1081.71,643.351 1082.17,639.954 1082.63,636.772 1083.09,633.886 1083.55,631.61 1084.01,629.756 1084.47,627.924 1084.92,626.038 1085.38,623.796 1085.84,621.24 1086.3,618.58 1086.76,616.387 1087.22,614.584 1087.68,612.782 1088.13,610.822 1088.59,608.821 1089.05,606.998 1089.51,605.095 1089.97,603.054 1090.43,600.647 1090.89,598.033 1091.34,595.629 1091.8,593.466 1092.26,591.508 1092.72,589.915 1093.18,588.252 1093.64,586.293 1094.1,583.825 1094.55,581.177 1095.01,578.202 1095.47,574.984 1095.93,571.452 1096.39,567.617 1096.85,563.387 1097.31,558.77 1097.76,554.114 1098.22,550.124 1098.68,546.699 1099.14,544.652 1099.6,543.786 1100.06,544.025 1100.52,544.506 1100.97,544.762 1101.43,544.525 1101.89,543.802 1102.35,542.669 1102.81,541.429 1103.27,539.78 1103.73,537.524 1104.18,535.215 1104.64,532.972 1105.1,530.712 1105.56,528.499 1106.02,526.382 1106.48,524.438 1106.94,522.563 1107.39,521.127 1107.85,519.441 1108.31,517.42 1108.77,515.21 1109.23,512.716 1109.69,510.141 1110.15,507.363 1110.6,504.759 1111.06,502.552 1111.52,500.765 1111.98,499.629 1112.44,498.905 1112.9,497.757 1113.36,496.723 1113.81,495.687 1114.27,494.174 1114.73,492.557 1115.19,491.221 1115.65,490.78 1116.11,490.654 1116.57,490.31 1117.02,489.643 1117.48,488.801 1117.94,488.071 1118.4,487.731 1118.86,488.099 1119.32,489.019 1119.78,490.442 1120.23,492.087 1120.69,493.734 1121.15,495.015 1121.61,495.641 1122.07,495.745 1122.53,495.403 1122.99,494.99 1123.44,494.505 1123.9,494.091 1124.36,494.043 1124.82,494.147 1125.28,494.504 1125.74,494.923 1126.2,495.524 1126.65,495.963 1127.11,496.544 1127.57,496.964 1128.03,497.207 1128.49,496.687 1128.95,495.598 1129.41,494.528 1129.86,493.573 1130.32,492.366 1130.78,490.98 1131.24,489.638 1131.7,488.682 1132.16,488.424 1132.62,488.992 1133.07,490.492 1133.53,492.695 1133.99,494.618 1134.45,496.142 1134.91,497.555 1135.37,498.439 1135.83,499.083 1136.28,500.004 1136.74,501.385 1137.2,502.567 1137.66,503.214 1138.12,503.793 1138.58,504.488 1139.04,505.808 1139.49,507.834 1139.95,510.055 1140.41,511.984 1140.87,513.615 1141.33,514.935 1141.79,516.274 1142.25,517.559 1142.7,518.765 1143.16,520.122 1143.62,520.929 1144.08,520.674 1144.54,518.777 1145,515.259 1145.46,511.132 1145.91,506.729 1146.37,502.645 1146.83,499.447 1147.29,497.308 1147.75,496.192 1148.21,496.013 1148.67,496.709 1149.12,497.779 1149.58,498.861 1150.04,499.651 1150.5,499.488 1150.96,498.053 1151.42,495.803 1151.88,493.14 1152.33,490.194 1152.79,487.373 1153.25,485.107 1153.71,483.617 1154.17,482.566 1154.63,481.753 1155.09,481.406 1155.54,481.398 1156,481.437 1156.46,481.248 1156.92,480.475 1157.38,479.179 1157.84,477.527 1158.3,475.479 1158.75,473.398 1159.21,471.365 1159.67,469.348 1160.13,467.313 1160.59,464.937 1161.05,462.532 1161.51,459.749 1161.97,456.148 1162.42,452.251 1162.88,448.792 1163.34,445.846 1163.8,443.549 1164.26,441.692 1164.72,440.135 1165.18,439.057 1165.63,438.455 1166.09,438.081 1166.55,437.106 1167.01,435.568 1167.47,433.598 1167.93,430.894 1168.39,427.769 1168.84,424.393 1169.3,420.89 1169.76,417.484 1170.22,414.285 1170.68,411.488 1171.14,409.149 1171.6,407.739 1172.05,407.177 1172.51,407.699 1172.97,408.986 1173.43,410.588 1173.89,411.897 1174.35,412.662 1174.81,412.641 1175.26,411.85 1175.72,410.348 1176.18,408.353 1176.64,405.655 1177.1,402.545 1177.56,399.737 1178.02,397.019 1178.47,394.698 1178.93,392.87 1179.39,390.838 1179.85,388.851 1180.31,387.642 1180.77,387.359 1181.23,387.759 1181.68,388.793 1182.14,390.42 1182.6,392.127 1183.06,393.507 1183.52,393.954 1183.98,393.563 1184.44,392.809 1184.89,391.839 1185.35,390.612 1185.81,389.244 1186.27,388.052 1186.73,387.436 1187.19,387.612 1187.65,388.522 1188.1,389.468 1188.56,389.909 1189.02,390.033 1189.48,390.528 1189.94,391.316 1190.4,392.293 1190.86,393.677 1191.31,395.243 1191.77,396.391 1192.23,396.965 1192.69,397.398 1193.15,398.204 1193.61,398.949 1194.07,399.551 1194.52,400.115 1194.98,400.883 1195.44,401.646 1195.9,402.603 1196.36,403.67 1196.82,405.363 1197.28,407.718 1197.73,410.841 1198.19,414.706 1198.65,419.006 1199.11,423.439 1199.57,427.507 1200.03,430.92 1200.49,433.752 1200.94,436.051 1201.4,437.525 1201.86,437.772 1202.32,437.142 1202.78,435.915 1203.24,434.878 1203.7,434.216 1204.15,433.889 1204.61,433.831 1205.07,434.128 1205.53,434.752 1205.99,435.719 1206.45,437.194 1206.91,439.245 1207.36,441.554 1207.82,444.199 1208.28,447.595 1208.74,451.554 1209.2,455.701 1209.66,459.404 1210.12,462.412 1210.57,464.362 1211.03,465.322 1211.49,465.826 1211.95,466.429 1212.41,466.984 1212.87,467.369 1213.33,467.426 1213.78,467.499 1214.24,467.965 1214.7,469.005 1215.16,470.668 1215.62,472.403 1216.08,474.734 1216.54,477.559 1216.99,480.85 1217.45,484.082 1217.91,486.592 1218.37,488.492 1218.83,489.486 1219.29,489.46 1219.75,489.558 1220.2,489.913 1220.66,490.955 1221.12,492.792 1221.58,494.927 1222.04,496.593 1222.5,497.453 1222.96,497.536 1223.41,497.746 1223.87,498.418 1224.33,499.228 1224.79,500.389 1225.25,501.877 1225.71,503.387 1226.17,504.693 1226.62,506.281 1227.08,508.446 1227.54,511.15 1228,514.493 1228.46,517.648 1228.92,520.336 1229.38,522.062 1229.83,523.456 1230.29,525.041 1230.75,526.688 1231.21,528.566 1231.67,531.043 1232.13,534.31 1232.59,537.906 1233.04,541.103 1233.5,543.836 1233.96,546.211 1234.42,548.432 1234.88,550.633 1235.34,552.58 1235.8,554.152 1236.25,555.481 1236.71,557.087 1237.17,559.289 1237.63,562.589 1238.09,566.647 1238.55,571.012 1239.01,574.958 1239.46,578.526 1239.92,582.102 1240.38,586.214 1240.84,590.602 1241.3,594.934 1241.76,598.788 1242.22,601.586 1242.67,603.208 1243.13,603.897 1243.59,604.275 1244.05,605.056 1244.51,606.737 1244.97,609.415 1245.43,612.442 1245.88,615.537 1246.34,618.931 1246.8,622.81 1247.26,626.54 1247.72,629.608 1248.18,631.94 1248.64,633.671 1249.09,635.222 1249.55,636.956 1250.01,638.879 1250.47,641.242 1250.93,643.794 1251.39,646.054 1251.85,647.831 1252.3,649.28 1252.76,650.8 1253.22,653.098 1253.68,655.923 1254.14,658.951 1254.6,661.848 1255.06,664.066 1255.51,665.275 1255.97,665.82 1256.43,666.126 1256.89,666.29 1257.35,666.623 1257.81,667.388 1258.27,668.574 1258.72,669.759 1259.18,670.925 1259.64,671.719 1260.1,672.262 1260.56,672.5 1261.02,673.06 1261.48,674.282 1261.93,675.916 1262.39,677.9 1262.85,680.601 1263.31,684.249 1263.77,688.524 1264.23,692.775 1264.69,696.281 1265.14,698.071 1265.6,698.142 1266.06,696.984 1266.52,695.739 1266.98,694.941 1267.44,694.868 1267.9,695.291 1268.35,696.195 1268.81,697.035 1269.27,697.454 1269.73,697.678 1270.19,697.554 1270.65,697.042 1271.11,696.371 1271.56,695.448 1272.02,694.365 1272.48,693.504 1272.94,693.025 1273.4,693.146 1273.86,694.029 1274.32,695.232 1274.77,696.964 1275.23,698.651 1275.69,699.59 1276.15,700.207 1276.61,700.663 1277.07,701.096 1277.53,701.63 1277.98,701.895 1278.44,702.322 1278.9,703.063 1279.36,704.366 1279.82,706.365 1280.28,708.798 1280.74,711.424 1281.19,713.53 1281.65,715.125 1282.11,715.769 1282.57,715.652 1283.03,715.144 1283.49,714.988 1283.95,715.262 1284.4,715.467 1284.86,715.554 1285.32,715.182 1285.78,714.232 1286.24,713.038 1286.7,711.853 1287.16,710.55 1287.61,709.609 1288.07,709.373 1288.53,709.382 1288.99,709.577 1289.45,710.157 1289.91,711.158 1290.37,712.7 1290.82,714.6 1291.28,716.339 1291.74,717.644 1292.2,718.476 1292.66,719.213 1293.12,719.409 1293.58,719.126 1294.03,718.947 1294.49,719.364 1294.95,720.294 1295.41,721.692 1295.87,723.615 1296.33,726.064 1296.79,728.577 1297.24,730.709 1297.7,731.887 1298.16,732.067 1298.62,731.842 1299.08,731.645 1299.54,732.17 1300,733.486 1300.45,735.646 1300.91,738.091 1301.37,740.031 1301.83,741.3 1302.29,741.294 1302.75,740.171 1303.21,738.29 1303.66,736.655 1304.12,735.558 1304.58,734.887 1305.04,734.748 1305.5,735.535 1305.96,737.191 1306.42,739.527 1306.87,741.997 1307.33,744.497 1307.79,747.14 1308.25,749.828 1308.71,752.518 1309.17,755.287 1309.63,758.03 1310.08,760.472 1310.54,762.295 1311,763.302 1311.46,763.562 1311.92,763.276 1312.38,762.866 1312.84,762.573 1313.29,763.081 1313.75,764.424 1314.21,766.689 1314.67,769.48 1315.13,771.926 1315.59,773.716 1316.05,774.695 1316.5,775.032 1316.96,775.079 1317.42,775.258 1317.88,775.252 1318.34,774.683 1318.8,773.117 1319.26,770.506 1319.71,767.51 1320.17,764.025 1320.63,760.073 1321.09,756.447 1321.55,753.594 1322.01,751.516 1322.47,750.624 1322.92,751.274 1323.38,752.965 1323.84,754.937 1324.3,756.581 1324.76,757.618 1325.22,757.615 1325.68,756.888 1326.13,755.479 1326.59,754.433 1327.05,754.176 1327.51,754.421 1327.97,754.901 1328.43,754.965 1328.89,754.616 1329.34,754.17 1329.8,754.173 1330.26,754.512 1330.72,755.12 1331.18,755.366 1331.64,754.695 1332.1,752.637 1332.55,749.645 1333.01,746.202 1333.47,742.359 1333.93,738.408 1334.39,735.286 1334.85,733.328 1335.31,732.351 1335.76,732.111 1336.22,732.028 1336.68,732.11 1337.14,732.338 1337.6,732.516 1338.06,731.908 1338.52,730.099 1338.97,727.317 1339.43,723.76 1339.89,719.82 1340.35,715.642 1340.81,711.58 1341.27,708.178 1341.73,705.6 1342.18,703.812 1342.64,702.713 1343.1,701.679 1343.56,700.545 1344.02,699.583 1344.48,698.491 1344.94,696.906 1345.39,694.792 1345.85,692.308 1346.31,689.61 1346.77,686.451 1347.23,682.972 1347.69,679.51 1348.15,676.449 1348.6,673.553 1349.06,670.577 1349.52,667.806 1349.98,665.255 1350.44,662.801 1350.9,660.014 1351.36,656.935 1351.81,653.757 1352.27,650.474 1352.73,647.024 1353.19,643.418 1353.65,639.856 1354.11,636.206 1354.57,632.695 1355.02,629.686 1355.48,627.294 1355.94,625.771 1356.4,624.896 1356.86,624.204 1357.32,623.711 1357.78,623.201 1358.23,622.219 1358.69,620.58 1359.15,618.147 1359.61,614.909 1360.07,610.829 1360.53,606.394 1360.99,602.255 1361.44,598.72 1361.9,595.731 1362.36,593.405 1362.82,591.433 1363.28,589.775 1363.74,588.462 1364.2,587.179 1364.65,585.172 1365.11,582.653 1365.57,579.91 1366.03,577.053 1366.49,574.124 1366.95,571.788 1367.41,570.549 1367.86,569.738 1368.32,569.342 1368.78,569.02 1369.24,568.779 1369.7,568.885 1370.16,568.756 1370.62,567.833 1371.07,566.132 1371.53,564.088 1371.99,561.874 1372.45,559.72 1372.91,557.912 1373.37,556.977 1373.83,557.071 1374.28,558.49 1374.74,560.887 1375.2,563.249 1375.66,564.929 1376.12,565.158 1376.58,564.218 1377.04,562.334 1377.49,559.934 1377.95,557.299 1378.41,554.381 1378.87,551.223 1379.33,548.41 1379.79,546.169 1380.25,544.72 1380.7,544.275 1381.16,543.961 1381.62,543.186 1382.08,541.785 1382.54,539.918 1383,537.62 1383.46,535.308 1383.91,533.085 1384.37,531.146 1384.83,530.246 1385.29,530.754 1385.75,532.279 1386.21,534.361 1386.67,536.198 1387.12,537.634 1387.58,538.027 1388.04,537.592 1388.5,536.469 1388.96,535.022 1389.42,532.936 1389.88,530.344 1390.33,527.27 1390.79,524.021 1391.25,521.122 1391.71,518.4 1392.17,515.846 1392.63,513.864 1393.09,512.142 1393.54,510.939 1394,510.509 1394.46,510.454 1394.92,510.604 1395.38,510.651 1395.84,510.755 1396.3,511.241 1396.75,512.132 1397.21,512.756 1397.67,512.544 1398.13,511.508 1398.59,509.666 1399.05,506.977 1399.51,503.827 1399.96,500.582 1400.42,497.773 1400.88,495.497 1401.34,493.413 1401.8,491.456 1402.26,489.838 1402.72,488.283 1403.17,486.847 1403.63,485.727 1404.09,484.617 1404.55,483.567 1405.01,482.74 1405.47,481.839 1405.93,481.07 1406.38,480.19 1406.84,479.473 1407.3,478.966 1407.76,478.268 1408.22,477.146 1408.68,475.325 1409.14,473.066 1409.59,470.385 1410.05,467.72 1410.51,465.216 1410.97,463.213 1411.43,462.157 1411.89,462.133 1412.35,462.738 1412.8,463.719 1413.26,465.088 1413.72,466.631 1414.18,467.715 1414.64,467.949 1415.1,467.366 1415.56,466.075 1416.01,464.09 1416.47,461.381 1416.93,457.996 1417.39,454.296 1417.85,450.865 1418.31,448.168 1418.77,446.722 1419.22,446.439 1419.68,447.165 1420.14,448.707 1420.6,450.839 1421.06,452.855 1421.52,454.049 1421.98,454.757 1422.43,454.689 1422.89,453.784 1423.35,452.61 1423.81,451.263 1424.27,449.414 1424.73,447.329 1425.19,445.092 1425.64,443.228 1426.1,442.194 1426.56,442.11 1427.02,442.98 1427.48,444.357 1427.94,445.962 1428.4,447.951 1428.85,449.888 1429.31,451.562 1429.77,453.147 1430.23,454.57 1430.69,455.206 1431.15,455.108 1431.61,454.706 1432.06,454.407 1432.52,454.303 1432.98,454.38 1433.44,454.05 1433.9,453.987 1434.36,454.086 1434.82,453.755 1435.27,453.1 1435.73,452.322 1436.19,451.222 1436.65,449.771 1437.11,448.814 1437.57,448.556 1438.03,448.624 1438.48,449.259 1438.94,449.985 1439.4,450.636 1439.86,450.948 1440.32,451.246 1440.78,451.849 1441.24,452.776 1441.69,454.113 1442.15,455.873 1442.61,457.68 1443.07,458.992 1443.53,459.478 1443.99,458.828 1444.45,457.255 1444.9,455.078 1445.36,452.466 1445.82,449.774 1446.28,447.695 1446.74,446.43 1447.2,445.319 1447.66,444.004 1448.11,442.391 1448.57,441.077 1449.03,440.554 1449.49,440.408 1449.95,439.957 1450.41,438.882 1450.87,437.295 1451.32,435.227 1451.78,433.336 1452.24,432.103 1452.7,431.301 1453.16,430.462 1453.62,429.632 1454.08,429.424 1454.53,429.912 1454.99,430.674 1455.45,431.536 1455.91,432.097 1456.37,432.316 1456.83,432.281 1457.29,431.634 1457.74,430.799 1458.2,429.177 1458.66,426.852 1459.12,424.477 1459.58,422.525 1460.04,420.744 1460.5,419.325 1460.95,418.721 1461.41,418.704 1461.87,419.323 1462.33,420.7 1462.79,422.396 1463.25,424.223 1463.71,425.595 1464.16,426.245 1464.62,426.047 1465.08,424.952 1465.54,423.416 1466,421.735 1466.46,420.223 1466.92,418.897 1467.37,417.833 1467.83,417.11 1468.29,416.933 1468.75,417.383 1469.21,418.13 1469.67,419.059 1470.13,420.142 1470.58,421.763 1471.04,423.726 1471.5,425.646 1471.96,427.813 1472.42,429.618 1472.88,430.736 1473.34,430.98 1473.79,431.186 1474.25,432.15 1474.71,434.107 1475.17,436.822 1475.63,439.395 1476.09,441.485 1476.55,443.33 1477,445.48 1477.46,448.396 1477.92,452.112 1478.38,456.209 1478.84,459.948 1479.3,462.804 1479.76,464.54 1480.21,465.497 1480.67,466.114 1481.13,466.764 1481.59,467.809 1482.05,469.32 1482.51,471.109 1482.97,472.935 1483.42,474.823 1483.88,476.785 1484.34,479.165 1484.8,481.698 1485.26,484.361 1485.72,486.839 1486.18,489.227 1486.63,491.997 1487.09,495.173 1487.55,498.703 1488.01,502.478 1488.47,506.585 1488.93,511.313 1489.39,516.19 1489.84,521.069 1490.3,525.579 1490.76,529.385 1491.22,532.949 1491.68,536.409 1492.14,539.473 1492.6,542.698 1493.05,546.051 1493.51,549.338 1493.97,552.324 1494.43,555.173 1494.89,558.014 1495.35,560.712 1495.81,563.349 1496.26,565.581 1496.72,567.296 1497.18,568.451 1497.64,569.331 1498.1,570.281 1498.56,571.387 1499.02,572.89 1499.47,574.752 1499.93,576.589 1500.39,577.803 1500.85,578.728 1501.31,580.25 1501.77,582.251 1502.23,584.398 1502.68,586.188 1503.14,587.505 1503.6,588.971 1504.06,590.337 1504.52,591.227 1504.98,592.032 1505.44,593.07 1505.9,594.789 1506.35,597.381 1506.81,600.47 1507.27,603.593 1507.73,606.606 1508.19,609.083 1508.65,611.339 1509.11,613.54 1509.56,615.522 1510.02,617.492 1510.48,619.406 1510.94,621.015 1511.4,622.225 1511.86,623.298 1512.32,624.235 1512.77,624.844 1513.23,625.359 1513.69,625.454 1514.15,624.974 1514.61,623.959 1515.07,622.668 1515.53,621.773 1515.98,621.677 1516.44,622.939 1516.9,625.278 1517.36,628.254 1517.82,631.127 1518.28,633.38 1518.74,634.814 1519.19,635.698 1519.65,636.748 1520.11,637.826 1520.57,638.935 1521.03,639.862 1521.49,640.703 1521.95,641.253 1522.4,641.752 1522.86,642.55 1523.32,643.521 1523.78,644.497 1524.24,645.025 1524.7,644.744 1525.16,643.591 1525.61,641.987 1526.07,640.246 1526.53,639.017 1526.99,638.755 1527.45,639.265 1527.91,640.049 1528.37,640.896 1528.82,641.639 1529.28,642.282 1529.74,642.823 1530.2,643.29 1530.66,644.112 1531.12,645.381 1531.58,647.499 1532.03,650.451 1532.49,654.165 1532.95,658.374 1533.41,662.723 1533.87,666.52 1534.33,669.331 1534.79,671.296 1535.24,672.479 1535.7,673.027 1536.16,672.551 1536.62,671.617 1537.08,670.485 1537.54,669.753 1538,669.908 1538.45,671.149 1538.91,673.224 1539.37,675.865 1539.83,678.609 1540.29,681.476 1540.75,684.553 1541.21,687.633 1541.66,690.739 1542.12,693.5 1542.58,695.59 1543.04,696.815 1543.5,697.093 1543.96,696.616 1544.42,696.06 1544.87,696.185 1545.33,697.012 1545.79,698.513 1546.25,700.556 1546.71,703.326 1547.17,706.532 1547.63,709.832 1548.08,713.118 1548.54,716.012 1549,718.492 1549.46,720.505 1549.92,722.523 1550.38,724.194 1550.84,725.457 1551.29,726.456 1551.75,727.286 1552.21,727.575 1552.67,727.268 1553.13,726.283 1553.59,724.778 1554.05,723.127 1554.5,721.653 1554.96,721.339 1555.42,721.954 1555.88,723.352 1556.34,725.469 1556.8,728.245 1557.26,731.733 1557.71,735.46 1558.17,738.857 1558.63,741.537 1559.09,743.506 1559.55,744.969 1560.01,746.528 1560.47,748.472 1560.92,750.266 1561.38,751.504 1561.84,751.974 1562.3,752.024 1562.76,751.818 1563.22,751.145 1563.68,750.56 1564.13,750.434 1564.59,750.386 1565.05,750.213 1565.51,750.17 1565.97,749.732 1566.43,748.692 1566.89,747.093 1567.34,745.372 1567.8,744.174 1568.26,743.459 1568.72,742.921 1569.18,742.757 1569.64,742.241 1570.1,740.91 1570.55,739.224 1571.01,738.027 1571.47,738.127 1571.93,739.259 1572.39,741.045 1572.85,743.13 1573.31,745.185 1573.76,746.446 1574.22,746.647 1574.68,746.451 1575.14,746.573 1575.6,747.22 1576.06,747.895 1576.52,748.195 1576.97,748.191 1577.43,748.11 1577.89,747.892 1578.35,747.137 1578.81,745.998 1579.27,744.31 1579.73,741.764 1580.18,739.074 1580.64,736.921 1581.1,735.685 1581.56,735.2 1582.02,735.71 1582.48,736.865 1582.94,738.17 1583.39,739.265 1583.85,739.831 1584.31,739.922 1584.77,739.888 1585.23,739.907 1585.69,740.396 1586.15,741.637 1586.6,743.161 1587.06,744.941 1587.52,746.957 1587.98,749.211 1588.44,751.573 1588.9,753.653 1589.36,754.774 1589.81,754.59 1590.27,753.006 1590.73,750.439 1591.19,747.902 1591.65,745.709 1592.11,743.925 1592.57,742.849 1593.02,742.514 1593.48,742.599 1593.94,742.927 1594.4,743.343 1594.86,743.839 1595.32,744.098 1595.78,744.451 1596.23,745.006 1596.69,745.934 1597.15,747.403 1597.61,749.142 1598.07,751.056 1598.53,752.35 1598.99,752.702 1599.44,752.357 1599.9,751.702 1600.36,750.364 1600.82,748.079 1601.28,744.859 1601.74,741.392 1602.2,738.23 1602.65,735.899 1603.11,734.88 1603.57,735.514 1604.03,737.369 1604.49,739.628 1604.95,741.43 1605.41,742.289 1605.86,742.002 1606.32,740.431 1606.78,738.148 1607.24,735.486 1607.7,732.903 1608.16,730.705 1608.62,729.249 1609.07,728.395 1609.53,728.059 1609.99,727.884 1610.45,727.681 1610.91,726.597 1611.37,724.914 1611.83,722.929 1612.28,721.127 1612.74,719.859 1613.2,719.206 1613.66,719.498 1614.12,720.505 1614.58,721.838 1615.04,722.943 1615.49,723.289 1615.95,722.722 1616.41,721.093 1616.87,718.476 1617.33,715.099 1617.79,710.78 1618.25,705.755 1618.7,700.423 1619.16,694.951 1619.62,690.142 1620.08,686.129 1620.54,682.902 1621,680.267 1621.46,677.862 1621.91,675.709 1622.37,673.246 1622.83,670.576 1623.29,667.642 1623.75,664.181 1624.21,659.679 1624.67,654.381 1625.12,648.91 1625.58,643.72 1626.04,638.964 1626.5,634.74 1626.96,631.187 1627.42,628.351 1627.88,625.605 1628.33,622.606 1628.79,619.471 1629.25,615.998 1629.71,611.914 1630.17,606.966 1630.63,601.535 1631.09,596.579 1631.54,592.633 1632,589.84 1632.46,588.067 1632.92,586.87 1633.38,585.756 1633.84,584.568 1634.3,582.875 1634.75,579.971 1635.21,575.798 1635.67,570.378 1636.13,564.107 1636.59,557.174 1637.05,549.771 1637.51,542.264 1637.96,534.583 1638.42,527.161 1638.88,520.763 1639.34,515.185 1639.8,510.176 1640.26,505.371 1640.72,500.607 1641.17,495.989 1641.63,491.651 1642.09,487.82 1642.55,484.662 1643.01,481.972 1643.47,479.49 1643.93,476.799 1644.38,473.901 1644.84,471.007 1645.3,468.284 1645.76,465.908 1646.22,463.616 1646.68,461.393 1647.14,459.103 1647.59,457.025 1648.05,455.158 1648.51,453.167 1648.97,450.493 1649.43,447.312 1649.89,444.28 1650.35,441.853 1650.8,439.666 1651.26,437.877 1651.72,436.695 1652.18,436.144 1652.64,435.75 1653.1,435.108 1653.56,434.621 1654.01,434.856 1654.47,435.505 1654.93,436.031 1655.39,435.907 1655.85,435.083 1656.31,434.074 1656.77,433.537 1657.22,433.6 1657.68,434.156 1658.14,434.995 1658.6,435.951 1659.06,436.826 1659.52,437.236 1659.98,436.879 1660.43,435.909 1660.89,434.415 1661.35,432.494 1661.81,430.355 1662.27,428.503 1662.73,426.766 1663.19,425.358 1663.64,424.414 1664.1,423.786 1664.56,423.351 1665.02,423.771 1665.48,424.879 1665.94,426.293 1666.4,427.82 1666.85,429.11 1667.31,430.157 1667.77,431.075 1668.23,432.236 1668.69,433.634 1669.15,435.166 1669.61,436.516 1670.06,437.714 1670.52,438.778 1670.98,439.982 1671.44,441.344 1671.9,442.432 1672.36,442.995 1672.82,443.048 1673.27,443.267 1673.73,443.383 1674.19,443.741 1674.65,444.234 1675.11,444.769 1675.57,444.896 1676.03,444.925 1676.48,444.66 1676.94,443.788 1677.4,442.215 1677.86,440.381 1678.32,438.595 1678.78,437.091 1679.24,435.713 1679.69,434.813 1680.15,434.219 1680.61,433.812 1681.07,433.444 1681.53,433.348 1681.99,433.846 1682.45,434.406 1682.9,434.525 1683.36,433.829 1683.82,432.3 1684.28,430.099 1684.74,428.079 1685.2,426.853 1685.66,426.6 1686.11,426.765 1686.57,427.036 1687.03,427.717 1687.49,428.415 1687.95,428.83 1688.41,429.231 1688.87,429.529 1689.32,429.617 1689.78,429.453 1690.24,429.68 1690.7,430.186 1691.16,430.565 1691.62,430.566 1692.08,430.492 1692.53,429.975 1692.99,428.766 1693.45,426.579 1693.91,423.731 1694.37,420.308 1694.83,416.987 1695.29,413.639 1695.74,410.347 1696.2,407.318 1696.66,404.647 1697.12,402.434 1697.58,400.504 1698.04,398.183 1698.5,395.136 1698.95,391.526 1699.41,387.632 1699.87,384.101 1700.33,381.282 1700.79,379.406 1701.25,378.042 1701.71,376.51 1702.16,374.605 1702.62,373.038 1703.08,371.798 1703.54,370.786 1704,369.75 1704.46,368.613 1704.92,367.627 1705.37,367.201 1705.83,366.698 1706.29,366.168 1706.75,365.5 1707.21,364.921 1707.67,364.099 1708.13,362.459 1708.58,359.71 1709.04,356.44 1709.5,353.468 1709.96,351.128 1710.42,349.353 1710.88,348.421 1711.34,348.085 1711.79,348.172 1712.25,348.583 1712.71,349.058 1713.17,349.177 1713.63,349.027 1714.09,348.603 1714.55,348.35 1715,348.389 1715.46,348.379 1715.92,348.424 1716.38,348.813 1716.84,349.569 1717.3,350.285 1717.76,350.613 1718.21,350.587 1718.67,350.632 1719.13,350.729 1719.59,351.432 1720.05,352.124 1720.51,352.269 1720.97,352.416 1721.42,352.696 1721.88,353.107 1722.34,353.521 1722.8,354.018 1723.26,354.574 1723.72,355.02 1724.18,355.508 1724.63,356.101 1725.09,356.404 1725.55,356.716 1726.01,357.067 1726.47,357.36 1726.93,357.597 1727.39,357.917 1727.84,358.872 1728.3,360.649 1728.76,363.387 1729.22,366.824 1729.68,371.085 1730.14,375.849 1730.6,380.711 1731.05,385.92 1731.51,390.736 1731.97,395.227 1732.43,399.013 1732.89,401.88 1733.35,403.788 1733.81,404.733 1734.26,405.168 1734.72,405.78 1735.18,406.73 1735.64,408.011 1736.1,410.025 1736.56,412.908 1737.02,416.67 1737.47,420.965 1737.93,425.051 1738.39,428.704 1738.85,431.755 1739.31,434.386 1739.77,436.932 1740.23,439.81 1740.68,443.064 1741.14,446.84 1741.6,450.93 1742.06,455.671 1742.52,460.871 1742.98,466.245 1743.44,471.002 1743.89,474.392 1744.35,476.564 1744.81,478.15 1745.27,480.167 1745.73,482.98 1746.19,486.339 1746.65,489.845 1747.1,493.624 1747.56,498.149 1748.02,503.159 1748.48,508.52 1748.94,514.191 1749.4,520.294 1749.86,526.542 1750.31,532.577 1750.77,538.099 1751.23,543.257 1751.69,547.987 1752.15,552.583 1752.61,557.127 1753.07,561.669 1753.52,565.66 1753.98,568.794 1754.44,571.286 1754.9,573.184 1755.36,574.644 1755.82,576.001 1756.28,577.562 1756.73,579.207 1757.19,581.224 1757.65,583.697 1758.11,586.792 1758.57,590.818 1759.03,595.753 1759.49,601.519 1759.94,607.361 1760.4,612.681 1760.86,617.093 1761.32,620.514 1761.78,623.327 1762.24,625.852 1762.7,629.012 1763.15,632.827 1763.61,637.008 1764.07,640.938 1764.53,644.83 1764.99,648.75 1765.45,652.523 1765.91,655.772 1766.36,658.475 1766.82,660.662 1767.28,662.256 1767.74,663.247 1768.2,664 1768.66,665 1769.12,666.876 1769.57,669.678 1770.03,673.203 1770.49,677.205 1770.95,681.712 1771.41,686.344 1771.87,690.975 1772.33,695.39 1772.78,699.429 1773.24,702.846 1773.7,705.629 1774.16,707.732 1774.62,709.087 1775.08,710.252 1775.54,711.591 1775.99,713.383 1776.45,715.229 1776.91,717.167 1777.37,719.06 1777.83,720.863 1778.29,722.401 1778.75,723.532 1779.2,724.427 1779.66,725.448 1780.12,726.965 1780.58,728.501 1781.04,730.649 1781.5,733.227 1781.96,736.059 1782.41,738.794 1782.87,741.654 1783.33,744.375 1783.79,746.683 1784.25,747.796 1784.71,747.455 1785.17,746.195 1785.62,745.074 1786.08,744.985 1786.54,746.044 1787,748.134 1787.46,750.838 1787.92,753.661 1788.38,756.08 1788.83,758.176 1789.29,760.212 1789.75,762.024 1790.21,763.998 1790.67,766.671 1791.13,769.58 1791.59,772.302 1792.04,774.769 1792.5,776.8 1792.96,778.304 1793.42,778.949 1793.88,778.764 1794.34,778.253 1794.8,777.691 1795.25,777.353 1795.71,777.066 1796.17,777.131 1796.63,777.083 1797.09,776.968 1797.55,777.271 1798.01,777.776 1798.46,778.361 1798.92,779.505 1799.38,781.136 1799.84,782.94 1800.3,784.902 1800.76,786.876 1801.22,788.422 1801.67,789.219 1802.13,789.226 1802.59,789.195 1803.05,789.299 1803.51,789.622 1803.97,789.681 1804.43,789.666 1804.88,789.718 1805.34,789.871 1805.8,789.879 1806.26,789.818 1806.72,789.437 1807.18,788.846 1807.64,788.075 1808.09,786.779 1808.55,785.056 1809.01,783.095 1809.47,781.568 1809.93,780.939 1810.39,780.987 1810.85,781.516 1811.3,782.341 1811.76,783.371 1812.22,784.134 1812.68,784.736 1813.14,784.638 1813.6,783.686 1814.06,782.228 1814.51,780.636 1814.97,778.975 1815.43,777.451 1815.89,776.417 1816.35,775.968 1816.81,776.167 1817.27,776.597 1817.72,777.14 1818.18,777.453 1818.64,777.12 1819.1,776.272 1819.56,774.634 1820.02,772.733 1820.48,770.987 1820.93,769.31 1821.39,767.854 1821.85,766.846 1822.31,765.874 1822.77,765.066 1823.23,764.128 1823.69,763.003 1824.14,761.664 1824.6,759.785 1825.06,758.042 1825.52,756.972 1825.98,756.278 1826.44,755.948 1826.9,755.829 1827.35,755.742 1827.81,755.998 1828.27,756.802 1828.73,757.688 1829.19,758.261 1829.65,758.168 1830.11,757.767 1830.56,757.769 1831.02,758.09 1831.48,759.149 1831.94,760.674 1832.4,762.389 1832.86,764.344 1833.32,766.346 1833.77,768.377 1834.23,770.108 1834.69,771.776 1835.15,773.488 1835.61,774.455 1836.07,774.459 1836.53,773.199 1836.98,771.006 1837.44,768.729 1837.9,766.98 1838.36,766.115 1838.82,766.669 1839.28,768.578 1839.74,771.942 1840.19,776.198 1840.65,780.643 1841.11,784.423 1841.57,787.056 1842.03,788.871 1842.49,790.013 1842.95,790.709 1843.4,790.965 1843.86,791.028 1844.32,791.134 1844.78,791.929 1845.24,794.143 1845.7,797.393 1846.16,801.25 1846.61,805.456 1847.07,809.858 1847.53,814.227 1847.99,818.301 1848.45,821.892 1848.91,824.976 1849.37,827.283 1849.83,829.33 1850.28,831.141 1850.74,832.567 1851.2,833.482 1851.66,833.603 1852.12,832.993 1852.58,831.741 1853.04,830.396 1853.49,829.749 1853.95,830.398 1854.41,832.152 1854.87,835.311 1855.33,839.42 1855.79,843.618 1856.25,847.295 1856.7,850.205 1857.16,852.152 1857.62,853.021 1858.08,852.988 1858.54,852.245 1859,851.048 1859.46,849.968 1859.91,849.073 1860.37,848.436 1860.83,847.832 1861.29,847.271 1861.75,846.328 1862.21,844.49 1862.67,841.662 1863.12,838.161 1863.58,833.952 1864.04,829.939 1864.5,826.786 1864.96,824.098 1865.42,821.294 1865.88,817.916 1866.33,814.518 1866.79,811.346 1867.25,808.666 1867.71,806.579 1868.17,804.616 1868.63,802.826 1869.09,801.128 1869.54,799.347 1870,797.123 1870.46,794.735 1870.92,792.099 1871.38,788.992 1871.84,785.523 1872.3,781.634 1872.75,777.665 1873.21,774.16 1873.67,771.016 1874.13,767.757 1874.59,764.133 1875.05,759.741 1875.51,754.592 1875.96,748.838 1876.42,742.485 1876.88,735.422 1877.34,727.542 1877.8,719.071 1878.26,710.521 1878.72,702.576 1879.17,695.136 1879.63,688.08 1880.09,681.09 1880.55,673.841 1881.01,666.158 1881.47,658.529 1881.93,651.556 1882.38,645.262 1882.84,639.276 1883.3,633.377 1883.76,627.402 1884.22,621.512 1884.68,615.546 1885.14,609.57 1885.59,603.414 1886.05,597.172 1886.51,590.866 1886.97,584.325 1887.43,578.165 1887.89,572.58 1888.35,567.064 1888.8,561.2 1889.26,554.589 1889.72,547.298 1890.18,539.738 1890.64,531.745 1891.1,524.091 1891.56,517.09 1892.01,510.774 1892.47,505.272 1892.93,500.633 1893.39,496.702 1893.85,492.959 1894.31,489.544 1894.77,485.728 1895.22,481.502 1895.68,476.841 1896.14,472.065 1896.6,467.547 1897.06,463.47 1897.52,459.512 1897.98,455.714 1898.43,451.329 1898.89,446.173 1899.35,440.184 1899.81,433.618 1900.27,426.924 1900.73,420.411 1901.19,414.596 1901.64,409.365 1902.1,404.545 1902.56,400.258 1903.02,396.49 1903.48,393.165 1903.94,390.269 1904.4,387.486 1904.85,384.97 1905.31,383.337 1905.77,382.729 1906.23,382.655 1906.69,382.359 1907.15,381.485 1907.61,379.869 1908.06,377.386 1908.52,374.102 1908.98,370.342 1909.44,366.424 1909.9,362.237 1910.36,358.086 1910.82,354.011 1911.27,349.868 1911.73,345.671 1912.19,341.406 1912.65,336.929 1913.11,332.538 1913.57,328.735 1914.03,325.472 1914.48,323.428 1914.94,323.01 1915.4,323.918 1915.86,325.523 1916.32,327.394 1916.78,329.517 1917.24,331.707 1917.69,333.836 1918.15,335.98 1918.61,338.379 1919.07,340.669 1919.53,342.063 1919.99,342.421 1920.45,341.929 1920.9,340.967 1921.36,340.128 1921.82,339.424 1922.28,338.486 1922.74,337.706 1923.2,336.971 1923.66,336.592 1924.11,336.214 1924.57,335.353 1925.03,334.11 1925.49,332.297 1925.95,330.452 1926.41,328.451 1926.87,326.681 1927.32,325.399 1927.78,324.496 1928.24,323.376 1928.7,321.992 1929.16,320.785 1929.62,320.217 1930.08,320.353 1930.53,320.968 1930.99,322.07 1931.45,323.509 1931.91,325.128 1932.37,327.395 1932.83,329.732 1933.29,331.519 1933.74,332.195 1934.2,331.769 1934.66,330.341 1935.12,328.455 1935.58,326.679 1936.04,325.34 1936.5,324.299 1936.95,323.467 1937.41,323.033 1937.87,323.098 1938.33,323.7 1938.79,324.959 1939.25,326.625 1939.71,328.474 1940.16,330.114 1940.62,331.424 1941.08,331.962 1941.54,331.913 1942,331.46 1942.46,330.973 1942.92,330.723 1943.37,330.962 1943.83,331.317 1944.29,331.17 1944.75,330.198 1945.21,328.678 1945.67,327.028 1946.13,325.691 1946.58,324.903 1947.04,325.065 1947.5,326.056 1947.96,327.729 1948.42,330.062 1948.88,333.106 1949.34,336.17 1949.79,338.224 1950.25,338.72 1950.71,337.758 1951.17,336.003 1951.63,334.276 1952.09,333.35 1952.55,333.28 1953,333.942 1953.46,334.909 1953.92,336.28 1954.38,337.701 1954.84,338.896 1955.3,339.88 1955.76,340.931 1956.21,341.569 1956.67,341.62 1957.13,341.133 1957.59,340.422 1958.05,339.824 1958.51,339.573 1958.97,339.487 1959.42,339.919 1959.88,340.421 1960.34,341.145 1960.8,341.634 1961.26,341.569 1961.72,340.818 1962.18,339.474 1962.63,337.452 1963.09,335.019 1963.55,332.649 1964.01,330.883 1964.47,330.283 1964.93,331.14 1965.39,332.905 1965.84,335.264 1966.3,338.016 1966.76,340.699 1967.22,343.51 1967.68,346.011 1968.14,347.774 1968.6,348.451 1969.05,348.369 1969.51,347.508 1969.97,345.989 1970.43,344.808 1970.89,343.889 1971.35,343.666 1971.81,343.506 1972.26,343.337 1972.72,343.444 1973.18,344.097 1973.64,345.044 1974.1,346.186 1974.56,347.204 1975.02,347.743 1975.47,348.118 1975.93,348.408 1976.39,348.763 1976.85,349.282 1977.31,349.745 1977.77,350.166 1978.23,350.148 1978.68,349.932 1979.14,349.854 1979.6,349.664 1980.06,349.342 1980.52,348.925 1980.98,348.785 1981.44,349.299 1981.89,350.661 1982.35,352.722 1982.81,355.169 1983.27,357.438 1983.73,358.877 1984.19,359.208 1984.65,358.923 1985.1,358.304 1985.56,357.757 1986.02,357.3 1986.48,357.234 1986.94,357.374 1987.4,357.772 1987.86,358.235 1988.31,358.9 1988.77,359.795 1989.23,360.883 1989.69,361.87 1990.15,362.717 1990.61,363.636 1991.07,364.867 1991.52,366.73 1991.98,368.952 1992.44,371.498 1992.9,374.085 1993.36,376.37 1993.82,378.49 1994.28,380.206 1994.73,381.246 1995.19,381.376 1995.65,380.397 1996.11,378.709 1996.57,377.206 1997.03,376.17 1997.49,375.948 1997.94,376.52 1998.4,377.65 1998.86,379.375 1999.32,381.575 1999.78,384.041 2000.24,386.55 2000.7,388.749 2001.15,390.519 2001.61,391.925 2002.07,393.462 2002.53,394.89 2002.99,395.4 2003.45,395.502 2003.91,395.895 2004.36,396.902 2004.82,398.416 2005.28,400.284 2005.74,402.59 2006.2,405.583 2006.66,408.885 2007.12,412.185 2007.57,415.372 2008.03,418.54 2008.49,421.54 2008.95,424.304 2009.41,427.166 2009.87,430.054 2010.33,433.004 2010.78,435.552 2011.24,437.277 2011.7,438.591 2012.16,440.057 2012.62,441.799 2013.08,444.152 2013.54,447.142 2013.99,450.724 2014.45,454.811 2014.91,459.162 2015.37,463.814 2015.83,468.575 2016.29,473.516 2016.75,478.497 2017.2,483.491 2017.66,488.818 2018.12,494.653 2018.58,500.881 2019.04,507.203 2019.5,513.326 2019.96,519.035 2020.41,524.904 2020.87,531.259 2021.33,537.959 2021.79,544.084 2022.25,549.383 2022.71,554.5 2023.17,559.341 2023.62,563.827 2024.08,568.178 2024.54,571.951 2025,575.821 2025.46,580.674 2025.92,586.956 2026.38,594.274 2026.83,601.872 2027.29,609.592 2027.75,617.091 2028.21,624.236 2028.67,631.128 2029.13,638.219 2029.59,645.731 2030.04,653.84 2030.5,662.26 2030.96,670.339 2031.42,677.937 2031.88,684.545 2032.34,690.533 2032.8,695.98 2033.25,700.893 2033.71,705.409 2034.17,710.058 2034.63,715.002 2035.09,720.476 2035.55,726.89 2036.01,733.767 2036.46,741.624 2036.92,750.364 2037.38,760.16 2037.84,770.767 2038.3,781.704 2038.76,792.169 2039.22,801.72 2039.67,809.597 2040.13,815.972 2040.59,821.728 2041.05,827.001 2041.51,831.872 2041.97,836.445 2042.43,840.717 2042.88,844.665 2043.34,847.941 2043.8,850.198 2044.26,851.724 2044.72,853.203 2045.18,855.347 2045.64,857.847 2046.09,860.684 2046.55,863.965 2047.01,867.825 2047.47,871.976 2047.93,876.385 2048.39,880.832 2048.85,885.072 2049.3,888.944 2049.76,892.306 2050.22,895.17 2050.68,897.968 2051.14,900.864 2051.6,903.723 2052.06,906.419 2052.51,908.932 2052.97,911.001 2053.43,912.557 2053.89,913.742 2054.35,914.625 2054.81,915.285 2055.27,916.299 2055.72,917.421 2056.18,918.591 2056.64,919.399 2057.1,919.846 2057.56,919.878 2058.02,919.539 2058.48,918.71 2058.93,917.755 2059.39,916.732 2059.85,915.467 2060.31,913.564 2060.77,911.149 2061.23,908.304 2061.69,905.036 2062.14,901.953 2062.6,899.038 2063.06,896 2063.52,892.396 2063.98,887.995 2064.44,883.138 2064.9,878.313 2065.35,873.5 2065.81,869.859 2066.27,867.508 2066.73,866.048 2067.19,865.07 2067.65,863.721 2068.11,862.022 2068.56,860.105 2069.02,857.869 2069.48,855.175 2069.94,851.897 2070.4,847.957 2070.86,843.88 2071.32,839.878 2071.77,835.945 2072.23,832.038 2072.69,827.974 2073.15,823.614 2073.61,818.777 2074.07,813.687 2074.53,808.392 2074.98,803.351 2075.44,799.277 2075.9,796.575 2076.36,795.289 2076.82,795.203 2077.28,795.84 2077.74,796.661 2078.19,797.254 2078.65,796.907 2079.11,795.308 2079.57,792.504 2080.03,788.394 2080.49,783.109 2080.95,777.237 2081.4,771.806 2081.86,767.213 2082.32,763.163 2082.78,759.839 2083.24,757.692 2083.7,756.467 2084.16,756.182 2084.61,756.339 2085.07,757.117 2085.53,758.667 2085.99,761.058 2086.45,763.681 2086.91,766.504 2087.37,768.718 2087.82,770.466 2088.28,771.533 2088.74,771.927 2089.2,771.849 2089.66,771.544 2090.12,771.296 2090.58,771.142 2091.03,771.076 2091.49,771.05 2091.95,771.188 2092.41,771.58 2092.87,772.117 2093.33,772.728 2093.79,773.731 2094.24,775.342 2094.7,777.601 2095.16,780.099 2095.62,782.573 2096.08,784.587 2096.54,785.833 2097,786.369 2097.45,786.72 2097.91,787.457 2098.37,788.834 2098.83,791.057 2099.29,794.036 2099.75,797.122 2100.21,799.608 2100.66,801.441 2101.12,802.897 2101.58,804.441 2102.04,806.016 2102.5,806.966 2102.96,807.155 2103.42,806.687 2103.87,805.729 2104.33,804.599 2104.79,803.632 2105.25,802.259 2105.71,801.17 2106.17,800.498 2106.63,800.742 2107.08,801.88 2107.54,803.506 2108,805.394 2108.46,807.416 2108.92,809.617 2109.38,811.574 2109.84,813.078 2110.29,814.429 2110.75,815.523 2111.21,815.927 2111.67,815.336 2112.13,813.676 2112.59,811.044 2113.05,807.978 2113.5,805.113 2113.96,803.037 2114.42,801.747 2114.88,801.148 2115.34,800.516 2115.8,799.58 2116.26,798.183 2116.71,796.29 2117.17,794.088 2117.63,791.689 2118.09,789.322 2118.55,786.934 2119.01,784.697 2119.47,782.274 2119.92,780.021 2120.38,777.952 2120.84,775.712 2121.3,773.373 2121.76,771.177 2122.22,769.526 2122.68,768.036 2123.13,766.546 2123.59,765.097 2124.05,763.232 2124.51,760.768 2124.97,758.41 2125.43,756.344 2125.89,754.506 2126.34,752.791 2126.8,751.602 2127.26,750.414 2127.72,748.731 2128.18,746.11 2128.64,742.672 2129.1,738.392 2129.55,734.049 2130.01,730.306 2130.47,727.043 2130.93,723.854 2131.39,720.33 2131.85,716.706 2132.31,713.324 2132.76,710.162 2133.22,707.253 2133.68,704.576 2134.14,701.692 2134.6,698.501 2135.06,694.941 2135.52,691.409 2135.97,688.047 2136.43,685.018 2136.89,682.099 2137.35,679.574 2137.81,677.507 2138.27,675.437 2138.73,672.969 2139.18,670.133 2139.64,666.953 2140.1,663.401 2140.56,659.594 2141.02,655.561 2141.48,651.488 2141.94,648.072 2142.39,645.287 2142.85,643.084 2143.31,641.402 2143.77,640.008 2144.23,638.448 2144.69,636.509 2145.15,634.176 2145.6,631.766 2146.06,629.478 2146.52,627.69 2146.98,625.982 2147.44,623.699 2147.9,621.214 2148.36,618.626 2148.81,616.298 2149.27,614.621 2149.73,613.232 2150.19,611.349 2150.65,608.472 2151.11,605.195 2151.57,601.334 2152.02,597.228 2152.48,593.678 2152.94,591.112 2153.4,589.292 2153.86,587.426 2154.32,585.365 2154.78,583.206 2155.23,580.893 2155.69,578.329 2156.15,575.578 2156.61,572.615 2157.07,568.991 2157.53,564.603 2157.99,559.83 2158.44,554.916 2158.9,549.592 2159.36,544.066 2159.82,538.904 2160.28,534.565 2160.74,531.418 2161.2,529.392 2161.65,527.683 2162.11,525.351 2162.57,521.819 2163.03,517.415 2163.49,513.079 2163.95,509.496 2164.41,506.614 2164.86,503.995 2165.32,500.797 2165.78,496.588 2166.24,491.717 2166.7,486.552 2167.16,481.258 2167.62,476.271 2168.07,471.605 2168.53,466.896 2168.99,461.71 2169.45,455.627 2169.91,449.003 2170.37,442.349 2170.83,436.392 2171.28,430.522 2171.74,424.396 2172.2,417.874 2172.66,411.306 2173.12,405.123 2173.58,400.195 2174.04,396.5 2174.49,393.753 2174.95,391.624 2175.41,389.644 2175.87,387.213 2176.33,383.866 2176.79,379.466 2177.25,374.158 2177.7,368.66 2178.16,363.361 2178.62,358.117 2179.08,353.06 2179.54,348.059 2180,343.117 2180.46,338.605 2180.91,334.217 2181.37,329.677 2181.83,324.403 2182.29,318.956 2182.75,314.465 2183.21,311.377 2183.67,309.402 2184.12,308.085 2184.58,306.683 2185.04,305.24 2185.5,303.169 2185.96,300.145 2186.42,296.345 2186.88,292.614 2187.33,289.365 2187.79,286.422 2188.25,283.547 2188.71,280.553 2189.17,277.579 2189.63,274.941 2190.09,272.741 2190.54,270.644 2191,268.756 2191.46,267.276 2191.92,266.482 2192.38,265.841 2192.84,265.08 2193.3,264.143 2193.76,262.796 2194.21,261.206 2194.67,259.352 2195.13,257.31 2195.59,255.185 2196.05,253.264 2196.51,251.661 2196.97,250.584 2197.42,250.093 2197.88,250.352 2198.34,251.005 2198.8,251.745 2199.26,252.498 2199.72,253.663 2200.18,255.054 2200.63,256.676 2201.09,258.584 2201.55,260.637 2202.01,262.581 2202.47,264.171 2202.93,265.597 2203.39,266.628 2203.84,266.623 2204.3,265.894 2204.76,265.222 2205.22,264.744 2205.68,264.557 2206.14,264.727 2206.6,265.126 2207.05,265.596 2207.51,266.154 2207.97,266.697 2208.43,267.488 2208.89,269.044 2209.35,271.604 2209.81,274.652 2210.26,278.042 2210.72,281.497 2211.18,284.467 2211.64,287.241 2212.1,289.767 2212.56,291.991 2213.02,294.14 2213.47,296.038 2213.93,297.642 2214.39,298.972 2214.85,299.91 2215.31,300.428 2215.77,300.866 2216.23,301.424 2216.68,301.997 2217.14,302.385 2217.6,302.572 2218.06,302.237 2218.52,301.526 2218.98,300.965 2219.44,300.745 2219.89,301.029 2220.35,301.895 2220.81,303.725 2221.27,306.459 2221.73,309.944 2222.19,313.259 2222.65,316.212 2223.1,318.028 2223.56,318.895 2224.02,319.492 2224.48,320.283 2224.94,321.267 2225.4,322.958 2225.86,324.689 2226.31,325.978 2226.77,326.647 2227.23,326.82 2227.69,327.32 2228.15,328.446 2228.61,330.251 2229.07,332.192 2229.52,334.111 2229.98,336.033 2230.44,338.33 2230.9,341.031 2231.36,344.112 2231.82,347.022 2232.28,349.536 2232.73,351.787 2233.19,353.825 2233.65,356.098 2234.11,358.386 2234.57,360.739 2235.03,363.026 2235.49,364.668 2235.94,365.351 2236.4,365.472 2236.86,365.493 2237.32,365.628 2237.78,365.344 2238.24,364.719 2238.7,364.092 2239.15,364.044 2239.61,364.606 2240.07,365.318 2240.53,366.512 2240.99,367.901 2241.45,369.476 2241.91,371.291 2242.36,373.135 2242.82,375.472 2243.28,378.038 2243.74,380.226 2244.2,381.829 2244.66,382.82 2245.12,383.383 2245.57,384.246 2246.03,385.443 2246.49,386.912 2246.95,388.382 2247.41,389.679 2247.87,390.439 2248.33,390.569 2248.78,390.85 2249.24,391.547 2249.7,392.562 2250.16,393.595 2250.62,394.286 2251.08,395.153 2251.54,396.349 2251.99,397.611 2252.45,398.87 2252.91,399.914 2253.37,400.676 2253.83,400.954 2254.29,401.019 2254.75,401.507 2255.2,402.446 2255.66,403.586 2256.12,405.058 2256.58,407.14 2257.04,409.835 2257.5,412.867 2257.96,415.885 2258.41,419.048 2258.87,422.388 2259.33,425.599 2259.79,428.089 2260.25,429.808 2260.71,430.809 2261.17,431.012 2261.62,430.656 2262.08,430.502 2262.54,430.592 2263,430.738 2263.46,430.938 2263.92,431.4 2264.38,432.4 2264.83,433.528 2265.29,434.747 2265.75,435.842 2266.21,437.617 2266.67,440.143 2267.13,443.607 2267.59,447.314 2268.04,450.938 2268.5,454.294 2268.96,457.73 2269.42,461.177 2269.88,464.321 2270.34,467.761 2270.8,471.65 2271.25,475.503 2271.71,478.973 2272.17,482.286 2272.63,485.693 2273.09,489.36 2273.55,492.686 2274.01,495.074 2274.46,496.723 2274.92,498.289 2275.38,500.144 2275.84,502.143 2276.3,504.435 2276.76,507.435 2277.22,511.005 2277.67,514.918 2278.13,518.684 2278.59,521.973 2279.05,524.74 2279.51,527.324 2279.97,529.752 2280.43,532.612 2280.88,536.091 2281.34,540.228 2281.8,544.885 2282.26,550.003 2282.72,555.432 2283.18,560.813 2283.64,565.739 2284.09,569.847 2284.55,573.364 2285.01,576.693 2285.47,580.27 2285.93,584.023 2286.39,587.613 2286.85,591.797 2287.3,596.67 2287.76,601.78 2288.22,606.86 2288.68,611.999 2289.14,617.589 2289.6,623.383 2290.06,629.171 2290.51,634.692 2290.97,639.469 2291.43,643.992 2291.89,648.512 2292.35,653.082 2292.81,657.503 2293.27,661.931 2293.72,666.965 2294.18,672.517 2294.64,677.77 2295.1,682.73 2295.56,687.789 2296.02,693.247 2296.48,698.554 2296.93,703.464 2297.39,707.952 2297.85,711.867 2298.31,715.802 2298.77,719.96 2299.23,724.412 2299.69,728.616 2300.14,732.216 2300.6,735.343 2301.06,738.317 2301.52,740.896 2301.98,743.449 2302.44,746.208 2302.9,749.3 2303.35,753.05 2303.81,757.148 2304.27,761.432 2304.73,765.81 2305.19,770.069 2305.65,774.017 2306.11,777.794 2306.56,781.394 2307.02,784.959 2307.48,788.166 2307.94,791.216 2308.4,793.815 2308.86,796.084 2309.32,798.17 2309.77,800.166 2310.23,802.448 2310.69,804.744 2311.15,807.193 2311.61,809.828 2312.07,812.62 2312.53,815.214 2312.98,818.039 2313.44,820.996 2313.9,824.022 2314.36,826.945 2314.82,829.664 2315.28,831.836 2315.74,833.643 2316.19,835.05 2316.65,836.104 2317.11,837.097 2317.57,838.551 2318.03,840.641 2318.49,843.326 2318.95,846.388 2319.4,849.714 2319.86,852.279 2320.32,853.747 2320.78,853.702 2321.24,852.659 2321.7,851.4 2322.16,850.204 2322.61,849.524 2323.07,849.482 2323.53,850.592 2323.99,852.343 2324.45,854.791 2324.91,857.445 2325.37,859.861 2325.82,861.516 2326.28,862.278 2326.74,861.944 2327.2,860.945 2327.66,859.786 2328.12,858.811 2328.58,857.855 2329.03,857.051 2329.49,856.529 2329.95,856.572 2330.41,856.791 2330.87,857.104 2331.33,857.165 2331.79,856.728 2332.24,856.15 2332.7,855.571 2333.16,855.294 2333.62,855.782 2334.08,856.732 2334.54,857.51 2335,858.029 2335.45,858.243 2335.91,858.443 2336.37,858.889 2336.83,859.162 2337.29,859.068 2337.75,858.667 2338.21,857.773 2338.66,855.818 2339.12,852.937 2339.58,849.451 2340.04,845.903 2340.5,842.921 2340.96,840.707 2341.42,839.272 2341.87,838.215 2342.33,837.085 2342.79,836.322 2343.25,836.214 2343.71,837.141 2344.17,838.88 2344.63,840.756 2345.08,841.973 2345.54,841.86 2346,840.289 2346.46,837.854 2346.92,835.097 2347.38,832.249 2347.84,829.408 2348.29,826.342 2348.75,823.149 2349.21,819.855 2349.67,816.619 2350.13,813.399 2350.59,810.004 2351.05,805.659 2351.5,801.363 2351.96,797.897 2352.42,795.387 2352.88,793.997 2353.34,793.332 2353.8,792.936 2354.26,792.581 2354.71,792.417 2355.17,792.107 2355.63,791.393 2356.09,789.777 2356.55,787.082 2357.01,783.639 2357.47,779.606 2357.92,775.384 2358.38,771.445 2358.84,767.695 2359.3,764.568 2359.76,762.267 2360.22,761.25 2360.68,760.819 2361.13,760.071 2361.59,758.726 2362.05,756.674 2362.51,754.197 2362.97,751.604 2363.43,748.843 2363.89,746.34 2364.34,744.471 2364.8,743.009 2365.26,741.401 2365.72,739.248 2366.18,736.786 2366.64,733.901 2367.1,730.852 2367.55,727.905 2368.01,724.821 2368.47,721.785 2368.93,719.013 2369.39,716.622 2369.85,714.438 2370.31,712.658 2370.76,711.257 2371.22,710.379 2371.68,709.216 2372.14,707.122 2372.6,704.234 2373.06,700.547 2373.52,696.234 2373.97,691.599 2374.43,687.12 2374.89,683.187 2375.35,680.356 2375.81,678.393 2376.27,676.756 2376.73,674.964 2377.18,673.241 2377.64,671.589 2378.1,669.707 2378.56,667.416 2379.02,664.695 2379.48,661.678 2379.94,658.597 2380.39,655.636 2380.85,653.264 2381.31,651.253 2381.77,649.092 2382.23,646.384 2382.69,643.451 2383.15,641.075 2383.6,639.497 2384.06,638.351 2384.52,637.132 2384.98,635.484 2385.44,633.6 2385.9,631.857 2386.36,630.281 2386.81,628.697 2387.27,627.387 2387.73,626.469 2388.19,625.901 2388.65,625.857 2389.11,626.115 2389.57,626.355 2390.02,626.431 2390.48,625.947 2390.94,625.016 2391.4,623.547 2391.86,621.449 2392.32,618.556 2392.78,614.766 2393.23,610.162 2393.69,605.413 2394.15,600.901 2394.61,597.16 2395.07,594.9 2395.53,593.841 2395.99,593.381 2396.44,592.941 2396.9,592.207 2397.36,591.161 2397.82,589.987 2398.28,588.612 2398.74,587.357 2399.2,586.128 2399.65,584.904 2400.11,583.993 2400.57,583.384 2401.03,583.202 2401.49,583.592 2401.95,584.215 2402.41,584.465 2402.86,584.034 2403.32,583.016 2403.78,581.027 2404.24,577.911 2404.7,574.299 2405.16,570.699 2405.62,567.266 2406.07,564.545 2406.53,563.075 2406.99,562.558 2407.45,562.371 2407.91,561.68 2408.37,560.128 2408.83,558.098 2409.28,555.372 2409.74,551.985 2410.2,548.154 2410.66,544.491 2411.12,541.645 2411.58,539.589 2412.04,538.22 2412.49,537.216 2412.95,536.021 2413.41,535.031 2413.87,534.006 2414.33,532.898 2414.79,531.701 2415.25,530.058 2415.7,527.96 2416.16,525.662 2416.62,523.572 2417.08,521.698 2417.54,519.528 2418,516.329 2418.46,512.244 2418.91,507.589 2419.37,502.815 2419.83,498.669 2420.29,495.608 2420.75,493.332 2421.21,491.162 2421.67,489.352 2422.12,487.81 2422.58,486.409 2423.04,484.608 2423.5,482.223 2423.96,479.211 2424.42,476.128 2424.88,473.629 2425.33,471.754 2425.79,469.961 2426.25,467.904 2426.71,465.212 2427.17,462.053 2427.63,458.98 2428.09,456.177 2428.54,453.565 2429,451.157 2429.46,449.051 2429.92,446.988 2430.38,445.067 2430.84,442.86 2431.3,439.756 2431.75,435.715 2432.21,430.849 2432.67,425.597 2433.13,419.935 2433.59,414.114 2434.05,407.981 2434.51,402.026 2434.96,396.3 2435.42,390.57 2435.88,384.837 2436.34,379.401 2436.8,374.407 2437.26,370.018 2437.72,366.505 2438.17,362.938 2438.63,359.138 2439.09,354.964 2439.55,350.836 2440.01,347.014 2440.47,343.85 2440.93,341.474 2441.38,339.432 2441.84,337.506 2442.3,335.112 2442.76,331.816 2443.22,327.864 2443.68,323.716 2444.14,319.419 2444.59,314.711 2445.05,309.411 2445.51,303.788 2445.97,298.294 2446.43,292.906 2446.89,287.652 2447.35,282.503 2447.8,277.688 2448.26,273.618 2448.72,270.38 2449.18,267.679 2449.64,265.265 2450.1,262.692 2450.56,260.095 2451.01,257.509 2451.47,254.236 2451.93,250.445 2452.39,246.551 2452.85,242.286 2453.31,237.239 2453.77,231.878 2454.22,226.606 2454.68,221.628 2455.14,217.341 2455.6,213.872 2456.06,210.525 2456.52,207.095 2456.98,203.685 2457.43,200.243 2457.89,197.109 2458.35,194.991 2458.81,194.32 2459.27,195.033 2459.73,197.278 2460.19,200.788 2460.64,204.459 2461.1,207.189 2461.56,209.122 2462.02,210.356 2462.48,210.862 2462.94,210.486 2463.4,209.652 2463.85,208.837 2464.31,208.481 2464.77,208.495 2465.23,208.261 2465.69,207.583 2466.15,206.812 2466.61,206.067 2467.06,205.528 2467.52,205.324 2467.98,205.668 2468.44,206.322 2468.9,207.111 2469.36,207.918 2469.82,208.8 2470.27,209.902 2470.73,211.203 2471.19,212.93 2471.65,215.353 2472.11,218.273 2472.57,221.477 2473.03,224.959 2473.48,229.221 2473.94,234.395 2474.4,239.989 2474.86,245.394 2475.32,250.115 2475.78,253.58 2476.24,255.875 2476.69,257.528 2477.15,259.071 2477.61,260.62 2478.07,262.203 2478.53,264.283 2478.99,267.192 2479.45,270.562 2479.9,274.185 2480.36,277.746 2480.82,281.445 2481.28,285.107 2481.74,288.939 2482.2,293.141 2482.66,297.71 2483.11,302.613 2483.57,307.89 2484.03,313.04 2484.49,317.944 2484.95,322.393 2485.41,325.911 2485.87,328.629 2486.32,331.133 2486.78,334.067 2487.24,337.493 2487.7,341.177 2488.16,345.143 2488.62,349.065 2489.08,352.602 2489.53,355.558 2489.99,358.143 2490.45,360.377 2490.91,362.298 2491.37,363.689 2491.83,365.204 2492.29,367.649 2492.74,371.109 2493.2,375.607 2493.66,380.861 2494.12,386.481 2494.58,391.693 2495.04,396.265 2495.5,400.006 2495.95,403.245 2496.41,406.32 2496.87,409.298 2497.33,411.971 2497.79,414.01 2498.25,415.916 2498.71,417.667 2499.16,419.356 2499.62,421.167 2500.08,423.268 2500.54,425.43 2501,427.281 2501.46,428.854 2501.92,430.139 2502.37,431.265 2502.83,432.088 2503.29,432.655 2503.75,432.988 2504.21,433.584 2504.67,434.901 2505.13,436.823 2505.58,439.156 2506.04,441.784 2506.5,444.45 2506.96,447.276 2507.42,449.969 2507.88,452.41 2508.34,455.209 2508.79,458.219 2509.25,461.432 2509.71,464.788 2510.17,467.936 2510.63,470.459 2511.09,471.879 2511.55,472.314 2512,471.972 2512.46,471.251 2512.92,470.468 2513.38,470.32 2513.84,470.911 2514.3,473.039 2514.76,476.09 2515.21,479.617 2515.67,482.967 2516.13,485.698 2516.59,487.714 2517.05,489.067 2517.51,489.693 2517.97,489.147 2518.42,487.775 2518.88,486.173 2519.34,485.045 2519.8,484.988 2520.26,486.315 2520.72,488.819 2521.18,491.2 2521.63,493.27 2522.09,495.104 2522.55,496.84 2523.01,498.569 2523.47,500.588 2523.93,502.754 2524.39,504.84 2524.84,506.276 2525.3,506.843 2525.76,506.945 2526.22,507.128 2526.68,507.615 2527.14,508.829 2527.6,510.292 2528.05,511.817 2528.51,513.025 2528.97,513.443 2529.43,513.322 2529.89,513.011 2530.35,512.717 2530.81,512.794 2531.26,513.429 2531.72,514.667 2532.18,516.459 2532.64,518.697 2533.1,521.326 2533.56,524.412 2534.02,528.168 2534.47,532.387 2534.93,536.793 2535.39,541.239 2535.85,545.103 2536.31,548.446 2536.77,551.405 2537.23,554.058 2537.69,556.171 2538.14,558.136 2538.6,560.698 2539.06,563.825 2539.52,567.077 2539.98,569.552 2540.44,571.094 2540.9,571.896 2541.35,571.796 2541.81,571.388 2542.27,571.339 2542.73,571.852 2543.19,573.209 2543.65,574.876 2544.11,576.296 2544.56,577.271 2545.02,578.136 2545.48,579.335 2545.94,581.147 2546.4,583.539 2546.86,586.599 2547.32,590.375 2547.77,594.701 2548.23,599.462 2548.69,604.853 2549.15,610.582 2549.61,616.185 2550.07,621.06 2550.53,624.647 2550.98,627.16 2551.44,629.034 2551.9,630.663 2552.36,632.108 2552.82,633.941 2553.28,636.475 2553.74,639.733 2554.19,643.97 2554.65,649.022 2555.11,654.38 2555.57,659.073 2556.03,662.487 2556.49,665.186 2556.95,668.087 2557.4,671.39 2557.86,675.85 2558.32,681.21 2558.78,686.901 2559.24,692.382 2559.7,697.524 2560.16,701.67 2560.61,705.082 2561.07,708.405 2561.53,711.542 2561.99,714.935 2562.45,718.48 2562.91,721.477 2563.37,723.826 2563.82,726.422 2564.28,730.173 2564.74,734.824 2565.2,740.33 2565.66,746.599 2566.12,752.756 2566.58,758.636 2567.03,764.348 2567.49,769.671 2567.95,774.705 2568.41,779.216 2568.87,783.49 2569.33,787.866 2569.79,792.205 2570.24,796.87 2570.7,802.298 2571.16,808.328 2571.62,814.287 2572.08,820.213 2572.54,826.143 2573,832.148 2573.45,838.038 2573.91,843.37 2574.37,848.171 2574.83,852.594 2575.29,856.249 2575.75,859.012 2576.21,861.386 2576.66,864.216 2577.12,867.539 2577.58,871.142 2578.04,874.781 2578.5,878.102 2578.96,881.461 2579.42,885.621 2579.87,890.198 2580.33,894.734 2580.79,899.215 2581.25,903.274 2581.71,907.116 2582.17,910.776 2582.63,914.701 2583.08,919.06 2583.54,923.505 2584,927.359 2584.46,930.63 2584.92,933.823 2585.38,937.249 2585.84,940.886 2586.29,944.598 2586.75,948.575 2587.21,952.653 2587.67,956.273 2588.13,958.921 2588.59,960.442 2589.05,961.392 2589.5,962.385 2589.96,963.278 2590.42,963.901 2590.88,964.046 2591.34,963.56 2591.8,962.381 2592.26,960.77 2592.71,959.001 2593.17,957.614 2593.63,956.442 2594.09,955.56 2594.55,955.014 2595.01,954.86 2595.47,955.064 2595.92,955.048 2596.38,954.764 2596.84,954.14 2597.3,953.36 2597.76,952.786 2598.22,952.663 2598.68,952.739 2599.13,952.827 2599.59,952.842 2600.05,952.547 2600.51,951.709 2600.97,950.099 2601.43,947.953 2601.89,945.447 2602.34,943.299 2602.8,941.702 2603.26,940.455 2603.72,939.457 2604.18,937.942 2604.64,935.077 2605.1,930.813 2605.55,925.833 2606.01,921.027 2606.47,916.966 2606.93,913.767 2607.39,911.042 2607.85,908.713 2608.31,906.432 2608.76,903.824 2609.22,900.891 2609.68,897.744 2610.14,894.443 2610.6,891.806 2611.06,890.112 2611.52,889.27 2611.97,888.788 2612.43,888.37 2612.89,888.079 2613.35,887.646 2613.81,886.716 2614.27,885.122 2614.73,882.733 2615.18,879.385 2615.64,875.175 2616.1,870.414 2616.56,865.3 2617.02,860.301 2617.48,855.822 2617.94,852.044 2618.39,848.906 2618.85,846.025 2619.31,843.416 2619.77,840.93 2620.23,838.496 2620.69,836.063 2621.15,833.734 2621.6,831.302 2622.06,829 2622.52,827.021 2622.98,825.494 2623.44,824.009 2623.9,822.047 2624.36,819.448 2624.81,816.481 2625.27,813.124 2625.73,809.343 2626.19,805.301 2626.65,801.272 2627.11,797.509 2627.57,794.268 2628.02,791.608 2628.48,789.826 2628.94,788.613 2629.4,787.464 2629.86,786.027 2630.32,783.844 2630.78,781.147 2631.23,778.419 2631.69,775.95 2632.15,774.04 2632.61,772.81 2633.07,771.787 2633.53,770.907 2633.99,769.863 2634.44,768.471 2634.9,766.363 2635.36,763.588 2635.82,760.569 2636.28,757.387 2636.74,754.038 2637.2,750.128 2637.65,745.329 2638.11,740.286 2638.57,735.68 2639.03,731.726 2639.49,728.549 2639.95,725.787 2640.41,723.374 2640.86,721.332 2641.32,719.338 2641.78,717.521 2642.24,715.713 2642.7,713.784 2643.16,711.373 2643.62,708.05 2644.07,704.484 2644.53,701.237 2644.99,698.169 2645.45,695.509 2645.91,693.274 2646.37,691.051 2646.83,688.861 2647.28,686.469 2647.74,684.295 2648.2,682.393 2648.66,679.965 2649.12,676.579 2649.58,672.003 2650.04,667.216 2650.49,662.829 2650.95,659.475 2651.41,657.124 2651.87,655.26 2652.33,653.145 2652.79,650.431 2653.25,646.973 2653.7,643.215 2654.16,639.802 2654.62,636.452 2655.08,633.255 2655.54,630.025 2656,626.583 2656.46,622.757 2656.91,618.899 2657.37,615.488 2657.83,612.728 2658.29,610.487 2658.75,608.503 2659.21,606.23 2659.67,603.77 2660.12,601.191 2660.58,598.335 2661.04,595.142 2661.5,591.634 2661.96,587.997 2662.42,584.265 2662.88,580.341 2663.33,576.244 2663.79,572.618 2664.25,569.474 2664.71,567.139 2665.17,564.988 2665.63,562.152 2666.09,558.663 2666.54,555.316 2667,552.48 2667.46,549.943 2667.92,547.314 2668.38,544.811 2668.84,542.262 2669.3,539.648 2669.75,537.237 2670.21,535.316 2670.67,533.659 2671.13,531.854 2671.59,530.498 2672.05,529.846 2672.51,529.039 2672.96,527.591 2673.42,525.083 2673.88,521.554 2674.34,517.328 2674.8,513.017 2675.26,509.503 2675.72,506.849 2676.17,504.971 2676.63,503.955 2677.09,503.49 2677.55,503.768 2678.01,504.418 2678.47,504.879 2678.93,504.237 2679.38,502.51 2679.84,499.711 2680.3,496.029 2680.76,492.281 2681.22,489.007 2681.68,486.414 2682.14,484.964 2682.59,484.993 2683.05,486.026 2683.51,486.951 2683.97,488.194 "/>
<path clip-path="url(#clip950)" d="M403.332 348.006 L1281.86 348.006 L1281.86 192.486 L403.332 192.486  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<polyline clip-path="url(#clip950)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="403.332,348.006 1281.86,348.006 1281.86,192.486 403.332,192.486 403.332,348.006 "/>
<polyline clip-path="url(#clip950)" style="stroke:#0000ff; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" points="430.337,244.326 592.366,244.326 "/>
<path clip-path="url(#clip950)" d="M626.778 228.319 L626.778 235.68 L635.551 235.68 L635.551 238.99 L626.778 238.99 L626.778 253.064 Q626.778 256.235 627.635 257.138 Q628.514 258.041 631.176 258.041 L635.551 258.041 L635.551 261.606 L631.176 261.606 Q626.246 261.606 624.371 259.777 Q622.496 257.925 622.496 253.064 L622.496 238.99 L619.371 238.99 L619.371 235.68 L622.496 235.68 L622.496 228.319 L626.778 228.319 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M656.176 239.661 Q655.459 239.245 654.602 239.059 Q653.769 238.851 652.75 238.851 Q649.139 238.851 647.195 241.212 Q645.273 243.55 645.273 247.948 L645.273 261.606 L640.991 261.606 L640.991 235.68 L645.273 235.68 L645.273 239.707 Q646.616 237.346 648.769 236.212 Q650.922 235.055 654 235.055 Q654.44 235.055 654.973 235.124 Q655.505 235.17 656.153 235.286 L656.176 239.661 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M660.204 251.374 L660.204 235.68 L664.463 235.68 L664.463 251.212 Q664.463 254.893 665.898 256.744 Q667.334 258.573 670.204 258.573 Q673.653 258.573 675.644 256.374 Q677.658 254.175 677.658 250.379 L677.658 235.68 L681.917 235.68 L681.917 261.606 L677.658 261.606 L677.658 257.624 Q676.107 259.985 674.046 261.143 Q672.009 262.277 669.301 262.277 Q664.834 262.277 662.519 259.499 Q660.204 256.721 660.204 251.374 M670.922 235.055 L670.922 235.055 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M712.866 247.578 L712.866 249.661 L693.282 249.661 Q693.56 254.059 695.921 256.374 Q698.306 258.666 702.542 258.666 Q704.995 258.666 707.287 258.064 Q709.602 257.462 711.87 256.258 L711.87 260.286 Q709.579 261.258 707.171 261.768 Q704.764 262.277 702.287 262.277 Q696.083 262.277 692.449 258.666 Q688.838 255.055 688.838 248.897 Q688.838 242.532 692.264 238.805 Q695.713 235.055 701.546 235.055 Q706.778 235.055 709.81 238.434 Q712.866 241.791 712.866 247.578 M708.606 246.328 Q708.56 242.832 706.639 240.749 Q704.741 238.666 701.593 238.666 Q698.028 238.666 695.875 240.68 Q693.745 242.694 693.421 246.351 L708.606 246.328 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M745.157 225.633 Q742.055 230.958 740.551 236.166 Q739.046 241.374 739.046 246.721 Q739.046 252.069 740.551 257.323 Q742.079 262.555 745.157 267.855 L741.454 267.855 Q737.981 262.416 736.245 257.161 Q734.532 251.906 734.532 246.721 Q734.532 241.559 736.245 236.328 Q737.958 231.096 741.454 225.633 L745.157 225.633 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M768.444 239.661 Q767.727 239.245 766.87 239.059 Q766.037 238.851 765.018 238.851 Q761.407 238.851 759.463 241.212 Q757.541 243.55 757.541 247.948 L757.541 261.606 L753.259 261.606 L753.259 235.68 L757.541 235.68 L757.541 239.707 Q758.884 237.346 761.037 236.212 Q763.19 235.055 766.268 235.055 Q766.708 235.055 767.24 235.124 Q767.773 235.17 768.421 235.286 L768.444 239.661 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M794.046 247.578 L794.046 249.661 L774.463 249.661 Q774.74 254.059 777.101 256.374 Q779.486 258.666 783.722 258.666 Q786.176 258.666 788.467 258.064 Q790.782 257.462 793.05 256.258 L793.05 260.286 Q790.759 261.258 788.351 261.768 Q785.944 262.277 783.467 262.277 Q777.264 262.277 773.629 258.666 Q770.018 255.055 770.018 248.897 Q770.018 242.532 773.444 238.805 Q776.893 235.055 782.726 235.055 Q787.958 235.055 790.99 238.434 Q794.046 241.791 794.046 247.578 M789.787 246.328 Q789.74 242.832 787.819 240.749 Q785.921 238.666 782.773 238.666 Q779.208 238.666 777.055 240.68 Q774.926 242.694 774.602 246.351 L789.787 246.328 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M817.564 236.444 L817.564 240.471 Q815.759 239.545 813.814 239.082 Q811.87 238.62 809.786 238.62 Q806.615 238.62 805.018 239.592 Q803.444 240.564 803.444 242.508 Q803.444 243.99 804.578 244.846 Q805.712 245.68 809.138 246.444 L810.597 246.768 Q815.134 247.74 817.032 249.522 Q818.953 251.281 818.953 254.453 Q818.953 258.064 816.083 260.17 Q813.236 262.277 808.236 262.277 Q806.152 262.277 803.884 261.86 Q801.638 261.467 799.138 260.656 L799.138 256.258 Q801.5 257.485 803.791 258.11 Q806.083 258.712 808.328 258.712 Q811.337 258.712 812.958 257.693 Q814.578 256.652 814.578 254.777 Q814.578 253.041 813.398 252.115 Q812.24 251.189 808.282 250.332 L806.8 249.985 Q802.842 249.152 801.083 247.439 Q799.324 245.703 799.324 242.694 Q799.324 239.036 801.916 237.045 Q804.509 235.055 809.277 235.055 Q811.638 235.055 813.722 235.402 Q815.805 235.749 817.564 236.444 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M829.856 257.717 L829.856 271.467 L825.573 271.467 L825.573 235.68 L829.856 235.68 L829.856 239.615 Q831.198 237.3 833.235 236.189 Q835.296 235.055 838.143 235.055 Q842.865 235.055 845.805 238.805 Q848.768 242.555 848.768 248.666 Q848.768 254.777 845.805 258.527 Q842.865 262.277 838.143 262.277 Q835.296 262.277 833.235 261.166 Q831.198 260.031 829.856 257.717 M844.346 248.666 Q844.346 243.967 842.402 241.305 Q840.481 238.62 837.101 238.62 Q833.722 238.62 831.777 241.305 Q829.856 243.967 829.856 248.666 Q829.856 253.365 831.777 256.05 Q833.722 258.712 837.101 258.712 Q840.481 258.712 842.402 256.05 Q844.346 253.365 844.346 248.666 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M865.874 238.666 Q862.448 238.666 860.458 241.351 Q858.467 244.013 858.467 248.666 Q858.467 253.319 860.434 256.004 Q862.425 258.666 865.874 258.666 Q869.277 258.666 871.268 255.981 Q873.258 253.295 873.258 248.666 Q873.258 244.059 871.268 241.374 Q869.277 238.666 865.874 238.666 M865.874 235.055 Q871.43 235.055 874.601 238.666 Q877.772 242.277 877.772 248.666 Q877.772 255.031 874.601 258.666 Q871.43 262.277 865.874 262.277 Q860.295 262.277 857.124 258.666 Q853.976 255.031 853.976 248.666 Q853.976 242.277 857.124 238.666 Q860.295 235.055 865.874 235.055 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M906.383 245.957 L906.383 261.606 L902.124 261.606 L902.124 246.096 Q902.124 242.416 900.689 240.587 Q899.254 238.758 896.383 238.758 Q892.934 238.758 890.943 240.957 Q888.953 243.157 888.953 246.953 L888.953 261.606 L884.67 261.606 L884.67 235.68 L888.953 235.68 L888.953 239.707 Q890.481 237.37 892.541 236.212 Q894.624 235.055 897.332 235.055 Q901.8 235.055 904.092 237.832 Q906.383 240.587 906.383 245.957 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M931.406 236.444 L931.406 240.471 Q929.601 239.545 927.656 239.082 Q925.712 238.62 923.628 238.62 Q920.457 238.62 918.86 239.592 Q917.286 240.564 917.286 242.508 Q917.286 243.99 918.42 244.846 Q919.554 245.68 922.98 246.444 L924.439 246.768 Q928.976 247.74 930.874 249.522 Q932.795 251.281 932.795 254.453 Q932.795 258.064 929.925 260.17 Q927.078 262.277 922.078 262.277 Q919.994 262.277 917.726 261.86 Q915.48 261.467 912.98 260.656 L912.98 256.258 Q915.341 257.485 917.633 258.11 Q919.925 258.712 922.17 258.712 Q925.179 258.712 926.8 257.693 Q928.42 256.652 928.42 254.777 Q928.42 253.041 927.24 252.115 Q926.082 251.189 922.124 250.332 L920.642 249.985 Q916.684 249.152 914.925 247.439 Q913.166 245.703 913.166 242.694 Q913.166 239.036 915.758 237.045 Q918.351 235.055 923.119 235.055 Q925.48 235.055 927.564 235.402 Q929.647 235.749 931.406 236.444 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M961.753 247.578 L961.753 249.661 L942.17 249.661 Q942.448 254.059 944.809 256.374 Q947.193 258.666 951.429 258.666 Q953.883 258.666 956.175 258.064 Q958.489 257.462 960.758 256.258 L960.758 260.286 Q958.466 261.258 956.059 261.768 Q953.651 262.277 951.175 262.277 Q944.971 262.277 941.337 258.666 Q937.726 255.055 937.726 248.897 Q937.726 242.532 941.152 238.805 Q944.601 235.055 950.434 235.055 Q955.665 235.055 958.698 238.434 Q961.753 241.791 961.753 247.578 M957.494 246.328 Q957.448 242.832 955.526 240.749 Q953.628 238.666 950.48 238.666 Q946.915 238.666 944.763 240.68 Q942.633 242.694 942.309 246.351 L957.494 246.328 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1000.87 239.615 L1000.87 225.587 L1005.13 225.587 L1005.13 261.606 L1000.87 261.606 L1000.87 257.717 Q999.531 260.031 997.471 261.166 Q995.434 262.277 992.563 262.277 Q987.864 262.277 984.901 258.527 Q981.962 254.777 981.962 248.666 Q981.962 242.555 984.901 238.805 Q987.864 235.055 992.563 235.055 Q995.434 235.055 997.471 236.189 Q999.531 237.3 1000.87 239.615 M986.36 248.666 Q986.36 253.365 988.281 256.05 Q990.225 258.712 993.605 258.712 Q996.985 258.712 998.929 256.05 Q1000.87 253.365 1000.87 248.666 Q1000.87 243.967 998.929 241.305 Q996.985 238.62 993.605 238.62 Q990.225 238.62 988.281 241.305 Q986.36 243.967 986.36 248.666 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1023.95 238.666 Q1020.53 238.666 1018.54 241.351 Q1016.54 244.013 1016.54 248.666 Q1016.54 253.319 1018.51 256.004 Q1020.5 258.666 1023.95 258.666 Q1027.35 258.666 1029.35 255.981 Q1031.34 253.295 1031.34 248.666 Q1031.34 244.059 1029.35 241.374 Q1027.35 238.666 1023.95 238.666 M1023.95 235.055 Q1029.51 235.055 1032.68 238.666 Q1035.85 242.277 1035.85 248.666 Q1035.85 255.031 1032.68 258.666 Q1029.51 262.277 1023.95 262.277 Q1018.37 262.277 1015.2 258.666 Q1012.05 255.031 1012.05 248.666 Q1012.05 242.277 1015.2 238.666 Q1018.37 235.055 1023.95 235.055 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1056.04 225.587 L1056.04 229.129 L1051.96 229.129 Q1049.67 229.129 1048.77 230.055 Q1047.89 230.981 1047.89 233.388 L1047.89 235.68 L1054.9 235.68 L1054.9 238.99 L1047.89 238.99 L1047.89 261.606 L1043.6 261.606 L1043.6 238.99 L1039.53 238.99 L1039.53 235.68 L1043.6 235.68 L1043.6 233.874 Q1043.6 229.545 1045.62 227.578 Q1047.63 225.587 1052.01 225.587 L1056.04 225.587 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1075.41 260.888 L1075.41 256.629 Q1077.17 257.462 1078.97 257.902 Q1080.78 258.342 1082.52 258.342 Q1087.15 258.342 1089.58 255.24 Q1092.03 252.115 1092.38 245.772 Q1091.03 247.763 1088.97 248.828 Q1086.91 249.893 1084.41 249.893 Q1079.23 249.893 1076.2 246.768 Q1073.19 243.619 1073.19 238.18 Q1073.19 232.856 1076.34 229.638 Q1079.48 226.421 1084.72 226.421 Q1090.71 226.421 1093.86 231.027 Q1097.03 235.61 1097.03 244.36 Q1097.03 252.531 1093.14 257.416 Q1089.28 262.277 1082.72 262.277 Q1080.97 262.277 1079.16 261.93 Q1077.35 261.582 1075.41 260.888 M1084.72 246.235 Q1087.86 246.235 1089.69 244.082 Q1091.54 241.93 1091.54 238.18 Q1091.54 234.453 1089.69 232.3 Q1087.86 230.124 1084.72 230.124 Q1081.57 230.124 1079.72 232.3 Q1077.89 234.453 1077.89 238.18 Q1077.89 241.93 1079.72 244.082 Q1081.57 246.235 1084.72 246.235 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1104.16 225.633 L1107.86 225.633 Q1111.34 231.096 1113.05 236.328 Q1114.78 241.559 1114.78 246.721 Q1114.78 251.906 1113.05 257.161 Q1111.34 262.416 1107.86 267.855 L1104.16 267.855 Q1107.24 262.555 1108.74 257.323 Q1110.27 252.069 1110.27 246.721 Q1110.27 241.374 1108.74 236.166 Q1107.24 230.958 1104.16 225.633 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip950)" style="stroke:#ffa500; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" stroke-dasharray="32, 20" points="430.337,296.166 592.366,296.166 "/>
<path clip-path="url(#clip950)" d="M643.399 299.418 L643.399 301.501 L623.815 301.501 Q624.093 305.899 626.454 308.214 Q628.838 310.506 633.074 310.506 Q635.528 310.506 637.82 309.904 Q640.135 309.302 642.403 308.098 L642.403 312.126 Q640.111 313.098 637.704 313.608 Q635.297 314.117 632.82 314.117 Q626.616 314.117 622.982 310.506 Q619.371 306.895 619.371 300.737 Q619.371 294.372 622.797 290.645 Q626.246 286.895 632.079 286.895 Q637.311 286.895 640.343 290.274 Q643.399 293.631 643.399 299.418 M639.139 298.168 Q639.093 294.672 637.172 292.589 Q635.274 290.506 632.125 290.506 Q628.561 290.506 626.408 292.52 Q624.278 294.534 623.954 298.191 L639.139 298.168 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M666.917 288.284 L666.917 292.311 Q665.111 291.385 663.167 290.922 Q661.222 290.46 659.139 290.46 Q655.968 290.46 654.371 291.432 Q652.797 292.404 652.797 294.348 Q652.797 295.83 653.931 296.686 Q655.065 297.52 658.491 298.284 L659.949 298.608 Q664.486 299.58 666.384 301.362 Q668.306 303.121 668.306 306.293 Q668.306 309.904 665.435 312.01 Q662.588 314.117 657.588 314.117 Q655.505 314.117 653.236 313.7 Q650.991 313.307 648.491 312.496 L648.491 308.098 Q650.852 309.325 653.144 309.95 Q655.435 310.552 657.681 310.552 Q660.69 310.552 662.31 309.533 Q663.931 308.492 663.931 306.617 Q663.931 304.881 662.75 303.955 Q661.593 303.029 657.635 302.172 L656.153 301.825 Q652.195 300.992 650.436 299.279 Q648.676 297.543 648.676 294.534 Q648.676 290.876 651.269 288.885 Q653.861 286.895 658.63 286.895 Q660.991 286.895 663.074 287.242 Q665.158 287.589 666.917 288.284 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M679.301 280.159 L679.301 287.52 L688.074 287.52 L688.074 290.83 L679.301 290.83 L679.301 304.904 Q679.301 308.075 680.158 308.978 Q681.037 309.881 683.699 309.881 L688.074 309.881 L688.074 313.446 L683.699 313.446 Q678.769 313.446 676.894 311.617 Q675.019 309.765 675.019 304.904 L675.019 290.83 L671.894 290.83 L671.894 287.52 L675.019 287.52 L675.019 280.159 L679.301 280.159 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M693.676 287.52 L697.935 287.52 L697.935 313.446 L693.676 313.446 L693.676 287.52 M693.676 277.427 L697.935 277.427 L697.935 282.821 L693.676 282.821 L693.676 277.427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M727.032 292.497 Q728.63 289.626 730.852 288.26 Q733.074 286.895 736.083 286.895 Q740.134 286.895 742.333 289.742 Q744.532 292.566 744.532 297.797 L744.532 313.446 L740.25 313.446 L740.25 297.936 Q740.25 294.21 738.93 292.404 Q737.611 290.598 734.903 290.598 Q731.592 290.598 729.671 292.797 Q727.75 294.997 727.75 298.793 L727.75 313.446 L723.468 313.446 L723.468 297.936 Q723.468 294.186 722.148 292.404 Q720.829 290.598 718.074 290.598 Q714.81 290.598 712.889 292.821 Q710.968 295.02 710.968 298.793 L710.968 313.446 L706.685 313.446 L706.685 287.52 L710.968 287.52 L710.968 291.547 Q712.426 289.163 714.463 288.029 Q716.5 286.895 719.301 286.895 Q722.125 286.895 724.093 288.33 Q726.083 289.765 727.032 292.497 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M764.81 300.413 Q759.648 300.413 757.657 301.594 Q755.666 302.774 755.666 305.621 Q755.666 307.89 757.148 309.233 Q758.653 310.552 761.222 310.552 Q764.764 310.552 766.893 308.052 Q769.046 305.529 769.046 301.362 L769.046 300.413 L764.81 300.413 M773.305 298.654 L773.305 313.446 L769.046 313.446 L769.046 309.51 Q767.588 311.871 765.412 313.006 Q763.236 314.117 760.088 314.117 Q756.106 314.117 753.745 311.895 Q751.407 309.649 751.407 305.899 Q751.407 301.524 754.324 299.302 Q757.264 297.08 763.074 297.08 L769.046 297.08 L769.046 296.663 Q769.046 293.723 767.102 292.126 Q765.18 290.506 761.685 290.506 Q759.463 290.506 757.356 291.038 Q755.25 291.571 753.305 292.635 L753.305 288.7 Q755.643 287.797 757.842 287.358 Q760.041 286.895 762.125 286.895 Q767.75 286.895 770.527 289.811 Q773.305 292.728 773.305 298.654 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M786.291 280.159 L786.291 287.52 L795.064 287.52 L795.064 290.83 L786.291 290.83 L786.291 304.904 Q786.291 308.075 787.148 308.978 Q788.027 309.881 790.689 309.881 L795.064 309.881 L795.064 313.446 L790.689 313.446 Q785.759 313.446 783.884 311.617 Q782.009 309.765 782.009 304.904 L782.009 290.83 L778.884 290.83 L778.884 287.52 L782.009 287.52 L782.009 280.159 L786.291 280.159 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M822.842 299.418 L822.842 301.501 L803.259 301.501 Q803.537 305.899 805.898 308.214 Q808.282 310.506 812.518 310.506 Q814.972 310.506 817.263 309.904 Q819.578 309.302 821.847 308.098 L821.847 312.126 Q819.555 313.098 817.148 313.608 Q814.74 314.117 812.263 314.117 Q806.06 314.117 802.425 310.506 Q798.814 306.895 798.814 300.737 Q798.814 294.372 802.24 290.645 Q805.689 286.895 811.523 286.895 Q816.754 286.895 819.786 290.274 Q822.842 293.631 822.842 299.418 M818.583 298.168 Q818.536 294.672 816.615 292.589 Q814.717 290.506 811.569 290.506 Q808.004 290.506 805.851 292.52 Q803.722 294.534 803.398 298.191 L818.583 298.168 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M846.893 291.455 L846.893 277.427 L851.152 277.427 L851.152 313.446 L846.893 313.446 L846.893 309.557 Q845.55 311.871 843.49 313.006 Q841.453 314.117 838.583 314.117 Q833.884 314.117 830.921 310.367 Q827.981 306.617 827.981 300.506 Q827.981 294.395 830.921 290.645 Q833.884 286.895 838.583 286.895 Q841.453 286.895 843.49 288.029 Q845.55 289.14 846.893 291.455 M832.379 300.506 Q832.379 305.205 834.3 307.89 Q836.245 310.552 839.624 310.552 Q843.004 310.552 844.948 307.89 Q846.893 305.205 846.893 300.506 Q846.893 295.807 844.948 293.145 Q843.004 290.46 839.624 290.46 Q836.245 290.46 834.3 293.145 Q832.379 295.807 832.379 300.506 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M885.226 277.473 Q882.124 282.798 880.619 288.006 Q879.115 293.214 879.115 298.561 Q879.115 303.909 880.619 309.163 Q882.147 314.395 885.226 319.695 L881.522 319.695 Q878.05 314.256 876.314 309.001 Q874.601 303.746 874.601 298.561 Q874.601 293.399 876.314 288.168 Q878.027 282.936 881.522 277.473 L885.226 277.473 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M908.513 291.501 Q907.795 291.085 906.939 290.899 Q906.105 290.691 905.087 290.691 Q901.476 290.691 899.531 293.052 Q897.61 295.39 897.61 299.788 L897.61 313.446 L893.328 313.446 L893.328 287.52 L897.61 287.52 L897.61 291.547 Q898.953 289.186 901.105 288.052 Q903.258 286.895 906.337 286.895 Q906.777 286.895 907.309 286.964 Q907.842 287.01 908.49 287.126 L908.513 291.501 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M934.115 299.418 L934.115 301.501 L914.531 301.501 Q914.809 305.899 917.17 308.214 Q919.554 310.506 923.791 310.506 Q926.244 310.506 928.536 309.904 Q930.851 309.302 933.119 308.098 L933.119 312.126 Q930.828 313.098 928.42 313.608 Q926.013 314.117 923.536 314.117 Q917.332 314.117 913.698 310.506 Q910.087 306.895 910.087 300.737 Q910.087 294.372 913.513 290.645 Q916.962 286.895 922.795 286.895 Q928.027 286.895 931.059 290.274 Q934.115 293.631 934.115 299.418 M929.855 298.168 Q929.809 294.672 927.888 292.589 Q925.99 290.506 922.841 290.506 Q919.277 290.506 917.124 292.52 Q914.994 294.534 914.67 298.191 L929.855 298.168 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M957.633 288.284 L957.633 292.311 Q955.827 291.385 953.883 290.922 Q951.939 290.46 949.855 290.46 Q946.684 290.46 945.087 291.432 Q943.513 292.404 943.513 294.348 Q943.513 295.83 944.647 296.686 Q945.781 297.52 949.207 298.284 L950.665 298.608 Q955.202 299.58 957.101 301.362 Q959.022 303.121 959.022 306.293 Q959.022 309.904 956.151 312.01 Q953.304 314.117 948.304 314.117 Q946.221 314.117 943.952 313.7 Q941.707 313.307 939.207 312.496 L939.207 308.098 Q941.568 309.325 943.86 309.95 Q946.152 310.552 948.397 310.552 Q951.406 310.552 953.026 309.533 Q954.647 308.492 954.647 306.617 Q954.647 304.881 953.466 303.955 Q952.309 303.029 948.351 302.172 L946.869 301.825 Q942.911 300.992 941.152 299.279 Q939.392 297.543 939.392 294.534 Q939.392 290.876 941.985 288.885 Q944.577 286.895 949.346 286.895 Q951.707 286.895 953.79 287.242 Q955.874 287.589 957.633 288.284 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M969.925 309.557 L969.925 323.307 L965.642 323.307 L965.642 287.52 L969.925 287.52 L969.925 291.455 Q971.267 289.14 973.304 288.029 Q975.364 286.895 978.212 286.895 Q982.934 286.895 985.874 290.645 Q988.836 294.395 988.836 300.506 Q988.836 306.617 985.874 310.367 Q982.934 314.117 978.212 314.117 Q975.364 314.117 973.304 313.006 Q971.267 311.871 969.925 309.557 M984.415 300.506 Q984.415 295.807 982.471 293.145 Q980.549 290.46 977.17 290.46 Q973.79 290.46 971.846 293.145 Q969.925 295.807 969.925 300.506 Q969.925 305.205 971.846 307.89 Q973.79 310.552 977.17 310.552 Q980.549 310.552 982.471 307.89 Q984.415 305.205 984.415 300.506 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1005.94 290.506 Q1002.52 290.506 1000.53 293.191 Q998.535 295.853 998.535 300.506 Q998.535 305.159 1000.5 307.844 Q1002.49 310.506 1005.94 310.506 Q1009.35 310.506 1011.34 307.821 Q1013.33 305.135 1013.33 300.506 Q1013.33 295.899 1011.34 293.214 Q1009.35 290.506 1005.94 290.506 M1005.94 286.895 Q1011.5 286.895 1014.67 290.506 Q1017.84 294.117 1017.84 300.506 Q1017.84 306.871 1014.67 310.506 Q1011.5 314.117 1005.94 314.117 Q1000.36 314.117 997.193 310.506 Q994.045 306.871 994.045 300.506 Q994.045 294.117 997.193 290.506 Q1000.36 286.895 1005.94 286.895 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1046.45 297.797 L1046.45 313.446 L1042.19 313.446 L1042.19 297.936 Q1042.19 294.256 1040.76 292.427 Q1039.32 290.598 1036.45 290.598 Q1033 290.598 1031.01 292.797 Q1029.02 294.997 1029.02 298.793 L1029.02 313.446 L1024.74 313.446 L1024.74 287.52 L1029.02 287.52 L1029.02 291.547 Q1030.55 289.21 1032.61 288.052 Q1034.69 286.895 1037.4 286.895 Q1041.87 286.895 1044.16 289.672 Q1046.45 292.427 1046.45 297.797 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1071.47 288.284 L1071.47 292.311 Q1069.67 291.385 1067.72 290.922 Q1065.78 290.46 1063.7 290.46 Q1060.53 290.46 1058.93 291.432 Q1057.35 292.404 1057.35 294.348 Q1057.35 295.83 1058.49 296.686 Q1059.62 297.52 1063.05 298.284 L1064.51 298.608 Q1069.04 299.58 1070.94 301.362 Q1072.86 303.121 1072.86 306.293 Q1072.86 309.904 1069.99 312.01 Q1067.15 314.117 1062.15 314.117 Q1060.06 314.117 1057.79 313.7 Q1055.55 313.307 1053.05 312.496 L1053.05 308.098 Q1055.41 309.325 1057.7 309.95 Q1059.99 310.552 1062.24 310.552 Q1065.25 310.552 1066.87 309.533 Q1068.49 308.492 1068.49 306.617 Q1068.49 304.881 1067.31 303.955 Q1066.15 303.029 1062.19 302.172 L1060.71 301.825 Q1056.75 300.992 1054.99 299.279 Q1053.23 297.543 1053.23 294.534 Q1053.23 290.876 1055.83 288.885 Q1058.42 286.895 1063.19 286.895 Q1065.55 286.895 1067.63 287.242 Q1069.72 287.589 1071.47 288.284 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1101.82 299.418 L1101.82 301.501 L1082.24 301.501 Q1082.52 305.899 1084.88 308.214 Q1087.26 310.506 1091.5 310.506 Q1093.95 310.506 1096.24 309.904 Q1098.56 309.302 1100.83 308.098 L1100.83 312.126 Q1098.53 313.098 1096.13 313.608 Q1093.72 314.117 1091.24 314.117 Q1085.04 314.117 1081.41 310.506 Q1077.79 306.895 1077.79 300.737 Q1077.79 294.372 1081.22 290.645 Q1084.67 286.895 1090.5 286.895 Q1095.73 286.895 1098.77 290.274 Q1101.82 293.631 1101.82 299.418 M1097.56 298.168 Q1097.52 294.672 1095.6 292.589 Q1093.7 290.506 1090.55 290.506 Q1086.98 290.506 1084.83 292.52 Q1082.7 294.534 1082.38 298.191 L1097.56 298.168 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1140.94 291.455 L1140.94 277.427 L1145.2 277.427 L1145.2 313.446 L1140.94 313.446 L1140.94 309.557 Q1139.6 311.871 1137.54 313.006 Q1135.5 314.117 1132.63 314.117 Q1127.93 314.117 1124.97 310.367 Q1122.03 306.617 1122.03 300.506 Q1122.03 294.395 1124.97 290.645 Q1127.93 286.895 1132.63 286.895 Q1135.5 286.895 1137.54 288.029 Q1139.6 289.14 1140.94 291.455 M1126.43 300.506 Q1126.43 305.205 1128.35 307.89 Q1130.29 310.552 1133.67 310.552 Q1137.05 310.552 1139 307.89 Q1140.94 305.205 1140.94 300.506 Q1140.94 295.807 1139 293.145 Q1137.05 290.46 1133.67 290.46 Q1130.29 290.46 1128.35 293.145 Q1126.43 295.807 1126.43 300.506 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1164.02 290.506 Q1160.59 290.506 1158.6 293.191 Q1156.61 295.853 1156.61 300.506 Q1156.61 305.159 1158.58 307.844 Q1160.57 310.506 1164.02 310.506 Q1167.42 310.506 1169.41 307.821 Q1171.4 305.135 1171.4 300.506 Q1171.4 295.899 1169.41 293.214 Q1167.42 290.506 1164.02 290.506 M1164.02 286.895 Q1169.58 286.895 1172.75 290.506 Q1175.92 294.117 1175.92 300.506 Q1175.92 306.871 1172.75 310.506 Q1169.58 314.117 1164.02 314.117 Q1158.44 314.117 1155.27 310.506 Q1152.12 306.871 1152.12 300.506 Q1152.12 294.117 1155.27 290.506 Q1158.44 286.895 1164.02 286.895 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1196.1 277.427 L1196.1 280.969 L1192.03 280.969 Q1189.74 280.969 1188.84 281.895 Q1187.96 282.821 1187.96 285.228 L1187.96 287.52 L1194.97 287.52 L1194.97 290.83 L1187.96 290.83 L1187.96 313.446 L1183.67 313.446 L1183.67 290.83 L1179.6 290.83 L1179.6 287.52 L1183.67 287.52 L1183.67 285.714 Q1183.67 281.385 1185.69 279.418 Q1187.7 277.427 1192.08 277.427 L1196.1 277.427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1215.48 312.728 L1215.48 308.469 Q1217.24 309.302 1219.04 309.742 Q1220.85 310.182 1222.59 310.182 Q1227.21 310.182 1229.65 307.08 Q1232.1 303.955 1232.45 297.612 Q1231.1 299.603 1229.04 300.668 Q1226.98 301.733 1224.48 301.733 Q1219.3 301.733 1216.27 298.608 Q1213.26 295.459 1213.26 290.02 Q1213.26 284.696 1216.4 281.478 Q1219.55 278.261 1224.78 278.261 Q1230.78 278.261 1233.93 282.867 Q1237.1 287.45 1237.1 296.2 Q1237.1 304.371 1233.21 309.256 Q1229.34 314.117 1222.79 314.117 Q1221.03 314.117 1219.23 313.77 Q1217.42 313.422 1215.48 312.728 M1224.78 298.075 Q1227.93 298.075 1229.76 295.922 Q1231.61 293.77 1231.61 290.02 Q1231.61 286.293 1229.76 284.14 Q1227.93 281.964 1224.78 281.964 Q1221.64 281.964 1219.78 284.14 Q1217.96 286.293 1217.96 290.02 Q1217.96 293.77 1219.78 295.922 Q1221.64 298.075 1224.78 298.075 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip950)" d="M1244.23 277.473 L1247.93 277.473 Q1251.4 282.936 1253.12 288.168 Q1254.85 293.399 1254.85 298.561 Q1254.85 303.746 1253.12 309.001 Q1251.4 314.256 1247.93 319.695 L1244.23 319.695 Q1247.31 314.395 1248.81 309.163 Q1250.34 303.909 1250.34 298.561 Q1250.34 293.214 1248.81 288.006 Q1247.31 282.798 1244.23 277.473 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /></svg>
<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="700" height="300" viewBox="0 0 2800 1200">
<defs>
  <clipPath id="clip040">
    <rect x="0" y="0" width="2800" height="1200"/>
  </clipPath>
</defs>
<path clip-path="url(#clip040)" d="M0 1200 L2800 1200 L2800 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<defs>
  <clipPath id="clip041">
    <rect x="560" y="0" width="1961" height="1200"/>
  </clipPath>
</defs>
<path clip-path="url(#clip040)" d="M305.998 993.502 L2752.76 993.502 L2752.76 164.864 L305.998 164.864  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<defs>
  <clipPath id="clip042">
    <rect x="305" y="164" width="2448" height="830"/>
  </clipPath>
</defs>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="375.246,993.502 375.246,164.864 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="836.898,993.502 836.898,164.864 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1298.55,993.502 1298.55,164.864 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1760.2,993.502 1760.2,164.864 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2221.86,993.502 2221.86,164.864 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2683.51,993.502 2683.51,164.864 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="305.998,866.343 2752.76,866.343 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="305.998,681.977 2752.76,681.977 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="305.998,497.611 2752.76,497.611 "/>
<polyline clip-path="url(#clip042)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="305.998,313.245 2752.76,313.245 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.998,993.502 2752.76,993.502 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="375.246,993.502 375.246,974.604 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="836.898,993.502 836.898,974.604 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1298.55,993.502 1298.55,974.604 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1760.2,993.502 1760.2,974.604 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2221.86,993.502 2221.86,974.604 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2683.51,993.502 2683.51,974.604 "/>
<path clip-path="url(#clip040)" d="M375.246 1027.62 Q371.635 1027.62 369.806 1031.19 Q368 1034.73 368 1041.86 Q368 1048.96 369.806 1052.53 Q371.635 1056.07 375.246 1056.07 Q378.88 1056.07 380.686 1052.53 Q382.514 1048.96 382.514 1041.86 Q382.514 1034.73 380.686 1031.19 Q378.88 1027.62 375.246 1027.62 M375.246 1023.92 Q381.056 1023.92 384.111 1028.52 Q387.19 1033.11 387.19 1041.86 Q387.19 1050.58 384.111 1055.19 Q381.056 1059.77 375.246 1059.77 Q369.436 1059.77 366.357 1055.19 Q363.301 1050.58 363.301 1041.86 Q363.301 1033.11 366.357 1028.52 Q369.436 1023.92 375.246 1023.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M827.28 1055.17 L834.919 1055.17 L834.919 1028.8 L826.609 1030.47 L826.609 1026.21 L834.873 1024.54 L839.549 1024.54 L839.549 1055.17 L847.188 1055.17 L847.188 1059.1 L827.28 1059.1 L827.28 1055.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1293.2 1055.17 L1309.52 1055.17 L1309.52 1059.1 L1287.58 1059.1 L1287.58 1055.17 Q1290.24 1052.41 1294.82 1047.78 Q1299.43 1043.13 1300.61 1041.79 Q1302.86 1039.26 1303.74 1037.53 Q1304.64 1035.77 1304.64 1034.08 Q1304.64 1031.32 1302.69 1029.59 Q1300.77 1027.85 1297.67 1027.85 Q1295.47 1027.85 1293.02 1028.62 Q1290.59 1029.38 1287.81 1030.93 L1287.81 1026.21 Q1290.63 1025.07 1293.09 1024.5 Q1295.54 1023.92 1297.58 1023.92 Q1302.95 1023.92 1306.14 1026.6 Q1309.34 1029.29 1309.34 1033.78 Q1309.34 1035.91 1308.53 1037.83 Q1307.74 1039.73 1305.63 1042.32 Q1305.06 1042.99 1301.95 1046.21 Q1298.85 1049.4 1293.2 1055.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1764.45 1040.47 Q1767.81 1041.19 1769.68 1043.45 Q1771.58 1045.72 1771.58 1049.06 Q1771.58 1054.17 1768.06 1056.97 Q1764.54 1059.77 1758.06 1059.77 Q1755.89 1059.77 1753.57 1059.33 Q1751.28 1058.92 1748.83 1058.06 L1748.83 1053.55 Q1750.77 1054.68 1753.09 1055.26 Q1755.4 1055.84 1757.92 1055.84 Q1762.32 1055.84 1764.61 1054.1 Q1766.93 1052.37 1766.93 1049.06 Q1766.93 1046 1764.77 1044.29 Q1762.65 1042.55 1758.83 1042.55 L1754.8 1042.55 L1754.8 1038.71 L1759.01 1038.71 Q1762.46 1038.71 1764.29 1037.34 Q1766.12 1035.95 1766.12 1033.36 Q1766.12 1030.7 1764.22 1029.29 Q1762.34 1027.85 1758.83 1027.85 Q1756.9 1027.85 1754.71 1028.27 Q1752.51 1028.69 1749.87 1029.57 L1749.87 1025.4 Q1752.53 1024.66 1754.84 1024.29 Q1757.18 1023.92 1759.24 1023.92 Q1764.57 1023.92 1767.67 1026.35 Q1770.77 1028.75 1770.77 1032.88 Q1770.77 1035.75 1769.13 1037.74 Q1767.48 1039.7 1764.45 1040.47 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M2224.86 1028.62 L2213.06 1047.07 L2224.86 1047.07 L2224.86 1028.62 M2223.64 1024.54 L2229.52 1024.54 L2229.52 1047.07 L2234.45 1047.07 L2234.45 1050.95 L2229.52 1050.95 L2229.52 1059.1 L2224.86 1059.1 L2224.86 1050.95 L2209.26 1050.95 L2209.26 1046.44 L2223.64 1024.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M2673.79 1024.54 L2692.14 1024.54 L2692.14 1028.48 L2678.07 1028.48 L2678.07 1036.95 Q2679.09 1036.6 2680.11 1036.44 Q2681.12 1036.25 2682.14 1036.25 Q2687.93 1036.25 2691.31 1039.43 Q2694.69 1042.6 2694.69 1048.01 Q2694.69 1053.59 2691.22 1056.69 Q2687.74 1059.77 2681.42 1059.77 Q2679.25 1059.77 2676.98 1059.4 Q2674.73 1059.03 2672.33 1058.29 L2672.33 1053.59 Q2674.41 1054.73 2676.63 1055.28 Q2678.86 1055.84 2681.33 1055.84 Q2685.34 1055.84 2687.67 1053.73 Q2690.01 1051.63 2690.01 1048.01 Q2690.01 1044.4 2687.67 1042.3 Q2685.34 1040.19 2681.33 1040.19 Q2679.46 1040.19 2677.58 1040.61 Q2675.73 1041.02 2673.79 1041.9 L2673.79 1024.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1416.83 1098.6 L1416.83 1108.72 L1428.89 1108.72 L1428.89 1113.27 L1416.83 1113.27 L1416.83 1132.62 Q1416.83 1136.98 1418.01 1138.22 Q1419.22 1139.46 1422.88 1139.46 L1428.89 1139.46 L1428.89 1144.37 L1422.88 1144.37 Q1416.1 1144.37 1413.52 1141.85 Q1410.94 1139.31 1410.94 1132.62 L1410.94 1113.27 L1406.65 1113.27 L1406.65 1108.72 L1410.94 1108.72 L1410.94 1098.6 L1416.83 1098.6 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1436.6 1108.72 L1442.45 1108.72 L1442.45 1144.37 L1436.6 1144.37 L1436.6 1108.72 M1436.6 1094.84 L1442.45 1094.84 L1442.45 1102.26 L1436.6 1102.26 L1436.6 1094.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1482.46 1115.56 Q1484.66 1111.61 1487.71 1109.74 Q1490.77 1107.86 1494.91 1107.86 Q1500.48 1107.86 1503.5 1111.77 Q1506.52 1115.66 1506.52 1122.85 L1506.52 1144.37 L1500.64 1144.37 L1500.64 1123.04 Q1500.64 1117.92 1498.82 1115.43 Q1497.01 1112.95 1493.28 1112.95 Q1488.73 1112.95 1486.09 1115.97 Q1483.45 1119 1483.45 1124.22 L1483.45 1144.37 L1477.56 1144.37 L1477.56 1123.04 Q1477.56 1117.88 1475.75 1115.43 Q1473.93 1112.95 1470.14 1112.95 Q1465.66 1112.95 1463.01 1116.01 Q1460.37 1119.03 1460.37 1124.22 L1460.37 1144.37 L1454.48 1144.37 L1454.48 1108.72 L1460.37 1108.72 L1460.37 1114.26 Q1462.38 1110.98 1465.18 1109.42 Q1467.98 1107.86 1471.83 1107.86 Q1475.71 1107.86 1478.42 1109.83 Q1481.16 1111.81 1482.46 1115.56 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1548.7 1125.08 L1548.7 1127.94 L1521.77 1127.94 Q1522.15 1133.99 1525.4 1137.17 Q1528.68 1140.32 1534.5 1140.32 Q1537.88 1140.32 1541.03 1139.5 Q1544.21 1138.67 1547.33 1137.01 L1547.33 1142.55 Q1544.18 1143.89 1540.87 1144.59 Q1537.56 1145.29 1534.15 1145.29 Q1525.62 1145.29 1520.62 1140.32 Q1515.66 1135.36 1515.66 1126.89 Q1515.66 1118.14 1520.37 1113.01 Q1525.11 1107.86 1533.13 1107.86 Q1540.33 1107.86 1544.5 1112.51 Q1548.7 1117.12 1548.7 1125.08 M1542.84 1123.36 Q1542.78 1118.55 1540.13 1115.69 Q1537.52 1112.82 1533.2 1112.82 Q1528.29 1112.82 1525.33 1115.59 Q1522.41 1118.36 1521.96 1123.39 L1542.84 1123.36 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1593.1 1094.9 Q1588.83 1102.23 1586.76 1109.39 Q1584.69 1116.55 1584.69 1123.9 Q1584.69 1131.25 1586.76 1138.48 Q1588.86 1145.67 1593.1 1152.96 L1588.01 1152.96 Q1583.23 1145.48 1580.84 1138.25 Q1578.49 1131.03 1578.49 1123.9 Q1578.49 1116.8 1580.84 1109.61 Q1583.2 1102.42 1588.01 1094.9 L1593.1 1094.9 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1627.19 1109.77 L1627.19 1115.31 Q1624.7 1114.03 1622.03 1113.4 Q1619.36 1112.76 1616.49 1112.76 Q1612.13 1112.76 1609.93 1114.1 Q1607.77 1115.43 1607.77 1118.11 Q1607.77 1120.14 1609.33 1121.32 Q1610.89 1122.47 1615.6 1123.52 L1617.61 1123.96 Q1623.84 1125.3 1626.45 1127.75 Q1629.1 1130.17 1629.1 1134.53 Q1629.1 1139.5 1625.15 1142.39 Q1621.23 1145.29 1614.36 1145.29 Q1611.49 1145.29 1608.38 1144.72 Q1605.29 1144.18 1601.85 1143.06 L1601.85 1137.01 Q1605.1 1138.7 1608.25 1139.56 Q1611.4 1140.39 1614.49 1140.39 Q1618.62 1140.39 1620.85 1138.99 Q1623.08 1137.55 1623.08 1134.98 Q1623.08 1132.59 1621.46 1131.32 Q1619.87 1130.04 1614.42 1128.87 L1612.39 1128.39 Q1606.94 1127.24 1604.52 1124.89 Q1602.11 1122.5 1602.11 1118.36 Q1602.11 1113.33 1605.67 1110.6 Q1609.23 1107.86 1615.79 1107.86 Q1619.04 1107.86 1621.9 1108.34 Q1624.77 1108.81 1627.19 1109.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1637.5 1094.9 L1642.59 1094.9 Q1647.37 1102.42 1649.72 1109.61 Q1652.11 1116.8 1652.11 1123.9 Q1652.11 1131.03 1649.72 1138.25 Q1647.37 1145.48 1642.59 1152.96 L1637.5 1152.96 Q1641.73 1145.67 1643.8 1138.48 Q1645.9 1131.25 1645.9 1123.9 Q1645.9 1116.55 1643.8 1109.39 Q1641.73 1102.23 1637.5 1094.9 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.998,993.502 305.998,164.864 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.998,866.343 324.896,866.343 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.998,681.977 324.896,681.977 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.998,497.611 324.896,497.611 "/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="305.998,313.245 324.896,313.245 "/>
<path clip-path="url(#clip040)" d="M158.651 866.794 L188.327 866.794 L188.327 870.729 L158.651 870.729 L158.651 866.794 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M208.419 852.141 Q204.808 852.141 202.98 855.706 Q201.174 859.248 201.174 866.377 Q201.174 873.484 202.98 877.049 Q204.808 880.59 208.419 880.59 Q212.054 880.59 213.859 877.049 Q215.688 873.484 215.688 866.377 Q215.688 859.248 213.859 855.706 Q212.054 852.141 208.419 852.141 M208.419 848.438 Q214.23 848.438 217.285 853.044 Q220.364 857.627 220.364 866.377 Q220.364 875.104 217.285 879.711 Q214.23 884.294 208.419 884.294 Q202.609 884.294 199.531 879.711 Q196.475 875.104 196.475 866.377 Q196.475 857.627 199.531 853.044 Q202.609 848.438 208.419 848.438 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M228.581 877.743 L233.466 877.743 L233.466 883.623 L228.581 883.623 L228.581 877.743 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M247.679 879.687 L263.998 879.687 L263.998 883.623 L242.054 883.623 L242.054 879.687 Q244.716 876.933 249.299 872.303 Q253.905 867.65 255.086 866.308 Q257.331 863.785 258.211 862.049 Q259.114 860.289 259.114 858.6 Q259.114 855.845 257.169 854.109 Q255.248 852.373 252.146 852.373 Q249.947 852.373 247.493 853.137 Q245.063 853.901 242.285 855.451 L242.285 850.729 Q245.109 849.595 247.563 849.016 Q250.016 848.438 252.054 848.438 Q257.424 848.438 260.618 851.123 Q263.813 853.808 263.813 858.299 Q263.813 860.428 263.003 862.35 Q262.215 864.248 260.109 866.84 Q259.53 867.512 256.428 870.729 Q253.327 873.924 247.679 879.687 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M158.281 682.428 L187.957 682.428 L187.957 686.363 L158.281 686.363 L158.281 682.428 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M208.049 667.775 Q204.438 667.775 202.609 671.34 Q200.804 674.882 200.804 682.011 Q200.804 689.118 202.609 692.683 Q204.438 696.224 208.049 696.224 Q211.683 696.224 213.489 692.683 Q215.318 689.118 215.318 682.011 Q215.318 674.882 213.489 671.34 Q211.683 667.775 208.049 667.775 M208.049 664.072 Q213.859 664.072 216.915 668.678 Q219.993 673.261 219.993 682.011 Q219.993 690.738 216.915 695.345 Q213.859 699.928 208.049 699.928 Q202.239 699.928 199.16 695.345 Q196.105 690.738 196.105 682.011 Q196.105 673.261 199.16 668.678 Q202.239 664.072 208.049 664.072 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M228.211 693.377 L233.095 693.377 L233.095 699.257 L228.211 699.257 L228.211 693.377 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M244.091 695.322 L251.729 695.322 L251.729 668.956 L243.419 670.623 L243.419 666.363 L251.683 664.697 L256.359 664.697 L256.359 695.322 L263.998 695.322 L263.998 699.257 L244.091 699.257 L244.091 695.322 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M206.822 483.409 Q203.211 483.409 201.382 486.974 Q199.577 490.516 199.577 497.645 Q199.577 504.752 201.382 508.317 Q203.211 511.858 206.822 511.858 Q210.457 511.858 212.262 508.317 Q214.091 504.752 214.091 497.645 Q214.091 490.516 212.262 486.974 Q210.457 483.409 206.822 483.409 M206.822 479.706 Q212.632 479.706 215.688 484.312 Q218.767 488.896 218.767 497.645 Q218.767 506.372 215.688 510.979 Q212.632 515.562 206.822 515.562 Q201.012 515.562 197.933 510.979 Q194.878 506.372 194.878 497.645 Q194.878 488.896 197.933 484.312 Q201.012 479.706 206.822 479.706 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M226.984 509.011 L231.868 509.011 L231.868 514.891 L226.984 514.891 L226.984 509.011 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M252.054 483.409 Q248.442 483.409 246.614 486.974 Q244.808 490.516 244.808 497.645 Q244.808 504.752 246.614 508.317 Q248.442 511.858 252.054 511.858 Q255.688 511.858 257.493 508.317 Q259.322 504.752 259.322 497.645 Q259.322 490.516 257.493 486.974 Q255.688 483.409 252.054 483.409 M252.054 479.706 Q257.864 479.706 260.919 484.312 Q263.998 488.896 263.998 497.645 Q263.998 506.372 260.919 510.979 Q257.864 515.562 252.054 515.562 Q246.243 515.562 243.165 510.979 Q240.109 506.372 240.109 497.645 Q240.109 488.896 243.165 484.312 Q246.243 479.706 252.054 479.706 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M208.049 299.043 Q204.438 299.043 202.609 302.608 Q200.804 306.15 200.804 313.28 Q200.804 320.386 202.609 323.951 Q204.438 327.492 208.049 327.492 Q211.683 327.492 213.489 323.951 Q215.318 320.386 215.318 313.28 Q215.318 306.15 213.489 302.608 Q211.683 299.043 208.049 299.043 M208.049 295.34 Q213.859 295.34 216.915 299.946 Q219.993 304.53 219.993 313.28 Q219.993 322.006 216.915 326.613 Q213.859 331.196 208.049 331.196 Q202.239 331.196 199.16 326.613 Q196.105 322.006 196.105 313.28 Q196.105 304.53 199.16 299.946 Q202.239 295.34 208.049 295.34 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M228.211 324.645 L233.095 324.645 L233.095 330.525 L228.211 330.525 L228.211 324.645 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M244.091 326.59 L251.729 326.59 L251.729 300.224 L243.419 301.891 L243.419 297.631 L251.683 295.965 L256.359 295.965 L256.359 326.59 L263.998 326.59 L263.998 330.525 L244.091 330.525 L244.091 326.59 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M52.4997 735.461 L57.3694 735.461 L57.3694 741.063 Q57.3694 744.214 58.6426 745.455 Q59.9157 746.665 63.2259 746.665 L66.3769 746.665 L66.3769 737.021 L70.9284 737.021 L70.9284 746.665 L102.025 746.665 L102.025 752.553 L70.9284 752.553 L70.9284 758.155 L66.3769 758.155 L66.3769 752.553 L63.8943 752.553 Q57.9423 752.553 55.2369 749.784 Q52.4997 747.015 52.4997 740.999 L52.4997 735.461 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M70.4828 716.746 Q70.4828 721.457 74.1749 724.194 Q77.8352 726.931 84.2327 726.931 Q90.6302 726.931 94.3223 724.226 Q97.9826 721.488 97.9826 716.746 Q97.9826 712.067 94.2905 709.33 Q90.5984 706.593 84.2327 706.593 Q77.8988 706.593 74.2067 709.33 Q70.4828 712.067 70.4828 716.746 M65.5175 716.746 Q65.5175 709.107 70.4828 704.747 Q75.448 700.386 84.2327 700.386 Q92.9856 700.386 97.9826 704.747 Q102.948 709.107 102.948 716.746 Q102.948 724.417 97.9826 728.777 Q92.9856 733.106 84.2327 733.106 Q75.448 733.106 70.4828 728.777 Q65.5175 724.417 65.5175 716.746 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M71.8514 670.022 Q71.2785 671.008 71.0239 672.186 Q70.7374 673.332 70.7374 674.732 Q70.7374 679.698 73.9839 682.371 Q77.1986 685.013 83.246 685.013 L102.025 685.013 L102.025 690.901 L66.3769 690.901 L66.3769 685.013 L71.9151 685.013 Q68.6686 683.167 67.109 680.207 Q65.5175 677.247 65.5175 673.014 Q65.5175 672.409 65.613 671.677 Q65.6767 670.945 65.8358 670.054 L71.8514 670.022 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M67.7455 639.657 L73.22 639.657 Q71.8514 642.14 71.183 644.654 Q70.4828 647.137 70.4828 649.683 Q70.4828 655.381 74.1112 658.532 Q77.7079 661.683 84.2327 661.683 Q90.7576 661.683 94.386 658.532 Q97.9826 655.381 97.9826 649.683 Q97.9826 647.137 97.3142 644.654 Q96.614 642.14 95.2454 639.657 L100.656 639.657 Q101.802 642.108 102.375 644.75 Q102.948 647.36 102.948 650.32 Q102.948 658.373 97.8871 663.115 Q92.8264 667.857 84.2327 667.857 Q75.5117 667.857 70.5146 663.083 Q65.5175 658.277 65.5175 649.938 Q65.5175 647.233 66.0904 644.654 Q66.6315 642.076 67.7455 639.657 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M82.7368 598.98 L85.6013 598.98 L85.6013 625.907 Q91.6488 625.525 94.8316 622.279 Q97.9826 619.001 97.9826 613.176 Q97.9826 609.802 97.1551 606.651 Q96.3275 603.468 94.6725 600.349 L100.211 600.349 Q101.547 603.5 102.248 606.81 Q102.948 610.12 102.948 613.526 Q102.948 622.056 97.9826 627.053 Q93.0174 632.018 84.551 632.018 Q75.7981 632.018 70.6737 627.308 Q65.5175 622.565 65.5175 614.545 Q65.5175 607.351 70.1645 603.182 Q74.7796 598.98 82.7368 598.98 M81.018 604.837 Q76.2119 604.901 73.3473 607.542 Q70.4828 610.152 70.4828 614.481 Q70.4828 619.383 73.2519 622.343 Q76.0209 625.271 81.0499 625.716 L81.018 604.837 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M66.3769 572.849 L66.3769 566.643 L96.2957 555.503 L66.3769 544.363 L66.3769 538.156 L102.025 551.524 L102.025 559.481 L66.3769 572.849 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M84.1054 513.871 Q84.1054 520.969 85.7286 523.706 Q87.3519 526.443 91.2668 526.443 Q94.386 526.443 96.2321 524.406 Q98.0463 522.337 98.0463 518.804 Q98.0463 513.935 94.6088 511.006 Q91.1395 508.046 85.4104 508.046 L84.1054 508.046 L84.1054 513.871 M81.6864 502.19 L102.025 502.19 L102.025 508.046 L96.614 508.046 Q99.8605 510.052 101.42 513.043 Q102.948 516.035 102.948 520.364 Q102.948 525.839 99.8923 529.085 Q96.805 532.3 91.6488 532.3 Q85.6332 532.3 82.5776 528.289 Q79.5221 524.247 79.5221 516.258 L79.5221 508.046 L78.9492 508.046 Q74.9069 508.046 72.7108 510.72 Q70.4828 513.362 70.4828 518.168 Q70.4828 521.223 71.2148 524.12 Q71.9469 527.016 73.411 529.69 L68.0002 529.69 Q66.7588 526.475 66.1541 523.451 Q65.5175 520.428 65.5175 517.563 Q65.5175 509.829 69.5279 506.009 Q73.5383 502.19 81.6864 502.19 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M52.4997 490.127 L52.4997 484.27 L102.025 484.27 L102.025 490.127 L52.4997 490.127 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M87.9566 472.621 L66.3769 472.621 L66.3769 466.765 L87.7338 466.765 Q92.7946 466.765 95.3409 464.791 Q97.8553 462.818 97.8553 458.871 Q97.8553 454.129 94.8316 451.392 Q91.8079 448.622 86.588 448.622 L66.3769 448.622 L66.3769 442.766 L102.025 442.766 L102.025 448.622 L96.5503 448.622 Q99.7969 450.755 101.388 453.588 Q102.948 456.389 102.948 460.113 Q102.948 466.255 99.1285 469.438 Q95.309 472.621 87.9566 472.621 M65.5175 457.885 L65.5175 457.885 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M82.7368 400.211 L85.6013 400.211 L85.6013 427.138 Q91.6488 426.756 94.8316 423.51 Q97.9826 420.231 97.9826 414.407 Q97.9826 411.033 97.1551 407.882 Q96.3275 404.699 94.6725 401.58 L100.211 401.58 Q101.547 404.731 102.248 408.041 Q102.948 411.351 102.948 414.757 Q102.948 423.287 97.9826 428.284 Q93.0174 433.249 84.551 433.249 Q75.7981 433.249 70.6737 428.539 Q65.5175 423.796 65.5175 415.775 Q65.5175 408.582 70.1645 404.413 Q74.7796 400.211 82.7368 400.211 M81.018 406.068 Q76.2119 406.131 73.3473 408.773 Q70.4828 411.383 70.4828 415.712 Q70.4828 420.613 73.2519 423.573 Q76.0209 426.502 81.0499 426.947 L81.018 406.068 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M861.95 27.2059 L869.404 27.2059 L869.404 72.576 L861.95 72.576 L861.95 27.2059 M861.95 9.54393 L869.404 9.54393 L869.404 18.9825 L861.95 18.9825 L861.95 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M922.713 45.1919 L922.713 72.576 L915.26 72.576 L915.26 45.4349 Q915.26 38.994 912.748 35.7938 Q910.237 32.5936 905.214 32.5936 Q899.178 32.5936 895.694 36.4419 Q892.21 40.2903 892.21 46.9338 L892.21 72.576 L884.716 72.576 L884.716 27.2059 L892.21 27.2059 L892.21 34.2544 Q894.884 30.163 898.489 28.1376 Q902.135 26.1121 906.874 26.1121 Q914.693 26.1121 918.703 30.9732 Q922.713 35.7938 922.713 45.1919 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M944.791 65.7705 L944.791 89.8329 L937.297 89.8329 L937.297 27.2059 L944.791 27.2059 L944.791 34.0924 Q947.14 30.0415 950.705 28.0971 Q954.311 26.1121 959.293 26.1121 Q967.557 26.1121 972.702 32.6746 Q977.887 39.2371 977.887 49.9314 Q977.887 60.6258 972.702 67.1883 Q967.557 73.7508 959.293 73.7508 Q954.311 73.7508 950.705 71.8063 Q947.14 69.8214 944.791 65.7705 M970.15 49.9314 Q970.15 41.7081 966.747 37.0496 Q963.385 32.3505 957.47 32.3505 Q951.556 32.3505 948.153 37.0496 Q944.791 41.7081 944.791 49.9314 Q944.791 58.1548 948.153 62.8538 Q951.556 67.5124 957.47 67.5124 Q963.385 67.5124 966.747 62.8538 Q970.15 58.1548 970.15 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M989.472 54.671 L989.472 27.2059 L996.926 27.2059 L996.926 54.3874 Q996.926 60.8284 999.438 64.0691 Q1001.95 67.2693 1006.97 67.2693 Q1013.01 67.2693 1016.49 63.421 Q1020.02 59.5726 1020.02 52.9291 L1020.02 27.2059 L1027.47 27.2059 L1027.47 72.576 L1020.02 72.576 L1020.02 65.6084 Q1017.3 69.7404 1013.7 71.7658 Q1010.13 73.7508 1005.39 73.7508 Q997.574 73.7508 993.523 68.8897 Q989.472 64.0286 989.472 54.671 M1008.23 26.1121 L1008.23 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1050.2 14.324 L1050.2 27.2059 L1065.55 27.2059 L1065.55 32.9987 L1050.2 32.9987 L1050.2 57.6282 Q1050.2 63.1779 1051.69 64.7578 Q1053.23 66.3376 1057.89 66.3376 L1065.55 66.3376 L1065.55 72.576 L1057.89 72.576 Q1049.26 72.576 1045.98 69.3758 Q1042.7 66.1351 1042.7 57.6282 L1042.7 32.9987 L1037.23 32.9987 L1037.23 27.2059 L1042.7 27.2059 L1042.7 14.324 L1050.2 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1140.53 48.0275 L1140.53 51.6733 L1106.26 51.6733 Q1106.75 59.3701 1110.88 63.421 Q1115.05 67.4314 1122.46 67.4314 Q1126.76 67.4314 1130.77 66.3781 Q1134.82 65.3249 1138.79 63.2184 L1138.79 70.267 Q1134.78 71.9684 1130.57 72.8596 Q1126.35 73.7508 1122.02 73.7508 Q1111.16 73.7508 1104.8 67.4314 Q1098.48 61.1119 1098.48 50.3365 Q1098.48 39.1965 1104.48 32.6746 Q1110.51 26.1121 1120.72 26.1121 Q1129.88 26.1121 1135.18 32.0264 Q1140.53 37.9003 1140.53 48.0275 M1133.08 45.84 Q1133 39.7232 1129.63 36.0774 Q1126.31 32.4315 1120.8 32.4315 Q1114.56 32.4315 1110.8 35.9558 Q1107.07 39.4801 1106.5 45.8805 L1133.08 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1181.69 28.5427 L1181.69 35.5912 Q1178.53 33.9709 1175.13 33.1607 Q1171.72 32.3505 1168.08 32.3505 Q1162.53 32.3505 1159.73 34.0519 Q1156.98 35.7533 1156.98 39.156 Q1156.98 41.7486 1158.96 43.2475 Q1160.95 44.7058 1166.94 46.0426 L1169.49 46.6097 Q1177.43 48.3111 1180.76 51.4303 Q1184.12 54.509 1184.12 60.0587 Q1184.12 66.3781 1179.1 70.0644 Q1174.11 73.7508 1165.36 73.7508 Q1161.72 73.7508 1157.75 73.0216 Q1153.82 72.3329 1149.44 70.9151 L1149.44 63.2184 Q1153.57 65.3654 1157.58 66.4591 Q1161.6 67.5124 1165.52 67.5124 Q1170.79 67.5124 1173.63 65.73 Q1176.46 63.9071 1176.46 60.6258 Q1176.46 57.5877 1174.4 55.9673 Q1172.37 54.3469 1165.44 52.8481 L1162.85 52.2405 Q1155.92 50.7821 1152.85 47.7845 Q1149.77 44.7463 1149.77 39.4801 Q1149.77 33.0797 1154.3 29.5959 Q1158.84 26.1121 1167.19 26.1121 Q1171.32 26.1121 1174.96 26.7198 Q1178.61 27.3274 1181.69 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1203.36 14.324 L1203.36 27.2059 L1218.71 27.2059 L1218.71 32.9987 L1203.36 32.9987 L1203.36 57.6282 Q1203.36 63.1779 1204.86 64.7578 Q1206.4 66.3376 1211.06 66.3376 L1218.71 66.3376 L1218.71 72.576 L1211.06 72.576 Q1202.43 72.576 1199.15 69.3758 Q1195.87 66.1351 1195.87 57.6282 L1195.87 32.9987 L1190.4 32.9987 L1190.4 27.2059 L1195.87 27.2059 L1195.87 14.324 L1203.36 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1228.52 27.2059 L1235.97 27.2059 L1235.97 72.576 L1228.52 72.576 L1228.52 27.2059 M1228.52 9.54393 L1235.97 9.54393 L1235.97 18.9825 L1228.52 18.9825 L1228.52 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1286.89 35.9153 Q1289.68 30.8922 1293.57 28.5022 Q1297.46 26.1121 1302.73 26.1121 Q1309.82 26.1121 1313.67 31.0947 Q1317.51 36.0368 1317.51 45.1919 L1317.51 72.576 L1310.02 72.576 L1310.02 45.4349 Q1310.02 38.913 1307.71 35.7533 Q1305.4 32.5936 1300.66 32.5936 Q1294.87 32.5936 1291.51 36.4419 Q1288.15 40.2903 1288.15 46.9338 L1288.15 72.576 L1280.65 72.576 L1280.65 45.4349 Q1280.65 38.8725 1278.34 35.7533 Q1276.03 32.5936 1271.21 32.5936 Q1265.5 32.5936 1262.14 36.4824 Q1258.78 40.3308 1258.78 46.9338 L1258.78 72.576 L1251.28 72.576 L1251.28 27.2059 L1258.78 27.2059 L1258.78 34.2544 Q1261.33 30.082 1264.89 28.0971 Q1268.46 26.1121 1273.36 26.1121 Q1278.3 26.1121 1281.75 28.6237 Q1285.23 31.1352 1286.89 35.9153 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1353 49.7694 Q1343.97 49.7694 1340.48 51.8354 Q1337 53.9013 1337 58.8839 Q1337 62.8538 1339.59 65.2034 Q1342.23 67.5124 1346.72 67.5124 Q1352.92 67.5124 1356.65 63.1374 Q1360.41 58.7219 1360.41 51.4303 L1360.41 49.7694 L1353 49.7694 M1367.87 46.6907 L1367.87 72.576 L1360.41 72.576 L1360.41 65.6895 Q1357.86 69.8214 1354.05 71.8063 Q1350.25 73.7508 1344.74 73.7508 Q1337.77 73.7508 1333.64 69.8619 Q1329.55 65.9325 1329.55 59.3701 Q1329.55 51.7138 1334.65 47.825 Q1339.79 43.9361 1349.96 43.9361 L1360.41 43.9361 L1360.41 43.2069 Q1360.41 38.0623 1357.01 35.2672 Q1353.65 32.4315 1347.53 32.4315 Q1343.64 32.4315 1339.96 33.3632 Q1336.27 34.295 1332.87 36.1584 L1332.87 29.2718 Q1336.96 27.692 1340.81 26.9223 Q1344.66 26.1121 1348.3 26.1121 Q1358.15 26.1121 1363.01 31.2163 Q1367.87 36.3204 1367.87 46.6907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1390.59 14.324 L1390.59 27.2059 L1405.95 27.2059 L1405.95 32.9987 L1390.59 32.9987 L1390.59 57.6282 Q1390.59 63.1779 1392.09 64.7578 Q1393.63 66.3376 1398.29 66.3376 L1405.95 66.3376 L1405.95 72.576 L1398.29 72.576 Q1389.66 72.576 1386.38 69.3758 Q1383.1 66.1351 1383.1 57.6282 L1383.1 32.9987 L1377.63 32.9987 L1377.63 27.2059 L1383.1 27.2059 L1383.1 14.324 L1390.59 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1454.56 48.0275 L1454.56 51.6733 L1420.29 51.6733 Q1420.77 59.3701 1424.9 63.421 Q1429.08 67.4314 1436.49 67.4314 Q1440.78 67.4314 1444.79 66.3781 Q1448.84 65.3249 1452.81 63.2184 L1452.81 70.267 Q1448.8 71.9684 1444.59 72.8596 Q1440.38 73.7508 1436.04 73.7508 Q1425.19 73.7508 1418.83 67.4314 Q1412.51 61.1119 1412.51 50.3365 Q1412.51 39.1965 1418.5 32.6746 Q1424.54 26.1121 1434.75 26.1121 Q1443.9 26.1121 1449.21 32.0264 Q1454.56 37.9003 1454.56 48.0275 M1447.1 45.84 Q1447.02 39.7232 1443.66 36.0774 Q1440.34 32.4315 1434.83 32.4315 Q1428.59 32.4315 1424.82 35.9558 Q1421.1 39.4801 1420.53 45.8805 L1447.1 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1511.07 9.62495 Q1505.64 18.942 1503.01 28.0566 Q1500.37 37.1711 1500.37 46.5287 Q1500.37 55.8863 1503.01 65.0818 Q1505.68 74.2369 1511.07 83.5134 L1504.59 83.5134 Q1498.51 73.9938 1495.47 64.7983 Q1492.47 55.6027 1492.47 46.5287 Q1492.47 37.4952 1495.47 28.3401 Q1498.47 19.1851 1504.59 9.62495 L1511.07 9.62495 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1546.15 49.7694 Q1537.11 49.7694 1533.63 51.8354 Q1530.15 53.9013 1530.15 58.8839 Q1530.15 62.8538 1532.74 65.2034 Q1535.37 67.5124 1539.87 67.5124 Q1546.07 67.5124 1549.79 63.1374 Q1553.56 58.7219 1553.56 51.4303 L1553.56 49.7694 L1546.15 49.7694 M1561.01 46.6907 L1561.01 72.576 L1553.56 72.576 L1553.56 65.6895 Q1551.01 69.8214 1547.2 71.8063 Q1543.39 73.7508 1537.88 73.7508 Q1530.92 73.7508 1526.78 69.8619 Q1522.69 65.9325 1522.69 59.3701 Q1522.69 51.7138 1527.8 47.825 Q1532.94 43.9361 1543.11 43.9361 L1553.56 43.9361 L1553.56 43.2069 Q1553.56 38.0623 1550.16 35.2672 Q1546.8 32.4315 1540.68 32.4315 Q1536.79 32.4315 1533.1 33.3632 Q1529.42 34.295 1526.01 36.1584 L1526.01 29.2718 Q1530.11 27.692 1533.95 26.9223 Q1537.8 26.1121 1541.45 26.1121 Q1551.29 26.1121 1556.15 31.2163 Q1561.01 36.3204 1561.01 46.6907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1583.58 65.7705 L1583.58 89.8329 L1576.08 89.8329 L1576.08 27.2059 L1583.58 27.2059 L1583.58 34.0924 Q1585.93 30.0415 1589.49 28.0971 Q1593.1 26.1121 1598.08 26.1121 Q1606.34 26.1121 1611.49 32.6746 Q1616.67 39.2371 1616.67 49.9314 Q1616.67 60.6258 1611.49 67.1883 Q1606.34 73.7508 1598.08 73.7508 Q1593.1 73.7508 1589.49 71.8063 Q1585.93 69.8214 1583.58 65.7705 M1608.94 49.9314 Q1608.94 41.7081 1605.53 37.0496 Q1602.17 32.3505 1596.26 32.3505 Q1590.34 32.3505 1586.94 37.0496 Q1583.58 41.7081 1583.58 49.9314 Q1583.58 58.1548 1586.94 62.8538 Q1590.34 67.5124 1596.26 67.5124 Q1602.17 67.5124 1605.53 62.8538 Q1608.94 58.1548 1608.94 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1636.24 65.7705 L1636.24 89.8329 L1628.75 89.8329 L1628.75 27.2059 L1636.24 27.2059 L1636.24 34.0924 Q1638.59 30.0415 1642.15 28.0971 Q1645.76 26.1121 1650.74 26.1121 Q1659.01 26.1121 1664.15 32.6746 Q1669.34 39.2371 1669.34 49.9314 Q1669.34 60.6258 1664.15 67.1883 Q1659.01 73.7508 1650.74 73.7508 Q1645.76 73.7508 1642.15 71.8063 Q1638.59 69.8214 1636.24 65.7705 M1661.6 49.9314 Q1661.6 41.7081 1658.2 37.0496 Q1654.83 32.3505 1648.92 32.3505 Q1643 32.3505 1639.6 37.0496 Q1636.24 41.7081 1636.24 49.9314 Q1636.24 58.1548 1639.6 62.8538 Q1643 67.5124 1648.92 67.5124 Q1654.83 67.5124 1658.2 62.8538 Q1661.6 58.1548 1661.6 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1681.69 9.54393 L1689.14 9.54393 L1689.14 72.576 L1681.69 72.576 L1681.69 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1704.74 27.2059 L1712.19 27.2059 L1712.19 72.576 L1704.74 72.576 L1704.74 27.2059 M1704.74 9.54393 L1712.19 9.54393 L1712.19 18.9825 L1704.74 18.9825 L1704.74 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1766.6 48.0275 L1766.6 51.6733 L1732.33 51.6733 Q1732.81 59.3701 1736.95 63.421 Q1741.12 67.4314 1748.53 67.4314 Q1752.82 67.4314 1756.84 66.3781 Q1760.89 65.3249 1764.86 63.2184 L1764.86 70.267 Q1760.85 71.9684 1756.63 72.8596 Q1752.42 73.7508 1748.09 73.7508 Q1737.23 73.7508 1730.87 67.4314 Q1724.55 61.1119 1724.55 50.3365 Q1724.55 39.1965 1730.54 32.6746 Q1736.58 26.1121 1746.79 26.1121 Q1755.94 26.1121 1761.25 32.0264 Q1766.6 37.9003 1766.6 48.0275 M1759.14 45.84 Q1759.06 39.7232 1755.7 36.0774 Q1752.38 32.4315 1746.87 32.4315 Q1740.63 32.4315 1736.86 35.9558 Q1733.14 39.4801 1732.57 45.8805 L1759.14 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1808.69 34.0924 L1808.69 9.54393 L1816.14 9.54393 L1816.14 72.576 L1808.69 72.576 L1808.69 65.7705 Q1806.34 69.8214 1802.73 71.8063 Q1799.17 73.7508 1794.14 73.7508 Q1785.92 73.7508 1780.74 67.1883 Q1775.59 60.6258 1775.59 49.9314 Q1775.59 39.2371 1780.74 32.6746 Q1785.92 26.1121 1794.14 26.1121 Q1799.17 26.1121 1802.73 28.0971 Q1806.34 30.0415 1808.69 34.0924 M1783.29 49.9314 Q1783.29 58.1548 1786.65 62.8538 Q1790.05 67.5124 1795.97 67.5124 Q1801.88 67.5124 1805.28 62.8538 Q1808.69 58.1548 1808.69 49.9314 Q1808.69 41.7081 1805.28 37.0496 Q1801.88 32.3505 1795.97 32.3505 Q1790.05 32.3505 1786.65 37.0496 Q1783.29 41.7081 1783.29 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1878.48 49.7694 Q1869.45 49.7694 1865.97 51.8354 Q1862.48 53.9013 1862.48 58.8839 Q1862.48 62.8538 1865.08 65.2034 Q1867.71 67.5124 1872.2 67.5124 Q1878.4 67.5124 1882.13 63.1374 Q1885.9 58.7219 1885.9 51.4303 L1885.9 49.7694 L1878.48 49.7694 M1893.35 46.6907 L1893.35 72.576 L1885.9 72.576 L1885.9 65.6895 Q1883.34 69.8214 1879.54 71.8063 Q1875.73 73.7508 1870.22 73.7508 Q1863.25 73.7508 1859.12 69.8619 Q1855.03 65.9325 1855.03 59.3701 Q1855.03 51.7138 1860.13 47.825 Q1865.28 43.9361 1875.45 43.9361 L1885.9 43.9361 L1885.9 43.2069 Q1885.9 38.0623 1882.49 35.2672 Q1879.13 32.4315 1873.02 32.4315 Q1869.13 32.4315 1865.44 33.3632 Q1861.75 34.295 1858.35 36.1584 L1858.35 29.2718 Q1862.44 27.692 1866.29 26.9223 Q1870.14 26.1121 1873.78 26.1121 Q1883.63 26.1121 1888.49 31.2163 Q1893.35 36.3204 1893.35 46.6907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1916.08 14.324 L1916.08 27.2059 L1931.43 27.2059 L1931.43 32.9987 L1916.08 32.9987 L1916.08 57.6282 Q1916.08 63.1779 1917.58 64.7578 Q1919.11 66.3376 1923.77 66.3376 L1931.43 66.3376 L1931.43 72.576 L1923.77 72.576 Q1915.14 72.576 1911.86 69.3758 Q1908.58 66.1351 1908.58 57.6282 L1908.58 32.9987 L1903.11 32.9987 L1903.11 27.2059 L1908.58 27.2059 L1908.58 14.324 L1916.08 14.324 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1997.46 34.0924 L1997.46 9.54393 L2004.91 9.54393 L2004.91 72.576 L1997.46 72.576 L1997.46 65.7705 Q1995.11 69.8214 1991.5 71.8063 Q1987.94 73.7508 1982.92 73.7508 Q1974.69 73.7508 1969.51 67.1883 Q1964.36 60.6258 1964.36 49.9314 Q1964.36 39.2371 1969.51 32.6746 Q1974.69 26.1121 1982.92 26.1121 Q1987.94 26.1121 1991.5 28.0971 Q1995.11 30.0415 1997.46 34.0924 M1972.06 49.9314 Q1972.06 58.1548 1975.42 62.8538 Q1978.82 67.5124 1984.74 67.5124 Q1990.65 67.5124 1994.06 62.8538 Q1997.46 58.1548 1997.46 49.9314 Q1997.46 41.7081 1994.06 37.0496 Q1990.65 32.3505 1984.74 32.3505 Q1978.82 32.3505 1975.42 37.0496 Q1972.06 41.7081 1972.06 49.9314 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M2037.85 32.4315 Q2031.85 32.4315 2028.37 37.1306 Q2024.88 41.7891 2024.88 49.9314 Q2024.88 58.0738 2028.33 62.7728 Q2031.81 67.4314 2037.85 67.4314 Q2043.8 67.4314 2047.28 62.7323 Q2050.77 58.0333 2050.77 49.9314 Q2050.77 41.8701 2047.28 37.1711 Q2043.8 32.4315 2037.85 32.4315 M2037.85 26.1121 Q2047.57 26.1121 2053.12 32.4315 Q2058.67 38.7509 2058.67 49.9314 Q2058.67 61.0714 2053.12 67.4314 Q2047.57 73.7508 2037.85 73.7508 Q2028.08 73.7508 2022.53 67.4314 Q2017.02 61.0714 2017.02 49.9314 Q2017.02 38.7509 2022.53 32.4315 Q2028.08 26.1121 2037.85 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M2093.99 9.54393 L2093.99 15.7418 L2086.86 15.7418 Q2082.85 15.7418 2081.27 17.3622 Q2079.73 18.9825 2079.73 23.1955 L2079.73 27.2059 L2092.01 27.2059 L2092.01 32.9987 L2079.73 32.9987 L2079.73 72.576 L2072.24 72.576 L2072.24 32.9987 L2065.11 32.9987 L2065.11 27.2059 L2072.24 27.2059 L2072.24 24.0462 Q2072.24 16.471 2075.76 13.0277 Q2079.29 9.54393 2086.94 9.54393 L2093.99 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M2129.07 65.6895 L2142.44 65.6895 L2142.44 19.5497 L2127.9 22.4663 L2127.9 15.0127 L2142.36 12.096 L2150.54 12.096 L2150.54 65.6895 L2163.91 65.6895 L2163.91 72.576 L2129.07 72.576 L2129.07 65.6895 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M2178.21 9.62495 L2184.69 9.62495 Q2190.77 19.1851 2193.77 28.3401 Q2196.8 37.4952 2196.8 46.5287 Q2196.8 55.6027 2193.77 64.7983 Q2190.77 73.9938 2184.69 83.5134 L2178.21 83.5134 Q2183.6 74.2369 2186.23 65.0818 Q2188.9 55.8863 2188.9 46.5287 Q2188.9 37.1711 2186.23 28.0566 Q2183.6 18.942 2178.21 9.62495 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip042)" style="stroke:#0000ff; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" points="375.246,531.106 375.707,474.405 376.169,526.647 376.631,526.303 377.092,422.361 377.554,453.664 378.016,576.847 378.477,633.054 378.939,692.516 379.401,493.575 379.862,573.693 380.324,420.15 380.786,457.614 381.247,534.064 381.709,449.94 382.171,364.201 382.632,506.191 383.094,614.921 383.555,501.342 384.017,506.514 384.479,625.082 384.94,632.423 385.402,377.683 385.864,288.698 386.325,358.194 386.787,437.798 387.249,414.651 387.71,471.416 388.172,395.879 388.634,436.412 389.095,481.822 389.557,394.373 390.019,320.55 390.48,423.805 390.942,533.158 391.404,538.146 391.865,439.546 392.327,504.028 392.789,569.413 393.25,578.616 393.712,475.113 394.174,467.893 394.635,408.593 395.097,512.843 395.558,513.37 396.02,572.75 396.482,580.626 396.943,515.403 397.405,589.644 397.867,639.67 398.328,554.737 398.79,439.01 399.252,541.732 399.713,405.917 400.175,467.159 400.637,462.813 401.098,657.381 401.56,581.255 402.022,283.661 402.483,495.403 402.945,384.659 403.407,377.37 403.868,538.173 404.33,661.691 404.792,409.267 405.253,605.765 405.715,447.69 406.176,693.511 406.638,542.874 407.1,547.79 407.561,594.498 408.023,610.912 408.485,411.88 408.946,500.563 409.408,579.799 409.87,413.284 410.331,644.699 410.793,539.466 411.255,493.467 411.716,570.646 412.178,463.204 412.64,627.096 413.101,611.435 413.563,509.162 414.025,570.035 414.486,535.23 414.948,656.792 415.41,446.258 415.871,533.696 416.333,520.727 416.794,403.415 417.256,497.697 417.718,635.957 418.179,473.374 418.641,595.428 419.103,402.07 419.564,430.92 420.026,418.872 420.488,463.668 420.949,501.903 421.411,340.145 421.873,592.656 422.334,510.923 422.796,647.585 423.258,503.342 423.719,477.847 424.181,356.622 424.643,472.318 425.104,338.219 425.566,578.595 426.028,537.07 426.489,522.751 426.951,574.6 427.412,409.553 427.874,382.946 428.336,441.456 428.797,529.026 429.259,669.289 429.721,664.2 430.182,525.464 430.644,449.349 431.106,468.429 431.567,519.463 432.029,589.434 432.491,479.282 432.952,484.972 433.414,486.615 433.876,511.028 434.337,456.541 434.799,525.389 435.261,422.144 435.722,471.526 436.184,560.849 436.646,639.177 437.107,575.818 437.569,446.621 438.03,599.358 438.492,364.725 438.954,577.162 439.415,535.287 439.877,488.879 440.339,527.81 440.8,357.43 441.262,453.163 441.724,465.528 442.185,398.073 442.647,431.242 443.109,534.852 443.57,593.166 444.032,594.005 444.494,483.148 444.955,542.817 445.417,475.334 445.879,598.58 446.34,534.699 446.802,627.273 447.264,584.466 447.725,451.929 448.187,382.785 448.648,647.708 449.11,418.007 449.572,418.833 450.033,578.03 450.495,366.421 450.957,580.469 451.418,442.741 451.88,413.576 452.342,527.591 452.803,596.088 453.265,277.134 453.727,512.741 454.188,415.081 454.65,532.862 455.112,508.786 455.573,447.849 456.035,432.738 456.497,750.932 456.958,543.507 457.42,384.302 457.882,284.64 458.343,471.426 458.805,408.968 459.266,480.276 459.728,382.522 460.19,463.597 460.651,447.268 461.113,463.521 461.575,588.174 462.036,429.675 462.498,471.36 462.96,687.173 463.421,445.358 463.883,431.435 464.345,600.279 464.806,572.012 465.268,572.148 465.73,331.724 466.191,575.419 466.653,638.588 467.115,515.596 467.576,553.04 468.038,491.14 468.5,662.143 468.961,512.935 469.423,658.511 469.885,587.979 470.346,389.862 470.808,412.754 471.269,455.165 471.731,474.261 472.193,433.493 472.654,424.598 473.116,485.022 473.578,436.992 474.039,486.401 474.501,397.276 474.963,611.082 475.424,511.674 475.886,590.651 476.348,495.851 476.809,476.529 477.271,520.914 477.733,622.157 478.194,475.347 478.656,557.66 479.118,640.409 479.579,409.712 480.041,440.659 480.503,393.111 480.964,487.931 481.426,421.986 481.887,501.058 482.349,496.388 482.811,523.412 483.272,681.431 483.734,589.487 484.196,580.466 484.657,348.218 485.119,495.111 485.581,619.493 486.042,507.932 486.504,539.446 486.966,457.075 487.427,445.468 487.889,623.195 488.351,677.55 488.812,594.144 489.274,465.119 489.736,607.508 490.197,621.784 490.659,571.813 491.121,508.412 491.582,521.479 492.044,557.177 492.505,568.392 492.967,507.542 493.429,491.902 493.89,320.146 494.352,522.308 494.814,573.35 495.275,381.042 495.737,501.698 496.199,538.055 496.66,537.008 497.122,489.366 497.584,555.318 498.045,511.426 498.507,760.41 498.969,480.967 499.43,652.421 499.892,507.109 500.354,334.321 500.815,416.999 501.277,504.003 501.739,560.485 502.2,372.89 502.662,486.831 503.123,603.011 503.585,505.087 504.047,516.522 504.508,541.234 504.97,576.91 505.432,497.784 505.893,664.004 506.355,643.147 506.817,611.257 507.278,481.316 507.74,465.246 508.202,409.076 508.663,449.009 509.125,516.363 509.587,559.856 510.048,391.119 510.51,506.19 510.972,450.651 511.433,416.261 511.895,451.768 512.357,708.953 512.818,354.647 513.28,496.762 513.741,460.969 514.203,483.347 514.665,412.812 515.126,548.643 515.588,451.138 516.05,396.262 516.511,510.649 516.973,746.38 517.435,537.95 517.896,359.328 518.358,579.133 518.82,422.952 519.281,449.65 519.743,526.35 520.205,573.017 520.666,455.086 521.128,627.075 521.59,573.295 522.051,547.08 522.513,584.838 522.975,494.893 523.436,418.615 523.898,557.804 524.359,469.829 524.821,427.19 525.283,552.777 525.744,479.271 526.206,518.07 526.668,432.01 527.129,474.556 527.591,513.544 528.053,463.482 528.514,467.559 528.976,551.559 529.438,478.497 529.899,363.154 530.361,448.892 530.823,496.764 531.284,619.752 531.746,415.596 532.208,516.766 532.669,498.285 533.131,482.302 533.593,423.927 534.054,485.264 534.516,647.244 534.977,712.873 535.439,645.082 535.901,700.621 536.362,603.544 536.824,364.421 537.286,634.929 537.747,507.603 538.209,676.158 538.671,506.575 539.132,683.335 539.594,370.172 540.056,641.926 540.517,628.618 540.979,497.676 541.441,501.494 541.902,595.617 542.364,463.276 542.826,409.659 543.287,473.073 543.749,524.99 544.211,564.463 544.672,451.282 545.134,409.59 545.596,458.915 546.057,462.202 546.519,461.204 546.98,339.702 547.442,521.335 547.904,653.924 548.365,721.457 548.827,552.376 549.289,362.131 549.75,479.061 550.212,639.04 550.674,551.472 551.135,616.391 551.597,509.509 552.059,435.497 552.52,303.281 552.982,330.493 553.444,405.316 553.905,598.845 554.367,583.618 554.829,519.798 555.29,452.264 555.752,492.84 556.214,548.921 556.675,608.039 557.137,598.547 557.598,484.908 558.06,417.116 558.522,493.951 558.983,535.954 559.445,478.825 559.907,277.892 560.368,497.115 560.83,441.925 561.292,375.563 561.753,571.739 562.215,605.051 562.677,582.845 563.138,284.884 563.6,402.888 564.062,646.68 564.523,481.368 564.985,620.472 565.447,368.783 565.908,628.867 566.37,432.473 566.832,570.611 567.293,554.715 567.755,375.765 568.216,533.888 568.678,456.174 569.14,412.693 569.601,556.7 570.063,448.363 570.525,488.985 570.986,428.55 571.448,399.31 571.91,315.334 572.371,304.074 572.833,531.164 573.295,576.495 573.756,502.835 574.218,604.676 574.68,585.761 575.141,459.335 575.603,618.89 576.065,502.3 576.526,402.344 576.988,418.143 577.45,305.788 577.911,692.579 578.373,580.883 578.834,522.008 579.296,414.212 579.758,369.04 580.219,552.913 580.681,492.919 581.143,447.483 581.604,548.93 582.066,379.12 582.528,492.115 582.989,437.015 583.451,590.562 583.913,535.583 584.374,423.553 584.836,410.77 585.298,454.385 585.759,535.422 586.221,455.934 586.683,483.605 587.144,511.221 587.606,494.585 588.068,532.801 588.529,518.097 588.991,523.482 589.452,557.947 589.914,582.53 590.376,571.123 590.837,660.601 591.299,353.877 591.761,375.614 592.222,334.732 592.684,212.55 593.146,492.178 593.607,422.737 594.069,459.202 594.531,372.544 594.992,624.706 595.454,456.58 595.916,635.773 596.377,406.561 596.839,577.687 597.301,708.712 597.762,479.576 598.224,476.851 598.686,437.035 599.147,481.934 599.609,714.659 600.07,441.193 600.532,357.254 600.994,450.764 601.455,558.167 601.917,362.011 602.379,492.494 602.84,521.626 603.302,537.1 603.764,285.842 604.225,538.659 604.687,500.436 605.149,458.972 605.61,462.799 606.072,535.359 606.534,407.803 606.995,470.195 607.457,475.921 607.919,418.014 608.38,335.301 608.842,502.824 609.304,524.036 609.765,522.705 610.227,522.036 610.689,442.641 611.15,497.623 611.612,553.574 612.073,292.559 612.535,475.697 612.997,440.562 613.458,596.839 613.92,461.966 614.382,632.123 614.843,575.97 615.305,537.377 615.767,647.336 616.228,531.73 616.69,660.088 617.152,549.335 617.613,524.303 618.075,435.344 618.537,500.022 618.998,559.987 619.46,600.722 619.922,630.908 620.383,437.124 620.845,644.975 621.307,600.967 621.768,405.361 622.23,485.072 622.691,593.485 623.153,480.399 623.615,437.077 624.076,452.677 624.538,581.003 625,389.473 625.461,650.487 625.923,705.548 626.385,600.718 626.846,400.303 627.308,555.57 627.77,486.378 628.231,447.376 628.693,364.089 629.155,547.407 629.616,380.269 630.078,467.454 630.54,505.21 631.001,684.189 631.463,282.758 631.925,420.078 632.386,450.742 632.848,441.691 633.309,494.298 633.771,530.294 634.233,496.351 634.694,582.745 635.156,584.932 635.618,532.13 636.079,412.52 636.541,475.329 637.003,586.316 637.464,545.869 637.926,578.575 638.388,613.685 638.849,498.302 639.311,434.367 639.773,439.662 640.234,521.826 640.696,490.936 641.158,542.056 641.619,440.106 642.081,559.263 642.543,261.305 643.004,473.021 643.466,432.833 643.927,577.044 644.389,584.051 644.851,367.845 645.312,483.387 645.774,580.505 646.236,383.156 646.697,496.364 647.159,414.456 647.621,515.639 648.082,574.967 648.544,437.686 649.006,550.186 649.467,467.879 649.929,701.173 650.391,488.929 650.852,452.51 651.314,640.867 651.776,564.153 652.237,410.072 652.699,378.189 653.161,434.24 653.622,583.572 654.084,575.558 654.545,611.203 655.007,441.515 655.469,540.372 655.93,528.315 656.392,575.915 656.854,338.066 657.315,509.167 657.777,413.592 658.239,496.429 658.7,358.877 659.162,583.145 659.624,485.803 660.085,494.195 660.547,749.6 661.009,348.738 661.47,611.818 661.932,650.912 662.394,627.316 662.855,504.002 663.317,533.799 663.779,598.481 664.24,495.991 664.702,491.388 665.163,513.153 665.625,579.291 666.087,595.564 666.548,346.161 667.01,679.021 667.472,632.909 667.933,433.647 668.395,420.713 668.857,410.873 669.318,537.922 669.78,628.686 670.242,453.501 670.703,527.503 671.165,693.086 671.627,449.715 672.088,428.561 672.55,529.086 673.012,482.928 673.473,285.073 673.935,475.37 674.397,438.35 674.858,527.561 675.32,428.2 675.781,466.987 676.243,410.89 676.705,442.538 677.166,457.158 677.628,475.891 678.09,519.616 678.551,489.749 679.013,663.489 679.475,460.277 679.936,719.219 680.398,579.716 680.86,350.751 681.321,567.672 681.783,606.893 682.245,504.148 682.706,421.741 683.168,583.353 683.63,508.926 684.091,502.307 684.553,481.895 685.015,422.196 685.476,558.797 685.938,652.39 686.4,659.397 686.861,523.192 687.323,414.272 687.784,570.133 688.246,681.181 688.708,488.625 689.169,708.732 689.631,487.444 690.093,540.81 690.554,517.66 691.016,666.489 691.478,484.618 691.939,552.416 692.401,489.395 692.863,647.752 693.324,429.411 693.786,485.455 694.248,603.294 694.709,441.031 695.171,608.745 695.633,619.82 696.094,493.88 696.556,444.289 697.018,557.25 697.479,425.05 697.941,413.411 698.402,370.25 698.864,520.68 699.326,650.803 699.787,429.325 700.249,500.628 700.711,465.946 701.172,456.586 701.634,507.614 702.096,489.782 702.557,414.53 703.019,447.748 703.481,514.814 703.942,514.539 704.404,503.165 704.866,535.595 705.327,434.989 705.789,649.801 706.251,485.932 706.712,451.125 707.174,469.162 707.636,540.286 708.097,502.967 708.559,503.084 709.02,523.187 709.482,608.493 709.944,477.251 710.405,546.291 710.867,589.093 711.329,559.165 711.79,513.878 712.252,303.601 712.714,470.092 713.175,471.245 713.637,364.978 714.099,452.158 714.56,443.674 715.022,546.698 715.484,446.606 715.945,575.302 716.407,509.585 716.869,463.984 717.33,512.208 717.792,562.691 718.254,532.714 718.715,357.114 719.177,653.733 719.638,512.48 720.1,498.802 720.562,562.319 721.023,609.25 721.485,518.991 721.947,476.775 722.408,407.492 722.87,299.136 723.332,605.482 723.793,437.268 724.255,476.092 724.717,566.7 725.178,617.894 725.64,502 726.102,484.451 726.563,639.955 727.025,558.681 727.487,517.034 727.948,741.571 728.41,516.89 728.872,387.369 729.333,579.715 729.795,615.897 730.256,507.93 730.718,501.89 731.18,389.931 731.641,468.673 732.103,470.656 732.565,406.685 733.026,458.528 733.488,547.83 733.95,377.583 734.411,598.964 734.873,371.387 735.335,395.42 735.796,498.487 736.258,332.266 736.72,496.553 737.181,416.969 737.643,579.579 738.105,323.6 738.566,523.927 739.028,591.414 739.49,346.666 739.951,435.061 740.413,567.752 740.874,456.678 741.336,417.817 741.798,717.078 742.259,424.818 742.721,563.09 743.183,519.017 743.644,667.485 744.106,303.056 744.568,621.907 745.029,475.247 745.491,366.092 745.953,566.705 746.414,558.894 746.876,548.882 747.338,435.123 747.799,733.11 748.261,495.177 748.723,360.815 749.184,586.935 749.646,221.206 750.108,597.873 750.569,421.654 751.031,595.192 751.493,433.593 751.954,355.92 752.416,518.477 752.877,608.039 753.339,319.56 753.801,515.862 754.262,491.102 754.724,581.669 755.186,557.645 755.647,561.993 756.109,531.395 756.571,558.877 757.032,498.128 757.494,460.087 757.956,497.799 758.417,472.779 758.879,593.847 759.341,521.425 759.802,475.707 760.264,570.539 760.726,523.611 761.187,525.308 761.649,412.062 762.111,433.534 762.572,345.027 763.034,518.685 763.495,494.485 763.957,393.094 764.419,451.059 764.88,387.364 765.342,496.735 765.804,520.637 766.265,675.663 766.727,434.996 767.189,666.275 767.65,511.241 768.112,493.999 768.574,403.623 769.035,586.086 769.497,361.071 769.959,612.063 770.42,563.208 770.882,552.407 771.344,430.572 771.805,508.141 772.267,462.397 772.729,556.922 773.19,553.758 773.652,452.413 774.113,369.636 774.575,711.027 775.037,397.201 775.498,444.887 775.96,405.322 776.422,532.13 776.883,515.84 777.345,511.607 777.807,562.582 778.268,612.759 778.73,389.594 779.192,365.51 779.653,472.752 780.115,557.568 780.577,588.566 781.038,479.229 781.5,426.66 781.962,490.25 782.423,488.306 782.885,568.006 783.347,344.388 783.808,600.316 784.27,538.259 784.731,538.128 785.193,626.324 785.655,385.608 786.116,544.71 786.578,385.507 787.04,558.69 787.501,607.689 787.963,707.698 788.425,492.558 788.886,373.215 789.348,566.325 789.81,628.271 790.271,416.969 790.733,528.99 791.195,434.718 791.656,516.013 792.118,564.231 792.58,420.084 793.041,514.227 793.503,627.983 793.965,535.119 794.426,465.111 794.888,434.389 795.349,418.624 795.811,490.454 796.273,523.048 796.734,527.46 797.196,485.855 797.658,537.453 798.119,399.008 798.581,324.714 799.043,579.729 799.504,500.818 799.966,532.161 800.428,542.214 800.889,529.914 801.351,404.141 801.813,388.583 802.274,401.696 802.736,582.112 803.198,545.828 803.659,495.409 804.121,627.436 804.583,475.596 805.044,649.225 805.506,580.26 805.967,434.147 806.429,658.705 806.891,556.454 807.352,639.601 807.814,337.576 808.276,580.699 808.737,524.024 809.199,541.556 809.661,487.261 810.122,372.881 810.584,479.391 811.046,539.251 811.507,382.874 811.969,375.233 812.431,511.106 812.892,497.289 813.354,606.745 813.816,393.033 814.277,568.664 814.739,365.241 815.201,448.551 815.662,575.1 816.124,364.667 816.585,502.279 817.047,394.306 817.509,531.962 817.97,430.799 818.432,478.498 818.894,384.987 819.355,455.583 819.817,534.129 820.279,539.486 820.74,508.973 821.202,579.432 821.664,588.601 822.125,500.709 822.587,543.851 823.049,411.466 823.51,539.275 823.972,623.528 824.434,546.583 824.895,422.577 825.357,499.391 825.819,406.991 826.28,611.526 826.742,589.764 827.204,561.975 827.665,493.862 828.127,522.601 828.588,542.262 829.05,438.964 829.512,531.225 829.973,395.32 830.435,392.875 830.897,481.116 831.358,427.956 831.82,654.658 832.282,471.8 832.743,446.908 833.205,496.932 833.667,541.017 834.128,520.187 834.59,468.391 835.052,421.516 835.513,675.155 835.975,407.561 836.437,520.319 836.898,363.204 837.36,261.579 837.822,543.108 838.283,610.415 838.745,484.487 839.206,459.661 839.668,566.397 840.13,511.51 840.591,461.892 841.053,413.661 841.515,359.274 841.976,555.08 842.438,468.149 842.9,390.422 843.361,501.568 843.823,418.393 844.285,551.445 844.746,260.6 845.208,461.199 845.67,462.897 846.131,471.884 846.593,408.997 847.055,566.609 847.516,520.838 847.978,449.944 848.44,617.621 848.901,430.508 849.363,615.215 849.824,524.604 850.286,540.942 850.748,522.297 851.209,499.294 851.671,484.33 852.133,526.963 852.594,632.237 853.056,451.172 853.518,299.104 853.979,559.431 854.441,452.079 854.903,474.46 855.364,523.055 855.826,520.587 856.288,677.666 856.749,503.829 857.211,564.491 857.673,579.922 858.134,376.647 858.596,508.145 859.058,539.866 859.519,511.474 859.981,610.727 860.442,360.786 860.904,486.101 861.366,628.933 861.827,407.359 862.289,650.476 862.751,681.5 863.212,444.534 863.674,454.482 864.136,601.357 864.597,502.856 865.059,453.765 865.521,349.544 865.982,441.197 866.444,591.693 866.906,520.55 867.367,424.37 867.829,478.109 868.291,586.9 868.752,573.024 869.214,527.94 869.676,317.909 870.137,437.629 870.599,463.308 871.06,502.825 871.522,639.659 871.984,585.228 872.445,537.08 872.907,443.645 873.369,488.908 873.83,446.104 874.292,554.206 874.754,458.277 875.215,620.482 875.677,572.83 876.139,338.139 876.6,463.679 877.062,486.251 877.524,364.987 877.985,537.363 878.447,477.477 878.909,365.516 879.37,465.346 879.832,575.538 880.294,369.621 880.755,389.354 881.217,590.033 881.678,477.04 882.14,548.892 882.602,511.884 883.063,489.825 883.525,543.406 883.987,428.706 884.448,541.62 884.91,305.062 885.372,559.29 885.833,536.077 886.295,423.237 886.757,549.401 887.218,259.761 887.68,643.738 888.142,590.119 888.603,320.093 889.065,409.16 889.527,481.33 889.988,754.771 890.45,606.451 890.912,548.027 891.373,515.894 891.835,380.62 892.297,621.945 892.758,515.822 893.22,670.96 893.681,613.453 894.143,466.814 894.605,651.133 895.066,719.135 895.528,375.747 895.99,476.199 896.451,489.553 896.913,610.314 897.375,487.853 897.836,536.505 898.298,487.551 898.76,466.827 899.221,450.017 899.683,354.892 900.145,552.242 900.606,415.838 901.068,366.962 901.53,412.677 901.991,617.157 902.453,596.039 902.915,505.406 903.376,227.396 903.838,622.867 904.299,635.646 904.761,445.015 905.223,483.503 905.684,394.853 906.146,459.588 906.608,430.06 907.069,648.097 907.531,531.561 907.993,563.651 908.454,504.569 908.916,359.783 909.378,572.914 909.839,489.972 910.301,573.837 910.763,498.087 911.224,510.799 911.686,391.185 912.148,711.741 912.609,484.897 913.071,557.097 913.533,339.705 913.994,583.543 914.456,494.233 914.917,458.012 915.379,425.414 915.841,439.484 916.302,432.047 916.764,360.153 917.226,474.416 917.687,504.461 918.149,358.473 918.611,442.281 919.072,497.357 919.534,457.317 919.996,394.271 920.457,352.318 920.919,570.749 921.381,662.526 921.842,624.182 922.304,584.668 922.766,672.37 923.227,570.264 923.689,499.517 924.151,530.177 924.612,383.712 925.074,557.625 925.535,661.02 925.997,426.544 926.459,410.786 926.92,621.451 927.382,593.181 927.844,582.884 928.305,654.734 928.767,596.988 929.229,553.719 929.69,517.842 930.152,650.68 930.614,391.777 931.075,453.198 931.537,574.517 931.999,496.997 932.46,514.662 932.922,479.752 933.384,537.19 933.845,424.948 934.307,563.157 934.769,512.397 935.23,502.108 935.692,609.828 936.153,596.751 936.615,464.724 937.077,479.877 937.538,498.597 938,441.478 938.462,526.576 938.923,573.715 939.385,694.984 939.847,475.297 940.308,501.831 940.77,357.783 941.232,571.046 941.693,467.738 942.155,630.216 942.617,776.806 943.078,581.495 943.54,472.008 944.002,528.207 944.463,611.557 944.925,334.862 945.387,509.306 945.848,457.084 946.31,469.861 946.771,656.04 947.233,475.012 947.695,587.844 948.156,632.419 948.618,482.144 949.08,562.722 949.541,547.29 950.003,599.572 950.465,428.798 950.926,648.085 951.388,433.921 951.85,641.721 952.311,588.665 952.773,407.304 953.235,454.963 953.696,518.947 954.158,571.012 954.62,306.609 955.081,609.861 955.543,400.557 956.005,572.077 956.466,309.229 956.928,606.361 957.389,506.286 957.851,352.849 958.313,533.394 958.774,543.276 959.236,487.468 959.698,501.322 960.159,597.005 960.621,520.406 961.083,375.994 961.544,574.602 962.006,491.411 962.468,527.719 962.929,544.738 963.391,545.324 963.853,470.4 964.314,632.584 964.776,562.236 965.238,464.21 965.699,518.089 966.161,502.454 966.623,366.36 967.084,469.732 967.546,522.192 968.008,665.449 968.469,517.254 968.931,370.528 969.392,444.473 969.854,414.544 970.316,350.263 970.777,495.791 971.239,574.311 971.701,510.765 972.162,457.568 972.624,495.019 973.086,347.693 973.547,641.492 974.009,544.473 974.471,662.668 974.932,419.677 975.394,518.329 975.856,500.824 976.317,365.312 976.779,525.73 977.241,575.161 977.702,360.994 978.164,551.312 978.626,401.903 979.087,505.987 979.549,553.435 980.01,612.793 980.472,461.68 980.934,601.023 981.395,311.338 981.857,540.717 982.319,540.279 982.78,515.249 983.242,425.643 983.704,511.078 984.165,361.269 984.627,440.017 985.089,460.809 985.55,583.937 986.012,533.098 986.474,463.311 986.935,462.29 987.397,514.596 987.859,388.439 988.32,602.498 988.782,387.801 989.244,625.728 989.705,489.316 990.167,583.564 990.628,549.05 991.09,644.283 991.552,400.169 992.013,643.449 992.475,570.973 992.937,482.266 993.398,583.205 993.86,674.413 994.322,273.466 994.783,585.207 995.245,433.024 995.707,578.694 996.168,602.417 996.63,565.54 997.092,458.415 997.553,400.515 998.015,380.041 998.477,529.257 998.938,388.839 999.4,391.351 999.862,450.523 1000.32,577.713 1000.78,559.732 1001.25,453.611 1001.71,608.579 1002.17,540.759 1002.63,687.291 1003.09,394.221 1003.55,483.708 1004.02,344.873 1004.48,389.536 1004.94,408.785 1005.4,642.024 1005.86,639.886 1006.32,253.204 1006.79,546.665 1007.25,640.169 1007.71,453.09 1008.17,578.062 1008.63,294.041 1009.09,405.264 1009.56,550.947 1010.02,508.983 1010.48,367.6 1010.94,566.865 1011.4,689.816 1011.86,522.392 1012.33,520.241 1012.79,383.155 1013.25,554.689 1013.71,506.886 1014.17,483.981 1014.63,520.516 1015.1,611.258 1015.56,629.185 1016.02,518.885 1016.48,538.901 1016.94,671.533 1017.4,467.298 1017.87,416.611 1018.33,467.668 1018.79,493.989 1019.25,555.893 1019.71,584.7 1020.17,514.443 1020.64,536.636 1021.1,349.432 1021.56,541.634 1022.02,453.426 1022.48,624.398 1022.94,486.658 1023.41,474.798 1023.87,510.872 1024.33,699.686 1024.79,399.79 1025.25,435.138 1025.71,413.392 1026.18,423.581 1026.64,422.25 1027.1,324.045 1027.56,423.524 1028.02,385.565 1028.48,406.977 1028.95,603.462 1029.41,250.455 1029.87,419.823 1030.33,547.015 1030.79,488.85 1031.25,613.088 1031.72,418.418 1032.18,467.98 1032.64,529.228 1033.1,426.274 1033.56,428.446 1034.02,599.77 1034.49,516.571 1034.95,440.619 1035.41,511.076 1035.87,424.686 1036.33,455.249 1036.79,502.913 1037.26,560.252 1037.72,428.934 1038.18,394.94 1038.64,388.135 1039.1,543.383 1039.56,492.166 1040.03,286.014 1040.49,510.963 1040.95,323.139 1041.41,459.166 1041.87,561.552 1042.33,605.23 1042.8,534.548 1043.26,432.264 1043.72,491.136 1044.18,477.206 1044.64,477.212 1045.1,422.654 1045.57,654.719 1046.03,467.114 1046.49,465.393 1046.95,583.682 1047.41,580.702 1047.87,429.022 1048.34,463.575 1048.8,433.142 1049.26,382.441 1049.72,350.189 1050.18,579.468 1050.64,452.768 1051.1,480.57 1051.57,387.816 1052.03,518.342 1052.49,528.579 1052.95,457.998 1053.41,570.762 1053.87,345.082 1054.34,529.491 1054.8,467.409 1055.26,506.379 1055.72,637.499 1056.18,492.12 1056.64,521.376 1057.11,466.538 1057.57,614.02 1058.03,689.414 1058.49,415.916 1058.95,552.734 1059.41,507.335 1059.88,402.076 1060.34,586.273 1060.8,588.002 1061.26,662.686 1061.72,458.144 1062.18,658.756 1062.65,706.827 1063.11,558.455 1063.57,545.582 1064.03,359.481 1064.49,552.748 1064.95,389.658 1065.42,639.594 1065.88,473.316 1066.34,379.58 1066.8,367.367 1067.26,550.761 1067.72,477.909 1068.19,408.986 1068.65,550.75 1069.11,570.737 1069.57,551.952 1070.03,348.246 1070.49,449.021 1070.96,436.031 1071.42,555.463 1071.88,511.035 1072.34,520.008 1072.8,547.544 1073.26,454.007 1073.73,464.851 1074.19,431.251 1074.65,560.417 1075.11,498.64 1075.57,381.567 1076.03,512.672 1076.5,531.781 1076.96,535.289 1077.42,590.934 1077.88,377.55 1078.34,627.315 1078.8,576.752 1079.27,624.759 1079.73,581.241 1080.19,546.328 1080.65,395.959 1081.11,327.149 1081.57,505.724 1082.04,568.028 1082.5,476.498 1082.96,454.674 1083.42,450.284 1083.88,367.332 1084.34,553.227 1084.81,443.866 1085.27,550.404 1085.73,458.947 1086.19,587.965 1086.65,468.15 1087.11,524.466 1087.58,502.344 1088.04,364.645 1088.5,726.048 1088.96,278.714 1089.42,394.471 1089.88,577.039 1090.35,519.751 1090.81,518.028 1091.27,398.338 1091.73,558.771 1092.19,477.948 1092.65,503.502 1093.12,425.735 1093.58,648.742 1094.04,585.519 1094.5,372.268 1094.96,419.917 1095.42,687.291 1095.89,382.537 1096.35,602.007 1096.81,523.188 1097.27,717.931 1097.73,342.256 1098.19,430.088 1098.66,494.142 1099.12,594.438 1099.58,400.392 1100.04,523.509 1100.5,645.563 1100.96,357.8 1101.43,561.354 1101.89,583.754 1102.35,520.478 1102.81,461.678 1103.27,486.207 1103.73,571.305 1104.19,445.571 1104.66,418.974 1105.12,544.53 1105.58,412.039 1106.04,453.23 1106.5,432.707 1106.96,494.915 1107.43,646.464 1107.89,550.257 1108.35,344.523 1108.81,566.127 1109.27,406.309 1109.73,436.972 1110.2,514.835 1110.66,438.649 1111.12,634.337 1111.58,494.739 1112.04,549.101 1112.5,556.948 1112.97,525.432 1113.43,431.091 1113.89,476.056 1114.35,417.041 1114.81,438.33 1115.27,550.065 1115.74,405.457 1116.2,415.52 1116.66,375.472 1117.12,441.543 1117.58,523.825 1118.04,471.505 1118.51,451.604 1118.97,480.924 1119.43,479.558 1119.89,564.192 1120.35,557.907 1120.81,498.942 1121.28,337.529 1121.74,340.73 1122.2,475.201 1122.66,451.072 1123.12,640.19 1123.58,331.916 1124.05,538.579 1124.51,568.018 1124.97,612.462 1125.43,516.849 1125.89,517.771 1126.35,386.654 1126.82,416.414 1127.28,537.108 1127.74,379.507 1128.2,548.233 1128.66,374.61 1129.12,524.453 1129.59,508.5 1130.05,504.424 1130.51,428.669 1130.97,409.88 1131.43,433.909 1131.89,454.473 1132.36,788.863 1132.82,435.372 1133.28,496.113 1133.74,561.312 1134.2,552.936 1134.66,456.572 1135.13,522.752 1135.59,518.053 1136.05,503.623 1136.51,368.663 1136.97,508.24 1137.43,604.116 1137.9,593.858 1138.36,523.352 1138.82,471.429 1139.28,447.659 1139.74,522.939 1140.2,526.697 1140.67,285.008 1141.13,344.524 1141.59,420.624 1142.05,449.894 1142.51,451.833 1142.97,554.088 1143.44,507.816 1143.9,346.224 1144.36,326.845 1144.82,539.645 1145.28,290.06 1145.74,660.576 1146.21,427.085 1146.67,528.359 1147.13,481.04 1147.59,544.147 1148.05,315.363 1148.51,458.487 1148.98,529.641 1149.44,463.259 1149.9,509.767 1150.36,506.481 1150.82,552.464 1151.28,384.047 1151.75,597.038 1152.21,525.127 1152.67,455.782 1153.13,378.136 1153.59,570.676 1154.05,387.985 1154.52,454.005 1154.98,612.985 1155.44,633.707 1155.9,679.5 1156.36,503.433 1156.82,472.154 1157.29,306.824 1157.75,524.169 1158.21,392.706 1158.67,540.113 1159.13,401.628 1159.59,441.045 1160.05,653.478 1160.52,530.326 1160.98,504.889 1161.44,432.275 1161.9,503.547 1162.36,439.656 1162.82,509.002 1163.29,617.976 1163.75,310.947 1164.21,500.384 1164.67,446.929 1165.13,540.494 1165.59,412.782 1166.06,395.991 1166.52,396.635 1166.98,423.629 1167.44,591.871 1167.9,611.714 1168.36,423.396 1168.83,369.403 1169.29,584.551 1169.75,419.613 1170.21,554.754 1170.67,329.218 1171.13,527.914 1171.6,540.92 1172.06,650.213 1172.52,500.449 1172.98,605.509 1173.44,671.212 1173.9,451.277 1174.37,544.337 1174.83,474.402 1175.29,405.146 1175.75,651.653 1176.21,544.649 1176.67,683.64 1177.14,458.508 1177.6,422.303 1178.06,385.303 1178.52,497.604 1178.98,441.476 1179.44,523.874 1179.91,383.929 1180.37,678.42 1180.83,434.208 1181.29,601.019 1181.75,492.168 1182.21,304.058 1182.68,445.861 1183.14,586.106 1183.6,592.217 1184.06,392.489 1184.52,667.958 1184.98,573.44 1185.45,568.627 1185.91,408.701 1186.37,479.269 1186.83,548.24 1187.29,483.011 1187.75,356.122 1188.22,483.313 1188.68,523.642 1189.14,394.148 1189.6,540.974 1190.06,559.29 1190.52,386.472 1190.99,505.901 1191.45,473.907 1191.91,552.856 1192.37,582.695 1192.83,531.007 1193.29,417.678 1193.76,317.68 1194.22,285.635 1194.68,534.429 1195.14,492.174 1195.6,359.722 1196.06,475.013 1196.53,518.231 1196.99,583.319 1197.45,481.777 1197.91,349.785 1198.37,539.564 1198.83,510.445 1199.3,602.26 1199.76,643.707 1200.22,519.03 1200.68,449.534 1201.14,498.416 1201.6,412.083 1202.07,443.919 1202.53,633.163 1202.99,590.391 1203.45,709.669 1203.91,484.31 1204.37,591.631 1204.84,540.032 1205.3,666.911 1205.76,500.723 1206.22,301.812 1206.68,571.705 1207.14,595.476 1207.61,485.096 1208.07,297.024 1208.53,417.223 1208.99,437.452 1209.45,546.088 1209.91,774.258 1210.38,621.663 1210.84,512.755 1211.3,750.325 1211.76,493.374 1212.22,344.701 1212.68,485.211 1213.14,555.328 1213.61,524.499 1214.07,627.64 1214.53,462.852 1214.99,452.913 1215.45,542.998 1215.91,407.291 1216.38,552.38 1216.84,548.9 1217.3,644.053 1217.76,278.641 1218.22,419.743 1218.68,584.375 1219.15,429.013 1219.61,519.092 1220.07,650.712 1220.53,493.087 1220.99,613.804 1221.45,583.229 1221.92,492.128 1222.38,551.674 1222.84,600.316 1223.3,427.904 1223.76,507.129 1224.22,437.186 1224.69,402.118 1225.15,458.624 1225.61,523.012 1226.07,424.734 1226.53,432.738 1226.99,516.917 1227.46,405.628 1227.92,360.841 1228.38,480.842 1228.84,533.197 1229.3,602.886 1229.76,373.787 1230.23,602.801 1230.69,508.608 1231.15,427.117 1231.61,513.167 1232.07,367.158 1232.53,397.903 1233,576.519 1233.46,471.113 1233.92,586.254 1234.38,460.095 1234.84,446.679 1235.3,442.223 1235.77,574.957 1236.23,530.871 1236.69,509.148 1237.15,502.764 1237.61,588.329 1238.07,383.293 1238.54,606.903 1239,627.933 1239.46,555.168 1239.92,529.408 1240.38,320.302 1240.84,495.022 1241.31,530.578 1241.77,595.52 1242.23,432.324 1242.69,494.937 1243.15,521.434 1243.61,501.305 1244.08,539.013 1244.54,568.684 1245,725.848 1245.46,476.032 1245.92,440.881 1246.38,392.752 1246.85,536.465 1247.31,561.553 1247.77,523.817 1248.23,490.717 1248.69,509.495 1249.15,381.506 1249.62,575.606 1250.08,556.991 1250.54,443.022 1251,531.017 1251.46,601.435 1251.92,315.433 1252.39,448.45 1252.85,534.313 1253.31,456.734 1253.77,470.976 1254.23,640.018 1254.69,475.98 1255.16,519.176 1255.62,507.325 1256.08,546.067 1256.54,523.956 1257,618.876 1257.46,660.468 1257.93,659.501 1258.39,522.035 1258.85,362.403 1259.31,597.777 1259.77,612.706 1260.23,398.658 1260.7,502.599 1261.16,395.315 1261.62,459.708 1262.08,334.205 1262.54,429.701 1263,531.677 1263.47,422.102 1263.93,454.424 1264.39,452.301 1264.85,463.67 1265.31,548.518 1265.77,188.316 1266.23,530.326 1266.7,602.506 1267.16,318.989 1267.62,578.102 1268.08,390.548 1268.54,460.553 1269,414.8 1269.47,542.016 1269.93,571.277 1270.39,661.204 1270.85,590.187 1271.31,399.328 1271.77,482.471 1272.24,598.26 1272.7,570.822 1273.16,442.094 1273.62,426.047 1274.08,329.126 1274.54,436.425 1275.01,657.346 1275.47,457.44 1275.93,408.754 1276.39,369.842 1276.85,624.843 1277.31,495.482 1277.78,498.719 1278.24,670.946 1278.7,444.479 1279.16,372.203 1279.62,516.904 1280.08,524.598 1280.55,662.236 1281.01,343.689 1281.47,511.124 1281.93,431.806 1282.39,550.273 1282.85,611.042 1283.32,475.86 1283.78,498.996 1284.24,511.345 1284.7,465.009 1285.16,436.431 1285.62,537.409 1286.09,506.105 1286.55,472.592 1287.01,218.206 1287.47,399.997 1287.93,608.503 1288.39,592.071 1288.86,435.871 1289.32,633.043 1289.78,577.195 1290.24,484.137 1290.7,561.064 1291.16,591.53 1291.63,603.994 1292.09,505.829 1292.55,539.951 1293.01,427.857 1293.47,684.525 1293.93,588.626 1294.4,477.728 1294.86,592.918 1295.32,339.872 1295.78,455.269 1296.24,493.763 1296.7,468.171 1297.17,532.021 1297.63,408.929 1298.09,468.34 1298.55,431.5 1299.01,529.006 1299.47,439.471 1299.94,399.715 1300.4,437.199 1300.86,482.476 1301.32,332.773 1301.78,475.779 1302.24,525.546 1302.71,539.337 1303.17,468.574 1303.63,475.88 1304.09,470.558 1304.55,495.032 1305.01,481.044 1305.48,559.494 1305.94,748.178 1306.4,540.012 1306.86,449.147 1307.32,533.234 1307.78,513.522 1308.25,488.721 1308.71,561.763 1309.17,523.529 1309.63,514.988 1310.09,506.211 1310.55,478.484 1311.02,678.788 1311.48,502.1 1311.94,575.028 1312.4,514.125 1312.86,550.184 1313.32,442.391 1313.79,439.609 1314.25,523.568 1314.71,595.692 1315.17,440.001 1315.63,448.118 1316.09,650.642 1316.56,437.813 1317.02,326.518 1317.48,395.371 1317.94,527.163 1318.4,609.864 1318.86,476.873 1319.33,349.675 1319.79,618.114 1320.25,633.979 1320.71,437.539 1321.17,410.593 1321.63,572.589 1322.09,399.238 1322.56,455.681 1323.02,418.438 1323.48,534.082 1323.94,589.4 1324.4,582.348 1324.86,411.22 1325.33,528.071 1325.79,609.024 1326.25,414.914 1326.71,563.919 1327.17,600.477 1327.63,614.448 1328.1,412.549 1328.56,485.139 1329.02,576.236 1329.48,480.576 1329.94,441.667 1330.4,429.066 1330.87,530.509 1331.33,503.641 1331.79,495.842 1332.25,351.181 1332.71,460.122 1333.17,589.152 1333.64,623.23 1334.1,555.43 1334.56,520.03 1335.02,378.634 1335.48,586.224 1335.94,606.379 1336.41,391.723 1336.87,491.781 1337.33,530.828 1337.79,411.754 1338.25,549.052 1338.71,453.311 1339.18,506.434 1339.64,437.606 1340.1,465.196 1340.56,534.512 1341.02,531.896 1341.48,621.403 1341.95,522.092 1342.41,519.806 1342.87,666.901 1343.33,527.631 1343.79,442.174 1344.25,448.662 1344.72,557.504 1345.18,317.745 1345.64,532.253 1346.1,526.574 1346.56,500.547 1347.02,370.516 1347.49,568.54 1347.95,561.717 1348.41,608.236 1348.87,463.021 1349.33,377.801 1349.79,390.669 1350.26,541.913 1350.72,461.452 1351.18,434.679 1351.64,444.942 1352.1,536.038 1352.56,591.801 1353.03,484.961 1353.49,662.375 1353.95,444.384 1354.41,328.764 1354.87,380.465 1355.33,670.982 1355.8,559.664 1356.26,496.858 1356.72,574.448 1357.18,662.707 1357.64,560.653 1358.1,592.023 1358.57,584.165 1359.03,630.444 1359.49,501.622 1359.95,521.276 1360.41,560.565 1360.87,479.177 1361.34,363.808 1361.8,484.014 1362.26,581.067 1362.72,551.076 1363.18,516.04 1363.64,519.452 1364.11,347.129 1364.57,570.346 1365.03,415.277 1365.49,549.441 1365.95,626.106 1366.41,528.033 1366.88,496.556 1367.34,576.251 1367.8,603.287 1368.26,353.716 1368.72,585.488 1369.18,550.7 1369.65,584.683 1370.11,324.162 1370.57,567.454 1371.03,486.768 1371.49,460.37 1371.95,415.565 1372.42,447.609 1372.88,568.3 1373.34,580.901 1373.8,532.637 1374.26,432.576 1374.72,681.83 1375.18,471.018 1375.65,695.939 1376.11,434.991 1376.57,354.683 1377.03,500.329 1377.49,369.755 1377.95,408.046 1378.42,581.862 1378.88,412.665 1379.34,392.48 1379.8,446.084 1380.26,385.597 1380.72,450.007 1381.19,293.174 1381.65,602.88 1382.11,575.039 1382.57,559.71 1383.03,455.776 1383.49,576.808 1383.96,474.445 1384.42,520.216 1384.88,276.617 1385.34,569.425 1385.8,598.096 1386.26,441.258 1386.73,494.664 1387.19,630.889 1387.65,551.158 1388.11,345.873 1388.57,620.748 1389.03,433.38 1389.5,528.812 1389.96,515.944 1390.42,610.321 1390.88,513.446 1391.34,346.621 1391.8,457.486 1392.27,446.27 1392.73,645.815 1393.19,495.979 1393.65,589.177 1394.11,456.232 1394.57,448.798 1395.04,323.923 1395.5,543.488 1395.96,621.713 1396.42,515.499 1396.88,406.837 1397.34,543.183 1397.81,594.159 1398.27,612.551 1398.73,695.427 1399.19,544.91 1399.65,604.98 1400.11,302.972 1400.58,474.736 1401.04,550.837 1401.5,409.566 1401.96,509.325 1402.42,482.991 1402.88,434.236 1403.35,474.219 1403.81,529.111 1404.27,539.644 1404.73,356.577 1405.19,533.34 1405.65,432.344 1406.12,421.428 1406.58,328.344 1407.04,561.162 1407.5,485.322 1407.96,538.15 1408.42,588.15 1408.89,439.319 1409.35,705.472 1409.81,473.643 1410.27,609.909 1410.73,602.643 1411.19,407.96 1411.66,463.328 1412.12,665.997 1412.58,435.003 1413.04,411.02 1413.5,502.94 1413.96,527.757 1414.43,424.355 1414.89,381.93 1415.35,485.238 1415.81,440.543 1416.27,420.464 1416.73,494.827 1417.2,587.21 1417.66,559.359 1418.12,389.912 1418.58,366.879 1419.04,552.395 1419.5,590.252 1419.97,533.772 1420.43,527.73 1420.89,609.815 1421.35,532.44 1421.81,531.364 1422.27,558.744 1422.74,488.157 1423.2,592.311 1423.66,584.667 1424.12,304.364 1424.58,381.986 1425.04,497.966 1425.51,457.36 1425.97,648.161 1426.43,268.706 1426.89,575.955 1427.35,522.848 1427.81,441.234 1428.28,416.198 1428.74,336.195 1429.2,441.562 1429.66,461.846 1430.12,594.66 1430.58,561.01 1431.04,354.528 1431.51,326.512 1431.97,405.922 1432.43,541.957 1432.89,539.702 1433.35,509.155 1433.81,687.876 1434.28,528.26 1434.74,484.503 1435.2,621.634 1435.66,477.989 1436.12,566.203 1436.58,613.459 1437.05,487.987 1437.51,492.393 1437.97,498.134 1438.43,491.891 1438.89,604.373 1439.35,546.686 1439.82,434.116 1440.28,422.469 1440.74,563.937 1441.2,678.673 1441.66,600.541 1442.12,389.004 1442.59,603.547 1443.05,539.289 1443.51,320.603 1443.97,318.873 1444.43,606.843 1444.89,505.239 1445.36,577.916 1445.82,552.057 1446.28,553.093 1446.74,421.812 1447.2,349.981 1447.66,385.096 1448.13,466.71 1448.59,500.079 1449.05,441.615 1449.51,368.739 1449.97,513.924 1450.43,566.71 1450.9,366.065 1451.36,618.611 1451.82,566.671 1452.28,296.938 1452.74,447.158 1453.2,470.572 1453.67,510.181 1454.13,479.516 1454.59,574.21 1455.05,391.598 1455.51,589.763 1455.97,422.318 1456.44,430.782 1456.9,464.534 1457.36,468.126 1457.82,429.287 1458.28,467.935 1458.74,533.208 1459.21,552.299 1459.67,414.811 1460.13,547.234 1460.59,615.711 1461.05,439.428 1461.51,521.742 1461.98,676.47 1462.44,429.615 1462.9,595.398 1463.36,359.289 1463.82,592.13 1464.28,434.171 1464.75,563.911 1465.21,578.565 1465.67,490.832 1466.13,397.801 1466.59,612.654 1467.05,642.649 1467.52,469.921 1467.98,573.5 1468.44,301.85 1468.9,642.762 1469.36,592.987 1469.82,565.475 1470.29,543.313 1470.75,562.198 1471.21,524.837 1471.67,510.182 1472.13,402.54 1472.59,508.649 1473.06,543.016 1473.52,484.318 1473.98,417.83 1474.44,377.362 1474.9,471.917 1475.36,466.744 1475.83,539.908 1476.29,464.91 1476.75,655.951 1477.21,580.728 1477.67,527.868 1478.13,435.801 1478.6,483.464 1479.06,561.608 1479.52,497.537 1479.98,578.136 1480.44,531.381 1480.9,481.211 1481.37,386.953 1481.83,263.619 1482.29,548.134 1482.75,365.643 1483.21,410.17 1483.67,545.62 1484.13,629.985 1484.6,463.497 1485.06,422.504 1485.52,752.513 1485.98,393.058 1486.44,642.941 1486.9,567.049 1487.37,549.776 1487.83,405.743 1488.29,617.587 1488.75,519.749 1489.21,486.075 1489.67,538.337 1490.14,401.914 1490.6,523.413 1491.06,527.16 1491.52,484.591 1491.98,360.309 1492.44,508.326 1492.91,402.392 1493.37,641.023 1493.83,535.419 1494.29,523.405 1494.75,709.086 1495.21,483.951 1495.68,480.635 1496.14,520.717 1496.6,343.063 1497.06,451.19 1497.52,536.524 1497.98,535.891 1498.45,557.658 1498.91,559.796 1499.37,674.053 1499.83,481.227 1500.29,491.288 1500.75,543.493 1501.22,622.199 1501.68,432.912 1502.14,369.323 1502.6,400.356 1503.06,525.986 1503.52,451.491 1503.99,524.959 1504.45,630.663 1504.91,534.753 1505.37,524.521 1505.83,408.408 1506.29,363.834 1506.76,547.273 1507.22,501.982 1507.68,539.555 1508.14,409.329 1508.6,495.496 1509.06,324.361 1509.53,539.157 1509.99,300.446 1510.45,431.813 1510.91,576.935 1511.37,631.118 1511.83,550.505 1512.3,495.354 1512.76,496.807 1513.22,618.722 1513.68,519.315 1514.14,464.439 1514.6,516.881 1515.07,452.03 1515.53,499.452 1515.99,469.836 1516.45,695.661 1516.91,560.057 1517.37,394.449 1517.84,387.476 1518.3,486.11 1518.76,399.072 1519.22,477.339 1519.68,627.224 1520.14,389.104 1520.61,520.45 1521.07,448.026 1521.53,468.363 1521.99,441.952 1522.45,528.779 1522.91,438.488 1523.38,651.22 1523.84,547.809 1524.3,566.51 1524.76,689.199 1525.22,521.207 1525.68,642.794 1526.15,531.471 1526.61,467.379 1527.07,611.397 1527.53,603.112 1527.99,614.225 1528.45,477.971 1528.92,522.738 1529.38,519.243 1529.84,562.238 1530.3,451.993 1530.76,527.179 1531.22,403.787 1531.69,503.4 1532.15,423.817 1532.61,595.318 1533.07,569.89 1533.53,434.876 1533.99,518.362 1534.46,495.89 1534.92,621.671 1535.38,484.037 1535.84,646.71 1536.3,387.094 1536.76,571.858 1537.22,469.228 1537.69,376.842 1538.15,558.584 1538.61,538.003 1539.07,455.456 1539.53,579.288 1539.99,403.224 1540.46,507.316 1540.92,492.85 1541.38,666.592 1541.84,467.497 1542.3,630.866 1542.76,491.831 1543.23,509.403 1543.69,540.325 1544.15,395.069 1544.61,395.936 1545.07,615.331 1545.53,644.943 1546,558.775 1546.46,396.021 1546.92,477.746 1547.38,485.902 1547.84,503.475 1548.3,576.994 1548.77,572.765 1549.23,567.989 1549.69,447.886 1550.15,474.626 1550.61,398.998 1551.07,360.117 1551.54,575.519 1552,672.801 1552.46,574.146 1552.92,339.237 1553.38,322.75 1553.84,511.19 1554.31,572.629 1554.77,450.145 1555.23,360.417 1555.69,387.57 1556.15,340.883 1556.61,424.587 1557.08,567.887 1557.54,508.604 1558,580.921 1558.46,555.553 1558.92,366.204 1559.38,432.042 1559.85,645.668 1560.31,329.971 1560.77,521.249 1561.23,483.324 1561.69,610.081 1562.15,543.003 1562.62,539.522 1563.08,462.465 1563.54,368.465 1564,516.006 1564.46,455.013 1564.92,370.219 1565.39,364.659 1565.85,412.696 1566.31,530.502 1566.77,585.996 1567.23,557.387 1567.69,505.237 1568.16,575.761 1568.62,387.027 1569.08,469.227 1569.54,445.009 1570,435.691 1570.46,510.003 1570.93,478.092 1571.39,451.584 1571.85,443.677 1572.31,634.218 1572.77,466.097 1573.23,458.221 1573.7,437.772 1574.16,463.881 1574.62,505.93 1575.08,648.828 1575.54,534.933 1576,457.99 1576.47,451.803 1576.93,395.603 1577.39,574.706 1577.85,442.234 1578.31,425.31 1578.77,480.956 1579.24,683.633 1579.7,685.108 1580.16,464.882 1580.62,536.876 1581.08,587.193 1581.54,428.264 1582.01,548.014 1582.47,318.976 1582.93,430.196 1583.39,557.2 1583.85,470.685 1584.31,489.159 1584.78,555.423 1585.24,495.627 1585.7,474.893 1586.16,535.733 1586.62,409.28 1587.08,471.562 1587.55,530.199 1588.01,432.969 1588.47,598.33 1588.93,552.957 1589.39,387.523 1589.85,398.036 1590.32,598.572 1590.78,597.824 1591.24,396.122 1591.7,370.541 1592.16,328.587 1592.62,571.789 1593.08,408.678 1593.55,402.107 1594.01,436.834 1594.47,404.385 1594.93,443.33 1595.39,510.503 1595.85,419.567 1596.32,563.732 1596.78,555.222 1597.24,578.83 1597.7,520.046 1598.16,450.593 1598.62,498.898 1599.09,310.943 1599.55,448.317 1600.01,531.996 1600.47,645.162 1600.93,451.651 1601.39,334.008 1601.86,634.224 1602.32,489.777 1602.78,603.289 1603.24,574.602 1603.7,284.188 1604.16,518.856 1604.63,501.18 1605.09,586.079 1605.55,408.372 1606.01,658.092 1606.47,398.11 1606.93,522.144 1607.4,561.697 1607.86,301.052 1608.32,459.733 1608.78,324.635 1609.24,546.528 1609.7,645.112 1610.17,561.954 1610.63,604.108 1611.09,501.25 1611.55,458.361 1612.01,422.841 1612.47,536.825 1612.94,474.385 1613.4,614.585 1613.86,526.953 1614.32,334.228 1614.78,316.495 1615.24,645.486 1615.71,410.533 1616.17,429.22 1616.63,635.289 1617.09,854.388 1617.55,457.454 1618.01,529.039 1618.48,439.711 1618.94,518.413 1619.4,527.103 1619.86,500.226 1620.32,444.684 1620.78,517.861 1621.25,426.195 1621.71,392.205 1622.17,454.276 1622.63,427.997 1623.09,561.853 1623.55,520.594 1624.02,543.266 1624.48,448.769 1624.94,495.849 1625.4,509.581 1625.86,542.967 1626.32,553.561 1626.79,559.559 1627.25,478.778 1627.71,584.459 1628.17,508.251 1628.63,536.523 1629.09,549.966 1629.56,505.082 1630.02,542.28 1630.48,474.52 1630.94,373.141 1631.4,353.372 1631.86,529.326 1632.33,474.042 1632.79,300.101 1633.25,424.401 1633.71,326.303 1634.17,498.113 1634.63,587.223 1635.1,552.522 1635.56,429.44 1636.02,543.017 1636.48,313.094 1636.94,436.753 1637.4,382.088 1637.87,334.644 1638.33,492.087 1638.79,602.522 1639.25,627.993 1639.71,704.231 1640.17,766.165 1640.64,446.069 1641.1,287.184 1641.56,343.238 1642.02,602.662 1642.48,487.265 1642.94,324.411 1643.41,500.138 1643.87,501.268 1644.33,243.745 1644.79,673.376 1645.25,370.159 1645.71,559.11 1646.17,514.263 1646.64,486.504 1647.1,461.474 1647.56,456.767 1648.02,332.025 1648.48,542.33 1648.94,447.383 1649.41,443.436 1649.87,596.985 1650.33,437.325 1650.79,467.924 1651.25,430.097 1651.71,614.241 1652.18,571.551 1652.64,480.693 1653.1,457.616 1653.56,334.335 1654.02,596.098 1654.48,513.257 1654.95,236.482 1655.41,537.182 1655.87,523.594 1656.33,674.234 1656.79,553.842 1657.25,514.608 1657.72,439.599 1658.18,416.063 1658.64,450.542 1659.1,414.006 1659.56,516.293 1660.02,567.268 1660.49,538.169 1660.95,463.986 1661.41,313.99 1661.87,565.658 1662.33,504.374 1662.79,551.753 1663.26,524.836 1663.72,487.666 1664.18,450.319 1664.64,507.297 1665.1,526.292 1665.56,527.164 1666.03,486.65 1666.49,513.435 1666.95,508.375 1667.41,473.556 1667.87,341.824 1668.33,585.326 1668.8,446.083 1669.26,410.236 1669.72,502.177 1670.18,580.444 1670.64,499.167 1671.1,474.625 1671.57,636.47 1672.03,548.444 1672.49,473.32 1672.95,523.057 1673.41,513.145 1673.87,539.256 1674.34,451.8 1674.8,557.595 1675.26,584.104 1675.72,500.389 1676.18,575.415 1676.64,366.938 1677.11,587.965 1677.57,551.959 1678.03,413.142 1678.49,624.358 1678.95,466.421 1679.41,535.903 1679.88,467.744 1680.34,614.125 1680.8,558.627 1681.26,617.28 1681.72,492.237 1682.18,633.18 1682.65,589.207 1683.11,452.153 1683.57,399.423 1684.03,568.194 1684.49,539.017 1684.95,638.507 1685.42,471.234 1685.88,409.73 1686.34,559.624 1686.8,579.192 1687.26,650.706 1687.72,538.241 1688.19,455.05 1688.65,701.509 1689.11,439.836 1689.57,468.15 1690.03,499.954 1690.49,685.452 1690.96,358.717 1691.42,573.997 1691.88,531.767 1692.34,514.43 1692.8,581.299 1693.26,509.463 1693.73,464.353 1694.19,542.921 1694.65,391.238 1695.11,467.126 1695.57,413.582 1696.03,487.212 1696.5,350.588 1696.96,514.671 1697.42,582.808 1697.88,413.378 1698.34,493.462 1698.8,565.871 1699.26,465.685 1699.73,564.324 1700.19,479.663 1700.65,522.497 1701.11,506.629 1701.57,284.439 1702.03,380.006 1702.5,458.949 1702.96,668.089 1703.42,340.292 1703.88,532.141 1704.34,649.224 1704.8,569.852 1705.27,585.658 1705.73,620.279 1706.19,460.499 1706.65,554.513 1707.11,441.614 1707.57,480.538 1708.04,420.028 1708.5,556.042 1708.96,380.489 1709.42,536.848 1709.88,507.034 1710.34,579.941 1710.81,742.749 1711.27,575.925 1711.73,626.904 1712.19,487.443 1712.65,426.548 1713.11,517.476 1713.58,419.169 1714.04,528.231 1714.5,559.511 1714.96,633.604 1715.42,301.295 1715.88,514.636 1716.35,597.402 1716.81,489.424 1717.27,679.006 1717.73,365.988 1718.19,488.735 1718.65,385.94 1719.12,609.964 1719.58,535.096 1720.04,475.568 1720.5,392.443 1720.96,509.606 1721.42,538.253 1721.89,518.642 1722.35,487.091 1722.81,494.63 1723.27,747.947 1723.73,568.126 1724.19,383.08 1724.66,485.366 1725.12,406.25 1725.58,585.304 1726.04,587.133 1726.5,421.176 1726.96,364.699 1727.43,514.527 1727.89,634.867 1728.35,677.797 1728.81,580.723 1729.27,481.783 1729.73,495.688 1730.2,649.654 1730.66,474.019 1731.12,569.118 1731.58,484.439 1732.04,505.128 1732.5,562.888 1732.97,518.722 1733.43,587.96 1733.89,551.254 1734.35,442.742 1734.81,547.919 1735.27,431.593 1735.74,478.17 1736.2,381.38 1736.66,331.218 1737.12,457.127 1737.58,424.762 1738.04,330.869 1738.51,666.472 1738.97,438.915 1739.43,555.093 1739.89,423.355 1740.35,462.445 1740.81,623.414 1741.28,519.452 1741.74,534.272 1742.2,680.842 1742.66,358.457 1743.12,453.257 1743.58,489.396 1744.05,490.297 1744.51,508.803 1744.97,569.099 1745.43,508.07 1745.89,387.249 1746.35,490.666 1746.82,493.645 1747.28,619.357 1747.74,406.025 1748.2,553.979 1748.66,618.045 1749.12,427.257 1749.59,516.933 1750.05,504.67 1750.51,613.489 1750.97,402.275 1751.43,444.231 1751.89,400.121 1752.36,428.501 1752.82,445.916 1753.28,537.714 1753.74,600.034 1754.2,442.361 1754.66,329.774 1755.12,499.312 1755.59,608.837 1756.05,528.718 1756.51,568.9 1756.97,414.216 1757.43,554.985 1757.89,373.109 1758.36,617.111 1758.82,567.518 1759.28,567.355 1759.74,546.855 1760.2,393.204 1760.66,429.639 1761.13,483.911 1761.59,658.17 1762.05,327.078 1762.51,396.409 1762.97,531.543 1763.43,333.27 1763.9,542.793 1764.36,469.585 1764.82,448.549 1765.28,591.326 1765.74,526.838 1766.2,723.036 1766.67,736.544 1767.13,415.427 1767.59,390.499 1768.05,527.852 1768.51,486.662 1768.97,479.762 1769.44,459.747 1769.9,537.913 1770.36,591.011 1770.82,451.938 1771.28,591.596 1771.74,667.355 1772.21,495.503 1772.67,411.744 1773.13,507.212 1773.59,608.083 1774.05,502.49 1774.51,380.878 1774.98,679.037 1775.44,494.746 1775.9,509.636 1776.36,372.393 1776.82,513.003 1777.28,517.164 1777.75,504.75 1778.21,500.854 1778.67,508.068 1779.13,657.613 1779.59,558.728 1780.05,441.202 1780.52,571.269 1780.98,680.978 1781.44,539.136 1781.9,521.76 1782.36,550.039 1782.82,466.373 1783.29,434.931 1783.75,497.906 1784.21,428.808 1784.67,634.154 1785.13,643.022 1785.59,531.951 1786.06,539.408 1786.52,553.832 1786.98,568.285 1787.44,336.589 1787.9,438.41 1788.36,415.439 1788.83,543.59 1789.29,508.584 1789.75,605.997 1790.21,396.691 1790.67,478.948 1791.13,660.785 1791.6,506.667 1792.06,377.899 1792.52,409.215 1792.98,428.619 1793.44,498.816 1793.9,560.809 1794.37,678.751 1794.83,532.595 1795.29,478.454 1795.75,397.707 1796.21,569.854 1796.67,486.626 1797.14,425.8 1797.6,552.024 1798.06,445.922 1798.52,429.826 1798.98,688.304 1799.44,421.115 1799.91,596.856 1800.37,515.235 1800.83,598.841 1801.29,499.939 1801.75,581.62 1802.21,482.338 1802.68,426.554 1803.14,300.185 1803.6,602.918 1804.06,482.962 1804.52,617.622 1804.98,390.628 1805.45,441.237 1805.91,499.562 1806.37,522.062 1806.83,593.825 1807.29,487.074 1807.75,447.959 1808.21,453.357 1808.68,368.884 1809.14,565.8 1809.6,508.896 1810.06,577.468 1810.52,556.277 1810.98,700.736 1811.45,501.955 1811.91,610.551 1812.37,594.321 1812.83,637.565 1813.29,309.287 1813.75,619.388 1814.22,376.544 1814.68,484.153 1815.14,534.893 1815.6,341.101 1816.06,339.614 1816.52,448.541 1816.99,488.044 1817.45,597.433 1817.91,726.586 1818.37,409.615 1818.83,577.389 1819.29,415.153 1819.76,541.839 1820.22,524.36 1820.68,392.632 1821.14,414.445 1821.6,510.785 1822.06,543.871 1822.53,448.459 1822.99,399.531 1823.45,329.171 1823.91,700.806 1824.37,445.323 1824.83,615.918 1825.3,367.277 1825.76,425.702 1826.22,524.107 1826.68,558.977 1827.14,482.023 1827.6,353.26 1828.07,393.151 1828.53,485.099 1828.99,476.215 1829.45,558.604 1829.91,267.668 1830.37,490.034 1830.84,547.349 1831.3,535.058 1831.76,544.111 1832.22,361.461 1832.68,427.332 1833.14,259.806 1833.61,550.954 1834.07,499.645 1834.53,448.571 1834.99,430.69 1835.45,442.592 1835.91,654.364 1836.38,529.953 1836.84,556.33 1837.3,571.398 1837.76,381.546 1838.22,505.853 1838.68,529.49 1839.15,431.603 1839.61,441.983 1840.07,402.447 1840.53,405.861 1840.99,710.568 1841.45,364.992 1841.92,484.508 1842.38,550.024 1842.84,592.527 1843.3,407.967 1843.76,444.141 1844.22,286.766 1844.69,484.979 1845.15,511.815 1845.61,537.933 1846.07,567.279 1846.53,613.625 1846.99,445.183 1847.46,440.948 1847.92,346.23 1848.38,386.416 1848.84,461.846 1849.3,707.901 1849.76,579.225 1850.23,408.68 1850.69,571.98 1851.15,389.387 1851.61,364.661 1852.07,536.694 1852.53,375.917 1853,481.651 1853.46,444.043 1853.92,594.244 1854.38,529.561 1854.84,385.406 1855.3,563.039 1855.77,576.682 1856.23,577.449 1856.69,556.486 1857.15,573.492 1857.61,568.831 1858.07,430.834 1858.54,550.426 1859,414.434 1859.46,395.313 1859.92,412.816 1860.38,548.304 1860.84,640.595 1861.31,448.905 1861.77,638.846 1862.23,456.412 1862.69,419.853 1863.15,505.684 1863.61,556.07 1864.07,574.807 1864.54,483.841 1865,569.2 1865.46,500.609 1865.92,462.671 1866.38,467.77 1866.84,313.555 1867.31,550.472 1867.77,536.278 1868.23,331.577 1868.69,448.551 1869.15,236.281 1869.61,489.925 1870.08,466.817 1870.54,497.496 1871,515.946 1871.46,191.726 1871.92,488.225 1872.38,578.618 1872.85,627.344 1873.31,424.021 1873.77,612.337 1874.23,447.635 1874.69,410.4 1875.15,430.492 1875.62,580.236 1876.08,532.314 1876.54,609.257 1877,400.414 1877.46,407.536 1877.92,629.145 1878.39,365.798 1878.85,687.279 1879.31,498.869 1879.77,442.116 1880.23,523.541 1880.69,461.242 1881.16,398.451 1881.62,461.873 1882.08,535.815 1882.54,623.451 1883,486.217 1883.46,365.786 1883.93,564.616 1884.39,483.979 1884.85,409.592 1885.31,491.211 1885.77,535.304 1886.23,381.389 1886.7,528.621 1887.16,698.89 1887.62,385.517 1888.08,613.497 1888.54,470.724 1889,471.321 1889.47,508.631 1889.93,470.848 1890.39,341.261 1890.85,605.437 1891.31,519.398 1891.77,332.29 1892.24,568.398 1892.7,280.412 1893.16,442.619 1893.62,487.932 1894.08,352.546 1894.54,482.59 1895.01,625.332 1895.47,485.176 1895.93,443.58 1896.39,642.513 1896.85,496.393 1897.31,463.767 1897.78,415.674 1898.24,341.473 1898.7,474.002 1899.16,486.332 1899.62,540.315 1900.08,493.69 1900.55,475.304 1901.01,380.374 1901.47,526.05 1901.93,397.414 1902.39,720.796 1902.85,612.4 1903.32,548.683 1903.78,454.991 1904.24,476.876 1904.7,492.389 1905.16,571.387 1905.62,444.768 1906.09,609.639 1906.55,604.054 1907.01,540.975 1907.47,368.409 1907.93,414.348 1908.39,414.975 1908.86,567 1909.32,525.785 1909.78,389.259 1910.24,521.236 1910.7,667.662 1911.16,563.497 1911.63,535.099 1912.09,515.616 1912.55,459.397 1913.01,600.876 1913.47,505.405 1913.93,419.312 1914.4,515.919 1914.86,584.834 1915.32,503.805 1915.78,508.009 1916.24,465.459 1916.7,478.514 1917.16,483.803 1917.63,428.857 1918.09,524.825 1918.55,497.376 1919.01,413.818 1919.47,584.038 1919.93,536.005 1920.4,286.834 1920.86,682.193 1921.32,459.064 1921.78,602.821 1922.24,456.334 1922.7,581.848 1923.17,479.335 1923.63,388.789 1924.09,355.261 1924.55,552.483 1925.01,591.001 1925.47,487.811 1925.94,417.003 1926.4,507.223 1926.86,699.177 1927.32,622.89 1927.78,405.591 1928.24,500.393 1928.71,292.015 1929.17,448.287 1929.63,436.711 1930.09,645.091 1930.55,519.477 1931.01,476.045 1931.48,475.051 1931.94,524.368 1932.4,527.536 1932.86,514.697 1933.32,291.182 1933.78,594.437 1934.25,417.165 1934.71,581.416 1935.17,323.222 1935.63,491.601 1936.09,554.029 1936.55,393.371 1937.02,341.102 1937.48,488.885 1937.94,592 1938.4,509.194 1938.86,496.188 1939.32,518.152 1939.79,540.22 1940.25,414.909 1940.71,570.754 1941.17,474.565 1941.63,444.712 1942.09,397.121 1942.56,510.649 1943.02,456.142 1943.48,589.236 1943.94,455.575 1944.4,485.266 1944.86,516.032 1945.33,467.886 1945.79,488.022 1946.25,269.677 1946.71,518.587 1947.17,540.521 1947.63,579.962 1948.1,516.777 1948.56,670.191 1949.02,581.159 1949.48,600.083 1949.94,458.485 1950.4,541.462 1950.87,539.761 1951.33,298.115 1951.79,264.542 1952.25,422.496 1952.71,526.999 1953.17,496.738 1953.64,475.421 1954.1,287.232 1954.56,363.36 1955.02,527.504 1955.48,494.461 1955.94,547.894 1956.41,537.826 1956.87,579.093 1957.33,502.504 1957.79,489.087 1958.25,564.724 1958.71,607.97 1959.18,480.91 1959.64,519.437 1960.1,598.466 1960.56,581.38 1961.02,286.54 1961.48,510.619 1961.95,417.059 1962.41,536.219 1962.87,475.429 1963.33,615.826 1963.79,504.573 1964.25,364.278 1964.72,573.237 1965.18,546.704 1965.64,304.493 1966.1,688.803 1966.56,257.645 1967.02,555.921 1967.49,471.312 1967.95,449.752 1968.41,639.997 1968.87,473.627 1969.33,483.535 1969.79,521.554 1970.25,558.404 1970.72,492.006 1971.18,600.178 1971.64,620.519 1972.1,580.654 1972.56,684.592 1973.02,503.334 1973.49,505.031 1973.95,521.574 1974.41,490.47 1974.87,488.18 1975.33,541.956 1975.79,579.902 1976.26,501.985 1976.72,530.686 1977.18,517.724 1977.64,488.214 1978.1,518.782 1978.56,722.813 1979.03,568.279 1979.49,518.001 1979.95,432.256 1980.41,504.625 1980.87,509.317 1981.33,568.786 1981.8,460.399 1982.26,599.596 1982.72,488.108 1983.18,391.534 1983.64,495.839 1984.1,590.242 1984.57,551.493 1985.03,525.409 1985.49,435.518 1985.95,452.276 1986.41,633.069 1986.87,536.314 1987.34,326.302 1987.8,508.231 1988.26,409.167 1988.72,760.678 1989.18,411.339 1989.64,539.734 1990.11,509.212 1990.57,669.515 1991.03,462.892 1991.49,367.098 1991.95,414.818 1992.41,518.035 1992.88,416.44 1993.34,669.246 1993.8,475.083 1994.26,496.756 1994.72,333.157 1995.18,514.664 1995.65,635.628 1996.11,699.704 1996.57,385.007 1997.03,479.049 1997.49,410.226 1997.95,527.154 1998.42,306.939 1998.88,335.372 1999.34,551.877 1999.8,521.845 2000.26,294.25 2000.72,604.517 2001.19,486.98 2001.65,351.946 2002.11,350.295 2002.57,599.833 2003.03,446.824 2003.49,408.669 2003.96,348.004 2004.42,395.231 2004.88,591.293 2005.34,531.064 2005.8,388.523 2006.26,653.534 2006.73,460.378 2007.19,583.838 2007.65,576.709 2008.11,356.317 2008.57,487.847 2009.03,503.843 2009.5,548.685 2009.96,492.764 2010.42,438.509 2010.88,550.259 2011.34,574.027 2011.8,492.355 2012.27,449.171 2012.73,443.724 2013.19,460.375 2013.65,513.175 2014.11,581.447 2014.57,536.383 2015.04,559.176 2015.5,513.496 2015.96,487.37 2016.42,359.723 2016.88,545.459 2017.34,541.696 2017.81,366.482 2018.27,353.305 2018.73,498.697 2019.19,493.637 2019.65,558.56 2020.11,454.637 2020.58,515.861 2021.04,611.269 2021.5,496.015 2021.96,505.984 2022.42,562.059 2022.88,581.319 2023.35,625.073 2023.81,444.797 2024.27,467.7 2024.73,575.251 2025.19,552.317 2025.65,435.015 2026.11,562.16 2026.58,629.829 2027.04,497.611 2027.5,547.271 2027.96,465.46 2028.42,449.391 2028.88,377.963 2029.35,609.32 2029.81,545.211 2030.27,561.456 2030.73,425.96 2031.19,681.189 2031.65,528.22 2032.12,514.721 2032.58,473.142 2033.04,589.651 2033.5,398.485 2033.96,565.183 2034.42,507.596 2034.89,416.683 2035.35,563.391 2035.81,265.911 2036.27,582.677 2036.73,376.851 2037.19,645.096 2037.66,348.691 2038.12,557.177 2038.58,546.745 2039.04,523.544 2039.5,600.755 2039.96,500.116 2040.43,433.718 2040.89,575.353 2041.35,372.74 2041.81,679.533 2042.27,472.995 2042.73,500.483 2043.2,407.338 2043.66,424.981 2044.12,485.466 2044.58,455.77 2045.04,525.801 2045.5,511.643 2045.97,378.312 2046.43,365.762 2046.89,387.805 2047.35,363.196 2047.81,448.375 2048.27,510.115 2048.74,538.296 2049.2,434.654 2049.66,594.811 2050.12,273.368 2050.58,473.081 2051.04,421.289 2051.51,572.146 2051.97,430.203 2052.43,405.922 2052.89,597.425 2053.35,494.703 2053.81,432.929 2054.28,392.645 2054.74,615.498 2055.2,628.506 2055.66,588.847 2056.12,501.865 2056.58,480.549 2057.05,496.741 2057.51,612.317 2057.97,364.828 2058.43,497.142 2058.89,564.372 2059.35,512.252 2059.82,438.584 2060.28,441.381 2060.74,389.798 2061.2,547.966 2061.66,381.92 2062.12,588.684 2062.59,514.225 2063.05,524.131 2063.51,522.421 2063.97,539.828 2064.43,425.384 2064.89,521.634 2065.36,477.775 2065.82,613.213 2066.28,643.931 2066.74,485.328 2067.2,542.158 2067.66,469.471 2068.13,548.881 2068.59,633.861 2069.05,513.726 2069.51,457.692 2069.97,642.258 2070.43,613.296 2070.9,251.848 2071.36,644.679 2071.82,551.689 2072.28,460.613 2072.74,455.67 2073.2,545.681 2073.67,510.328 2074.13,530.732 2074.59,367.692 2075.05,447.656 2075.51,526.24 2075.97,480.679 2076.44,440.482 2076.9,356.048 2077.36,347.375 2077.82,543.555 2078.28,400.533 2078.74,396.976 2079.2,537.549 2079.67,638.624 2080.13,442.665 2080.59,526.03 2081.05,443.46 2081.51,317.118 2081.97,501.846 2082.44,488.918 2082.9,497.237 2083.36,507.466 2083.82,478.16 2084.28,582.022 2084.74,374.394 2085.21,398.853 2085.67,591.26 2086.13,457.897 2086.59,512.157 2087.05,474.998 2087.51,584.52 2087.98,490.419 2088.44,458.382 2088.9,622.173 2089.36,636.734 2089.82,635.038 2090.28,403.469 2090.75,454.311 2091.21,462.002 2091.67,578.959 2092.13,490.402 2092.59,460.688 2093.05,438.269 2093.52,482.123 2093.98,500.544 2094.44,425.493 2094.9,426.709 2095.36,506.193 2095.82,444.066 2096.29,424.88 2096.75,492.935 2097.21,506.45 2097.67,554.681 2098.13,393.203 2098.59,516.55 2099.06,437.419 2099.52,540.296 2099.98,498.151 2100.44,651.478 2100.9,431.303 2101.36,480.76 2101.83,671.861 2102.29,352.635 2102.75,535.422 2103.21,478.83 2103.67,608.353 2104.13,555.277 2104.6,623.354 2105.06,548.388 2105.52,493.257 2105.98,448.494 2106.44,296.428 2106.9,515.76 2107.37,580.426 2107.83,688.442 2108.29,629.714 2108.75,412.166 2109.21,615.846 2109.67,472.146 2110.14,515.092 2110.6,529.868 2111.06,463.261 2111.52,477.123 2111.98,533.085 2112.44,610.894 2112.91,324.979 2113.37,327.68 2113.83,508.714 2114.29,493.533 2114.75,508.123 2115.21,566.607 2115.68,586.767 2116.14,458.28 2116.6,568.82 2117.06,430.815 2117.52,607.033 2117.98,536.009 2118.45,357.667 2118.91,549.55 2119.37,240.367 2119.83,610.619 2120.29,570.992 2120.75,571.112 2121.22,519.548 2121.68,604.411 2122.14,589.875 2122.6,554.431 2123.06,384.76 2123.52,488.047 2123.99,580.23 2124.45,572.655 2124.91,682.005 2125.37,656.178 2125.83,312.449 2126.29,568.419 2126.76,421.322 2127.22,507.416 2127.68,603.148 2128.14,348.25 2128.6,356.116 2129.06,449.261 2129.53,490.182 2129.99,529.39 2130.45,507.286 2130.91,360.687 2131.37,594.962 2131.83,388.579 2132.3,563.251 2132.76,552.014 2133.22,374.708 2133.68,546.824 2134.14,427.801 2134.6,459.755 2135.06,575.246 2135.53,403.44 2135.99,480.524 2136.45,394.504 2136.91,441.481 2137.37,637.607 2137.83,465.389 2138.3,679.488 2138.76,520.772 2139.22,549.958 2139.68,415.621 2140.14,545.805 2140.6,318.806 2141.07,524.187 2141.53,667.224 2141.99,471.052 2142.45,347.682 2142.91,276.276 2143.37,434.917 2143.84,553.643 2144.3,387.423 2144.76,458.555 2145.22,614.18 2145.68,567.876 2146.14,424.521 2146.61,509.222 2147.07,519.489 2147.53,499.211 2147.99,540.126 2148.45,271.208 2148.91,402.781 2149.38,496.839 2149.84,485.708 2150.3,500.118 2150.76,675.471 2151.22,475.476 2151.68,587.85 2152.15,640.539 2152.61,590.371 2153.07,460.526 2153.53,526.671 2153.99,614.832 2154.45,523.302 2154.92,534.616 2155.38,326.069 2155.84,565.851 2156.3,397.364 2156.76,463.471 2157.22,518.403 2157.69,381.58 2158.15,430.839 2158.61,538.425 2159.07,655.283 2159.53,432.99 2159.99,315.327 2160.46,267.724 2160.92,484.294 2161.38,382.059 2161.84,325.194 2162.3,418.272 2162.76,470.104 2163.23,557.568 2163.69,523.407 2164.15,443.559 2164.61,409.697 2165.07,510.57 2165.53,438.835 2166,438.118 2166.46,474.843 2166.92,456.234 2167.38,485.037 2167.84,555.393 2168.3,536.084 2168.77,525.404 2169.23,544.405 2169.69,518.857 2170.15,437.132 2170.61,517.185 2171.07,596.596 2171.54,488.648 2172,634.472 2172.46,497.792 2172.92,380.252 2173.38,563.147 2173.84,476.168 2174.31,548.778 2174.77,457.074 2175.23,449.74 2175.69,374.944 2176.15,506.395 2176.61,518.513 2177.08,674.143 2177.54,675.396 2178,622.69 2178.46,474.925 2178.92,584.552 2179.38,426.044 2179.85,580.505 2180.31,572.529 2180.77,523.795 2181.23,505.786 2181.69,567.606 2182.15,317.671 2182.62,685.867 2183.08,573.486 2183.54,546.761 2184,437.103 2184.46,535.692 2184.92,578.219 2185.39,599.41 2185.85,393.943 2186.31,489.693 2186.77,465.897 2187.23,455.15 2187.69,281.089 2188.15,319.165 2188.62,605.691 2189.08,533.655 2189.54,454.918 2190,445.537 2190.46,368.547 2190.92,594.81 2191.39,456.994 2191.85,473.224 2192.31,493.823 2192.77,418.723 2193.23,388.825 2193.69,410.106 2194.16,514.642 2194.62,415.232 2195.08,517.575 2195.54,587.904 2196,504.314 2196.46,543.78 2196.93,686.814 2197.39,527.735 2197.85,438.774 2198.31,531.468 2198.77,496.283 2199.23,575.672 2199.7,308.192 2200.16,451.704 2200.62,489.621 2201.08,441.384 2201.54,490.429 2202,481.187 2202.47,372.371 2202.93,413.139 2203.39,611.4 2203.85,436.972 2204.31,601.198 2204.77,492.955 2205.24,499.56 2205.7,694.924 2206.16,473.201 2206.62,515.306 2207.08,535.903 2207.54,427.887 2208.01,502.331 2208.47,446.118 2208.93,388.089 2209.39,564.083 2209.85,489.668 2210.31,429.441 2210.78,492.314 2211.24,679.888 2211.7,585.72 2212.16,708.216 2212.62,421.805 2213.08,521.756 2213.55,541.62 2214.01,640.475 2214.47,552.344 2214.93,286.276 2215.39,581.606 2215.85,565.05 2216.32,538.445 2216.78,537.976 2217.24,519.753 2217.7,349.968 2218.16,503.9 2218.62,250.924 2219.09,685.062 2219.55,396.183 2220.01,603.302 2220.47,522.138 2220.93,316.777 2221.39,531.405 2221.86,516.396 2222.32,397.702 2222.78,479.47 2223.24,588.98 2223.7,571.651 2224.16,498.786 2224.63,449.119 2225.09,609.772 2225.55,510.048 2226.01,498.466 2226.47,447.48 2226.93,456.411 2227.4,457.532 2227.86,392.932 2228.32,537.798 2228.78,454.659 2229.24,449.85 2229.7,430.853 2230.17,521.747 2230.63,567.683 2231.09,453.325 2231.55,463.641 2232.01,469.435 2232.47,673.795 2232.94,439.664 2233.4,512.879 2233.86,526.901 2234.32,516.171 2234.78,474.877 2235.24,637.718 2235.71,591.097 2236.17,561.265 2236.63,591.08 2237.09,500.738 2237.55,477.91 2238.01,566.401 2238.48,450.63 2238.94,439.655 2239.4,492.248 2239.86,549.74 2240.32,491.352 2240.78,593.302 2241.24,460.816 2241.71,491.933 2242.17,501.666 2242.63,437.525 2243.09,505.87 2243.55,510.305 2244.01,454.278 2244.48,584.21 2244.94,409.73 2245.4,510.954 2245.86,436.322 2246.32,416.081 2246.78,604.543 2247.25,639.4 2247.71,559.15 2248.17,573.259 2248.63,582.484 2249.09,444.708 2249.55,471.355 2250.02,425.987 2250.48,478.177 2250.94,484.992 2251.4,468.553 2251.86,513.663 2252.32,496.539 2252.79,489.989 2253.25,501.256 2253.71,433.328 2254.17,400.682 2254.63,546.43 2255.09,569.133 2255.56,466.726 2256.02,587.149 2256.48,562.201 2256.94,567.894 2257.4,425.813 2257.86,687.558 2258.33,538.023 2258.79,472.48 2259.25,512.305 2259.71,413.465 2260.17,627.72 2260.63,555.347 2261.1,404.386 2261.56,423.293 2262.02,509.299 2262.48,551.573 2262.94,298.867 2263.4,452.736 2263.87,519.463 2264.33,493.167 2264.79,297.182 2265.25,452.697 2265.71,536.066 2266.17,323.749 2266.64,523.864 2267.1,536.092 2267.56,447.559 2268.02,483.524 2268.48,439.283 2268.94,336.73 2269.41,490.601 2269.87,560.919 2270.33,664.611 2270.79,536.901 2271.25,531.671 2271.71,406.728 2272.18,499.886 2272.64,543.84 2273.1,466.356 2273.56,467.859 2274.02,455.988 2274.48,381.789 2274.95,617.479 2275.41,536.979 2275.87,453.007 2276.33,441.425 2276.79,403.121 2277.25,543.05 2277.72,412.992 2278.18,634.186 2278.64,532.641 2279.1,461.918 2279.56,422.318 2280.02,287.758 2280.49,524.215 2280.95,517.087 2281.41,478.861 2281.87,554.481 2282.33,600.812 2282.79,359.327 2283.26,388.136 2283.72,631.797 2284.18,435.362 2284.64,365.195 2285.1,446.239 2285.56,375.746 2286.03,510.006 2286.49,382.673 2286.95,559.049 2287.41,462.286 2287.87,366.382 2288.33,455.994 2288.8,577.586 2289.26,471.118 2289.72,509.721 2290.18,627.84 2290.64,558.25 2291.1,505.198 2291.57,370.111 2292.03,688.086 2292.49,522.27 2292.95,553.43 2293.41,391.935 2293.87,548.665 2294.34,401.509 2294.8,494.664 2295.26,662.943 2295.72,484 2296.18,572.6 2296.64,529.959 2297.1,359.205 2297.57,334.243 2298.03,427.975 2298.49,445.964 2298.95,460.87 2299.41,410.68 2299.87,473.937 2300.34,540.213 2300.8,561.779 2301.26,488.555 2301.72,538.597 2302.18,551.255 2302.64,380.154 2303.11,474.559 2303.57,530.548 2304.03,545.322 2304.49,575.888 2304.95,563.515 2305.41,328.775 2305.88,546.277 2306.34,391.104 2306.8,615.769 2307.26,694.833 2307.72,491.08 2308.18,536.205 2308.65,400.147 2309.11,516.72 2309.57,428.03 2310.03,498.226 2310.49,569.28 2310.95,432.991 2311.42,601.862 2311.88,461.481 2312.34,298.074 2312.8,537.189 2313.26,482.839 2313.72,364.517 2314.19,607.422 2314.65,335.892 2315.11,364.409 2315.57,492.626 2316.03,474.92 2316.49,355.74 2316.96,603.252 2317.42,359.904 2317.88,440.125 2318.34,410.515 2318.8,298.753 2319.26,400.361 2319.73,572.544 2320.19,500.165 2320.65,372.792 2321.11,391.63 2321.57,477.935 2322.03,375.017 2322.5,387.862 2322.96,472.602 2323.42,336.9 2323.88,478.557 2324.34,510.152 2324.8,468.363 2325.27,359.598 2325.73,473.408 2326.19,391.204 2326.65,463.386 2327.11,412.771 2327.57,567.758 2328.04,553.133 2328.5,595.796 2328.96,484.414 2329.42,415.838 2329.88,422.844 2330.34,541.842 2330.81,515.872 2331.27,477.147 2331.73,508.862 2332.19,500.089 2332.65,481.012 2333.11,610.533 2333.58,277.534 2334.04,367.811 2334.5,649.108 2334.96,467.5 2335.42,537.188 2335.88,596.452 2336.35,494.041 2336.81,602.602 2337.27,394.91 2337.73,547.09 2338.19,694.374 2338.65,469.557 2339.12,464.53 2339.58,435.905 2340.04,557.297 2340.5,377.787 2340.96,594.112 2341.42,465.435 2341.89,497.337 2342.35,568.593 2342.81,360.27 2343.27,482.026 2343.73,410.62 2344.19,455.886 2344.66,495.544 2345.12,508.174 2345.58,580.635 2346.04,675.469 2346.5,506.776 2346.96,582.126 2347.43,497.928 2347.89,466.558 2348.35,352.996 2348.81,303.59 2349.27,580.969 2349.73,515.91 2350.19,506.74 2350.66,455.749 2351.12,422.654 2351.58,524.78 2352.04,614.167 2352.5,453.547 2352.96,479.177 2353.43,580.46 2353.89,508.111 2354.35,553.969 2354.81,458.392 2355.27,414.417 2355.73,449.02 2356.2,496.353 2356.66,324.747 2357.12,526.74 2357.58,452.643 2358.04,333.753 2358.5,388.083 2358.97,527.25 2359.43,762.783 2359.89,564.044 2360.35,387.609 2360.81,345.116 2361.27,560.613 2361.74,512.426 2362.2,442.393 2362.66,453.15 2363.12,468.374 2363.58,801.504 2364.04,320.565 2364.51,386.845 2364.97,629.71 2365.43,504.367 2365.89,637.881 2366.35,651.615 2366.81,524.685 2367.28,550.651 2367.74,533.385 2368.2,569.383 2368.66,283.452 2369.12,359.88 2369.58,491.069 2370.05,557.066 2370.51,448.987 2370.97,376.424 2371.43,439.229 2371.89,471.964 2372.35,502.821 2372.82,400.328 2373.28,485.248 2373.74,524.8 2374.2,520.219 2374.66,470.708 2375.12,483.644 2375.59,590.311 2376.05,506.515 2376.51,360.716 2376.97,544.114 2377.43,520.737 2377.89,383.871 2378.36,363.845 2378.82,432.367 2379.28,553.628 2379.74,497.854 2380.2,560.404 2380.66,430.23 2381.13,438.779 2381.59,440.287 2382.05,441.517 2382.51,434.832 2382.97,494.707 2383.43,573.125 2383.9,407.113 2384.36,392.38 2384.82,384.006 2385.28,479.874 2385.74,666.528 2386.2,527.979 2386.67,550.188 2387.13,427.222 2387.59,446.216 2388.05,508.798 2388.51,429.05 2388.97,407.668 2389.44,584.32 2389.9,607.129 2390.36,414.781 2390.82,624.005 2391.28,514.71 2391.74,308.366 2392.21,446.122 2392.67,582.859 2393.13,413.306 2393.59,502.504 2394.05,426.824 2394.51,438.581 2394.98,710.875 2395.44,547.739 2395.9,517.747 2396.36,418.123 2396.82,385.922 2397.28,548.948 2397.75,579.778 2398.21,569.137 2398.67,406.725 2399.13,337.966 2399.59,354.889 2400.05,489.976 2400.52,431.797 2400.98,468.842 2401.44,565.896 2401.9,306.038 2402.36,317.429 2402.82,561.126 2403.28,374.393 2403.75,622.139 2404.21,368.139 2404.67,556.488 2405.13,286.699 2405.59,616.683 2406.05,453.785 2406.52,546.319 2406.98,406.702 2407.44,575.749 2407.9,526.731 2408.36,472.122 2408.82,519.307 2409.29,638.319 2409.75,486.811 2410.21,430.613 2410.67,386.23 2411.13,419.333 2411.59,427.566 2412.06,423.908 2412.52,522.512 2412.98,366.736 2413.44,531.737 2413.9,515.594 2414.36,442.818 2414.83,492.216 2415.29,361.128 2415.75,429.41 2416.21,615.128 2416.67,628.705 2417.13,555.404 2417.6,675.126 2418.06,571.933 2418.52,535.213 2418.98,459.937 2419.44,466.09 2419.9,507.758 2420.37,386.596 2420.83,548.56 2421.29,427.255 2421.75,499.408 2422.21,512.366 2422.67,495.321 2423.14,425.136 2423.6,590.847 2424.06,389.469 2424.52,482.536 2424.98,637.61 2425.44,458.39 2425.91,543.83 2426.37,293.788 2426.83,455.102 2427.29,655.321 2427.75,666.923 2428.21,497.53 2428.68,337.182 2429.14,687.862 2429.6,454.472 2430.06,426.327 2430.52,480.011 2430.98,722.796 2431.45,456.34 2431.91,765.1 2432.37,391.238 2432.83,569.83 2433.29,416.469 2433.75,447.789 2434.22,351.324 2434.68,497.355 2435.14,653.285 2435.6,337.969 2436.06,527.477 2436.52,423.213 2436.99,450.061 2437.45,691.521 2437.91,651.337 2438.37,343.845 2438.83,589.142 2439.29,452.482 2439.76,474.243 2440.22,369.507 2440.68,614.349 2441.14,496.613 2441.6,309.212 2442.06,422.113 2442.53,458.088 2442.99,427.489 2443.45,434.034 2443.91,589.867 2444.37,468.959 2444.83,394.814 2445.3,701.153 2445.76,469.846 2446.22,320.747 2446.68,457.295 2447.14,489.898 2447.6,619.48 2448.07,508.736 2448.53,548.023 2448.99,497.572 2449.45,508.68 2449.91,274.354 2450.37,587.947 2450.84,358.698 2451.3,235.962 2451.76,585.916 2452.22,517.546 2452.68,538.645 2453.14,464.207 2453.61,442.849 2454.07,406.807 2454.53,579.113 2454.99,603.442 2455.45,651.163 2455.91,593.869 2456.38,281.796 2456.84,651.35 2457.3,482.723 2457.76,498.178 2458.22,500.604 2458.68,307.43 2459.14,524.828 2459.61,461.529 2460.07,390.382 2460.53,545.149 2460.99,571.882 2461.45,691.025 2461.91,269.666 2462.38,438.684 2462.84,521.517 2463.3,303.837 2463.76,521.952 2464.22,622.9 2464.68,465.651 2465.15,590.777 2465.61,471.534 2466.07,465.96 2466.53,656.303 2466.99,328.166 2467.45,518.65 2467.92,346.357 2468.38,562.741 2468.84,571.032 2469.3,490.477 2469.76,497.598 2470.22,513.809 2470.69,487.315 2471.15,437.92 2471.61,456.478 2472.07,571.133 2472.53,310.276 2472.99,582.188 2473.46,380.456 2473.92,456.38 2474.38,470.163 2474.84,505.724 2475.3,530.695 2475.76,407.416 2476.23,389.965 2476.69,510.428 2477.15,563.218 2477.61,657.959 2478.07,545.327 2478.53,503.629 2479,408.063 2479.46,420.449 2479.92,481.165 2480.38,460.722 2480.84,558.604 2481.3,355.031 2481.77,406.333 2482.23,546.623 2482.69,365.235 2483.15,548.486 2483.61,494.882 2484.07,577.245 2484.54,463.278 2485,391.026 2485.46,312.701 2485.92,613.201 2486.38,510.935 2486.84,557.895 2487.31,498.31 2487.77,424.695 2488.23,592.7 2488.69,437.48 2489.15,481.272 2489.61,474.608 2490.08,466.703 2490.54,402.806 2491,280.853 2491.46,534.841 2491.92,507.778 2492.38,422.507 2492.85,370.326 2493.31,605.594 2493.77,531.116 2494.23,569.878 2494.69,463.6 2495.15,581.423 2495.62,454.422 2496.08,539.456 2496.54,657.897 2497,641.401 2497.46,493.48 2497.92,311.719 2498.39,458.661 2498.85,523.718 2499.31,575.428 2499.77,447.799 2500.23,428.726 2500.69,542.061 2501.16,539.143 2501.62,423.248 2502.08,588.272 2502.54,445.834 2503,338.708 2503.46,498.145 2503.93,509.549 2504.39,576.36 2504.85,593.075 2505.31,542.008 2505.77,582.206 2506.23,571.8 2506.7,605.055 2507.16,433.991 2507.62,607.281 2508.08,696.326 2508.54,425.525 2509,568.783 2509.47,468.719 2509.93,580.748 2510.39,564.874 2510.85,483.22 2511.31,453.007 2511.77,485.149 2512.23,515.119 2512.7,700.232 2513.16,404.478 2513.62,489.725 2514.08,430.869 2514.54,582.704 2515,474.936 2515.47,599.253 2515.93,564.547 2516.39,432.654 2516.85,630.893 2517.31,565.866 2517.77,576.641 2518.24,752.509 2518.7,515.892 2519.16,483.998 2519.62,641.039 2520.08,328.898 2520.54,545.101 2521.01,502.332 2521.47,452.01 2521.93,588.373 2522.39,647.317 2522.85,454.903 2523.31,405.367 2523.78,484.337 2524.24,397.991 2524.7,461.601 2525.16,411.056 2525.62,540.154 2526.08,534.571 2526.55,479.807 2527.01,264.978 2527.47,606.923 2527.93,570.448 2528.39,316.641 2528.85,496.758 2529.32,613.956 2529.78,481.725 2530.24,399.923 2530.7,415.167 2531.16,595.852 2531.62,409.115 2532.09,278.076 2532.55,435.852 2533.01,536.28 2533.47,498.643 2533.93,353.443 2534.39,617.457 2534.86,615.969 2535.32,263.722 2535.78,508.011 2536.24,434.054 2536.7,345.842 2537.16,595.824 2537.63,504.029 2538.09,560.843 2538.55,283.277 2539.01,489.117 2539.47,574.518 2539.93,328.534 2540.4,513.829 2540.86,465.344 2541.32,557.489 2541.78,630.344 2542.24,644.377 2542.7,449.765 2543.17,518.609 2543.63,551.122 2544.09,626.829 2544.55,493.971 2545.01,586.464 2545.47,577.447 2545.94,459.348 2546.4,574.17 2546.86,554.553 2547.32,680.497 2547.78,419.742 2548.24,328.541 2548.71,408.524 2549.17,413.41 2549.63,479.441 2550.09,478.992 2550.55,499.604 2551.01,435.703 2551.48,502.448 2551.94,493.847 2552.4,525.674 2552.86,486.334 2553.32,560.619 2553.78,563.867 2554.25,522.123 2554.71,516.156 2555.17,440.345 2555.63,568.603 2556.09,606.023 2556.55,607.087 2557.02,576.907 2557.48,662.52 2557.94,520.607 2558.4,572.233 2558.86,571.724 2559.32,529.943 2559.79,391.739 2560.25,345.13 2560.71,500.028 2561.17,593.331 2561.63,550.615 2562.09,419.781 2562.56,330.669 2563.02,591.616 2563.48,578.261 2563.94,509.42 2564.4,281.953 2564.86,615.339 2565.33,424.113 2565.79,591.687 2566.25,368.422 2566.71,568.784 2567.17,534.604 2567.63,297.042 2568.09,593.211 2568.56,577.018 2569.02,505.034 2569.48,582.288 2569.94,533.783 2570.4,432.316 2570.86,623.007 2571.33,566.778 2571.79,552.632 2572.25,635.169 2572.71,555.926 2573.17,614.015 2573.63,646.36 2574.1,411.275 2574.56,501.803 2575.02,391.281 2575.48,522.176 2575.94,511.926 2576.4,458.987 2576.87,610.394 2577.33,397.739 2577.79,390.7 2578.25,310.312 2578.71,660.939 2579.17,459.678 2579.64,534.591 2580.1,420.486 2580.56,445.708 2581.02,446.374 2581.48,411.059 2581.94,643.123 2582.41,358.065 2582.87,604.728 2583.33,590.266 2583.79,461.377 2584.25,392.553 2584.71,451.846 2585.18,395.856 2585.64,561.145 2586.1,538.657 2586.56,710.504 2587.02,563.435 2587.48,508.763 2587.95,508.066 2588.41,453.231 2588.87,558.494 2589.33,560.156 2589.79,391.212 2590.25,378.233 2590.72,416.003 2591.18,521.874 2591.64,334.916 2592.1,534.637 2592.56,461.192 2593.02,491.252 2593.49,549.269 2593.95,427.915 2594.41,610.289 2594.87,558.899 2595.33,390.569 2595.79,471.73 2596.26,455.428 2596.72,575.217 2597.18,317.278 2597.64,454.507 2598.1,594.041 2598.56,558.141 2599.03,570.719 2599.49,474.232 2599.95,502.808 2600.41,544.877 2600.87,497.036 2601.33,285.431 2601.8,447.811 2602.26,671.279 2602.72,540.403 2603.18,608.142 2603.64,525.025 2604.1,478.605 2604.57,525.307 2605.03,359.847 2605.49,420.892 2605.95,569.475 2606.41,398.904 2606.87,488.881 2607.34,505.602 2607.8,489.268 2608.26,364.011 2608.72,531.305 2609.18,442.662 2609.64,505.461 2610.11,437.186 2610.57,624.301 2611.03,346.104 2611.49,459.918 2611.95,469.109 2612.41,469.053 2612.88,620.002 2613.34,446.348 2613.8,381.698 2614.26,426.234 2614.72,535.092 2615.18,481.988 2615.65,636.01 2616.11,624.936 2616.57,408.903 2617.03,544.53 2617.49,601.205 2617.95,626.443 2618.42,471.619 2618.88,347.819 2619.34,477.743 2619.8,481.582 2620.26,392.57 2620.72,525.375 2621.18,406.895 2621.65,441.86 2622.11,621.666 2622.57,589.069 2623.03,477.447 2623.49,580.417 2623.95,438.889 2624.42,456.177 2624.88,560.016 2625.34,467.565 2625.8,664.662 2626.26,525.965 2626.72,377.131 2627.19,446.71 2627.65,584.673 2628.11,544.337 2628.57,362.196 2629.03,405.703 2629.49,444.712 2629.96,396.001 2630.42,524.678 2630.88,468.097 2631.34,650.188 2631.8,691.429 2632.26,467.642 2632.73,435.141 2633.19,212.649 2633.65,491.994 2634.11,616.298 2634.57,644.524 2635.03,544.866 2635.5,458.065 2635.96,585.221 2636.42,358.761 2636.88,481.868 2637.34,553.677 2637.8,604.109 2638.27,525.84 2638.73,477.539 2639.19,406.353 2639.65,484.526 2640.11,488.388 2640.57,492.241 2641.04,490.284 2641.5,506.696 2641.96,510.744 2642.42,505.874 2642.88,481.95 2643.34,437.714 2643.81,488.431 2644.27,541.029 2644.73,512.596 2645.19,455.966 2645.65,523.226 2646.11,485.314 2646.58,444.397 2647.04,446.956 2647.5,573.891 2647.96,445.976 2648.42,596.739 2648.88,639.365 2649.35,644.414 2649.81,583.108 2650.27,474.911 2650.73,618.311 2651.19,499.87 2651.65,548.107 2652.12,634.602 2652.58,571 2653.04,578.826 2653.5,580.785 2653.96,434.331 2654.42,707.603 2654.89,429.355 2655.35,454.667 2655.81,524.189 2656.27,399.4 2656.73,436.853 2657.19,505.525 2657.66,317.121 2658.12,652.657 2658.58,573.043 2659.04,370.038 2659.5,385.255 2659.96,533.448 2660.43,743.906 2660.89,675.706 2661.35,408.841 2661.81,201.401 2662.27,452.012 2662.73,668.905 2663.2,612.251 2663.66,498.348 2664.12,589.83 2664.58,540.305 2665.04,511.133 2665.5,681.002 2665.97,616.182 2666.43,517.658 2666.89,517.872 2667.35,658.49 2667.81,359.666 2668.27,546.269 2668.74,525.047 2669.2,503.959 2669.66,402.347 2670.12,502.259 2670.58,635.391 2671.04,511.143 2671.51,459.215 2671.97,316.587 2672.43,501.498 2672.89,293.793 2673.35,642.333 2673.81,446.524 2674.27,453.012 2674.74,505.665 2675.2,441.227 2675.66,640.838 2676.12,554.536 2676.58,416.518 2677.04,511.468 2677.51,567.919 2677.97,517.359 2678.43,558.259 2678.89,618.676 2679.35,412.367 2679.81,699.524 2680.28,639.886 2680.74,418.785 2681.2,575.834 2681.66,517.73 2682.12,492.352 2682.58,421.72 2683.05,487.256 2683.51,516.657 "/>
<path clip-path="url(#clip042)" d="M375.246 578.733 L375.707 577.923 L376.169 573.342 L376.631 561.399 L377.092 547.977 L377.554 537.974 L378.016 529.839 L378.477 524.451 L378.939 512.748 L379.401 500.989 L379.862 491.894 L380.324 488.608 L380.786 484.889 L381.247 478.87 L381.709 480.892 L382.171 484.422 L382.632 487.673 L383.094 489.84 L383.555 490.08 L384.017 496.404 L384.479 502.228 L384.94 514.661 L385.402 532.717 L385.864 545.905 L386.325 544.968 L386.787 548.399 L387.249 548.249 L387.71 535.503 L388.172 520.362 L388.634 500.312 L389.095 490.615 L389.557 488.548 L390.019 486.697 L390.48 490.977 L390.942 499.023 L391.404 511.712 L391.865 540.043 L392.327 574.751 L392.789 608.469 L393.25 634.636 L393.712 649.206 L394.174 654.549 L394.635 638.465 L395.097 620.015 L395.558 602.185 L396.02 579.512 L396.482 571.422 L396.943 568.453 L397.405 572.007 L397.867 572.982 L398.328 569.155 L398.79 570.233 L399.252 562.523 L399.713 561.584 L400.175 561.237 L400.637 562.533 L401.098 578.785 L401.56 599.479 L402.022 622.161 L402.483 634.543 L402.945 648.699 L403.407 648.7 L403.868 644.462 L404.33 647.934 L404.792 653.012 L405.253 654.324 L405.715 648.139 L406.176 640.802 L406.638 635.944 L407.1 628.113 L407.561 633.266 L408.023 640.391 L408.485 648.568 L408.946 660.853 L409.408 656.587 L409.87 658.513 L410.331 659.834 L410.793 653.377 L411.255 645.629 L411.716 631.174 L412.178 615.907 L412.64 596.256 L413.101 575.71 L413.563 560.598 L414.025 552.137 L414.486 540.949 L414.948 539.015 L415.41 539.066 L415.871 541.934 L416.333 568.731 L416.794 592.407 L417.256 615.66 L417.718 633.766 L418.179 653.292 L418.641 664.571 L419.103 667.812 L419.564 658.369 L420.026 641.656 L420.488 617.365 L420.949 588.583 L421.411 558.021 L421.873 529.414 L422.334 511.779 L422.796 513.162 L423.258 524.177 L423.719 542.605 L424.181 551.223 L424.643 561.114 L425.104 570.519 L425.566 569.893 L426.028 577.803 L426.489 591.088 L426.951 594.654 L427.412 604.938 L427.874 618.244 L428.336 635.701 L428.797 657.865 L429.259 687.177 L429.721 704.174 L430.182 711.848 L430.644 716.732 L431.106 707.153 L431.567 682.85 L432.029 642.832 L432.491 597.752 L432.952 559.271 L433.414 515.835 L433.876 484.017 L434.337 476.401 L434.799 491.111 L435.261 503.485 L435.722 518.166 L436.184 539.231 L436.646 552.327 L437.107 568.007 L437.569 582.014 L438.03 589.041 L438.492 593.703 L438.954 601.135 L439.415 605.314 L439.877 605.685 L440.339 603.822 L440.8 605.777 L441.262 607.994 L441.724 613.919 L442.185 620.138 L442.647 626.8 L443.109 623.63 L443.57 621.102 L444.032 610.501 L444.494 591.84 L444.955 578.341 L445.417 576.29 L445.879 575.38 L446.34 583.441 L446.802 593.126 L447.264 607.529 L447.725 621.933 L448.187 635.532 L448.648 637.998 L449.11 639.108 L449.572 647.504 L450.033 649.879 L450.495 639.664 L450.957 629.482 L451.418 617.449 L451.88 600.387 L452.342 567.999 L452.803 537.871 L453.265 516.41 L453.727 498.992 L454.188 484.217 L454.65 482.096 L455.112 484.39 L455.573 489.66 L456.035 503.136 L456.497 514.965 L456.958 524.304 L457.42 547.429 L457.882 580.327 L458.343 600.337 L458.805 609.974 L459.266 618.089 L459.728 609.996 L460.19 600.171 L460.651 592.425 L461.113 587.747 L461.575 596.394 L462.036 616.379 L462.498 634.196 L462.96 653.021 L463.421 672.088 L463.883 681.742 L464.345 681.959 L464.806 681.951 L465.268 675.11 L465.73 660.289 L466.191 631.175 L466.653 599.811 L467.115 579.738 L467.576 566.094 L468.038 554.254 L468.5 549.86 L468.961 548.749 L469.423 545.536 L469.885 551.766 L470.346 552.764 L470.808 542.382 L471.269 529.056 L471.731 520.574 L472.193 521.067 L472.654 543.899 L473.116 562.276 L473.578 583.985 L474.039 609.346 L474.501 626.369 L474.963 639.206 L475.424 657.752 L475.886 664.214 L476.348 666.318 L476.809 658.073 L477.271 645.926 L477.733 629.934 L478.194 615.429 L478.656 604.065 L479.118 588.47 L479.579 576.63 L480.041 572.404 L480.503 568.758 L480.964 573.273 L481.426 579.511 L481.887 585.462 L482.349 598.631 L482.811 613.206 L483.272 628.515 L483.734 645.126 L484.196 655.858 L484.657 666.266 L485.119 664.104 L485.581 661.991 L486.042 663.267 L486.504 682.738 L486.966 694.851 L487.427 700.491 L487.889 696.763 L488.351 683.751 L488.812 665.124 L489.274 643.047 L489.736 624.974 L490.197 608.4 L490.659 595.47 L491.121 584.076 L491.582 582.872 L492.044 579.795 L492.505 573.219 L492.967 564.197 L493.429 549.496 L493.89 542.312 L494.352 543.765 L494.814 546.969 L495.275 561.197 L495.737 576.959 L496.199 594.659 L496.66 607.806 L497.122 624.257 L497.584 650.462 L498.045 674.02 L498.507 680.566 L498.969 681.973 L499.43 684.293 L499.892 684.497 L500.354 679.468 L500.815 670.927 L501.277 650.426 L501.739 630.483 L502.2 623.112 L502.662 621.215 L503.123 609.37 L503.585 602.305 L504.047 605.799 L504.508 609.651 L504.97 603.302 L505.432 587.176 L505.893 558.92 L506.355 538.278 L506.817 524.81 L507.278 516.594 L507.74 515.243 L508.202 518.771 L508.663 531.649 L509.125 555.045 L509.587 590.577 L510.048 622.192 L510.51 644.804 L510.972 662.111 L511.433 671.771 L511.895 670.987 L512.357 671.091 L512.818 667.012 L513.28 659.253 L513.741 656.9 L514.203 653.465 L514.665 647.008 L515.126 641.622 L515.588 627.91 L516.05 600.39 L516.511 583.282 L516.973 566.085 L517.435 555.872 L517.896 556.271 L518.358 552.222 L518.82 555.518 L519.281 564.017 L519.743 568.308 L520.205 574.711 L520.666 578.841 L521.128 578.359 L521.59 579.524 L522.051 588.84 L522.513 597.32 L522.975 598.107 L523.436 601.782 L523.898 610.654 L524.359 617.939 L524.821 633.264 L525.283 631.554 L525.744 622.558 L526.206 607.494 L526.668 586.616 L527.129 578.546 L527.591 579.305 L528.053 586.867 L528.514 601.932 L528.976 617.823 L529.438 622.907 L529.899 626.703 L530.361 622.507 L530.823 615.886 L531.284 603.248 L531.746 590.096 L532.208 583.231 L532.669 594.915 L533.131 617.1 L533.593 644.519 L534.054 676.875 L534.516 708.885 L534.977 736.562 L535.439 745.888 L535.901 734.001 L536.362 714.692 L536.824 679.815 L537.286 632.194 L537.747 593.875 L538.209 566.292 L538.671 546.936 L539.132 532.025 L539.594 530.258 L540.056 540.658 L540.517 558.323 L540.979 565.903 L541.441 586.695 L541.902 596.541 L542.364 605.888 L542.826 610.723 L543.287 623.304 L543.749 629.569 L544.211 625.364 L544.672 629.337 L545.134 637.351 L545.596 640.205 L546.057 649.592 L546.519 657.229 L546.98 665.715 L547.442 672.595 L547.904 672.144 L548.365 662.226 L548.827 650.717 L549.289 632.58 L549.75 616.772 L550.212 588.077 L550.674 567.222 L551.135 561.131 L551.597 554.836 L552.059 550.502 L552.52 549.895 L552.982 551.439 L553.444 557.507 L553.905 564.35 L554.367 568.337 L554.829 566.385 L555.29 554.357 L555.752 556.338 L556.214 567.284 L556.675 575.955 L557.137 581.863 L557.598 587.05 L558.06 601.033 L558.522 604.148 L558.983 604.063 L559.445 607.98 L559.907 602.629 L560.368 602.658 L560.83 599.801 L561.292 598.52 L561.753 605.773 L562.215 613.553 L562.677 620.607 L563.138 627.863 L563.6 629.499 L564.062 625.947 L564.523 623.049 L564.985 619.095 L565.447 602.566 L565.908 592.611 L566.37 572.369 L566.832 553.51 L567.293 540.792 L567.755 529.739 L568.216 524.688 L568.678 530.423 L569.14 521.386 L569.601 520.724 L570.063 528.319 L570.525 537.842 L570.986 549.803 L571.448 562.155 L571.91 591.015 L572.371 614.095 L572.833 634.416 L573.295 651.74 L573.756 655.138 L574.218 655.97 L574.68 630.514 L575.141 597.11 L575.603 568.092 L576.065 543.453 L576.526 533.351 L576.988 522.38 L577.45 523.209 L577.911 524.169 L578.373 539.213 L578.834 553.77 L579.296 566.697 L579.758 572.74 L580.219 582.164 L580.681 600.128 L581.143 620.109 L581.604 638.528 L582.066 639.632 L582.528 633.18 L582.989 617.621 L583.451 597.914 L583.913 592.991 L584.374 589.441 L584.836 583.669 L585.298 586.128 L585.759 602.663 L586.221 614.178 L586.683 623.183 L587.144 624.776 L587.606 625.951 L588.068 619.852 L588.529 605.295 L588.991 578.146 L589.452 545.658 L589.914 521.146 L590.376 512.963 L590.837 513.487 L591.299 520.492 L591.761 543.547 L592.222 562.296 L592.684 580.477 L593.146 587.696 L593.607 589.042 L594.069 586.757 L594.531 578.109 L594.992 562.171 L595.454 560.418 L595.916 563.221 L596.377 562.459 L596.839 567.449 L597.301 577.304 L597.762 591.36 L598.224 597.072 L598.686 608.245 L599.147 614.519 L599.609 614.203 L600.07 617.574 L600.532 615.342 L600.994 609.84 L601.455 612.943 L601.917 611.424 L602.379 604.973 L602.84 592.44 L603.302 581.644 L603.764 564.873 L604.225 558.261 L604.687 550.284 L605.149 547.483 L605.61 548.981 L606.072 550.168 L606.534 562.723 L606.995 584.949 L607.457 593.481 L607.919 601.96 L608.38 612.212 L608.842 612.266 L609.304 608.248 L609.765 610.799 L610.227 607.634 L610.689 604.099 L611.15 598.947 L611.612 599.398 L612.073 594.262 L612.535 596.375 L612.997 592.423 L613.458 585.749 L613.92 574.196 L614.382 565.901 L614.843 567.004 L615.305 578.379 L615.767 586.375 L616.228 586.824 L616.69 586.589 L617.152 580.265 L617.613 575.543 L618.075 584.633 L618.537 595.784 L618.998 611.38 L619.46 632.677 L619.922 665.853 L620.383 686.007 L620.845 715.679 L621.307 745.705 L621.768 755.847 L622.23 744.379 L622.691 728.385 L623.153 702.815 L623.615 668.232 L624.076 636.736 L624.538 600.123 L625 566.192 L625.461 547.257 L625.923 538.45 L626.385 543.443 L626.846 560.842 L627.308 575.456 L627.77 581.122 L628.231 584.348 L628.693 581.391 L629.155 569.831 L629.616 553.626 L630.078 544.882 L630.54 542.215 L631.001 540.13 L631.463 549.449 L631.925 564.605 L632.386 580.47 L632.848 594.308 L633.309 607.456 L633.771 615.036 L634.233 620.439 L634.694 614.109 L635.156 603.808 L635.618 603.417 L636.079 608.101 L636.541 618.268 L637.003 634.12 L637.464 655.881 L637.926 667.278 L638.388 679.551 L638.849 675.735 L639.311 667.228 L639.773 641.623 L640.234 623.102 L640.696 606.922 L641.158 592.674 L641.619 583.675 L642.081 576.425 L642.543 579.457 L643.004 586.875 L643.466 583.69 L643.927 580.502 L644.389 574.268 L644.851 568.077 L645.312 564.62 L645.774 555.957 L646.236 541.561 L646.697 530.542 L647.159 533.783 L647.621 547.625 L648.082 548.625 L648.544 535.447 L649.006 516.977 L649.467 512.675 L649.929 515.322 L650.391 529.256 L650.852 553.473 L651.314 581.215 L651.776 603.571 L652.237 628.934 L652.699 652.611 L653.161 679.251 L653.622 685.355 L654.084 687.729 L654.545 695.57 L655.007 694.728 L655.469 694.974 L655.93 698.002 L656.392 695.841 L656.854 689.642 L657.315 677.6 L657.777 657.904 L658.239 634.48 L658.7 611.629 L659.162 590.953 L659.624 581.362 L660.085 571.822 L660.547 565.902 L661.009 567.579 L661.47 579.476 L661.932 600.809 L662.394 628.118 L662.855 654.339 L663.317 678.064 L663.779 685.11 L664.24 680.235 L664.702 666.46 L665.163 639.807 L665.625 606.035 L666.087 575.49 L666.548 542.224 L667.01 523.013 L667.472 513.795 L667.933 510.682 L668.395 522.019 L668.857 545.194 L669.318 569.782 L669.78 588.299 L670.242 602.937 L670.703 613.489 L671.165 620.59 L671.627 624.72 L672.088 638.46 L672.55 650.463 L673.012 661.272 L673.473 660.363 L673.935 653.431 L674.397 645.303 L674.858 635.553 L675.32 615.362 L675.781 597.069 L676.243 582.201 L676.705 578.061 L677.166 580.864 L677.628 589.279 L678.09 587.285 L678.551 590.829 L679.013 586.196 L679.475 582.711 L679.936 574.125 L680.398 572.148 L680.86 563.623 L681.321 565.635 L681.783 570.529 L682.245 583.73 L682.706 595.339 L683.168 603.727 L683.63 602.411 L684.091 605.72 L684.553 600.639 L685.015 606.541 L685.476 623.445 L685.938 633.35 L686.4 646.925 L686.861 660.871 L687.323 671.182 L687.784 682.767 L688.246 692.269 L688.708 694.155 L689.169 690.59 L689.631 691.352 L690.093 694.587 L690.554 689.683 L691.016 676.992 L691.478 668.14 L691.939 665.544 L692.401 659.817 L692.863 651.445 L693.324 653.787 L693.786 662.795 L694.248 656.856 L694.709 640.801 L695.171 617.445 L695.633 581.799 L696.094 553.799 L696.556 532.333 L697.018 523.051 L697.479 530.464 L697.941 545.079 L698.402 563.389 L698.864 577.762 L699.326 586.772 L699.787 600.245 L700.249 609.778 L700.711 615.776 L701.172 608.044 L701.634 602.118 L702.096 599.812 L702.557 591.652 L703.019 591.306 L703.481 593.821 L703.942 598.073 L704.404 608.714 L704.866 621.811 L705.327 618.788 L705.789 602.669 L706.251 594.419 L706.712 599.039 L707.174 609.685 L707.636 616.486 L708.097 632.08 L708.559 645.129 L709.02 652.62 L709.482 656.453 L709.944 640.779 L710.405 606.625 L710.867 585.288 L711.329 562.576 L711.79 535.852 L712.252 505.979 L712.714 485.905 L713.175 487.068 L713.637 505.087 L714.099 519.987 L714.56 531.679 L715.022 541.791 L715.484 558.949 L715.945 568.784 L716.407 580.838 L716.869 591.575 L717.33 611.417 L717.792 635.193 L718.254 650.918 L718.715 668.519 L719.177 668.372 L719.638 659.96 L720.1 654.297 L720.562 648.801 L721.023 648.873 L721.485 639.891 L721.947 629.128 L722.408 628.376 L722.87 625.509 L723.332 616.163 L723.793 605.056 L724.255 603.611 L724.717 606.687 L725.178 628.477 L725.64 657.229 L726.102 680.619 L726.563 694.044 L727.025 698.54 L727.487 686.089 L727.948 661.681 L728.41 625.907 L728.872 591.842 L729.333 561.908 L729.795 532.753 L730.256 504.375 L730.718 490.333 L731.18 498.011 L731.641 518.483 L732.103 538.97 L732.565 556.592 L733.026 565.874 L733.488 572.594 L733.95 582.608 L734.411 595.992 L734.873 615.023 L735.335 623.677 L735.796 630.457 L736.258 619.909 L736.72 604.963 L737.181 583.448 L737.643 573.663 L738.105 566.752 L738.566 558.334 L739.028 549.689 L739.49 533.797 L739.951 520.365 L740.413 509.77 L740.874 519.901 L741.336 533.374 L741.798 558.779 L742.259 594.507 L742.721 630.801 L743.183 653.311 L743.644 673.386 L744.106 678.192 L744.568 683.298 L745.029 677.864 L745.491 658.276 L745.953 639.5 L746.414 618.39 L746.876 607.758 L747.338 596.315 L747.799 580.876 L748.261 566.89 L748.723 555.969 L749.184 539.493 L749.646 529.637 L750.108 524.779 L750.569 529.091 L751.031 544.089 L751.493 566.082 L751.954 588.295 L752.416 601.001 L752.877 619.953 L753.339 635.923 L753.801 653.981 L754.262 656.97 L754.724 654.836 L755.186 644.634 L755.647 622.352 L756.109 605.777 L756.571 588.624 L757.032 586.347 L757.494 579.18 L757.956 566.781 L758.417 566.421 L758.879 571.523 L759.341 583.258 L759.802 595.047 L760.264 609.367 L760.726 612.142 L761.187 611.735 L761.649 610.748 L762.111 608.256 L762.572 599.965 L763.034 594.677 L763.495 584.162 L763.957 574.421 L764.419 567.783 L764.88 562.959 L765.342 563.643 L765.804 581.521 L766.265 595.067 L766.727 603.426 L767.189 606.215 L767.65 602.631 L768.112 589.06 L768.574 569.77 L769.035 554.943 L769.497 540.787 L769.959 537.759 L770.42 542.135 L770.882 559.874 L771.344 588.9 L771.805 615.089 L772.267 635.911 L772.729 662.073 L773.19 685.904 L773.652 697.212 L774.113 689.478 L774.575 677.413 L775.037 659.292 L775.498 631.159 L775.96 601.529 L776.422 581.872 L776.883 573.656 L777.345 571.237 L777.807 564.149 L778.268 550.951 L778.73 541.528 L779.192 535.331 L779.653 544.886 L780.115 545.907 L780.577 547.617 L781.038 563.024 L781.5 570.002 L781.962 577.744 L782.423 585.392 L782.885 591.992 L783.347 607.912 L783.808 630.469 L784.27 650.931 L784.731 666.308 L785.193 679.987 L785.655 680.394 L786.116 670.63 L786.578 656.834 L787.04 645.031 L787.501 628.164 L787.963 613.064 L788.425 601.982 L788.886 593.1 L789.348 585.429 L789.81 578.884 L790.271 571.796 L790.733 570.707 L791.195 567.349 L791.656 557.2 L792.118 546.814 L792.58 554.776 L793.041 569.29 L793.503 589.236 L793.965 613.64 L794.426 642.224 L794.888 662.701 L795.349 681.229 L795.811 687.647 L796.273 674.515 L796.734 652.229 L797.196 620.576 L797.658 590.123 L798.119 556.183 L798.581 530.035 L799.043 519.495 L799.504 514.356 L799.966 523.876 L800.428 532.239 L800.889 556.224 L801.351 591.518 L801.813 621.963 L802.274 646.387 L802.736 664.368 L803.198 672.09 L803.659 678.073 L804.121 665.981 L804.583 647.828 L805.044 626.404 L805.506 599.557 L805.967 578.735 L806.429 565.236 L806.891 554.986 L807.352 545.519 L807.814 538.848 L808.276 536.7 L808.737 548.344 L809.199 568.972 L809.661 597.219 L810.122 619.807 L810.584 637.253 L811.046 648.924 L811.507 645.97 L811.969 636.548 L812.431 612.224 L812.892 594.758 L813.354 584.978 L813.816 569.838 L814.277 561.026 L814.739 564.229 L815.201 577.887 L815.662 583.479 L816.124 585.421 L816.585 590.225 L817.047 601.362 L817.509 605.861 L817.97 616.375 L818.432 609.405 L818.894 606.772 L819.355 600.768 L819.817 590.661 L820.279 590.202 L820.74 597.791 L821.202 594.807 L821.664 584.529 L822.125 575.715 L822.587 579.095 L823.049 580.369 L823.51 587.709 L823.972 587.125 L824.434 589.616 L824.895 591.951 L825.357 599.072 L825.819 605.623 L826.28 612.04 L826.742 622.44 L827.204 618.044 L827.665 617.373 L828.127 612.028 L828.588 606.249 L829.05 600.956 L829.512 601.281 L829.973 596.252 L830.435 596.605 L830.897 595.869 L831.358 589.258 L831.82 592.822 L832.282 596.589 L832.743 594.541 L833.205 597.952 L833.667 601.899 L834.128 600.722 L834.59 596.701 L835.052 584.288 L835.513 567.529 L835.975 556.294 L836.437 546.757 L836.898 533.126 L837.36 543.325 L837.822 548.498 L838.283 571.658 L838.745 593.168 L839.206 609.36 L839.668 629.731 L840.13 646.973 L840.591 648.583 L841.053 632.538 L841.515 610.129 L841.976 577.55 L842.438 552.138 L842.9 525.49 L843.361 504.697 L843.823 490.357 L844.285 478.822 L844.746 480.63 L845.208 492.331 L845.67 503.253 L846.131 521.723 L846.593 544.266 L847.055 563.269 L847.516 588.574 L847.978 609.056 L848.44 631.096 L848.901 641.701 L849.363 645.479 L849.824 641.778 L850.286 649.27 L850.748 644.407 L851.209 644.487 L851.671 636.221 L852.133 623.045 L852.594 616.635 L853.056 620.412 L853.518 622.581 L853.979 626.37 L854.441 626.83 L854.903 629.864 L855.364 639.021 L855.826 638.666 L856.288 638.424 L856.749 628.733 L857.211 618.511 L857.673 596.6 L858.134 572.462 L858.596 552.167 L859.058 537.997 L859.519 526.335 L859.981 533.041 L860.442 557.166 L860.904 592.193 L861.366 630.876 L861.827 659.994 L862.289 675.345 L862.751 678.868 L863.212 675.187 L863.674 661.49 L864.136 631.718 L864.597 607.273 L865.059 586.896 L865.521 576.843 L865.982 578.726 L866.444 584.934 L866.906 594.345 L867.367 591.509 L867.829 590.236 L868.291 587.097 L868.752 583.004 L869.214 586.255 L869.676 591.555 L870.137 599.186 L870.599 602.727 L871.06 603.09 L871.522 597.529 L871.984 589.281 L872.445 579.797 L872.907 573.368 L873.369 563.993 L873.83 555.944 L874.292 557.906 L874.754 559.377 L875.215 559.704 L875.677 573.112 L876.139 585.158 L876.6 603.983 L877.062 617.539 L877.524 624.318 L877.985 617.722 L878.447 606.754 L878.909 595.515 L879.37 593.406 L879.832 588.737 L880.294 595.722 L880.755 606.731 L881.217 629.984 L881.678 637.004 L882.14 646.093 L882.602 637.163 L883.063 629.637 L883.525 608.711 L883.987 579.17 L884.448 542.531 L884.91 515.5 L885.372 497.101 L885.833 485.168 L886.295 488.837 L886.757 500.276 L887.218 513.133 L887.68 530.199 L888.142 539.433 L888.603 559.903 L889.065 587.816 L889.527 614.285 L889.988 639.53 L890.45 659.253 L890.912 679.653 L891.373 700.592 L891.835 719.171 L892.297 733.598 L892.758 734.595 L893.22 730.031 L893.681 723.912 L894.143 709.594 L894.605 676.042 L895.066 646.99 L895.528 609.043 L895.99 584.586 L896.451 560.593 L896.913 547.749 L897.375 536.332 L897.836 533.482 L898.298 534.128 L898.76 535.443 L899.221 537.991 L899.683 546.039 L900.145 559.886 L900.606 567.969 L901.068 579.12 L901.53 592.383 L901.991 602.215 L902.453 610.247 L902.915 605.442 L903.376 597.964 L903.838 589.171 L904.299 585.071 L904.761 592.862 L905.223 600.459 L905.684 605.756 L906.146 599.001 L906.608 596.537 L907.069 597.323 L907.531 596.737 L907.993 588.948 L908.454 578.703 L908.916 561.08 L909.378 547.889 L909.839 549.337 L910.301 550.736 L910.763 564.072 L911.224 572.822 L911.686 580.823 L912.148 600.972 L912.609 632.346 L913.071 657.409 L913.533 675.952 L913.994 675.281 L914.456 667.228 L914.917 657.016 L915.379 640.294 L915.841 622.136 L916.302 596.949 L916.764 569.003 L917.226 551.662 L917.687 534.285 L918.149 526.308 L918.611 518.932 L919.072 521.152 L919.534 525.328 L919.996 535.061 L920.457 565.439 L920.919 592.349 L921.381 609.794 L921.842 621.694 L922.304 631.944 L922.766 642.067 L923.227 650.1 L923.689 650.289 L924.151 640.814 L924.612 630.395 L925.074 617.106 L925.535 608.617 L925.997 606.253 L926.459 627.316 L926.92 655.946 L927.382 671.998 L927.844 682.349 L928.305 692.698 L928.767 696.987 L929.229 700.554 L929.69 705.628 L930.152 702.337 L930.614 686.967 L931.075 667.622 L931.537 651.091 L931.999 629.777 L932.46 616.715 L932.922 607.24 L933.384 595.72 L933.845 579.186 L934.307 558.754 L934.769 552.603 L935.23 551.708 L935.692 539.908 L936.153 544.182 L936.615 560.667 L937.077 573.888 L937.538 588.698 L938 592.805 L938.462 603.763 L938.923 626.253 L939.385 650.951 L939.847 674.155 L940.308 690.412 L940.77 702.465 L941.232 702.052 L941.693 689.161 L942.155 664.558 L942.617 641.27 L943.078 612.678 L943.54 588.011 L944.002 579.319 L944.463 591.927 L944.925 606.675 L945.387 637.193 L945.848 666.519 L946.31 687.742 L946.771 694.317 L947.233 699.647 L947.695 701.461 L948.156 688.623 L948.618 673.676 L949.08 650.261 L949.541 616.908 L950.003 590.513 L950.465 569.102 L950.926 545.162 L951.388 528.001 L951.85 513.924 L952.311 516.601 L952.773 531.72 L953.235 569.012 L953.696 609.267 L954.158 641.974 L954.62 668.02 L955.081 675.871 L955.543 675.824 L956.005 666.459 L956.466 635.523 L956.928 612.582 L957.389 600.099 L957.851 587.58 L958.313 586.382 L958.774 584.748 L959.236 583.607 L959.698 577.368 L960.159 574.57 L960.621 561.818 L961.083 556.009 L961.544 544.975 L962.006 545.192 L962.468 556.133 L962.929 568.026 L963.391 584.401 L963.853 601.165 L964.314 616.976 L964.776 629.649 L965.238 639.471 L965.699 641.633 L966.161 632.776 L966.623 619.678 L967.084 615.904 L967.546 611.472 L968.008 611.581 L968.469 599.452 L968.931 600.77 L969.392 605.091 L969.854 612.313 L970.316 624.066 L970.777 636.142 L971.239 635.61 L971.701 638.394 L972.162 630.437 L972.624 621.009 L973.086 618.457 L973.547 616.806 L974.009 614.259 L974.471 608.952 L974.932 596.807 L975.394 578.548 L975.856 561.719 L976.317 552.826 L976.779 549.998 L977.241 546.601 L977.702 537.188 L978.164 537.044 L978.626 535.107 L979.087 530.547 L979.549 533.389 L980.01 543.957 L980.472 552.112 L980.934 554.457 L981.395 568.908 L981.857 583.239 L982.319 604.457 L982.78 617.315 L983.242 618.34 L983.704 629.498 L984.165 641.137 L984.627 647.66 L985.089 639.738 L985.55 629.095 L986.012 614.181 L986.474 603.917 L986.935 595.657 L987.397 596.965 L987.859 604.831 L988.32 602.915 L988.782 605.248 L989.244 608.745 L989.705 603.202 L990.167 594.828 L990.628 584.683 L991.09 582.951 L991.552 591.237 L992.013 612.712 L992.475 626.867 L992.937 645.311 L993.398 666.608 L993.86 675.359 L994.322 663.775 L994.783 650.188 L995.245 632.603 L995.707 605.395 L996.168 584.303 L996.63 575.357 L997.092 564.583 L997.553 563.044 L998.015 572.665 L998.477 575.239 L998.938 579.076 L999.4 581.369 L999.862 585.533 L1000.32 594.652 L1000.78 606.186 L1001.25 624.011 L1001.71 635.823 L1002.17 632.672 L1002.63 622.961 L1003.09 618.219 L1003.55 607.737 L1004.02 593.598 L1004.48 571.36 L1004.94 551.856 L1005.4 540.383 L1005.86 529.908 L1006.32 524.326 L1006.79 521.907 L1007.25 520.086 L1007.71 530.818 L1008.17 544.753 L1008.63 567.065 L1009.09 594.573 L1009.56 612.873 L1010.02 636.514 L1010.48 661.429 L1010.94 675.077 L1011.4 670.948 L1011.86 666.159 L1012.33 658.906 L1012.79 647.206 L1013.25 631.477 L1013.71 612.864 L1014.17 596.639 L1014.63 596.407 L1015.1 590.076 L1015.56 576.516 L1016.02 562.225 L1016.48 552.452 L1016.94 542.487 L1017.4 542.885 L1017.87 571.586 L1018.33 601.324 L1018.79 639.67 L1019.25 673.472 L1019.71 700.453 L1020.17 708.285 L1020.64 707.656 L1021.1 691.983 L1021.56 665.349 L1022.02 635.971 L1022.48 616.926 L1022.94 597.946 L1023.41 578.914 L1023.87 563.382 L1024.33 547.718 L1024.79 532.151 L1025.25 526.092 L1025.71 523.369 L1026.18 524.016 L1026.64 530.044 L1027.1 541.443 L1027.56 555.305 L1028.02 553.209 L1028.48 549.167 L1028.95 538.589 L1029.41 537.367 L1029.87 543.156 L1030.33 546.093 L1030.79 557.325 L1031.25 576.423 L1031.72 589.979 L1032.18 604.569 L1032.64 609.084 L1033.1 604.616 L1033.56 587.357 L1034.02 562.113 L1034.49 544.561 L1034.95 529.504 L1035.41 525.593 L1035.87 523.551 L1036.33 531.192 L1036.79 541.697 L1037.26 557.828 L1037.72 572.7 L1038.18 574.748 L1038.64 573.645 L1039.1 571.848 L1039.56 567.563 L1040.03 570.172 L1040.49 570.943 L1040.95 569.711 L1041.41 569.526 L1041.87 566.177 L1042.33 568.352 L1042.8 563.783 L1043.26 564.835 L1043.72 570.562 L1044.18 575.545 L1044.64 583.875 L1045.1 596.631 L1045.57 601.719 L1046.03 600.56 L1046.49 609.167 L1046.95 599.023 L1047.41 590.46 L1047.87 584.102 L1048.34 584.384 L1048.8 589.062 L1049.26 600.869 L1049.72 611.836 L1050.18 615.073 L1050.64 618.068 L1051.1 613.011 L1051.57 614.796 L1052.03 611.746 L1052.49 605.405 L1052.95 592.643 L1053.41 577.843 L1053.87 564.292 L1054.34 552.988 L1054.8 543.051 L1055.26 539.989 L1055.72 551.935 L1056.18 583.459 L1056.64 614.099 L1057.11 639.708 L1057.57 665.366 L1058.03 694.68 L1058.49 705.106 L1058.95 708.823 L1059.41 699.879 L1059.88 687.665 L1060.34 666.745 L1060.8 636.952 L1061.26 620.702 L1061.72 611.526 L1062.18 600.614 L1062.65 588.739 L1063.11 568.641 L1063.57 564.821 L1064.03 558.008 L1064.49 560.966 L1064.95 567.339 L1065.42 572.77 L1065.88 577.219 L1066.34 577.405 L1066.8 579.969 L1067.26 579.101 L1067.72 573.725 L1068.19 573.049 L1068.65 579.149 L1069.11 578.585 L1069.57 579.273 L1070.03 581.427 L1070.49 587.561 L1070.96 602.426 L1071.42 614.528 L1071.88 627.186 L1072.34 632.665 L1072.8 637.727 L1073.26 645.383 L1073.73 652.001 L1074.19 646.846 L1074.65 639.061 L1075.11 628.156 L1075.57 626.115 L1076.03 615.485 L1076.5 600.284 L1076.96 586.971 L1077.42 572.428 L1077.88 553.667 L1078.34 545.709 L1078.8 547.63 L1079.27 551.423 L1079.73 558.137 L1080.19 562.683 L1080.65 568.572 L1081.11 581.015 L1081.57 590.234 L1082.04 602.433 L1082.5 611.271 L1082.96 602.141 L1083.42 593.587 L1083.88 579.348 L1084.34 566.022 L1084.81 566.785 L1085.27 569.551 L1085.73 579.494 L1086.19 594.865 L1086.65 610.714 L1087.11 621.484 L1087.58 628.265 L1088.04 639.069 L1088.5 654.169 L1088.96 654.37 L1089.42 647.349 L1089.88 631.958 L1090.35 624.667 L1090.81 615.546 L1091.27 592.12 L1091.73 568.669 L1092.19 545.791 L1092.65 535.37 L1093.12 538.952 L1093.58 549.996 L1094.04 556.869 L1094.5 572.844 L1094.96 593.244 L1095.42 619.488 L1095.89 646.372 L1096.35 657.276 L1096.81 657 L1097.27 651.409 L1097.73 640.605 L1098.19 634.089 L1098.66 628.372 L1099.12 615.025 L1099.58 603.832 L1100.04 601.715 L1100.5 580.581 L1100.96 557.742 L1101.43 545.228 L1101.89 536.583 L1102.35 527.542 L1102.81 518.282 L1103.27 518.801 L1103.73 530.621 L1104.19 553.728 L1104.66 577.24 L1105.12 607.432 L1105.58 630.548 L1106.04 645.922 L1106.5 662.813 L1106.96 680.504 L1107.43 685.724 L1107.89 686.244 L1108.35 674.773 L1108.81 657.143 L1109.27 623.206 L1109.73 596.223 L1110.2 579.041 L1110.66 561.546 L1111.12 547.743 L1111.58 540.568 L1112.04 540.544 L1112.5 536.989 L1112.97 533.328 L1113.43 535.795 L1113.89 537.644 L1114.35 531.484 L1114.81 532.031 L1115.27 527.909 L1115.74 530.789 L1116.2 538.871 L1116.66 553.391 L1117.12 576.121 L1117.58 590.944 L1118.04 609.387 L1118.51 627.748 L1118.97 639.628 L1119.43 642.525 L1119.89 627.207 L1120.35 607.571 L1120.81 594.21 L1121.28 581.489 L1121.74 564.294 L1122.2 562.356 L1122.66 569.434 L1123.12 568.588 L1123.58 559.229 L1124.05 554.702 L1124.51 558.152 L1124.97 568.721 L1125.43 580.026 L1125.89 591.631 L1126.35 601.939 L1126.82 598.892 L1127.28 594.608 L1127.74 590.495 L1128.2 586.927 L1128.66 569.411 L1129.12 553.698 L1129.59 548.882 L1130.05 549.531 L1130.51 555.66 L1130.97 564.732 L1131.43 571.649 L1131.89 572.57 L1132.36 583.315 L1132.82 604.56 L1133.28 618.965 L1133.74 628.063 L1134.2 628.051 L1134.66 625.036 L1135.13 634.522 L1135.59 633.175 L1136.05 627.416 L1136.51 625.827 L1136.97 616.902 L1137.43 600.802 L1137.9 577.308 L1138.36 551.531 L1138.82 530.205 L1139.28 505.804 L1139.74 492.163 L1140.2 489.514 L1140.67 499.776 L1141.13 528.156 L1141.59 560.304 L1142.05 590.717 L1142.51 610.809 L1142.97 625.215 L1143.44 639.833 L1143.9 645.583 L1144.36 644.019 L1144.82 625.568 L1145.28 601.27 L1145.74 569.09 L1146.21 543.213 L1146.67 522.876 L1147.13 506.352 L1147.59 496.476 L1148.05 502.713 L1148.51 529.291 L1148.98 554.406 L1149.44 577.937 L1149.9 591.825 L1150.36 593.782 L1150.82 593.434 L1151.28 586.694 L1151.75 580.713 L1152.21 572.335 L1152.67 578.175 L1153.13 593.454 L1153.59 618.917 L1154.05 643.904 L1154.52 655.748 L1154.98 660.109 L1155.44 640.874 L1155.9 626.187 L1156.36 602.102 L1156.82 574.379 L1157.29 545.931 L1157.75 526.884 L1158.21 520.369 L1158.67 517.201 L1159.13 522.991 L1159.59 542.095 L1160.05 561.398 L1160.52 584.453 L1160.98 602.475 L1161.44 618.65 L1161.9 621.044 L1162.36 614.528 L1162.82 600.235 L1163.29 586.699 L1163.75 578.178 L1164.21 563.261 L1164.67 557.178 L1165.13 556.181 L1165.59 553.493 L1166.06 564.182 L1166.52 574.918 L1166.98 592.781 L1167.44 611.489 L1167.9 623.466 L1168.36 627.227 L1168.83 629.717 L1169.29 628.79 L1169.75 628.532 L1170.21 624.658 L1170.67 620.167 L1171.13 610.438 L1171.6 602.896 L1172.06 592.842 L1172.52 582.798 L1172.98 573.545 L1173.44 564.742 L1173.9 557.309 L1174.37 553.939 L1174.83 558.024 L1175.29 567.665 L1175.75 578.251 L1176.21 591.713 L1176.67 600.579 L1177.14 611.233 L1177.6 618.091 L1178.06 629.507 L1178.52 639.555 L1178.98 634.682 L1179.44 635.582 L1179.91 637.548 L1180.37 633.785 L1180.83 631.607 L1181.29 626.963 L1181.75 619.155 L1182.21 599.095 L1182.68 593.434 L1183.14 587.245 L1183.6 581.108 L1184.06 575.954 L1184.52 577.029 L1184.98 580.055 L1185.45 589.092 L1185.91 593.219 L1186.37 591.217 L1186.83 590.725 L1187.29 600.406 L1187.75 604.699 L1188.22 617.55 L1188.68 623.855 L1189.14 630.172 L1189.6 638.04 L1190.06 639.826 L1190.52 629.664 L1190.99 617.747 L1191.45 610.461 L1191.91 604.336 L1192.37 597.82 L1192.83 590.539 L1193.29 582.888 L1193.76 570.47 L1194.22 549.967 L1194.68 530.494 L1195.14 513.509 L1195.6 492.722 L1196.06 489.453 L1196.53 490.572 L1196.99 498.132 L1197.45 508.34 L1197.91 525.096 L1198.37 537.304 L1198.83 561.926 L1199.3 586.698 L1199.76 606.132 L1200.22 623.486 L1200.68 632.143 L1201.14 633.556 L1201.6 630.787 L1202.07 632.917 L1202.53 642.781 L1202.99 664.427 L1203.45 677.725 L1203.91 680.533 L1204.37 685.032 L1204.84 696.229 L1205.3 700.437 L1205.76 696.263 L1206.22 686.469 L1206.68 676.576 L1207.14 653.023 L1207.61 637.22 L1208.07 626.224 L1208.53 619.886 L1208.99 610.663 L1209.45 607.232 L1209.91 605.753 L1210.38 608.75 L1210.84 611.53 L1211.3 609.483 L1211.76 598.13 L1212.22 583.525 L1212.68 563.746 L1213.14 541.366 L1213.61 529.428 L1214.07 533.878 L1214.53 548.289 L1214.99 573.113 L1215.45 607.829 L1215.91 645.149 L1216.38 677.132 L1216.84 695.902 L1217.3 711.266 L1217.76 709.602 L1218.22 692.888 L1218.68 662.745 L1219.15 629.4 L1219.61 614.736 L1220.07 611.51 L1220.53 607.666 L1220.99 604.213 L1221.45 592.876 L1221.92 583.396 L1222.38 571.864 L1222.84 560.499 L1223.3 548.229 L1223.76 543.083 L1224.22 543.363 L1224.69 538.744 L1225.15 535.792 L1225.61 526.845 L1226.07 525.286 L1226.53 531.921 L1226.99 546.677 L1227.46 556.496 L1227.92 552.762 L1228.38 549.127 L1228.84 551.738 L1229.3 558.056 L1229.76 566.308 L1230.23 582.901 L1230.69 603.952 L1231.15 624.248 L1231.61 633.804 L1232.07 635.02 L1232.53 630.635 L1233 626.588 L1233.46 632.066 L1233.92 632.988 L1234.38 632.898 L1234.84 630.761 L1235.3 637.631 L1235.77 655.09 L1236.23 670.494 L1236.69 672.416 L1237.15 666.13 L1237.61 652.319 L1238.07 631.704 L1238.54 604.475 L1239 581.409 L1239.46 561.923 L1239.92 555.318 L1240.38 559.506 L1240.84 559.66 L1241.31 561.413 L1241.77 563.327 L1242.23 565.79 L1242.69 565.324 L1243.15 566.61 L1243.61 582.346 L1244.08 593.477 L1244.54 609.869 L1245 622.54 L1245.46 631.281 L1245.92 632.453 L1246.38 627.132 L1246.85 622.325 L1247.31 617.524 L1247.77 605.016 L1248.23 596.882 L1248.69 585.735 L1249.15 583.262 L1249.62 583.597 L1250.08 590.15 L1250.54 594.62 L1251 595.111 L1251.46 605.799 L1251.92 610.953 L1252.39 618.952 L1252.85 627.219 L1253.31 639.45 L1253.77 643.78 L1254.23 647.355 L1254.69 646.84 L1255.16 650.411 L1255.62 654.376 L1256.08 657.469 L1256.54 655.873 L1257 655.927 L1257.46 657.193 L1257.93 653.924 L1258.39 636.322 L1258.85 614.036 L1259.31 590.798 L1259.77 564.531 L1260.23 542.004 L1260.7 522.542 L1261.16 518.43 L1261.62 521.399 L1262.08 537.015 L1262.54 551.432 L1263 569.353 L1263.47 574.201 L1263.93 565.266 L1264.39 549.611 L1264.85 523.05 L1265.31 513.772 L1265.77 510.557 L1266.23 525.865 L1266.7 547.491 L1267.16 572.038 L1267.62 597.612 L1268.08 621.27 L1268.54 632.309 L1269 628.274 L1269.47 623.382 L1269.93 613.3 L1270.39 604.687 L1270.85 599.876 L1271.31 590.054 L1271.77 581.976 L1272.24 580.712 L1272.7 577.509 L1273.16 574.896 L1273.62 579.639 L1274.08 579.595 L1274.54 585.142 L1275.01 582.258 L1275.47 580.077 L1275.93 575.977 L1276.39 569.19 L1276.85 570.775 L1277.31 581.975 L1277.78 603.128 L1278.24 628.666 L1278.7 647.3 L1279.16 654.63 L1279.62 662.843 L1280.08 662.603 L1280.55 655.22 L1281.01 636.169 L1281.47 613.524 L1281.93 595.466 L1282.39 580.585 L1282.85 567.217 L1283.32 560.408 L1283.78 560.858 L1284.24 562.744 L1284.7 559.877 L1285.16 548.092 L1285.62 539.593 L1286.09 541.456 L1286.55 537.297 L1287.01 546.26 L1287.47 556.645 L1287.93 570.103 L1288.39 586.557 L1288.86 606.024 L1289.32 625.034 L1289.78 644.397 L1290.24 652.274 L1290.7 651.735 L1291.16 640.549 L1291.63 624.96 L1292.09 607.388 L1292.55 594.785 L1293.01 582.803 L1293.47 585.119 L1293.93 597.822 L1294.4 616.202 L1294.86 640.354 L1295.32 671.678 L1295.78 698.713 L1296.24 704.783 L1296.7 695.979 L1297.17 673.327 L1297.63 637.203 L1298.09 594.093 L1298.55 556.478 L1299.01 522.611 L1299.47 492.162 L1299.94 481.134 L1300.4 487.071 L1300.86 499.851 L1301.32 519.633 L1301.78 542.159 L1302.24 560.401 L1302.71 578.952 L1303.17 597.023 L1303.63 617.47 L1304.09 638.466 L1304.55 661.711 L1305.01 664.152 L1305.48 669.607 L1305.94 674.464 L1306.4 671.854 L1306.86 659.283 L1307.32 644.379 L1307.78 628.399 L1308.25 621.646 L1308.71 607.939 L1309.17 597.602 L1309.63 577.131 L1310.09 560.414 L1310.55 546.127 L1311.02 538.093 L1311.48 528.71 L1311.94 520.839 L1312.4 525.336 L1312.86 534.408 L1313.32 556.948 L1313.79 572.23 L1314.25 590.622 L1314.71 610.858 L1315.17 634.924 L1315.63 656.639 L1316.09 661.52 L1316.56 647.73 L1317.02 627.887 L1317.48 615.554 L1317.94 609.412 L1318.4 605.511 L1318.86 599.6 L1319.33 602.958 L1319.79 603.872 L1320.25 601.977 L1320.71 595.695 L1321.17 602.354 L1321.63 605.482 L1322.09 613.744 L1322.56 615.118 L1323.02 612.896 L1323.48 615.442 L1323.94 619.717 L1324.4 616.945 L1324.86 612.424 L1325.33 615.426 L1325.79 610.893 L1326.25 610.685 L1326.71 604.382 L1327.17 592.825 L1327.63 587.583 L1328.1 594.743 L1328.56 596.235 L1329.02 605.503 L1329.48 613.629 L1329.94 611.33 L1330.4 609.04 L1330.87 602.567 L1331.33 584.155 L1331.79 575.353 L1332.25 566.07 L1332.71 567.433 L1333.17 576.175 L1333.64 591.603 L1334.1 604.513 L1334.56 626.21 L1335.02 646.24 L1335.48 670.08 L1335.94 685 L1336.41 689.116 L1336.87 691.343 L1337.33 680.442 L1337.79 655.65 L1338.25 631.253 L1338.71 611.248 L1339.18 597.694 L1339.64 579.074 L1340.1 557.842 L1340.56 536.352 L1341.02 512.887 L1341.48 495.988 L1341.95 491.562 L1342.41 502.901 L1342.87 530.137 L1343.33 557.631 L1343.79 584.408 L1344.25 610.18 L1344.72 632.698 L1345.18 650.897 L1345.64 662.674 L1346.1 663.756 L1346.56 653.933 L1347.02 632.215 L1347.49 610.402 L1347.95 592.193 L1348.41 584.558 L1348.87 580.522 L1349.33 581.543 L1349.79 572.603 L1350.26 563.286 L1350.72 545.379 L1351.18 533.782 L1351.64 526.562 L1352.1 531.548 L1352.56 546.529 L1353.03 573.528 L1353.49 597.87 L1353.95 625.547 L1354.41 649.249 L1354.87 671.081 L1355.33 687.263 L1355.8 700.965 L1356.26 705.411 L1356.72 711.556 L1357.18 710.914 L1357.64 709.199 L1358.1 701.18 L1358.57 682.623 L1359.03 660.214 L1359.49 644.86 L1359.95 637.015 L1360.41 625.261 L1360.87 616.483 L1361.34 603.245 L1361.8 581.883 L1362.26 566.384 L1362.72 549.997 L1363.18 543.612 L1363.64 548.356 L1364.11 547.288 L1364.57 552.041 L1365.03 558.779 L1365.49 562.297 L1365.95 568.128 L1366.41 572.07 L1366.88 582.771 L1367.34 596.563 L1367.8 607.187 L1368.26 611.358 L1368.72 626.692 L1369.18 646.237 L1369.65 662.293 L1370.11 675.273 L1370.57 680.458 L1371.03 672.207 L1371.49 652.19 L1371.95 633.255 L1372.42 607.414 L1372.88 582.196 L1373.34 560.804 L1373.8 538.444 L1374.26 533.1 L1374.72 536.016 L1375.18 548.671 L1375.65 563.739 L1376.11 572.395 L1376.57 579.988 L1377.03 583.377 L1377.49 594.371 L1377.95 610.605 L1378.42 611.048 L1378.88 613.887 L1379.34 603.918 L1379.8 589.325 L1380.26 573.534 L1380.72 554.839 L1381.19 539.726 L1381.65 539.314 L1382.11 551.434 L1382.57 566.378 L1383.03 584.297 L1383.49 604 L1383.96 620.679 L1384.42 633.756 L1384.88 639.154 L1385.34 636.456 L1385.8 627.166 L1386.26 627.461 L1386.73 614.618 L1387.19 607.563 L1387.65 596.032 L1388.11 578.795 L1388.57 567.485 L1389.03 568.966 L1389.5 577.474 L1389.96 576.417 L1390.42 583.763 L1390.88 592.78 L1391.34 602.788 L1391.8 621.809 L1392.27 622.563 L1392.73 625.558 L1393.19 619.932 L1393.65 610.045 L1394.11 595.968 L1394.57 590.439 L1395.04 577.741 L1395.5 566.716 L1395.96 563.592 L1396.42 572.623 L1396.88 590.082 L1397.34 612.725 L1397.81 624.089 L1398.27 621.563 L1398.73 621.336 L1399.19 604.424 L1399.65 586.505 L1400.11 569.101 L1400.58 552.93 L1401.04 547.637 L1401.5 553.46 L1401.96 573.557 L1402.42 584.312 L1402.88 604.21 L1403.35 620.738 L1403.81 635.405 L1404.27 644.049 L1404.73 635.54 L1405.19 630.088 L1405.65 624.508 L1406.12 612.463 L1406.58 606.152 L1407.04 597.248 L1407.5 592.888 L1407.96 589.868 L1408.42 595.624 L1408.89 601.137 L1409.35 605.325 L1409.81 603.132 L1410.27 593.296 L1410.73 589.619 L1411.19 580.562 L1411.66 575.081 L1412.12 583.011 L1412.58 592.617 L1413.04 592.303 L1413.5 589.213 L1413.96 592.521 L1414.43 597.902 L1414.89 610.221 L1415.35 616.433 L1415.81 613.632 L1416.27 615.12 L1416.73 611.864 L1417.2 610.18 L1417.66 600.014 L1418.12 592.899 L1418.58 585.929 L1419.04 579.761 L1419.5 583.158 L1419.97 588.355 L1420.43 604.981 L1420.89 610.654 L1421.35 617.161 L1421.81 619.621 L1422.27 612.977 L1422.74 601.247 L1423.2 590.27 L1423.66 589.17 L1424.12 584.169 L1424.58 584.375 L1425.04 575.851 L1425.51 562.665 L1425.97 547.859 L1426.43 546.986 L1426.89 557.821 L1427.35 572.559 L1427.81 586.878 L1428.28 589.04 L1428.74 588.11 L1429.2 586.412 L1429.66 591.811 L1430.12 594.482 L1430.58 592.415 L1431.04 584.993 L1431.51 577.413 L1431.97 578.473 L1432.43 575.914 L1432.89 577.347 L1433.35 583.766 L1433.81 593.127 L1434.28 601.137 L1434.74 609.453 L1435.2 620.92 L1435.66 633.99 L1436.12 639.571 L1436.58 638.698 L1437.05 637.619 L1437.51 637.419 L1437.97 635.419 L1438.43 626.023 L1438.89 613.565 L1439.35 597.538 L1439.82 583.186 L1440.28 571.345 L1440.74 573.956 L1441.2 578.037 L1441.66 587.708 L1442.12 598.135 L1442.59 596.68 L1443.05 600.856 L1443.51 597.923 L1443.97 592.093 L1444.43 590.178 L1444.89 585.8 L1445.36 583.161 L1445.82 580.558 L1446.28 580.608 L1446.74 586.303 L1447.2 592.026 L1447.66 594.385 L1448.13 603.859 L1448.59 609.739 L1449.05 617.613 L1449.51 627.772 L1449.97 632.476 L1450.43 627.379 L1450.9 625.256 L1451.36 619.696 L1451.82 600.389 L1452.28 573.771 L1452.74 542.485 L1453.2 509.994 L1453.67 478.412 L1454.13 465.985 L1454.59 468.435 L1455.05 492.165 L1455.51 517.534 L1455.97 542.464 L1456.44 569.819 L1456.9 592.083 L1457.36 605.01 L1457.82 605.119 L1458.28 608.906 L1458.74 602.822 L1459.21 617.605 L1459.67 630.84 L1460.13 647.567 L1460.59 663.262 L1461.05 674.074 L1461.51 671.705 L1461.98 666.753 L1462.44 649.317 L1462.9 632.578 L1463.36 609.821 L1463.82 598.234 L1464.28 584.405 L1464.75 588.721 L1465.21 600.708 L1465.67 615.481 L1466.13 630.029 L1466.59 631.634 L1467.05 627.551 L1467.52 616.711 L1467.98 602.006 L1468.44 585.19 L1468.9 577.911 L1469.36 581.742 L1469.82 587.886 L1470.29 602.351 L1470.75 619.077 L1471.21 630.476 L1471.67 627.612 L1472.13 623.493 L1472.59 620.596 L1473.06 609.773 L1473.52 598.26 L1473.98 593.954 L1474.44 588.148 L1474.9 587.083 L1475.36 582.28 L1475.83 568.371 L1476.29 564.996 L1476.75 561.325 L1477.21 566.159 L1477.67 575.078 L1478.13 588.339 L1478.6 608.355 L1479.06 623.026 L1479.52 634.845 L1479.98 645.354 L1480.44 652.665 L1480.9 656.012 L1481.37 649.97 L1481.83 631.865 L1482.29 618.759 L1482.75 607.149 L1483.21 593.731 L1483.67 568.272 L1484.13 555.71 L1484.6 547.126 L1485.06 544.975 L1485.52 558.173 L1485.98 571.303 L1486.44 591.168 L1486.9 604.599 L1487.37 616.552 L1487.83 624.446 L1488.29 631.562 L1488.75 633.608 L1489.21 635.942 L1489.67 636.03 L1490.14 639.038 L1490.6 634.872 L1491.06 623.548 L1491.52 604.954 L1491.98 585.429 L1492.44 570.815 L1492.91 564.285 L1493.37 559.753 L1493.83 557.234 L1494.29 561.371 L1494.75 569.07 L1495.21 578.045 L1495.68 609.555 L1496.14 636.879 L1496.6 656.382 L1497.06 673.773 L1497.52 685.773 L1497.98 691.71 L1498.45 693.259 L1498.91 686.267 L1499.37 676.509 L1499.83 649.501 L1500.29 613.066 L1500.75 568.955 L1501.22 534.38 L1501.68 505.76 L1502.14 491.001 L1502.6 483.972 L1503.06 485.486 L1503.52 496.904 L1503.99 521.936 L1504.45 553.979 L1504.91 580.85 L1505.37 612.124 L1505.83 639.331 L1506.29 662.863 L1506.76 670.979 L1507.22 664.292 L1507.68 645.857 L1508.14 617.495 L1508.6 586.201 L1509.06 560.262 L1509.53 549.426 L1509.99 544.265 L1510.45 557.679 L1510.91 577.841 L1511.37 590.754 L1511.83 610.564 L1512.3 626.551 L1512.76 630.346 L1513.22 629.049 L1513.68 638.593 L1514.14 625.074 L1514.6 613.135 L1515.07 597.156 L1515.53 584.641 L1515.99 577.768 L1516.45 574.296 L1516.91 579.396 L1517.37 587.887 L1517.84 600.451 L1518.3 609.888 L1518.76 621.117 L1519.22 641.127 L1519.68 647.901 L1520.14 652.03 L1520.61 650.128 L1521.07 630.494 L1521.53 608.105 L1521.99 592.979 L1522.45 578.551 L1522.91 577.938 L1523.38 586.194 L1523.84 599.044 L1524.3 613.547 L1524.76 633.974 L1525.22 649.402 L1525.68 650.983 L1526.15 654.181 L1526.61 652.926 L1527.07 642.674 L1527.53 629.966 L1527.99 609.023 L1528.45 593.645 L1528.92 578.297 L1529.38 559.355 L1529.84 538.185 L1530.3 520.819 L1530.76 516.327 L1531.22 530.298 L1531.69 552.376 L1532.15 584.899 L1532.61 619.863 L1533.07 655.716 L1533.53 690.788 L1533.99 716.144 L1534.46 738.481 L1534.92 745.528 L1535.38 744.872 L1535.84 719.772 L1536.3 696.431 L1536.76 655.458 L1537.22 608.495 L1537.69 562.486 L1538.15 520.497 L1538.61 492.212 L1539.07 480.803 L1539.53 475.767 L1539.99 484.536 L1540.46 503.546 L1540.92 537.881 L1541.38 579.973 L1541.84 629.509 L1542.3 681.989 L1542.76 720.613 L1543.23 752.09 L1543.69 759.354 L1544.15 749.524 L1544.61 727.86 L1545.07 699.455 L1545.53 667.837 L1546 635.918 L1546.46 617.507 L1546.92 596.463 L1547.38 575.051 L1547.84 556.525 L1548.3 555.225 L1548.77 554.432 L1549.23 552.979 L1549.69 559.214 L1550.15 558.247 L1550.61 563.465 L1551.07 571.159 L1551.54 587.816 L1552 587.729 L1552.46 582.34 L1552.92 571.222 L1553.38 549.636 L1553.84 524.044 L1554.31 505.173 L1554.77 504.199 L1555.23 508.575 L1555.69 506.425 L1556.15 498.086 L1556.61 494.436 L1557.08 504.341 L1557.54 516.374 L1558 528.326 L1558.46 539.335 L1558.92 544.097 L1559.38 554.925 L1559.85 566.863 L1560.31 581.439 L1560.77 604.245 L1561.23 627.015 L1561.69 661.694 L1562.15 690.847 L1562.62 708.787 L1563.08 717.3 L1563.54 723.715 L1564 718.221 L1564.46 704.219 L1564.92 684.526 L1565.39 658.978 L1565.85 624.27 L1566.31 593.014 L1566.77 560.018 L1567.23 519.399 L1567.69 490.393 L1568.16 470.805 L1568.62 461.409 L1569.08 466.478 L1569.54 481.441 L1570 509.165 L1570.46 527.096 L1570.93 553.054 L1571.39 575.049 L1571.85 602.35 L1572.31 626.232 L1572.77 649.22 L1573.23 664.995 L1573.7 670.487 L1574.16 664.739 L1574.62 654.651 L1575.08 642.484 L1575.54 619.461 L1576 603.804 L1576.47 585.303 L1576.93 570.2 L1577.39 565.212 L1577.85 557.14 L1578.31 553.16 L1578.77 560.925 L1579.24 560.235 L1579.7 550.53 L1580.16 548.845 L1580.62 543.997 L1581.08 545.392 L1581.54 551.066 L1582.01 555.709 L1582.47 566.53 L1582.93 585.3 L1583.39 608.414 L1583.85 631.084 L1584.31 646.636 L1584.78 648.925 L1585.24 639.866 L1585.7 630.176 L1586.16 622.679 L1586.62 611.426 L1587.08 603.888 L1587.55 597.071 L1588.01 603.626 L1588.47 611.537 L1588.93 623.789 L1589.39 635.267 L1589.85 637.145 L1590.32 632.607 L1590.78 620.977 L1591.24 602.777 L1591.7 583.798 L1592.16 561.722 L1592.62 541.124 L1593.08 507.851 L1593.55 486.218 L1594.01 465.465 L1594.47 452.04 L1594.93 454.946 L1595.39 474.562 L1595.85 497.02 L1596.32 519.698 L1596.78 543.894 L1597.24 566.036 L1597.7 588.901 L1598.16 603.973 L1598.62 616.923 L1599.09 625.251 L1599.55 618.451 L1600.01 618.159 L1600.47 615.764 L1600.93 618.884 L1601.39 625.32 L1601.86 641.324 L1602.32 648.059 L1602.78 650.087 L1603.24 635.96 L1603.7 626.543 L1604.16 625.017 L1604.63 616.036 L1605.09 605.809 L1605.55 595.25 L1606.01 583.499 L1606.47 573.449 L1606.93 566.055 L1607.4 568.076 L1607.86 572.005 L1608.32 569.418 L1608.78 556.346 L1609.24 548.565 L1609.7 535.633 L1610.17 527.892 L1610.63 530.846 L1611.09 540.745 L1611.55 564.581 L1612.01 593.105 L1612.47 612.547 L1612.94 636.566 L1613.4 649.956 L1613.86 654.312 L1614.32 658.223 L1614.78 655.651 L1615.24 653.298 L1615.71 653.251 L1616.17 652.077 L1616.63 649.69 L1617.09 646.675 L1617.55 639.001 L1618.01 630.995 L1618.48 616.642 L1618.94 604.84 L1619.4 596.117 L1619.86 577.298 L1620.32 569.446 L1620.78 575.46 L1621.25 588.425 L1621.71 601.685 L1622.17 610.517 L1622.63 614.765 L1623.09 612.192 L1623.55 597.85 L1624.02 590.154 L1624.48 569.563 L1624.94 550.041 L1625.4 552.744 L1625.86 551.065 L1626.32 559.182 L1626.79 576.065 L1627.25 584.215 L1627.71 602.534 L1628.17 608.233 L1628.63 608.16 L1629.09 595.631 L1629.56 586.577 L1630.02 575.649 L1630.48 574.871 L1630.94 568.852 L1631.4 562.94 L1631.86 560.599 L1632.33 560.493 L1632.79 558.267 L1633.25 554.907 L1633.71 550.03 L1634.17 542.594 L1634.63 539.54 L1635.1 547.531 L1635.56 550.186 L1636.02 563.639 L1636.48 581.149 L1636.94 599.18 L1637.4 610.752 L1637.87 609.982 L1638.33 604.507 L1638.79 602.816 L1639.25 587.681 L1639.71 571.573 L1640.17 559.407 L1640.64 543.624 L1641.1 533.049 L1641.56 528.652 L1642.02 537.226 L1642.48 555.379 L1642.94 573.266 L1643.41 598.211 L1643.87 624.423 L1644.33 649.602 L1644.79 669.042 L1645.25 693.429 L1645.71 701.444 L1646.17 695.802 L1646.64 677.737 L1647.1 651.781 L1647.56 617.911 L1648.02 573.261 L1648.48 522.855 L1648.94 475.718 L1649.41 442.793 L1649.87 429.524 L1650.33 427.361 L1650.79 444.039 L1651.25 471.284 L1651.71 502.841 L1652.18 530.386 L1652.64 576.377 L1653.1 619.094 L1653.56 661.342 L1654.02 684.615 L1654.48 696.821 L1654.95 691.127 L1655.41 664.322 L1655.87 631.564 L1656.33 602.206 L1656.79 572.538 L1657.25 552.982 L1657.72 543.862 L1658.18 540.487 L1658.64 545.642 L1659.1 557.733 L1659.56 571.787 L1660.02 587.256 L1660.49 612.071 L1660.95 629.536 L1661.41 633.92 L1661.87 625.048 L1662.33 610.057 L1662.79 592.511 L1663.26 568.241 L1663.72 541.486 L1664.18 522.098 L1664.64 512.198 L1665.1 511.43 L1665.56 519.323 L1666.03 533.888 L1666.49 556.065 L1666.95 575.291 L1667.41 600.97 L1667.87 638.692 L1668.33 663.757 L1668.8 681.275 L1669.26 695.344 L1669.72 701.003 L1670.18 694.421 L1670.64 685.12 L1671.1 671.394 L1671.57 659.14 L1672.03 640.788 L1672.49 626.365 L1672.95 607.268 L1673.41 594.959 L1673.87 580.034 L1674.34 572.44 L1674.8 569.283 L1675.26 570.215 L1675.72 572.239 L1676.18 570.105 L1676.64 571.434 L1677.11 570.96 L1677.57 575.679 L1678.03 578.075 L1678.49 586.986 L1678.95 587.408 L1679.41 596.833 L1679.88 610.251 L1680.34 628.723 L1680.8 652.891 L1681.26 682.277 L1681.72 698.299 L1682.18 701.76 L1682.65 703.995 L1683.11 698.402 L1683.57 677.062 L1684.03 650.491 L1684.49 626.264 L1684.95 598.365 L1685.42 582.137 L1685.88 573.818 L1686.34 579.17 L1686.8 595.929 L1687.26 621.192 L1687.72 651.59 L1688.19 667.09 L1688.65 664.883 L1689.11 656.691 L1689.57 647.596 L1690.03 634.703 L1690.49 617.441 L1690.96 598.883 L1691.42 582.31 L1691.88 569.326 L1692.34 564.049 L1692.8 567.869 L1693.26 575.776 L1693.73 594.147 L1694.19 598.078 L1694.65 596.384 L1695.11 598.316 L1695.57 589.29 L1696.03 582.376 L1696.5 575.587 L1696.96 572.841 L1697.42 572.252 L1697.88 575.916 L1698.34 585.055 L1698.8 598.127 L1699.26 611.874 L1699.73 627.84 L1700.19 629.749 L1700.65 622.239 L1701.11 617.396 L1701.57 611.37 L1702.03 603.4 L1702.5 594.948 L1702.96 588.088 L1703.42 590.05 L1703.88 593.607 L1704.34 599.132 L1704.8 613.949 L1705.27 622.544 L1705.73 630.04 L1706.19 641.29 L1706.65 652.125 L1707.11 660.531 L1707.57 651.299 L1708.04 647.278 L1708.5 640.229 L1708.96 630.837 L1709.42 629.821 L1709.88 621.746 L1710.34 615.045 L1710.81 604.494 L1711.27 596.749 L1711.73 602.596 L1712.19 613.391 L1712.65 624.591 L1713.11 633.398 L1713.58 625.807 L1714.04 620.895 L1714.5 598.833 L1714.96 581.907 L1715.42 554.387 L1715.88 535.846 L1716.35 529.257 L1716.81 524.657 L1717.27 531.316 L1717.73 546.592 L1718.19 567.474 L1718.65 595.557 L1719.12 615.442 L1719.58 634.807 L1720.04 665.172 L1720.5 684.927 L1720.96 697.127 L1721.42 683.77 L1721.89 662.014 L1722.35 641.755 L1722.81 637.036 L1723.27 629.552 L1723.73 625.05 L1724.19 619.207 L1724.66 609.825 L1725.12 599.98 L1725.58 594.577 L1726.04 589.604 L1726.5 585.735 L1726.96 578.199 L1727.43 567.965 L1727.89 574.68 L1728.35 581.303 L1728.81 594.541 L1729.27 607.06 L1729.73 614.97 L1730.2 625.532 L1730.66 644.616 L1731.12 660.332 L1731.58 667.656 L1732.04 675.758 L1732.5 675.582 L1732.97 669.568 L1733.43 653.759 L1733.89 633.612 L1734.35 617.395 L1734.81 602.554 L1735.27 586.7 L1735.74 576.333 L1736.2 569.824 L1736.66 572.377 L1737.12 565.556 L1737.58 564.609 L1738.04 553.838 L1738.51 546.023 L1738.97 544.395 L1739.43 535.301 L1739.89 525.157 L1740.35 516.111 L1740.81 523.586 L1741.28 537.012 L1741.74 545.747 L1742.2 568.59 L1742.66 594.256 L1743.12 610.037 L1743.58 624.656 L1744.05 636.395 L1744.51 654.517 L1744.97 653.221 L1745.43 647.798 L1745.89 635.067 L1746.35 619.674 L1746.82 605.207 L1747.28 595.645 L1747.74 588.348 L1748.2 587.566 L1748.66 581.109 L1749.12 574.579 L1749.59 576.205 L1750.05 583.441 L1750.51 599.44 L1750.97 605.052 L1751.43 612.096 L1751.89 616.207 L1752.36 618.678 L1752.82 611.24 L1753.28 606.837 L1753.74 599.826 L1754.2 594.499 L1754.66 606.496 L1755.12 608.164 L1755.59 614.574 L1756.05 618.751 L1756.51 618.952 L1756.97 611.895 L1757.43 601.155 L1757.89 580.506 L1758.36 572.408 L1758.82 574.941 L1759.28 578.396 L1759.74 588.997 L1760.2 603.138 L1760.66 610.85 L1761.13 613.573 L1761.59 612.256 L1762.05 597.648 L1762.51 589.052 L1762.97 580.287 L1763.43 581.225 L1763.9 583.794 L1764.36 586.244 L1764.82 584.186 L1765.28 592.464 L1765.74 599.961 L1766.2 608.483 L1766.67 605.063 L1767.13 601.676 L1767.59 604.445 L1768.05 595.162 L1768.51 592 L1768.97 592.577 L1769.44 599.706 L1769.9 614.032 L1770.36 623.987 L1770.82 635.877 L1771.28 635.257 L1771.74 629.276 L1772.21 632.196 L1772.67 624.427 L1773.13 617.23 L1773.59 614.439 L1774.05 610.278 L1774.51 603.219 L1774.98 603.387 L1775.44 609.175 L1775.9 618.751 L1776.36 632.339 L1776.82 642.824 L1777.28 653.58 L1777.75 667.884 L1778.21 673.211 L1778.67 663.632 L1779.13 664.885 L1779.59 667.143 L1780.05 666.724 L1780.52 656.869 L1780.98 652.463 L1781.44 638.789 L1781.9 621.391 L1782.36 601.927 L1782.82 574.822 L1783.29 568.577 L1783.75 574.352 L1784.21 587.514 L1784.67 594.675 L1785.13 590.209 L1785.59 582.447 L1786.06 575.526 L1786.52 565.934 L1786.98 558.456 L1787.44 549.981 L1787.9 545.459 L1788.36 549.363 L1788.83 558.398 L1789.29 566.856 L1789.75 581.422 L1790.21 589.757 L1790.67 599.725 L1791.13 613.265 L1791.6 619.632 L1792.06 629.464 L1792.52 633.373 L1792.98 632.411 L1793.44 632.371 L1793.9 636.579 L1794.37 644.462 L1794.83 649.176 L1795.29 652.369 L1795.75 646.127 L1796.21 633.775 L1796.67 622.282 L1797.14 618.274 L1797.6 610.963 L1798.06 608.652 L1798.52 606.233 L1798.98 604.996 L1799.44 603.809 L1799.91 607.836 L1800.37 618.453 L1800.83 619.215 L1801.29 617.864 L1801.75 612.556 L1802.21 618.322 L1802.68 623.743 L1803.14 618.284 L1803.6 622.264 L1804.06 620.171 L1804.52 613.715 L1804.98 609.353 L1805.45 611.122 L1805.91 603.351 L1806.37 575.519 L1806.83 552.167 L1807.29 529.011 L1807.75 511.446 L1808.21 517.248 L1808.68 530.093 L1809.14 550.677 L1809.6 581.271 L1810.06 616.133 L1810.52 643.133 L1810.98 667.733 L1811.45 684.233 L1811.91 688.306 L1812.37 683.777 L1812.83 662.828 L1813.29 636.56 L1813.75 609.207 L1814.22 595.622 L1814.68 590.127 L1815.14 594.715 L1815.6 593.286 L1816.06 594.505 L1816.52 592.529 L1816.99 583.817 L1817.45 574.687 L1817.91 558.891 L1818.37 547.091 L1818.83 552.085 L1819.29 559.565 L1819.76 562.302 L1820.22 572.358 L1820.68 584.784 L1821.14 599.498 L1821.6 604.663 L1822.06 595.639 L1822.53 588.057 L1822.99 577.359 L1823.45 563.609 L1823.91 553.237 L1824.37 555.83 L1824.83 557.936 L1825.3 561.002 L1825.76 574.707 L1826.22 577.437 L1826.68 582.133 L1827.14 584.236 L1827.6 582.405 L1828.07 579.873 L1828.53 569.926 L1828.99 560.705 L1829.45 553.833 L1829.91 549.801 L1830.37 548.894 L1830.84 548.791 L1831.3 551.149 L1831.76 550.627 L1832.22 552.663 L1832.68 552.53 L1833.14 552.618 L1833.61 551.414 L1834.07 567.102 L1834.53 582.036 L1834.99 603.543 L1835.45 621.635 L1835.91 642.056 L1836.38 665.892 L1836.84 672.762 L1837.3 678.065 L1837.76 665.558 L1838.22 639.32 L1838.68 603.622 L1839.15 555.218 L1839.61 506.294 L1840.07 459.654 L1840.53 425.488 L1840.99 408.812 L1841.45 417.403 L1841.92 448.346 L1842.38 485.215 L1842.84 543.112 L1843.3 603.64 L1843.76 651.86 L1844.22 689.191 L1844.69 712.264 L1845.15 712.498 L1845.61 704.63 L1846.07 678.287 L1846.53 644.025 L1846.99 612.198 L1847.46 578.913 L1847.92 555.051 L1848.38 538.957 L1848.84 526.942 L1849.3 532.003 L1849.76 544.421 L1850.23 569.105 L1850.69 601.553 L1851.15 626.855 L1851.61 642.477 L1852.07 644.141 L1852.53 638.122 L1853 629.407 L1853.46 612.816 L1853.92 592.981 L1854.38 563.762 L1854.84 543.855 L1855.3 531.287 L1855.77 529.503 L1856.23 530.273 L1856.69 533.556 L1857.15 545.911 L1857.61 557.77 L1858.07 572.064 L1858.54 589.359 L1859 597.24 L1859.46 612.427 L1859.92 623.053 L1860.38 635.129 L1860.84 647.4 L1861.31 662.994 L1861.77 668.001 L1862.23 673.664 L1862.69 672.324 L1863.15 665.194 L1863.61 652.38 L1864.07 635.478 L1864.54 611.868 L1865 586.03 L1865.46 563.061 L1865.92 541.16 L1866.38 537.321 L1866.84 537.738 L1867.31 538.695 L1867.77 541.992 L1868.23 538.858 L1868.69 536.396 L1869.15 533.694 L1869.61 522.637 L1870.08 511.89 L1870.54 505.747 L1871 499.917 L1871.46 501.083 L1871.92 507.22 L1872.38 518.115 L1872.85 531.568 L1873.31 536.391 L1873.77 549.09 L1874.23 566.132 L1874.69 587.152 L1875.15 614.154 L1875.62 639.543 L1876.08 657.782 L1876.54 667.388 L1877 666.456 L1877.46 662.649 L1877.92 655.983 L1878.39 643.718 L1878.85 629.814 L1879.31 608.768 L1879.77 585.456 L1880.23 566.318 L1880.69 540.75 L1881.16 521.204 L1881.62 520.336 L1882.08 523.074 L1882.54 536.295 L1883 559.06 L1883.46 583.217 L1883.93 609.045 L1884.39 621.01 L1884.85 634.202 L1885.31 640.053 L1885.77 638.757 L1886.23 636.663 L1886.7 640.846 L1887.16 641.066 L1887.62 642.157 L1888.08 649.189 L1888.54 652.218 L1889 643.601 L1889.47 628.103 L1889.93 610.896 L1890.39 589.096 L1890.85 570.498 L1891.31 554.12 L1891.77 543.027 L1892.24 544.118 L1892.7 553.824 L1893.16 557.941 L1893.62 560.859 L1894.08 553.738 L1894.54 535.564 L1895.01 516.983 L1895.47 500.19 L1895.93 482.199 L1896.39 478.984 L1896.85 491.346 L1897.31 501.913 L1897.78 514.968 L1898.24 531.097 L1898.7 555.936 L1899.16 573.6 L1899.62 597.266 L1900.08 626.528 L1900.55 662.891 L1901.01 694.231 L1901.47 713.471 L1901.93 715.049 L1902.39 709.769 L1902.85 697.644 L1903.32 680.567 L1903.78 649.124 L1904.24 618.791 L1904.7 590.875 L1905.16 559.638 L1905.62 544.806 L1906.09 540.762 L1906.55 537.526 L1907.01 546.061 L1907.47 554.526 L1907.93 566.138 L1908.39 582.312 L1908.86 599.175 L1909.32 622.501 L1909.78 640.273 L1910.24 662.051 L1910.7 678.723 L1911.16 692.094 L1911.63 700.499 L1912.09 684.138 L1912.55 652.911 L1913.01 609.231 L1913.47 563.008 L1913.93 524.431 L1914.4 489.512 L1914.86 469.076 L1915.32 479.716 L1915.78 496.902 L1916.24 521.933 L1916.7 563.592 L1917.16 609.471 L1917.63 644.754 L1918.09 667.694 L1918.55 687.037 L1919.01 688.984 L1919.47 671.624 L1919.93 638.161 L1920.4 600.409 L1920.86 564.71 L1921.32 542.94 L1921.78 535.671 L1922.24 541.823 L1922.7 561.9 L1923.17 591.843 L1923.63 611.02 L1924.09 632.024 L1924.55 638.406 L1925.01 643.193 L1925.47 645.019 L1925.94 635.073 L1926.4 623.449 L1926.86 609.006 L1927.32 586.439 L1927.78 570.842 L1928.24 553.577 L1928.71 535.579 L1929.17 532.474 L1929.63 543.017 L1930.09 550.189 L1930.55 555.509 L1931.01 556.711 L1931.48 558.85 L1931.94 567.394 L1932.4 576.069 L1932.86 582.411 L1933.32 590.54 L1933.78 594.706 L1934.25 601.328 L1934.71 600.568 L1935.17 604.11 L1935.63 602.75 L1936.09 594.149 L1936.55 588.352 L1937.02 579.877 L1937.48 579.345 L1937.94 584.111 L1938.4 590.102 L1938.86 594.783 L1939.32 598.781 L1939.79 600.984 L1940.25 600.685 L1940.71 595.865 L1941.17 597.945 L1941.63 594.821 L1942.09 600.62 L1942.56 612.501 L1943.02 623.401 L1943.48 627.784 L1943.94 633.577 L1944.4 621.362 L1944.86 595.472 L1945.33 566.237 L1945.79 546.842 L1946.25 523.242 L1946.71 505.926 L1947.17 500.218 L1947.63 506.523 L1948.1 517.525 L1948.56 537.182 L1949.02 569.446 L1949.48 599.717 L1949.94 628.087 L1950.4 645.271 L1950.87 647.02 L1951.33 640.237 L1951.79 621.086 L1952.25 616.035 L1952.71 604.506 L1953.17 587.839 L1953.64 571.66 L1954.1 569.39 L1954.56 571.935 L1955.02 581.266 L1955.48 590.029 L1955.94 586.738 L1956.41 590.037 L1956.87 597.262 L1957.33 608.883 L1957.79 615.901 L1958.25 628.149 L1958.71 636.005 L1959.18 645.93 L1959.64 654.951 L1960.1 661.822 L1960.56 659.118 L1961.02 640.06 L1961.48 605.35 L1961.95 572.555 L1962.41 537.253 L1962.87 510.848 L1963.33 506.413 L1963.79 506.711 L1964.25 521.346 L1964.72 545.801 L1965.18 572.09 L1965.64 588.895 L1966.1 610.825 L1966.56 626.496 L1967.02 640.989 L1967.49 645.568 L1967.95 652.093 L1968.41 658.556 L1968.87 652.605 L1969.33 640.91 L1969.79 623.944 L1970.25 608.719 L1970.72 596.97 L1971.18 589.032 L1971.64 600.499 L1972.1 613.909 L1972.56 632.346 L1973.02 649.496 L1973.49 661.338 L1973.95 674.599 L1974.41 672.537 L1974.87 663.546 L1975.33 639.531 L1975.79 616.786 L1976.26 601.505 L1976.72 587.99 L1977.18 582.868 L1977.64 582.048 L1978.1 579.711 L1978.56 585.804 L1979.03 588.61 L1979.49 600.372 L1979.95 617.44 L1980.41 632.392 L1980.87 629.767 L1981.33 631.154 L1981.8 634.195 L1982.26 628.702 L1982.72 623.154 L1983.18 618.116 L1983.64 621.327 L1984.1 620.015 L1984.57 619.617 L1985.03 616.915 L1985.49 622.281 L1985.95 637.053 L1986.41 656.045 L1986.87 674.884 L1987.34 676.122 L1987.8 669.666 L1988.26 648.19 L1988.72 617.276 L1989.18 583.689 L1989.64 557.981 L1990.11 532.685 L1990.57 513.094 L1991.03 498.771 L1991.49 499.426 L1991.95 505.197 L1992.41 515.815 L1992.88 534.959 L1993.34 558.266 L1993.8 594.915 L1994.26 624.839 L1994.72 653.14 L1995.18 671.617 L1995.65 686.57 L1996.11 692.148 L1996.57 680.402 L1997.03 662.055 L1997.49 637.832 L1997.95 603.195 L1998.42 561.828 L1998.88 522.302 L1999.34 495.106 L1999.8 483.919 L2000.26 475.569 L2000.72 478.107 L2001.19 483.243 L2001.65 497.023 L2002.11 511.731 L2002.57 534.194 L2003.03 559.984 L2003.49 590.319 L2003.96 611.033 L2004.42 621.173 L2004.88 625.046 L2005.34 617.067 L2005.8 611.231 L2006.26 604.775 L2006.73 591.603 L2007.19 569.783 L2007.65 554.076 L2008.11 550.735 L2008.57 557.32 L2009.03 568.135 L2009.5 590.649 L2009.96 613.842 L2010.42 636.451 L2010.88 657.792 L2011.34 673.321 L2011.8 671.737 L2012.27 667.513 L2012.73 656.234 L2013.19 637.71 L2013.65 611.723 L2014.11 586.495 L2014.57 564.059 L2015.04 540.996 L2015.5 519.188 L2015.96 510.208 L2016.42 523.081 L2016.88 531.173 L2017.34 542.538 L2017.81 550.986 L2018.27 566.779 L2018.73 569.031 L2019.19 577.049 L2019.65 591.147 L2020.11 614.277 L2020.58 642.447 L2021.04 664.577 L2021.5 678.328 L2021.96 691.092 L2022.42 704.122 L2022.88 709.903 L2023.35 705.978 L2023.81 692.59 L2024.27 660.996 L2024.73 619.062 L2025.19 579.044 L2025.65 544.652 L2026.11 522.648 L2026.58 513.713 L2027.04 517.939 L2027.5 529.8 L2027.96 547.151 L2028.42 571.33 L2028.88 597.816 L2029.35 615.058 L2029.81 627.905 L2030.27 631.479 L2030.73 641.309 L2031.19 636.586 L2031.65 628.698 L2032.12 613.139 L2032.58 607.337 L2033.04 609.817 L2033.5 609.427 L2033.96 609.899 L2034.42 611.526 L2034.89 606.967 L2035.35 609.146 L2035.81 608.892 L2036.27 610.96 L2036.73 607.376 L2037.19 608.259 L2037.66 602.374 L2038.12 592.969 L2038.58 593.586 L2039.04 599.47 L2039.5 607.618 L2039.96 615.711 L2040.43 606.996 L2040.89 594.291 L2041.35 570.597 L2041.81 553.356 L2042.27 542.841 L2042.73 533.389 L2043.2 531.313 L2043.66 534.607 L2044.12 538.468 L2044.58 552.867 L2045.04 557.641 L2045.5 562.664 L2045.97 566.493 L2046.43 572.328 L2046.89 581.566 L2047.35 606.384 L2047.81 624.466 L2048.27 628.987 L2048.74 621.498 L2049.2 606.444 L2049.66 589.544 L2050.12 579.321 L2050.58 562.796 L2051.04 556.412 L2051.51 554.229 L2051.97 547.28 L2052.43 546.552 L2052.89 553.19 L2053.35 564.75 L2053.81 572.327 L2054.28 580.396 L2054.74 587.118 L2055.2 593.638 L2055.66 597.114 L2056.12 590.666 L2056.58 581.267 L2057.05 582.279 L2057.51 588.362 L2057.97 598.017 L2058.43 617.466 L2058.89 640.664 L2059.35 656.047 L2059.82 647.801 L2060.28 648.041 L2060.74 643.26 L2061.2 636.437 L2061.66 631.185 L2062.12 627.054 L2062.59 629.105 L2063.05 618.299 L2063.51 599.714 L2063.97 583.062 L2064.43 564.56 L2064.89 550.644 L2065.36 538.709 L2065.82 544.578 L2066.28 553.171 L2066.74 562.171 L2067.2 575.047 L2067.66 587.754 L2068.13 595.264 L2068.59 607.793 L2069.05 607.943 L2069.51 611.129 L2069.97 609.37 L2070.43 616.626 L2070.9 625.047 L2071.36 630.747 L2071.82 635.537 L2072.28 635.011 L2072.74 628.024 L2073.2 627.165 L2073.67 621.263 L2074.13 622.776 L2074.59 620.707 L2075.05 611.813 L2075.51 594.391 L2075.97 581.33 L2076.44 565.854 L2076.9 549.99 L2077.36 532.266 L2077.82 524.164 L2078.28 516.389 L2078.74 514.337 L2079.2 523.527 L2079.67 539.007 L2080.13 555.88 L2080.59 578.922 L2081.05 597.365 L2081.51 610.596 L2081.97 630.408 L2082.44 638.823 L2082.9 647.66 L2083.36 655.748 L2083.82 654.442 L2084.28 644.286 L2084.74 631.22 L2085.21 618.533 L2085.67 605.147 L2086.13 587.277 L2086.59 575.845 L2087.05 567.38 L2087.51 560.218 L2087.98 553.924 L2088.44 540.638 L2088.9 534.213 L2089.36 530.239 L2089.82 523.702 L2090.28 521.976 L2090.75 533.213 L2091.21 548.137 L2091.67 565.829 L2092.13 563.593 L2092.59 565.243 L2093.05 566.916 L2093.52 570.816 L2093.98 585.164 L2094.44 599.39 L2094.9 610.764 L2095.36 631.231 L2095.82 638.104 L2096.29 645.525 L2096.75 651.731 L2097.21 664.179 L2097.67 674.476 L2098.13 675.412 L2098.59 669.125 L2099.06 667.333 L2099.52 662.954 L2099.98 667.716 L2100.44 663.619 L2100.9 655.376 L2101.36 641.368 L2101.83 623.092 L2102.29 604.411 L2102.75 584.283 L2103.21 572.657 L2103.67 561.268 L2104.13 544.26 L2104.6 529.671 L2105.06 517.779 L2105.52 523.009 L2105.98 539.793 L2106.44 568.278 L2106.9 599.655 L2107.37 626.743 L2107.83 647 L2108.29 654.001 L2108.75 641.617 L2109.21 621.174 L2109.67 595.554 L2110.14 573.953 L2110.6 553.422 L2111.06 552.102 L2111.52 565.223 L2111.98 580.427 L2112.44 593.613 L2112.91 608.596 L2113.37 616.667 L2113.83 635.296 L2114.29 639.38 L2114.75 643.02 L2115.21 636.493 L2115.68 626.264 L2116.14 609.593 L2116.6 600.462 L2117.06 608.927 L2117.52 620.369 L2117.98 625.78 L2118.45 632.22 L2118.91 632.531 L2119.37 631.669 L2119.83 637.873 L2120.29 641.91 L2120.75 644.969 L2121.22 637.703 L2121.68 622.891 L2122.14 606.84 L2122.6 583.139 L2123.06 561.757 L2123.52 554.568 L2123.99 553.839 L2124.45 569.366 L2124.91 584.897 L2125.37 598.921 L2125.83 616.027 L2126.29 630.568 L2126.76 644.014 L2127.22 641.434 L2127.68 623.954 L2128.14 597.914 L2128.6 574.309 L2129.06 550.683 L2129.53 536.192 L2129.99 529.496 L2130.45 526.34 L2130.91 528.8 L2131.37 526.737 L2131.83 529.925 L2132.3 540.1 L2132.76 553.339 L2133.22 580.243 L2133.68 611.504 L2134.14 646.226 L2134.6 665.363 L2135.06 676.614 L2135.53 677.262 L2135.99 656.557 L2136.45 619.022 L2136.91 598.065 L2137.37 574.802 L2137.83 560.883 L2138.3 552.218 L2138.76 548.995 L2139.22 541.246 L2139.68 534.191 L2140.14 534.558 L2140.6 530.371 L2141.07 532.165 L2141.53 535.364 L2141.99 543.148 L2142.45 559.253 L2142.91 581.581 L2143.37 605.505 L2143.84 616.29 L2144.3 633.493 L2144.76 647.075 L2145.22 655.79 L2145.68 653.957 L2146.14 642.003 L2146.61 634.045 L2147.07 625.238 L2147.53 624.028 L2147.99 615.597 L2148.45 614.382 L2148.91 615.284 L2149.38 623.328 L2149.84 620.104 L2150.3 620.236 L2150.76 614.843 L2151.22 616.338 L2151.68 601.81 L2152.15 584.407 L2152.61 577.384 L2153.07 573.713 L2153.53 577.146 L2153.99 579.675 L2154.45 585.097 L2154.92 584.119 L2155.38 580.358 L2155.84 560.222 L2156.3 536.626 L2156.76 510.782 L2157.22 488.207 L2157.69 479.977 L2158.15 488.209 L2158.61 502.618 L2159.07 529.145 L2159.53 552.285 L2159.99 566.572 L2160.46 583.348 L2160.92 588.632 L2161.38 588.634 L2161.84 584.188 L2162.3 575.015 L2162.76 573.068 L2163.23 574.436 L2163.69 574.627 L2164.15 576.417 L2164.61 583.811 L2165.07 589.449 L2165.53 594.331 L2166 599.585 L2166.46 583.755 L2166.92 566.882 L2167.38 546.429 L2167.84 534.206 L2168.3 541.643 L2168.77 546.954 L2169.23 551.846 L2169.69 563.652 L2170.15 577.749 L2170.61 593.063 L2171.07 598.167 L2171.54 601.563 L2172 608.492 L2172.46 619.188 L2172.92 627.767 L2173.38 639.191 L2173.84 646.017 L2174.31 655.763 L2174.77 656.867 L2175.23 661.426 L2175.69 664.927 L2176.15 666.873 L2176.61 669.722 L2177.08 673.439 L2177.54 664.697 L2178 661.161 L2178.46 644.558 L2178.92 641.767 L2179.38 638.08 L2179.85 624.804 L2180.31 600.003 L2180.77 573.819 L2181.23 561.611 L2181.69 559.356 L2182.15 573.544 L2182.62 587.198 L2183.08 601.155 L2183.54 618.34 L2184 624.079 L2184.46 621.852 L2184.92 618.025 L2185.39 607.435 L2185.85 594.964 L2186.31 575.296 L2186.77 550.945 L2187.23 524.204 L2187.69 511.967 L2188.15 520.022 L2188.62 541.021 L2189.08 567.057 L2189.54 590.36 L2190 610.448 L2190.46 635.738 L2190.92 656.414 L2191.39 666.646 L2191.85 668.272 L2192.31 659.952 L2192.77 644.418 L2193.23 626.479 L2193.69 602.955 L2194.16 579.705 L2194.62 561.241 L2195.08 535.85 L2195.54 521.993 L2196 514.626 L2196.46 505.808 L2196.93 512.504 L2197.39 522.332 L2197.85 527.01 L2198.31 536.382 L2198.77 544.308 L2199.23 559.245 L2199.7 564.521 L2200.16 566.317 L2200.62 568.926 L2201.08 583.414 L2201.54 605.841 L2202 634.738 L2202.47 653.603 L2202.93 677.151 L2203.39 687.259 L2203.85 688.352 L2204.31 668.027 L2204.77 633.461 L2205.24 607.433 L2205.7 578.573 L2206.16 552.25 L2206.62 529.3 L2207.08 518.79 L2207.54 524.341 L2208.01 538.286 L2208.47 563.155 L2208.93 583.838 L2209.39 599.112 L2209.85 608.486 L2210.31 623.641 L2210.78 633.274 L2211.24 643.564 L2211.7 648.595 L2212.16 646.67 L2212.62 655.799 L2213.08 649.327 L2213.55 639.098 L2214.01 633.771 L2214.47 635.482 L2214.93 628.944 L2215.39 630.908 L2215.85 630.043 L2216.32 632.036 L2216.78 643.315 L2217.24 654.557 L2217.7 657.211 L2218.16 655.948 L2218.62 649.004 L2219.09 637.071 L2219.55 612.671 L2220.01 580.352 L2220.47 547.504 L2220.93 522.073 L2221.39 513.588 L2221.86 510.973 L2222.32 510.273 L2222.78 510.899 L2223.24 518.043 L2223.7 537.257 L2224.16 566.676 L2224.63 597.436 L2225.09 619.316 L2225.55 638.371 L2226.01 647.777 L2226.47 641.865 L2226.93 624.117 L2227.4 603.963 L2227.86 587.644 L2228.32 581.51 L2228.78 576.063 L2229.24 578.485 L2229.7 591.451 L2230.17 599.236 L2230.63 595.884 L2231.09 595.885 L2231.55 597.72 L2232.01 603.021 L2232.47 605.712 L2232.94 602.097 L2233.4 600.543 L2233.86 619.507 L2234.32 641.507 L2234.78 655.781 L2235.24 654.317 L2235.71 647.968 L2236.17 634.443 L2236.63 621.701 L2237.09 614.169 L2237.55 605.419 L2238.01 598.152 L2238.48 598.198 L2238.94 598.389 L2239.4 595.576 L2239.86 581.192 L2240.32 569.904 L2240.78 559.306 L2241.24 548.282 L2241.71 540.154 L2242.17 536.14 L2242.63 539.067 L2243.09 540.928 L2243.55 551.85 L2244.01 582.411 L2244.48 595.097 L2244.94 624.037 L2245.4 635.364 L2245.86 643.523 L2246.32 638.321 L2246.78 629.073 L2247.25 623.595 L2247.71 629.353 L2248.17 638.273 L2248.63 639.689 L2249.09 650.274 L2249.55 648.26 L2250.02 638.584 L2250.48 632.127 L2250.94 628.166 L2251.4 626.205 L2251.86 619.524 L2252.32 622.903 L2252.79 619.385 L2253.25 617.923 L2253.71 622.607 L2254.17 616.556 L2254.63 612.404 L2255.09 611.886 L2255.56 611.519 L2256.02 604.557 L2256.48 600.428 L2256.94 592.571 L2257.4 582.12 L2257.86 570.458 L2258.33 555.944 L2258.79 550.865 L2259.25 546.522 L2259.71 537.265 L2260.17 539.173 L2260.63 545.667 L2261.1 554.256 L2261.56 578.289 L2262.02 606.387 L2262.48 615.706 L2262.94 621.587 L2263.4 610.601 L2263.87 595.929 L2264.33 574.363 L2264.79 552.718 L2265.25 531.161 L2265.71 519.383 L2266.17 505.53 L2266.64 502.327 L2267.1 505.655 L2267.56 510.605 L2268.02 527.214 L2268.48 549.908 L2268.94 561.3 L2269.41 576.687 L2269.87 595.782 L2270.33 613.064 L2270.79 640.227 L2271.25 669.104 L2271.71 691.366 L2272.18 691.518 L2272.64 674.316 L2273.1 655.809 L2273.56 635.054 L2274.02 615.694 L2274.48 611.361 L2274.95 610.78 L2275.41 599.527 L2275.87 587.699 L2276.33 580.441 L2276.79 577.57 L2277.25 565.003 L2277.72 547.499 L2278.18 534.512 L2278.64 526.659 L2279.1 524.322 L2279.56 527.08 L2280.02 540.618 L2280.49 558.973 L2280.95 581.062 L2281.41 592.106 L2281.87 603.925 L2282.33 604.737 L2282.79 600.207 L2283.26 595.359 L2283.72 584.88 L2284.18 568.559 L2284.64 554.231 L2285.1 543.969 L2285.56 541.786 L2286.03 552.242 L2286.49 568.191 L2286.95 582.14 L2287.41 594.439 L2287.87 607.065 L2288.33 615.624 L2288.8 620.883 L2289.26 616.764 L2289.72 602.385 L2290.18 581.372 L2290.64 561.085 L2291.1 547.552 L2291.57 542.122 L2292.03 546.952 L2292.49 557.817 L2292.95 571.705 L2293.41 587.597 L2293.87 606.927 L2294.34 613.043 L2294.8 607.925 L2295.26 598.155 L2295.72 588.589 L2296.18 581.136 L2296.64 579.141 L2297.1 586.739 L2297.57 590.46 L2298.03 593.177 L2298.49 608.868 L2298.95 613.156 L2299.41 611.785 L2299.87 607.12 L2300.34 601.615 L2300.8 587.009 L2301.26 566.902 L2301.72 554.136 L2302.18 561.17 L2302.64 563.568 L2303.11 573.124 L2303.57 577.066 L2304.03 592.78 L2304.49 604.535 L2304.95 605.428 L2305.41 601.534 L2305.88 589.25 L2306.34 588.451 L2306.8 583.431 L2307.26 577.314 L2307.72 577.22 L2308.18 569.712 L2308.65 566.74 L2309.11 562.848 L2309.57 577.259 L2310.03 595.746 L2310.49 602.549 L2310.95 609.08 L2311.42 614.283 L2311.88 609.662 L2312.34 600.506 L2312.8 588.393 L2313.26 579.897 L2313.72 577.507 L2314.19 572.998 L2314.65 570.14 L2315.11 566.011 L2315.57 567.207 L2316.03 562.611 L2316.49 557.179 L2316.96 554.654 L2317.42 539.64 L2317.88 531.029 L2318.34 518.979 L2318.8 515.786 L2319.26 523.172 L2319.73 531.583 L2320.19 536.402 L2320.65 530.445 L2321.11 534.542 L2321.57 543.648 L2322.03 547.678 L2322.5 547.025 L2322.96 538.413 L2323.42 526.52 L2323.88 516.946 L2324.34 518.333 L2324.8 520.34 L2325.27 526.442 L2325.73 534.865 L2326.19 543.527 L2326.65 566.985 L2327.11 599.652 L2327.57 623.81 L2328.04 629.657 L2328.5 630.918 L2328.96 622.729 L2329.42 614.17 L2329.88 599.491 L2330.34 588.008 L2330.81 570.709 L2331.27 566.527 L2331.73 563.727 L2332.19 565.967 L2332.65 570.986 L2333.11 581.69 L2333.58 584.16 L2334.04 570.135 L2334.5 560.231 L2334.96 552.134 L2335.42 562.251 L2335.88 573.904 L2336.35 590.22 L2336.81 613.448 L2337.27 633.251 L2337.73 648.877 L2338.19 654.034 L2338.65 653.122 L2339.12 655.751 L2339.58 647.743 L2340.04 634.605 L2340.5 624.131 L2340.96 611.047 L2341.42 597.404 L2341.89 584.171 L2342.35 567.701 L2342.81 559.132 L2343.27 553.861 L2343.73 551.983 L2344.19 563.011 L2344.66 573.756 L2345.12 578.313 L2345.58 577.32 L2346.04 567.32 L2346.5 557.344 L2346.96 547.6 L2347.43 547.314 L2347.89 552.704 L2348.35 559.832 L2348.81 574.011 L2349.27 586.362 L2349.73 599.395 L2350.19 614.379 L2350.66 617.711 L2351.12 618.117 L2351.58 614.992 L2352.04 609.933 L2352.5 587.29 L2352.96 564.413 L2353.43 541.707 L2353.89 535.87 L2354.35 541.038 L2354.81 554.784 L2355.27 573.66 L2355.73 585.087 L2356.2 602.995 L2356.66 611.095 L2357.12 609.788 L2357.58 607.321 L2358.04 608.503 L2358.5 596.415 L2358.97 595.634 L2359.43 591.593 L2359.89 598.009 L2360.35 604.688 L2360.81 609.238 L2361.27 617.599 L2361.74 617.572 L2362.2 606.804 L2362.66 593.761 L2363.12 588.223 L2363.58 582.647 L2364.04 581.233 L2364.51 577.142 L2364.97 568.229 L2365.43 562.077 L2365.89 556.629 L2366.35 566.264 L2366.81 583.589 L2367.28 605.17 L2367.74 624.042 L2368.2 636.473 L2368.66 623.117 L2369.12 610.116 L2369.58 602.959 L2370.05 597.989 L2370.51 591.36 L2370.97 586.921 L2371.43 584.151 L2371.89 585.44 L2372.35 589.301 L2372.82 594.555 L2373.28 590.649 L2373.74 581.552 L2374.2 571.375 L2374.66 561.412 L2375.12 547.306 L2375.59 546.639 L2376.05 553.641 L2376.51 560.048 L2376.97 564.327 L2377.43 565.456 L2377.89 559.238 L2378.36 559.578 L2378.82 549.063 L2379.28 534.754 L2379.74 531.727 L2380.2 536.737 L2380.66 546.366 L2381.13 571.476 L2381.59 604.931 L2382.05 619.231 L2382.51 632.134 L2382.97 636.887 L2383.43 643.679 L2383.9 640.629 L2384.36 634.488 L2384.82 619.682 L2385.28 602.947 L2385.74 578.858 L2386.2 555.416 L2386.67 537.644 L2387.13 528.845 L2387.59 531.148 L2388.05 547.411 L2388.51 564.122 L2388.97 570.303 L2389.44 575.788 L2389.9 581.549 L2390.36 577.478 L2390.82 569.261 L2391.28 564.575 L2391.74 565.904 L2392.21 566.271 L2392.67 562.119 L2393.13 556.869 L2393.59 551.485 L2394.05 547.514 L2394.51 538.376 L2394.98 531.183 L2395.44 530.47 L2395.9 537.762 L2396.36 549.738 L2396.82 564.483 L2397.28 575.924 L2397.75 591.533 L2398.21 607.618 L2398.67 617.618 L2399.13 626.391 L2399.59 630.375 L2400.05 636.579 L2400.52 636.905 L2400.98 633.309 L2401.44 640.827 L2401.9 639.202 L2402.36 631.978 L2402.82 622.914 L2403.28 616.723 L2403.75 598.062 L2404.21 580.923 L2404.67 561.679 L2405.13 544.544 L2405.59 536.484 L2406.05 537.273 L2406.52 540.192 L2406.98 543.634 L2407.44 557.686 L2407.9 573.527 L2408.36 576.834 L2408.82 573.738 L2409.29 569.213 L2409.75 555.934 L2410.21 540.442 L2410.67 528.108 L2411.13 515.943 L2411.59 507.301 L2412.06 496.597 L2412.52 496.557 L2412.98 502.59 L2413.44 520.213 L2413.9 548.538 L2414.36 589.74 L2414.83 626.256 L2415.29 663.32 L2415.75 695.038 L2416.21 722.135 L2416.67 735.544 L2417.13 735.448 L2417.6 725.796 L2418.06 708.897 L2418.52 688.428 L2418.98 667.234 L2419.44 641.345 L2419.9 609.104 L2420.37 568.113 L2420.83 535.179 L2421.29 508.676 L2421.75 490.93 L2422.21 482.731 L2422.67 487.979 L2423.14 508.246 L2423.6 535.415 L2424.06 560.307 L2424.52 585.357 L2424.98 601.365 L2425.44 605.045 L2425.91 603.242 L2426.37 605.564 L2426.83 610.231 L2427.29 622.486 L2427.75 627.413 L2428.21 629.924 L2428.68 615.431 L2429.14 598.975 L2429.6 575.984 L2430.06 560.442 L2430.52 558.746 L2430.98 567.899 L2431.45 579.459 L2431.91 581.005 L2432.37 592.162 L2432.83 601.964 L2433.29 616.413 L2433.75 627.547 L2434.22 638.457 L2434.68 652.861 L2435.14 665.449 L2435.6 669.642 L2436.06 673.608 L2436.52 675.182 L2436.99 674.872 L2437.45 673.37 L2437.91 668.88 L2438.37 648.757 L2438.83 630.09 L2439.29 591.606 L2439.76 558.704 L2440.22 537.662 L2440.68 527.407 L2441.14 532.812 L2441.6 538.078 L2442.06 541.29 L2442.53 551.755 L2442.99 558.682 L2443.45 562.658 L2443.91 565.927 L2444.37 567.966 L2444.83 568.642 L2445.3 575.763 L2445.76 580.022 L2446.22 591.61 L2446.68 601.698 L2447.14 601.653 L2447.6 611.674 L2448.07 613.711 L2448.53 602.771 L2448.99 592.281 L2449.45 578.113 L2449.91 572.359 L2450.37 572.151 L2450.84 573.887 L2451.3 568.366 L2451.76 572.547 L2452.22 564.708 L2452.68 552.187 L2453.14 544.622 L2453.61 546.622 L2454.07 548.647 L2454.53 560.656 L2454.99 560.429 L2455.45 565.923 L2455.91 566.063 L2456.38 579.794 L2456.84 596.405 L2457.3 605.673 L2457.76 607.936 L2458.22 607.418 L2458.68 598.287 L2459.14 587.013 L2459.61 578.243 L2460.07 575.781 L2460.53 579.963 L2460.99 593.132 L2461.45 609.407 L2461.91 623.189 L2462.38 618.815 L2462.84 618.935 L2463.3 615.234 L2463.76 600.286 L2464.22 578.723 L2464.68 556.496 L2465.15 545.327 L2465.61 538.342 L2466.07 535.424 L2466.53 536.074 L2466.99 544.711 L2467.45 557.053 L2467.92 578.345 L2468.38 611.42 L2468.84 644.454 L2469.3 672.332 L2469.76 688.199 L2470.22 690.985 L2470.69 666.48 L2471.15 629.724 L2471.61 600.614 L2472.07 573.101 L2472.53 553.693 L2472.99 532.02 L2473.46 519.649 L2473.92 509.478 L2474.38 501.542 L2474.84 497.306 L2475.3 497.949 L2475.76 496.948 L2476.23 495.334 L2476.69 506.671 L2477.15 512.589 L2477.61 520.385 L2478.07 534 L2478.53 551.377 L2479 558.801 L2479.46 565.422 L2479.92 567.866 L2480.38 575.728 L2480.84 579.859 L2481.3 603.217 L2481.77 631.223 L2482.23 653.993 L2482.69 671.337 L2483.15 682.29 L2483.61 669.304 L2484.07 652.204 L2484.54 629.788 L2485 602.732 L2485.46 568.827 L2485.92 550.508 L2486.38 530.499 L2486.84 510.559 L2487.31 504.434 L2487.77 507.959 L2488.23 520.658 L2488.69 534.096 L2489.15 549.619 L2489.61 565.083 L2490.08 579.644 L2490.54 599.243 L2491 607.443 L2491.46 595.284 L2491.92 583.851 L2492.38 577.104 L2492.85 562.5 L2493.31 561.461 L2493.77 557.133 L2494.23 557.686 L2494.69 571.736 L2495.15 581.938 L2495.62 595.29 L2496.08 608.26 L2496.54 617.348 L2497 627.349 L2497.46 621.661 L2497.92 618.076 L2498.39 612.502 L2498.85 623.715 L2499.31 613.696 L2499.77 601.654 L2500.23 594.355 L2500.69 592.569 L2501.16 598.011 L2501.62 601.436 L2502.08 599.476 L2502.54 595.662 L2503 592.591 L2503.46 608.41 L2503.93 620.554 L2504.39 622.657 L2504.85 630.056 L2505.31 644.617 L2505.77 664.637 L2506.23 679.187 L2506.7 685.58 L2507.16 679.123 L2507.62 677.826 L2508.08 668.373 L2508.54 653.455 L2509 637.895 L2509.47 609.333 L2509.93 583.387 L2510.39 563.844 L2510.85 548.699 L2511.31 533.644 L2511.77 531.538 L2512.23 530.432 L2512.7 538.876 L2513.16 544.693 L2513.62 558.923 L2514.08 577.758 L2514.54 597.685 L2515 615.695 L2515.47 629.759 L2515.93 647.892 L2516.39 665.35 L2516.85 683.354 L2517.31 703.178 L2517.77 710.545 L2518.24 716.555 L2518.7 717.229 L2519.16 713.63 L2519.62 705.267 L2520.08 687.859 L2520.54 665.387 L2521.01 638.092 L2521.47 614.869 L2521.93 590.272 L2522.39 573.396 L2522.85 563.719 L2523.31 557.613 L2523.78 549.672 L2524.24 548.733 L2524.7 551.619 L2525.16 553.866 L2525.62 556.992 L2526.08 563.895 L2526.55 567.511 L2527.01 568.987 L2527.47 572.254 L2527.93 571.086 L2528.39 582.169 L2528.85 597.828 L2529.32 613.176 L2529.78 621.979 L2530.24 630.502 L2530.7 628.573 L2531.16 614.589 L2531.62 596.156 L2532.09 586.414 L2532.55 569.34 L2533.01 559.173 L2533.47 557.207 L2533.93 558.812 L2534.39 565.161 L2534.86 574.01 L2535.32 584.664 L2535.78 589.816 L2536.24 596.182 L2536.7 589.004 L2537.16 578.359 L2537.63 569.366 L2538.09 559.251 L2538.55 555.544 L2539.01 566.394 L2539.47 577.719 L2539.93 595.251 L2540.4 614.66 L2540.86 628.315 L2541.32 640.693 L2541.78 651.274 L2542.24 659.721 L2542.7 667.086 L2543.17 684.406 L2543.63 699.166 L2544.09 697.548 L2544.55 677.016 L2545.01 662.141 L2545.47 630.437 L2545.94 613.188 L2546.4 604.515 L2546.86 598.255 L2547.32 584.297 L2547.78 584.018 L2548.24 579.481 L2548.71 569.226 L2549.17 553.575 L2549.63 540.263 L2550.09 546.879 L2550.55 562.937 L2551.01 588.464 L2551.48 615.069 L2551.94 637.074 L2552.4 654.271 L2552.86 664.578 L2553.32 666.393 L2553.78 664.628 L2554.25 663.312 L2554.71 680.345 L2555.17 706.181 L2555.63 726.753 L2556.09 736.524 L2556.55 738.302 L2557.02 725.664 L2557.48 696.478 L2557.94 662.283 L2558.4 629.891 L2558.86 602.42 L2559.32 571.734 L2559.79 558.294 L2560.25 563.522 L2560.71 571.434 L2561.17 576.755 L2561.63 587.312 L2562.09 589.205 L2562.56 586.645 L2563.02 575.925 L2563.48 571.053 L2563.94 574.972 L2564.4 591.422 L2564.86 613.784 L2565.33 635.857 L2565.79 655.674 L2566.25 665.701 L2566.71 671.452 L2567.17 672.627 L2567.63 677.86 L2568.09 668.605 L2568.56 648.751 L2569.02 623.788 L2569.48 603.742 L2569.94 589.672 L2570.4 575.414 L2570.86 570.556 L2571.33 575.405 L2571.79 582.989 L2572.25 600.755 L2572.71 620.638 L2573.17 623.269 L2573.63 626.957 L2574.1 624.174 L2574.56 611.907 L2575.02 596.846 L2575.48 589.313 L2575.94 570.695 L2576.4 559.928 L2576.87 546.526 L2577.33 543.172 L2577.79 549.269 L2578.25 550.961 L2578.71 553.572 L2579.17 557.081 L2579.64 564.573 L2580.1 570.199 L2580.56 573.853 L2581.02 577.158 L2581.48 576.553 L2581.94 576.856 L2582.41 574.526 L2582.87 569.326 L2583.33 559.55 L2583.79 560.596 L2584.25 559.148 L2584.71 554.938 L2585.18 550.266 L2585.64 543.139 L2586.1 540.451 L2586.56 532.405 L2587.02 518.995 L2587.48 520.007 L2587.95 529.904 L2588.41 550.428 L2588.87 574.742 L2589.33 603.976 L2589.79 624.641 L2590.25 632.081 L2590.72 631.982 L2591.18 634.141 L2591.64 627.571 L2592.1 616.604 L2592.56 594.653 L2593.02 573.273 L2593.49 545.188 L2593.95 515.067 L2594.41 481.439 L2594.87 457.167 L2595.33 440.055 L2595.79 434.543 L2596.26 440.125 L2596.72 458.965 L2597.18 495.647 L2597.64 535.217 L2598.1 564.064 L2598.56 589.092 L2599.03 623.58 L2599.49 645.236 L2599.95 660.668 L2600.41 656.454 L2600.87 635.655 L2601.33 607.792 L2601.8 574.936 L2602.26 542.276 L2602.72 518.604 L2603.18 507.355 L2603.64 516.842 L2604.1 526.374 L2604.57 534.202 L2605.03 542.425 L2605.49 550.174 L2605.95 555.887 L2606.41 564.395 L2606.87 558.353 L2607.34 544.508 L2607.8 528.637 L2608.26 513.942 L2608.72 502.128 L2609.18 501.368 L2609.64 513.215 L2610.11 525.752 L2610.57 541.543 L2611.03 558.289 L2611.49 577.965 L2611.95 580.686 L2612.41 575.321 L2612.88 569.369 L2613.34 559.344 L2613.8 555.705 L2614.26 557.039 L2614.72 567.026 L2615.18 581.532 L2615.65 592.827 L2616.11 593.542 L2616.57 597.645 L2617.03 609.666 L2617.49 626.421 L2617.95 640.651 L2618.42 654.988 L2618.88 647.252 L2619.34 629.916 L2619.8 609.854 L2620.26 583.898 L2620.72 558.052 L2621.18 535.35 L2621.65 513.747 L2622.11 509.126 L2622.57 509.465 L2623.03 529.941 L2623.49 549.728 L2623.95 571.378 L2624.42 589.524 L2624.88 609.136 L2625.34 630.736 L2625.8 645.445 L2626.26 651.097 L2626.72 650.481 L2627.19 652.547 L2627.65 650.309 L2628.11 639.909 L2628.57 616.887 L2629.03 591.767 L2629.49 568.426 L2629.96 550.764 L2630.42 539.812 L2630.88 532.924 L2631.34 543.862 L2631.8 565.229 L2632.26 597.206 L2632.73 636.657 L2633.19 677.424 L2633.65 707.267 L2634.11 727.658 L2634.57 722.445 L2635.03 704.459 L2635.5 670.639 L2635.96 637.118 L2636.42 607.994 L2636.88 578.278 L2637.34 555.611 L2637.8 545.207 L2638.27 547.232 L2638.73 551.604 L2639.19 556.294 L2639.65 558.258 L2640.11 565.968 L2640.57 568.21 L2641.04 574.84 L2641.5 589.686 L2641.96 622.364 L2642.42 648.87 L2642.88 668.539 L2643.34 681.979 L2643.81 697.955 L2644.27 698.988 L2644.73 698.479 L2645.19 691.34 L2645.65 685.664 L2646.11 674.795 L2646.58 664.408 L2647.04 655.43 L2647.5 651.325 L2647.96 653.014 L2648.42 658.946 L2648.88 676.035 L2649.35 692.734 L2649.81 704.534 L2650.27 721.621 L2650.73 736.678 L2651.19 741.427 L2651.65 730.731 L2652.12 717.609 L2652.58 698.253 L2653.04 673.364 L2653.5 659.264 L2653.96 648.379 L2654.42 639.566 L2654.89 641.163 L2655.35 641.157 L2655.81 647.535 L2656.27 666.102 L2656.73 685.44 L2657.19 721.225 L2657.66 752.75 L2658.12 780.634 L2658.58 800.18 L2659.04 787.639 L2659.5 765.408 L2659.96 748.922 L2660.43 720.422 L2660.89 690.679 L2661.35 667.797 L2661.81 640.849 L2662.27 625.131 L2662.73 623.846 L2663.2 626.084 L2663.66 647.871 L2664.12 671.938 L2664.58 693.207 L2665.04 710.91 L2665.5 725.291 L2665.97 741.312 L2666.43 748.683 L2666.89 752.254 L2667.35 748.921 L2667.81 747.626 L2668.27 745.213 L2668.74 734.495 L2669.2 727.404 L2669.66 721.21 L2670.12 713.936 L2670.58 705.811 L2671.04 697.665 L2671.51 682.379 L2671.97 680.926 L2672.43 676.469 L2672.89 670.178 L2673.35 663.972 L2673.81 653.527 L2674.27 643.59 L2674.74 635.602 L2675.2 637.101 L2675.66 655.97 L2676.12 680.072 L2676.58 708.563 L2677.04 734.539 L2677.51 761.026 L2677.97 768.73 L2678.43 772.028 L2678.89 771.633 L2679.35 773.617 L2679.81 787.6 L2680.28 813.125 L2680.74 846.228 L2681.2 879.86 L2681.66 914.666 L2682.12 943.894 L2682.58 965.836 L2683.05 970.05 L2683.51 603.453 L2683.51 321.965 L2683.05 798.471 L2682.58 796.522 L2682.12 775.978 L2681.66 747.169 L2681.2 711.951 L2680.74 677.361 L2680.28 643.081 L2679.81 616.471 L2679.35 601.754 L2678.89 599.571 L2678.43 600.408 L2677.97 598.225 L2677.51 592.285 L2677.04 568.131 L2676.58 544.951 L2676.12 519.594 L2675.66 498.837 L2675.2 483.397 L2674.74 485.299 L2674.27 496.562 L2673.81 509.566 L2673.35 522.809 L2672.89 531.492 L2672.43 539.909 L2671.97 546.116 L2671.51 548.931 L2671.04 565.185 L2670.58 573.904 L2670.12 582.212 L2669.66 589.286 L2669.2 594.907 L2668.74 601.065 L2668.27 610.503 L2667.81 611.307 L2667.35 610.683 L2666.89 611.806 L2666.43 605.761 L2665.97 595.674 L2665.5 576.724 L2665.04 559.23 L2664.58 538.262 L2664.12 513.608 L2663.66 486.069 L2663.2 460.758 L2662.73 454.977 L2662.27 452.735 L2661.81 464.974 L2661.35 488.524 L2660.89 508.118 L2660.43 534.712 L2659.96 560.226 L2659.5 573.914 L2659.04 593.553 L2658.58 603.723 L2658.12 582.043 L2657.66 552.269 L2657.19 519.104 L2656.73 481.93 L2656.27 461.454 L2655.81 441.994 L2655.35 434.958 L2654.89 434.532 L2654.42 432.714 L2653.96 441.502 L2653.5 452.536 L2653.04 466.942 L2652.58 492.272 L2652.12 512.182 L2651.65 525.948 L2651.19 537.356 L2650.73 533.362 L2650.27 519.085 L2649.81 502.779 L2649.35 491.743 L2648.88 475.771 L2648.42 459.357 L2647.96 454.031 L2647.5 452.868 L2647.04 457.405 L2646.58 466.713 L2646.11 477.322 L2645.65 488.299 L2645.19 493.964 L2644.73 500.972 L2644.27 501.233 L2643.81 499.835 L2643.34 483.38 L2642.88 469.354 L2642.42 448.996 L2641.96 421.708 L2641.5 388.162 L2641.04 372.373 L2640.57 364.732 L2640.11 361.425 L2639.65 352.605 L2639.19 349.499 L2638.73 343.646 L2638.27 338.101 L2637.8 334.906 L2637.34 344.152 L2636.88 365.687 L2636.42 394.306 L2635.96 422.379 L2635.5 454.904 L2635.03 487.792 L2634.57 504.919 L2634.11 509.353 L2633.65 488.271 L2633.19 457.831 L2632.73 416.566 L2632.26 376.719 L2631.8 344.453 L2631.34 322.907 L2630.88 311.901 L2630.42 318.834 L2629.96 329.942 L2629.49 347.873 L2629.03 371.594 L2628.57 397.2 L2628.11 420.814 L2627.65 431.908 L2627.19 434.936 L2626.72 433.75 L2626.26 435.334 L2625.8 430.728 L2625.34 417.14 L2624.88 396.725 L2624.42 378.358 L2623.95 361.506 L2623.49 341.194 L2623.03 322.778 L2622.57 303.699 L2622.11 304.775 L2621.65 310.82 L2621.18 333.848 L2620.72 357.967 L2620.26 385.216 L2619.8 412.55 L2619.34 433.959 L2618.88 452.606 L2618.42 461.607 L2617.95 448.485 L2617.49 435.413 L2617.03 419.753 L2616.57 408.761 L2616.11 405.617 L2615.65 405.786 L2615.18 395.298 L2614.72 381.52 L2614.26 372.179 L2613.8 371.41 L2613.34 375.532 L2612.88 385.958 L2612.41 392.229 L2611.95 397.834 L2611.49 395.275 L2611.03 375.687 L2610.57 358.957 L2610.11 343.114 L2609.64 330.46 L2609.18 318.436 L2608.72 318.963 L2608.26 330.493 L2607.8 344.859 L2607.34 360.359 L2606.87 373.798 L2606.41 379.403 L2605.95 370.432 L2605.49 364.237 L2605.03 355.99 L2604.57 347.26 L2604.1 338.917 L2603.64 328.871 L2603.18 318.871 L2602.72 329.614 L2602.26 352.789 L2601.8 384.966 L2601.33 417.355 L2600.87 444.768 L2600.41 465.138 L2599.95 468.946 L2599.49 453.131 L2599.03 431.115 L2598.56 396.293 L2598.1 370.956 L2597.64 341.824 L2597.18 301.993 L2596.72 265.076 L2596.26 246.023 L2595.79 240.25 L2595.33 245.593 L2594.87 262.555 L2594.41 286.694 L2593.95 320.206 L2593.49 350.225 L2593.02 378.22 L2592.56 399.521 L2592.1 421.402 L2591.64 432.307 L2591.18 438.82 L2590.72 436.607 L2590.25 436.656 L2589.79 429.166 L2589.33 408.45 L2588.87 379.163 L2588.41 354.795 L2587.95 334.213 L2587.48 324.254 L2587.02 323.174 L2586.56 336.512 L2586.1 344.48 L2585.64 347.086 L2585.18 354.124 L2584.71 358.702 L2584.25 362.815 L2583.79 364.161 L2583.33 363.009 L2582.87 372.676 L2582.41 377.765 L2581.94 379.984 L2581.48 379.568 L2581.02 380.063 L2580.56 376.648 L2580.1 372.887 L2579.64 367.158 L2579.17 359.569 L2578.71 355.968 L2578.25 353.273 L2577.79 351.503 L2577.33 345.338 L2576.87 348.633 L2576.4 361.986 L2575.94 372.716 L2575.48 391.308 L2575.02 398.826 L2574.56 413.884 L2574.1 426.162 L2573.63 428.967 L2573.17 425.315 L2572.71 422.731 L2572.25 402.908 L2571.79 385.214 L2571.33 377.713 L2570.86 372.959 L2570.4 377.922 L2569.94 392.295 L2569.48 406.489 L2569.02 426.666 L2568.56 451.768 L2568.09 471.768 L2567.63 481.174 L2567.17 476.096 L2566.71 475.08 L2566.25 469.491 L2565.79 459.626 L2565.33 439.97 L2564.86 418.058 L2564.4 395.856 L2563.94 379.562 L2563.48 375.796 L2563.02 380.815 L2562.56 391.677 L2562.09 394.373 L2561.63 392.609 L2561.17 382.172 L2560.71 376.962 L2560.25 369.153 L2559.79 364.019 L2559.32 377.543 L2558.86 408.303 L2558.4 435.838 L2557.94 468.283 L2557.48 502.521 L2557.02 531.741 L2556.55 544.401 L2556.09 542.636 L2555.63 532.868 L2555.17 512.29 L2554.71 486.44 L2554.25 469.384 L2553.78 470.669 L2553.32 472.397 L2552.86 470.536 L2552.4 460.179 L2551.94 442.925 L2551.48 420.859 L2551.01 394.19 L2550.55 368.594 L2550.09 352.465 L2549.63 345.775 L2549.17 359.012 L2548.71 374.587 L2548.24 384.766 L2547.78 389.226 L2547.32 389.429 L2546.86 403.313 L2546.4 409.501 L2545.94 418.103 L2545.47 435.283 L2545.01 466.921 L2544.55 481.733 L2544.09 502.205 L2543.63 503.766 L2543.17 488.952 L2542.7 471.583 L2542.24 464.171 L2541.78 455.68 L2541.32 445.059 L2540.86 432.643 L2540.4 418.955 L2539.93 399.514 L2539.47 381.953 L2539.01 370.602 L2538.55 359.727 L2538.09 363.412 L2537.63 373.506 L2537.16 382.479 L2536.7 393.106 L2536.24 400.266 L2535.78 393.883 L2535.32 388.714 L2534.86 378.044 L2534.39 369.177 L2533.93 362.811 L2533.47 361.187 L2533.01 363.135 L2532.55 373.282 L2532.09 390.334 L2531.62 400.054 L2531.16 418.463 L2530.7 432.423 L2530.24 434.326 L2529.78 425.776 L2529.32 416.944 L2528.85 401.566 L2528.39 385.876 L2527.93 374.761 L2527.47 375.897 L2527.01 372.596 L2526.55 371.087 L2526.08 367.437 L2525.62 360.499 L2525.16 357.34 L2524.7 355.059 L2524.24 352.14 L2523.78 353.048 L2523.31 360.957 L2522.85 367.033 L2522.39 376.682 L2521.93 393.532 L2521.47 418.105 L2521.01 441.306 L2520.54 468.582 L2520.08 491.037 L2519.62 508.43 L2519.16 516.782 L2518.7 520.372 L2518.24 519.693 L2517.77 513.682 L2517.31 506.316 L2516.85 486.496 L2516.39 468.5 L2515.93 451.053 L2515.47 432.935 L2515 418.888 L2514.54 400.899 L2514.08 380.995 L2513.62 362.188 L2513.16 347.987 L2512.7 342.202 L2512.23 333.793 L2511.77 334.935 L2511.31 337.081 L2510.85 352.176 L2510.39 367.363 L2509.93 386.949 L2509.47 412.94 L2509 441.548 L2508.54 457.154 L2508.08 472.119 L2507.62 481.619 L2507.16 482.963 L2506.7 489.466 L2506.23 483.12 L2505.77 468.615 L2505.31 448.638 L2504.85 434.121 L2504.39 426.764 L2503.93 424.701 L2503.46 412.596 L2503 396.814 L2502.54 399.919 L2502.08 403.767 L2501.62 405.757 L2501.16 402.361 L2500.69 396.945 L2500.23 398.755 L2499.77 406.076 L2499.31 418.137 L2498.85 428.173 L2498.39 416.974 L2497.92 422.561 L2497.46 426.156 L2497 431.851 L2496.54 421.856 L2496.08 412.772 L2495.62 399.803 L2495.15 386.451 L2494.69 376.247 L2494.23 362.193 L2493.77 361.635 L2493.31 365.956 L2492.85 366.986 L2492.38 381.581 L2491.92 388.318 L2491.46 399.739 L2491 411.886 L2490.54 403.673 L2490.08 384.061 L2489.61 369.485 L2489.15 354.007 L2488.69 338.47 L2488.23 325.017 L2487.77 312.303 L2487.31 308.763 L2486.84 314.872 L2486.38 334.797 L2485.92 354.792 L2485.46 373.097 L2485 406.988 L2484.54 434.029 L2484.07 456.432 L2483.61 473.519 L2483.15 486.492 L2482.69 475.527 L2482.23 458.171 L2481.77 435.39 L2481.3 407.373 L2480.84 384.005 L2480.38 379.864 L2479.92 371.992 L2479.46 369.538 L2479 362.909 L2478.53 355.476 L2478.07 338.091 L2477.61 324.469 L2477.15 316.665 L2476.69 310.74 L2476.23 299.396 L2475.76 301.004 L2475.3 301.998 L2474.84 301.349 L2474.38 305.579 L2473.92 313.51 L2473.46 323.675 L2472.99 336.04 L2472.53 357.708 L2472.07 377.111 L2471.61 404.619 L2471.15 433.724 L2470.69 470.475 L2470.22 494.976 L2469.76 492.186 L2469.3 476.315 L2468.84 448.432 L2468.38 415.395 L2467.92 382.317 L2467.45 361.021 L2466.99 348.676 L2466.53 340.036 L2466.07 339.383 L2465.61 342.299 L2465.15 349.282 L2464.68 360.449 L2464.22 382.675 L2463.76 404.237 L2463.3 419.184 L2462.84 422.885 L2462.38 422.765 L2461.91 427.14 L2461.45 413.358 L2460.99 397.084 L2460.53 383.916 L2460.07 379.736 L2459.61 382.201 L2459.14 390.973 L2458.68 402.251 L2458.22 411.385 L2457.76 411.906 L2457.3 409.647 L2456.84 400.383 L2456.38 383.776 L2455.91 370.05 L2455.45 369.915 L2454.99 364.427 L2454.53 364.659 L2454.07 352.656 L2453.61 350.636 L2453.14 348.642 L2452.68 356.213 L2452.22 368.739 L2451.76 376.584 L2451.3 372.408 L2450.84 377.936 L2450.37 376.205 L2449.91 376.418 L2449.45 382.178 L2448.99 396.351 L2448.53 406.846 L2448.07 417.792 L2447.6 415.759 L2447.14 405.743 L2446.68 405.792 L2446.22 395.708 L2445.76 384.124 L2445.3 379.868 L2444.83 372.75 L2444.37 372.077 L2443.91 370.041 L2443.45 366.774 L2442.99 362.8 L2442.53 355.875 L2442.06 345.411 L2441.6 342.201 L2441.14 336.936 L2440.68 331.53 L2440.22 341.785 L2439.76 362.828 L2439.29 395.73 L2438.83 434.213 L2438.37 452.88 L2437.91 473.002 L2437.45 477.49 L2436.99 478.991 L2436.52 479.299 L2436.06 477.724 L2435.6 473.757 L2435.14 469.562 L2434.68 456.972 L2434.22 442.565 L2433.75 431.654 L2433.29 420.518 L2432.83 406.067 L2432.37 396.262 L2431.91 385.104 L2431.45 383.555 L2430.98 371.993 L2430.52 362.837 L2430.06 364.531 L2429.6 380.071 L2429.14 403.06 L2428.68 419.513 L2428.21 434.005 L2427.75 431.492 L2427.29 426.563 L2426.83 414.306 L2426.37 409.637 L2425.91 407.313 L2425.44 409.114 L2424.98 405.432 L2424.52 389.422 L2424.06 364.37 L2423.6 339.477 L2423.14 312.307 L2422.67 292.038 L2422.21 286.788 L2421.75 294.986 L2421.29 312.73 L2420.83 339.231 L2420.37 372.164 L2419.9 413.154 L2419.44 445.393 L2418.98 471.281 L2418.52 492.473 L2418.06 512.941 L2417.6 529.838 L2417.13 539.489 L2416.67 539.583 L2416.21 526.173 L2415.75 499.074 L2415.29 467.355 L2414.83 430.29 L2414.36 393.772 L2413.9 352.569 L2413.44 324.243 L2412.98 306.618 L2412.52 300.584 L2412.06 300.622 L2411.59 311.326 L2411.13 319.966 L2410.67 332.131 L2410.21 344.463 L2409.75 359.954 L2409.29 373.232 L2408.82 377.756 L2408.36 380.852 L2407.9 377.544 L2407.44 361.702 L2406.98 347.65 L2406.52 344.208 L2406.05 341.288 L2405.59 340.499 L2405.13 348.559 L2404.67 365.694 L2404.21 384.937 L2403.75 402.077 L2403.28 420.738 L2402.82 426.93 L2402.36 435.994 L2401.9 443.218 L2401.44 444.844 L2400.98 437.327 L2400.52 440.924 L2400.05 440.599 L2399.59 434.395 L2399.13 430.413 L2398.67 421.641 L2398.21 411.642 L2397.75 395.559 L2397.28 379.951 L2396.82 368.511 L2396.36 353.768 L2395.9 341.794 L2395.44 334.503 L2394.98 335.218 L2394.51 342.412 L2394.05 351.552 L2393.59 355.524 L2393.13 360.911 L2392.67 366.162 L2392.21 370.315 L2391.74 369.95 L2391.28 368.623 L2390.82 373.31 L2390.36 381.529 L2389.9 385.601 L2389.44 379.841 L2388.97 374.358 L2388.51 368.178 L2388.05 351.468 L2387.59 335.206 L2387.13 332.904 L2386.67 341.704 L2386.2 359.477 L2385.74 382.92 L2385.28 407.01 L2384.82 423.746 L2384.36 438.553 L2383.9 444.694 L2383.43 447.745 L2382.97 440.953 L2382.51 436.2 L2382.05 423.298 L2381.59 408.997 L2381.13 375.543 L2380.66 350.433 L2380.2 340.804 L2379.74 335.794 L2379.28 338.821 L2378.82 353.13 L2378.36 363.644 L2377.89 363.304 L2377.43 369.522 L2376.97 368.393 L2376.51 364.113 L2376.05 357.706 L2375.59 350.704 L2375.12 351.37 L2374.66 365.476 L2374.2 375.438 L2373.74 385.615 L2373.28 394.711 L2372.82 398.616 L2372.35 393.362 L2371.89 389.5 L2371.43 388.211 L2370.97 390.98 L2370.51 395.419 L2370.05 402.047 L2369.58 407.017 L2369.12 414.174 L2368.66 427.173 L2368.2 440.529 L2367.74 428.097 L2367.28 409.225 L2366.81 387.643 L2366.35 370.318 L2365.89 360.683 L2365.43 366.131 L2364.97 372.282 L2364.51 381.194 L2364.04 385.284 L2363.58 386.698 L2363.12 392.274 L2362.66 397.811 L2362.2 410.854 L2361.74 421.621 L2361.27 421.649 L2360.81 413.287 L2360.35 408.737 L2359.89 402.057 L2359.43 395.641 L2358.97 399.682 L2358.5 400.463 L2358.04 412.551 L2357.58 411.368 L2357.12 413.835 L2356.66 415.142 L2356.2 407.041 L2355.73 389.133 L2355.27 377.706 L2354.81 358.83 L2354.35 345.084 L2353.89 339.916 L2353.43 345.752 L2352.96 368.458 L2352.5 391.335 L2352.04 413.977 L2351.58 419.036 L2351.12 422.162 L2350.66 421.756 L2350.19 418.424 L2349.73 403.44 L2349.27 390.406 L2348.81 378.056 L2348.35 363.877 L2347.89 356.749 L2347.43 351.359 L2346.96 351.645 L2346.5 361.389 L2346.04 371.365 L2345.58 381.365 L2345.12 382.358 L2344.66 377.801 L2344.19 367.057 L2343.73 356.029 L2343.27 357.908 L2342.81 363.179 L2342.35 371.747 L2341.89 388.218 L2341.42 401.451 L2340.96 415.094 L2340.5 428.178 L2340.04 438.652 L2339.58 451.791 L2339.12 459.799 L2338.65 457.17 L2338.19 458.083 L2337.73 452.925 L2337.27 437.3 L2336.81 417.497 L2336.35 394.269 L2335.88 377.953 L2335.42 366.301 L2334.96 356.184 L2334.5 364.281 L2334.04 374.185 L2333.58 388.211 L2333.11 385.74 L2332.65 375.036 L2332.19 370.018 L2331.73 367.778 L2331.27 370.578 L2330.81 374.76 L2330.34 392.06 L2329.88 403.543 L2329.42 418.222 L2328.96 426.781 L2328.5 434.97 L2328.04 433.709 L2327.57 427.863 L2327.11 403.704 L2326.65 371.038 L2326.19 347.579 L2325.73 338.917 L2325.27 330.495 L2324.8 324.392 L2324.34 322.386 L2323.88 320.998 L2323.42 330.572 L2322.96 342.465 L2322.5 351.077 L2322.03 351.731 L2321.57 347.701 L2321.11 338.594 L2320.65 334.498 L2320.19 340.454 L2319.73 335.635 L2319.26 327.224 L2318.8 319.838 L2318.34 323.031 L2317.88 335.081 L2317.42 343.691 L2316.96 358.706 L2316.49 361.231 L2316.03 366.663 L2315.57 371.259 L2315.11 370.062 L2314.65 374.191 L2314.19 377.049 L2313.72 381.558 L2313.26 383.948 L2312.8 392.444 L2312.34 404.557 L2311.88 413.713 L2311.42 418.334 L2310.95 413.13 L2310.49 406.6 L2310.03 399.796 L2309.57 381.31 L2309.11 366.898 L2308.65 370.79 L2308.18 373.762 L2307.72 381.27 L2307.26 381.364 L2306.8 387.481 L2306.34 392.5 L2305.88 393.3 L2305.41 405.583 L2304.95 409.477 L2304.49 408.584 L2304.03 396.83 L2303.57 381.116 L2303.11 377.173 L2302.64 367.617 L2302.18 365.22 L2301.72 358.185 L2301.26 370.951 L2300.8 391.058 L2300.34 405.663 L2299.87 411.168 L2299.41 415.833 L2298.95 417.204 L2298.49 412.916 L2298.03 397.225 L2297.57 394.508 L2297.1 390.788 L2296.64 383.19 L2296.18 385.184 L2295.72 392.638 L2295.26 402.203 L2294.8 411.973 L2294.34 417.091 L2293.87 410.975 L2293.41 391.645 L2292.95 375.753 L2292.49 361.865 L2292.03 351 L2291.57 346.17 L2291.1 351.6 L2290.64 365.133 L2290.18 385.42 L2289.72 406.433 L2289.26 420.813 L2288.8 424.931 L2288.33 419.672 L2287.87 411.113 L2287.41 398.487 L2286.95 386.188 L2286.49 372.239 L2286.03 356.291 L2285.56 345.835 L2285.1 348.018 L2284.64 358.279 L2284.18 372.608 L2283.72 388.929 L2283.26 399.408 L2282.79 404.256 L2282.33 408.786 L2281.87 407.974 L2281.41 396.155 L2280.95 385.111 L2280.49 363.022 L2280.02 344.667 L2279.56 331.129 L2279.1 328.372 L2278.64 330.708 L2278.18 338.562 L2277.72 351.548 L2277.25 369.052 L2276.79 381.619 L2276.33 384.49 L2275.87 391.749 L2275.41 403.577 L2274.95 414.83 L2274.48 415.411 L2274.02 419.744 L2273.56 439.104 L2273.1 459.859 L2272.64 478.366 L2272.18 495.568 L2271.71 495.416 L2271.25 473.154 L2270.79 444.277 L2270.33 417.114 L2269.87 399.832 L2269.41 380.737 L2268.94 365.35 L2268.48 353.958 L2268.02 331.264 L2267.56 314.656 L2267.1 309.705 L2266.64 306.378 L2266.17 309.58 L2265.71 323.433 L2265.25 335.212 L2264.79 356.768 L2264.33 378.413 L2263.87 399.98 L2263.4 414.652 L2262.94 425.638 L2262.48 419.756 L2262.02 410.437 L2261.56 382.339 L2261.1 358.306 L2260.63 349.718 L2260.17 343.223 L2259.71 341.315 L2259.25 350.572 L2258.79 354.915 L2258.33 359.994 L2257.86 374.508 L2257.4 386.17 L2256.94 396.621 L2256.48 404.478 L2256.02 408.607 L2255.56 415.569 L2255.09 415.936 L2254.63 416.454 L2254.17 420.606 L2253.71 426.657 L2253.25 421.973 L2252.79 423.435 L2252.32 426.953 L2251.86 423.574 L2251.4 430.255 L2250.94 432.216 L2250.48 436.177 L2250.02 442.633 L2249.55 452.31 L2249.09 454.324 L2248.63 443.739 L2248.17 442.323 L2247.71 433.403 L2247.25 427.645 L2246.78 433.122 L2246.32 442.37 L2245.86 447.573 L2245.4 439.414 L2244.94 428.086 L2244.48 399.146 L2244.01 386.46 L2243.55 355.899 L2243.09 344.977 L2242.63 343.117 L2242.17 340.189 L2241.71 344.203 L2241.24 352.331 L2240.78 363.355 L2240.32 373.953 L2239.86 385.242 L2239.4 399.626 L2238.94 402.439 L2238.48 402.248 L2238.01 402.201 L2237.55 409.468 L2237.09 418.219 L2236.63 425.751 L2236.17 438.492 L2235.71 452.018 L2235.24 458.367 L2234.78 459.831 L2234.32 445.557 L2233.86 423.557 L2233.4 404.592 L2232.94 406.147 L2232.47 409.761 L2232.01 407.07 L2231.55 401.769 L2231.09 399.934 L2230.63 399.933 L2230.17 403.285 L2229.7 395.501 L2229.24 382.534 L2228.78 380.112 L2228.32 385.559 L2227.86 391.693 L2227.4 408.012 L2226.93 428.166 L2226.47 445.914 L2226.01 451.826 L2225.55 442.421 L2225.09 423.365 L2224.63 401.485 L2224.16 370.726 L2223.7 341.306 L2223.24 322.092 L2222.78 314.949 L2222.32 314.322 L2221.86 315.022 L2221.39 317.638 L2220.93 326.123 L2220.47 351.554 L2220.01 384.401 L2219.55 416.721 L2219.09 441.12 L2218.62 453.053 L2218.16 459.997 L2217.7 461.261 L2217.24 458.606 L2216.78 447.364 L2216.32 436.086 L2215.85 434.093 L2215.39 434.958 L2214.93 432.994 L2214.47 439.531 L2214.01 437.821 L2213.55 443.148 L2213.08 453.376 L2212.62 459.848 L2212.16 450.72 L2211.7 452.644 L2211.24 447.614 L2210.78 437.323 L2210.31 427.691 L2209.85 412.535 L2209.39 403.162 L2208.93 387.888 L2208.47 367.204 L2208.01 342.336 L2207.54 328.391 L2207.08 322.84 L2206.62 333.349 L2206.16 356.3 L2205.7 382.622 L2205.24 411.483 L2204.77 437.511 L2204.31 472.077 L2203.85 492.402 L2203.39 491.309 L2202.93 481.201 L2202.47 457.652 L2202 438.788 L2201.54 409.891 L2201.08 387.463 L2200.62 372.976 L2200.16 370.367 L2199.7 368.571 L2199.23 363.294 L2198.77 348.358 L2198.31 340.432 L2197.85 331.06 L2197.39 326.382 L2196.93 316.554 L2196.46 309.857 L2196 318.675 L2195.54 326.043 L2195.08 339.9 L2194.62 365.291 L2194.16 383.755 L2193.69 407.005 L2193.23 430.529 L2192.77 448.467 L2192.31 464.002 L2191.85 472.321 L2191.39 470.696 L2190.92 460.464 L2190.46 439.787 L2190 414.498 L2189.54 394.409 L2189.08 371.106 L2188.62 345.071 L2188.15 324.072 L2187.69 316.017 L2187.23 328.253 L2186.77 354.994 L2186.31 379.345 L2185.85 399.013 L2185.39 411.485 L2184.92 422.075 L2184.46 425.901 L2184 428.128 L2183.54 422.389 L2183.08 405.205 L2182.62 391.247 L2182.15 377.593 L2181.69 363.406 L2181.23 365.66 L2180.77 377.869 L2180.31 404.053 L2179.85 428.853 L2179.38 442.129 L2178.92 445.816 L2178.46 448.608 L2178 465.211 L2177.54 468.747 L2177.08 477.489 L2176.61 473.772 L2176.15 470.922 L2175.69 468.976 L2175.23 465.476 L2174.77 460.917 L2174.31 459.812 L2173.84 450.066 L2173.38 443.241 L2172.92 431.817 L2172.46 423.237 L2172 412.542 L2171.54 405.613 L2171.07 402.216 L2170.61 397.112 L2170.15 381.798 L2169.69 367.702 L2169.23 355.895 L2168.77 351.003 L2168.3 345.692 L2167.84 338.255 L2167.38 350.479 L2166.92 370.932 L2166.46 387.805 L2166 403.634 L2165.53 398.381 L2165.07 393.498 L2164.61 387.861 L2164.15 380.467 L2163.69 378.677 L2163.23 378.485 L2162.76 377.117 L2162.3 379.065 L2161.84 388.237 L2161.38 392.683 L2160.92 392.681 L2160.46 387.397 L2159.99 370.622 L2159.53 356.334 L2159.07 333.195 L2158.61 306.668 L2158.15 292.258 L2157.69 284.026 L2157.22 292.257 L2156.76 314.832 L2156.3 340.676 L2155.84 364.272 L2155.38 384.408 L2154.92 388.169 L2154.45 389.147 L2153.99 383.725 L2153.53 381.195 L2153.07 377.763 L2152.61 381.434 L2152.15 388.456 L2151.68 405.859 L2151.22 420.388 L2150.76 418.893 L2150.3 424.285 L2149.84 424.154 L2149.38 427.378 L2148.91 419.333 L2148.45 418.431 L2147.99 419.647 L2147.53 428.077 L2147.07 429.287 L2146.61 438.094 L2146.14 446.053 L2145.68 458.007 L2145.22 459.84 L2144.76 451.125 L2144.3 437.543 L2143.84 420.34 L2143.37 409.555 L2142.91 385.631 L2142.45 363.303 L2141.99 347.198 L2141.53 339.414 L2141.07 336.214 L2140.6 334.421 L2140.14 338.608 L2139.68 338.24 L2139.22 345.295 L2138.76 353.044 L2138.3 356.268 L2137.83 364.933 L2137.37 378.852 L2136.91 402.114 L2136.45 423.072 L2135.99 460.606 L2135.53 481.311 L2135.06 480.663 L2134.6 469.412 L2134.14 450.276 L2133.68 415.553 L2133.22 384.293 L2132.76 357.389 L2132.3 344.15 L2131.83 333.975 L2131.37 330.787 L2130.91 332.849 L2130.45 330.39 L2129.99 333.546 L2129.53 340.242 L2129.06 354.732 L2128.6 378.358 L2128.14 401.964 L2127.68 428.003 L2127.22 445.484 L2126.76 448.064 L2126.29 434.617 L2125.83 420.077 L2125.37 402.971 L2124.91 388.947 L2124.45 373.416 L2123.99 357.889 L2123.52 358.618 L2123.06 365.806 L2122.6 387.188 L2122.14 410.889 L2121.68 426.94 L2121.22 441.753 L2120.75 449.019 L2120.29 445.959 L2119.83 441.922 L2119.37 435.718 L2118.91 436.58 L2118.45 436.269 L2117.98 429.829 L2117.52 424.418 L2117.06 412.976 L2116.6 404.512 L2116.14 413.643 L2115.68 430.314 L2115.21 440.542 L2114.75 447.07 L2114.29 443.43 L2113.83 439.346 L2113.37 420.717 L2112.91 412.646 L2112.44 397.662 L2111.98 384.476 L2111.52 369.272 L2111.06 356.152 L2110.6 357.472 L2110.14 378.003 L2109.67 399.604 L2109.21 425.224 L2108.75 445.666 L2108.29 458.051 L2107.83 451.05 L2107.37 430.793 L2106.9 403.704 L2106.44 372.328 L2105.98 343.842 L2105.52 327.059 L2105.06 321.829 L2104.6 333.72 L2104.13 348.309 L2103.67 365.318 L2103.21 376.706 L2102.75 388.333 L2102.29 408.46 L2101.83 427.142 L2101.36 445.418 L2100.9 459.425 L2100.44 467.669 L2099.98 471.766 L2099.52 467.003 L2099.06 471.382 L2098.59 473.175 L2098.13 479.461 L2097.67 478.526 L2097.21 468.228 L2096.75 455.781 L2096.29 449.575 L2095.82 442.153 L2095.36 435.281 L2094.9 414.813 L2094.44 403.44 L2093.98 389.214 L2093.52 374.865 L2093.05 370.966 L2092.59 369.293 L2092.13 367.643 L2091.67 369.879 L2091.21 352.187 L2090.75 337.263 L2090.28 326.025 L2089.82 327.752 L2089.36 334.289 L2088.9 338.262 L2088.44 344.687 L2087.98 357.973 L2087.51 364.268 L2087.05 371.429 L2086.59 379.895 L2086.13 391.326 L2085.67 409.197 L2085.21 422.583 L2084.74 435.27 L2084.28 448.336 L2083.82 458.491 L2083.36 459.797 L2082.9 451.71 L2082.44 442.872 L2081.97 434.457 L2081.51 414.646 L2081.05 401.415 L2080.59 382.972 L2080.13 359.929 L2079.67 343.057 L2079.2 327.576 L2078.74 318.387 L2078.28 320.438 L2077.82 328.214 L2077.36 336.315 L2076.9 354.04 L2076.44 369.903 L2075.97 385.38 L2075.51 398.44 L2075.05 415.862 L2074.59 424.756 L2074.13 426.825 L2073.67 425.313 L2073.2 431.214 L2072.74 432.073 L2072.28 439.06 L2071.82 439.587 L2071.36 434.796 L2070.9 429.096 L2070.43 420.676 L2069.97 413.42 L2069.51 415.178 L2069.05 411.992 L2068.59 411.843 L2068.13 399.314 L2067.66 391.803 L2067.2 379.097 L2066.74 366.22 L2066.28 357.22 L2065.82 348.628 L2065.36 342.759 L2064.89 354.694 L2064.43 368.609 L2063.97 387.112 L2063.51 403.763 L2063.05 422.348 L2062.59 433.154 L2062.12 431.103 L2061.66 435.234 L2061.2 440.486 L2060.74 447.309 L2060.28 452.09 L2059.82 451.851 L2059.35 460.097 L2058.89 444.714 L2058.43 421.515 L2057.97 402.066 L2057.51 392.412 L2057.05 386.328 L2056.58 385.317 L2056.12 394.716 L2055.66 401.163 L2055.2 397.688 L2054.74 391.167 L2054.28 384.446 L2053.81 376.376 L2053.35 368.799 L2052.89 357.239 L2052.43 350.601 L2051.97 351.329 L2051.51 358.279 L2051.04 360.461 L2050.58 366.845 L2050.12 383.37 L2049.66 393.594 L2049.2 410.494 L2048.74 425.547 L2048.27 433.037 L2047.81 428.515 L2047.35 410.434 L2046.89 385.616 L2046.43 376.378 L2045.97 370.543 L2045.5 366.714 L2045.04 361.691 L2044.58 356.917 L2044.12 342.517 L2043.66 338.657 L2043.2 335.363 L2042.73 337.438 L2042.27 346.89 L2041.81 357.405 L2041.35 374.647 L2040.89 398.341 L2040.43 411.045 L2039.96 419.761 L2039.5 411.667 L2039.04 403.519 L2038.58 397.635 L2038.12 397.019 L2037.66 406.423 L2037.19 412.309 L2036.73 411.426 L2036.27 415.01 L2035.81 412.941 L2035.35 413.196 L2034.89 411.017 L2034.42 415.576 L2033.96 413.949 L2033.5 413.477 L2033.04 413.866 L2032.58 411.387 L2032.12 417.188 L2031.65 432.748 L2031.19 440.636 L2030.73 445.359 L2030.27 435.528 L2029.81 431.954 L2029.35 419.107 L2028.88 401.866 L2028.42 375.379 L2027.96 351.201 L2027.5 333.849 L2027.04 321.989 L2026.58 317.762 L2026.11 326.698 L2025.65 348.702 L2025.19 383.093 L2024.73 423.112 L2024.27 465.046 L2023.81 496.64 L2023.35 510.028 L2022.88 513.953 L2022.42 508.172 L2021.96 495.142 L2021.5 482.377 L2021.04 468.626 L2020.58 446.496 L2020.11 418.327 L2019.65 395.197 L2019.19 381.099 L2018.73 373.08 L2018.27 370.829 L2017.81 355.036 L2017.34 346.587 L2016.88 335.222 L2016.42 327.131 L2015.96 314.258 L2015.5 323.237 L2015.04 345.046 L2014.57 368.108 L2014.11 390.544 L2013.65 415.773 L2013.19 441.76 L2012.73 460.284 L2012.27 471.562 L2011.8 475.786 L2011.34 477.37 L2010.88 461.842 L2010.42 440.501 L2009.96 417.891 L2009.5 394.698 L2009.03 372.184 L2008.57 361.369 L2008.11 354.785 L2007.65 358.125 L2007.19 373.832 L2006.73 395.653 L2006.26 408.825 L2005.8 415.28 L2005.34 421.117 L2004.88 429.095 L2004.42 425.223 L2003.96 415.082 L2003.49 394.368 L2003.03 364.034 L2002.57 338.243 L2002.11 315.781 L2001.65 301.072 L2001.19 287.293 L2000.72 282.156 L2000.26 279.619 L1999.8 287.969 L1999.34 299.156 L1998.88 326.351 L1998.42 365.877 L1997.95 407.245 L1997.49 441.882 L1997.03 466.104 L1996.57 484.452 L1996.11 496.198 L1995.65 490.619 L1995.18 475.666 L1994.72 457.189 L1994.26 428.888 L1993.8 398.965 L1993.34 362.315 L1992.88 339.008 L1992.41 319.864 L1991.95 309.247 L1991.49 303.475 L1991.03 302.821 L1990.57 317.144 L1990.11 336.735 L1989.64 362.03 L1989.18 387.739 L1988.72 421.326 L1988.26 452.24 L1987.8 473.716 L1987.34 480.171 L1986.87 478.933 L1986.41 460.094 L1985.95 441.102 L1985.49 426.33 L1985.03 420.965 L1984.57 423.666 L1984.1 424.064 L1983.64 425.377 L1983.18 422.165 L1982.72 427.204 L1982.26 432.752 L1981.8 438.244 L1981.33 435.204 L1980.87 433.817 L1980.41 436.441 L1979.95 421.49 L1979.49 404.421 L1979.03 392.659 L1978.56 389.854 L1978.1 383.76 L1977.64 386.098 L1977.18 386.918 L1976.72 392.04 L1976.26 405.555 L1975.79 420.836 L1975.33 443.581 L1974.87 467.596 L1974.41 476.587 L1973.95 478.648 L1973.49 465.387 L1973.02 453.545 L1972.56 436.395 L1972.1 417.958 L1971.64 404.548 L1971.18 393.082 L1970.72 401.019 L1970.25 412.769 L1969.79 427.994 L1969.33 444.959 L1968.87 456.655 L1968.41 462.605 L1967.95 456.143 L1967.49 449.618 L1967.02 445.039 L1966.56 430.545 L1966.1 414.875 L1965.64 392.944 L1965.18 376.14 L1964.72 349.851 L1964.25 325.395 L1963.79 310.76 L1963.33 310.462 L1962.87 314.897 L1962.41 341.303 L1961.95 376.605 L1961.48 409.399 L1961.02 444.109 L1960.56 463.167 L1960.1 465.872 L1959.64 459 L1959.18 449.98 L1958.71 440.055 L1958.25 432.199 L1957.79 419.951 L1957.33 412.932 L1956.87 401.312 L1956.41 394.087 L1955.94 390.788 L1955.48 394.078 L1955.02 385.315 L1954.56 375.984 L1954.1 373.44 L1953.64 375.709 L1953.17 391.888 L1952.71 408.555 L1952.25 420.084 L1951.79 425.135 L1951.33 444.286 L1950.87 451.069 L1950.4 449.32 L1949.94 432.136 L1949.48 403.767 L1949.02 373.496 L1948.56 341.232 L1948.1 321.574 L1947.63 310.573 L1947.17 304.268 L1946.71 309.976 L1946.25 327.291 L1945.79 350.892 L1945.33 370.286 L1944.86 399.521 L1944.4 425.412 L1943.94 437.627 L1943.48 431.834 L1943.02 427.45 L1942.56 416.55 L1942.09 404.67 L1941.63 398.871 L1941.17 401.995 L1940.71 399.915 L1940.25 404.734 L1939.79 405.034 L1939.32 402.831 L1938.86 398.832 L1938.4 394.151 L1937.94 388.161 L1937.48 383.394 L1937.02 383.927 L1936.55 392.401 L1936.09 398.198 L1935.63 406.799 L1935.17 408.16 L1934.71 404.617 L1934.25 405.377 L1933.78 398.755 L1933.32 394.59 L1932.86 386.461 L1932.4 380.119 L1931.94 371.444 L1931.48 362.9 L1931.01 360.761 L1930.55 359.558 L1930.09 354.238 L1929.63 347.066 L1929.17 336.523 L1928.71 339.628 L1928.24 357.627 L1927.78 374.892 L1927.32 390.488 L1926.86 413.055 L1926.4 427.499 L1925.94 439.122 L1925.47 449.069 L1925.01 447.243 L1924.55 442.455 L1924.09 436.074 L1923.63 415.069 L1923.17 395.893 L1922.7 365.95 L1922.24 345.872 L1921.78 339.721 L1921.32 346.99 L1920.86 368.76 L1920.4 404.459 L1919.93 442.211 L1919.47 475.673 L1919.01 493.034 L1918.55 491.087 L1918.09 471.743 L1917.63 448.804 L1917.16 413.52 L1916.7 367.641 L1916.24 325.983 L1915.78 300.951 L1915.32 283.765 L1914.86 273.125 L1914.4 293.561 L1913.93 328.481 L1913.47 367.057 L1913.01 413.281 L1912.55 456.961 L1912.09 488.187 L1911.63 504.548 L1911.16 496.144 L1910.7 482.772 L1910.24 466.101 L1909.78 444.323 L1909.32 426.551 L1908.86 403.225 L1908.39 386.361 L1907.93 370.188 L1907.47 358.575 L1907.01 350.111 L1906.55 341.575 L1906.09 344.811 L1905.62 348.856 L1905.16 363.688 L1904.7 394.924 L1904.24 422.841 L1903.78 453.173 L1903.32 484.617 L1902.85 501.693 L1902.39 513.818 L1901.93 519.099 L1901.47 517.521 L1901.01 498.28 L1900.55 466.94 L1900.08 430.578 L1899.62 401.315 L1899.16 377.65 L1898.7 359.986 L1898.24 335.147 L1897.78 319.017 L1897.31 305.962 L1896.85 295.396 L1896.39 283.033 L1895.93 286.249 L1895.47 304.24 L1895.01 321.033 L1894.54 339.614 L1894.08 357.788 L1893.62 364.909 L1893.16 361.99 L1892.7 357.873 L1892.24 348.167 L1891.77 347.077 L1891.31 358.169 L1890.85 374.547 L1890.39 393.145 L1889.93 414.945 L1889.47 432.153 L1889 447.65 L1888.54 456.268 L1888.08 453.238 L1887.62 446.206 L1887.16 445.116 L1886.7 444.896 L1886.23 440.712 L1885.77 442.806 L1885.31 444.103 L1884.85 438.252 L1884.39 425.06 L1883.93 413.094 L1883.46 387.266 L1883 363.11 L1882.54 340.344 L1882.08 327.124 L1881.62 324.385 L1881.16 325.254 L1880.69 344.8 L1880.23 370.368 L1879.77 389.506 L1879.31 412.818 L1878.85 433.864 L1878.39 447.768 L1877.92 460.032 L1877.46 466.699 L1877 470.506 L1876.54 471.438 L1876.08 461.831 L1875.62 443.593 L1875.15 418.204 L1874.69 391.202 L1874.23 370.182 L1873.77 353.14 L1873.31 340.44 L1872.85 335.618 L1872.38 322.164 L1871.92 311.269 L1871.46 305.133 L1871 303.967 L1870.54 309.797 L1870.08 315.94 L1869.61 326.686 L1869.15 337.744 L1868.69 340.445 L1868.23 342.908 L1867.77 346.041 L1867.31 342.745 L1866.84 341.788 L1866.38 341.37 L1865.92 345.209 L1865.46 367.11 L1865 390.079 L1864.54 415.918 L1864.07 439.527 L1863.61 456.43 L1863.15 469.244 L1862.69 476.373 L1862.23 477.714 L1861.77 472.051 L1861.31 467.044 L1860.84 451.449 L1860.38 439.179 L1859.92 427.103 L1859.46 416.476 L1859 401.29 L1858.54 393.409 L1858.07 376.114 L1857.61 361.82 L1857.15 349.961 L1856.69 337.605 L1856.23 334.322 L1855.77 333.553 L1855.3 335.336 L1854.84 347.905 L1854.38 367.811 L1853.92 397.031 L1853.46 416.866 L1853 433.456 L1852.53 442.171 L1852.07 448.191 L1851.61 446.527 L1851.15 430.905 L1850.69 405.603 L1850.23 373.155 L1849.76 348.47 L1849.3 336.053 L1848.84 330.991 L1848.38 343.006 L1847.92 359.101 L1847.46 382.962 L1846.99 416.247 L1846.53 448.075 L1846.07 482.336 L1845.61 508.679 L1845.15 516.547 L1844.69 516.314 L1844.22 493.24 L1843.76 455.91 L1843.3 407.689 L1842.84 347.162 L1842.38 289.265 L1841.92 252.396 L1841.45 221.452 L1840.99 212.862 L1840.53 229.538 L1840.07 263.704 L1839.61 310.343 L1839.15 359.267 L1838.68 407.671 L1838.22 443.37 L1837.76 469.607 L1837.3 482.115 L1836.84 476.812 L1836.38 469.942 L1835.91 446.106 L1835.45 425.684 L1834.99 407.592 L1834.53 386.085 L1834.07 371.152 L1833.61 355.463 L1833.14 356.667 L1832.68 356.579 L1832.22 356.712 L1831.76 354.677 L1831.3 355.198 L1830.84 352.841 L1830.37 352.943 L1829.91 353.85 L1829.45 357.882 L1828.99 364.755 L1828.53 373.975 L1828.07 383.923 L1827.6 386.454 L1827.14 388.286 L1826.68 386.183 L1826.22 381.487 L1825.76 378.756 L1825.3 365.051 L1824.83 361.985 L1824.37 359.88 L1823.91 357.287 L1823.45 367.659 L1822.99 381.409 L1822.53 392.106 L1822.06 399.688 L1821.6 408.712 L1821.14 403.548 L1820.68 388.834 L1820.22 376.407 L1819.76 366.351 L1819.29 363.614 L1818.83 356.135 L1818.37 351.141 L1817.91 362.94 L1817.45 378.736 L1816.99 387.866 L1816.52 396.578 L1816.06 398.554 L1815.6 397.336 L1815.14 398.764 L1814.68 394.177 L1814.22 399.671 L1813.75 413.257 L1813.29 440.61 L1812.83 466.877 L1812.37 487.826 L1811.91 492.356 L1811.45 488.282 L1810.98 471.783 L1810.52 447.182 L1810.06 420.182 L1809.6 385.32 L1809.14 354.726 L1808.68 334.143 L1808.21 321.297 L1807.75 315.496 L1807.29 333.061 L1806.83 356.216 L1806.37 379.568 L1805.91 407.401 L1805.45 415.171 L1804.98 413.403 L1804.52 417.765 L1804.06 424.22 L1803.6 426.313 L1803.14 422.334 L1802.68 427.793 L1802.21 422.371 L1801.75 416.606 L1801.29 421.913 L1800.83 423.265 L1800.37 422.502 L1799.91 411.886 L1799.44 407.858 L1798.98 409.046 L1798.52 410.283 L1798.06 412.701 L1797.6 415.012 L1797.14 422.323 L1796.67 426.331 L1796.21 437.825 L1795.75 450.177 L1795.29 456.418 L1794.83 453.225 L1794.37 448.511 L1793.9 440.629 L1793.44 436.421 L1792.98 436.461 L1792.52 437.422 L1792.06 433.513 L1791.6 423.681 L1791.13 417.315 L1790.67 403.774 L1790.21 393.806 L1789.75 385.471 L1789.29 370.906 L1788.83 362.447 L1788.36 353.412 L1787.9 349.509 L1787.44 354.03 L1786.98 362.505 L1786.52 369.983 L1786.06 379.576 L1785.59 386.496 L1785.13 394.259 L1784.67 398.725 L1784.21 391.563 L1783.75 378.401 L1783.29 372.626 L1782.82 378.872 L1782.36 405.976 L1781.9 425.44 L1781.44 442.839 L1780.98 456.512 L1780.52 460.918 L1780.05 470.774 L1779.59 471.192 L1779.13 468.934 L1778.67 467.681 L1778.21 477.261 L1777.75 471.934 L1777.28 457.629 L1776.82 446.874 L1776.36 436.389 L1775.9 422.801 L1775.44 413.224 L1774.98 407.437 L1774.51 407.268 L1774.05 414.327 L1773.59 418.489 L1773.13 421.279 L1772.67 428.477 L1772.21 436.246 L1771.74 433.325 L1771.28 439.306 L1770.82 439.926 L1770.36 428.036 L1769.9 418.081 L1769.44 403.755 L1768.97 396.627 L1768.51 396.05 L1768.05 399.211 L1767.59 408.494 L1767.13 405.725 L1766.67 409.112 L1766.2 412.533 L1765.74 404.011 L1765.28 396.514 L1764.82 388.235 L1764.36 390.294 L1763.9 387.844 L1763.43 385.275 L1762.97 384.337 L1762.51 393.102 L1762.05 401.698 L1761.59 416.306 L1761.13 417.623 L1760.66 414.899 L1760.2 407.187 L1759.74 393.047 L1759.28 382.446 L1758.82 378.991 L1758.36 376.458 L1757.89 384.555 L1757.43 405.205 L1756.97 415.944 L1756.51 423.001 L1756.05 422.8 L1755.59 418.623 L1755.12 412.213 L1754.66 410.545 L1754.2 398.549 L1753.74 403.876 L1753.28 410.887 L1752.82 415.289 L1752.36 422.728 L1751.89 420.256 L1751.43 416.145 L1750.97 409.101 L1750.51 403.489 L1750.05 387.49 L1749.59 380.255 L1749.12 378.628 L1748.66 385.159 L1748.2 391.616 L1747.74 392.398 L1747.28 399.695 L1746.82 409.257 L1746.35 423.723 L1745.89 439.117 L1745.43 451.847 L1744.97 457.27 L1744.51 458.566 L1744.05 440.444 L1743.58 428.705 L1743.12 414.086 L1742.66 398.305 L1742.2 372.639 L1741.74 349.796 L1741.28 341.062 L1740.81 327.635 L1740.35 320.161 L1739.89 329.206 L1739.43 339.35 L1738.97 348.445 L1738.51 350.073 L1738.04 357.887 L1737.58 368.659 L1737.12 369.606 L1736.66 376.427 L1736.2 373.874 L1735.74 380.383 L1735.27 390.749 L1734.81 406.604 L1734.35 421.444 L1733.89 437.662 L1733.43 457.809 L1732.97 473.618 L1732.5 479.632 L1732.04 479.807 L1731.58 471.705 L1731.12 464.382 L1730.66 448.665 L1730.2 429.581 L1729.73 419.02 L1729.27 411.11 L1728.81 398.59 L1728.35 385.352 L1727.89 378.73 L1727.43 372.015 L1726.96 382.249 L1726.5 389.785 L1726.04 393.653 L1725.58 398.626 L1725.12 404.029 L1724.66 413.875 L1724.19 423.256 L1723.73 429.099 L1723.27 433.601 L1722.81 441.086 L1722.35 445.804 L1721.89 466.064 L1721.42 487.82 L1720.96 501.176 L1720.5 488.977 L1720.04 469.221 L1719.58 438.857 L1719.12 419.492 L1718.65 399.606 L1718.19 371.524 L1717.73 350.642 L1717.27 335.365 L1716.81 328.706 L1716.35 333.307 L1715.88 339.895 L1715.42 358.436 L1714.96 385.956 L1714.5 402.883 L1714.04 424.944 L1713.58 429.857 L1713.11 437.447 L1712.65 428.641 L1712.19 417.441 L1711.73 406.645 L1711.27 400.799 L1710.81 408.543 L1710.34 419.095 L1709.88 425.795 L1709.42 433.871 L1708.96 434.887 L1708.5 444.278 L1708.04 451.327 L1707.57 455.348 L1707.11 464.58 L1706.65 456.175 L1706.19 445.339 L1705.73 434.09 L1705.27 426.594 L1704.8 417.999 L1704.34 403.182 L1703.88 397.656 L1703.42 394.1 L1702.96 392.137 L1702.5 398.997 L1702.03 407.45 L1701.57 415.419 L1701.11 421.446 L1700.65 426.289 L1700.19 433.799 L1699.73 431.89 L1699.26 415.923 L1698.8 402.177 L1698.34 389.105 L1697.88 379.966 L1697.42 376.302 L1696.96 376.89 L1696.5 379.637 L1696.03 386.425 L1695.57 393.339 L1695.11 402.366 L1694.65 400.433 L1694.19 402.128 L1693.73 398.196 L1693.26 379.826 L1692.8 371.918 L1692.34 368.099 L1691.88 373.376 L1691.42 386.36 L1690.96 402.933 L1690.49 421.49 L1690.03 438.753 L1689.57 451.646 L1689.11 460.74 L1688.65 468.932 L1688.19 471.139 L1687.72 455.639 L1687.26 425.242 L1686.8 399.978 L1686.34 383.219 L1685.88 377.867 L1685.42 386.186 L1684.95 402.415 L1684.49 430.314 L1684.03 454.54 L1683.57 481.112 L1683.11 502.452 L1682.65 508.045 L1682.18 505.809 L1681.72 502.349 L1681.26 486.326 L1680.8 456.94 L1680.34 432.772 L1679.88 414.3 L1679.41 400.882 L1678.95 391.458 L1678.49 391.036 L1678.03 382.125 L1677.57 379.729 L1677.11 375.01 L1676.64 375.484 L1676.18 374.154 L1675.72 376.289 L1675.26 374.264 L1674.8 373.332 L1674.34 376.49 L1673.87 384.084 L1673.41 399.008 L1672.95 411.317 L1672.49 430.415 L1672.03 444.838 L1671.57 463.19 L1671.1 475.444 L1670.64 489.169 L1670.18 498.47 L1669.72 505.052 L1669.26 499.393 L1668.8 485.324 L1668.33 467.806 L1667.87 442.742 L1667.41 405.02 L1666.95 379.34 L1666.49 360.114 L1666.03 337.937 L1665.56 323.373 L1665.1 315.48 L1664.64 316.247 L1664.18 326.147 L1663.72 345.535 L1663.26 372.291 L1662.79 396.561 L1662.33 414.106 L1661.87 429.097 L1661.41 437.97 L1660.95 433.585 L1660.49 416.12 L1660.02 391.305 L1659.56 375.837 L1659.1 361.783 L1658.64 349.691 L1658.18 344.537 L1657.72 347.912 L1657.25 357.031 L1656.79 376.587 L1656.33 406.256 L1655.87 435.614 L1655.41 468.372 L1654.95 495.177 L1654.48 500.871 L1654.02 488.664 L1653.56 465.392 L1653.1 423.143 L1652.64 380.426 L1652.18 334.436 L1651.71 306.89 L1651.25 275.334 L1650.79 248.089 L1650.33 231.411 L1649.87 233.573 L1649.41 246.843 L1648.94 279.767 L1648.48 326.905 L1648.02 377.311 L1647.56 421.96 L1647.1 455.831 L1646.64 481.787 L1646.17 499.851 L1645.71 505.494 L1645.25 497.478 L1644.79 473.092 L1644.33 453.651 L1643.87 428.472 L1643.41 402.261 L1642.94 377.315 L1642.48 359.429 L1642.02 341.275 L1641.56 332.702 L1641.1 337.099 L1640.64 347.673 L1640.17 363.456 L1639.71 375.623 L1639.25 391.73 L1638.79 406.866 L1638.33 408.556 L1637.87 414.032 L1637.4 414.801 L1636.94 403.229 L1636.48 385.198 L1636.02 367.688 L1635.56 354.236 L1635.1 351.581 L1634.63 343.59 L1634.17 346.643 L1633.71 354.079 L1633.25 358.956 L1632.79 362.317 L1632.33 364.543 L1631.86 364.648 L1631.4 366.989 L1630.94 372.901 L1630.48 378.921 L1630.02 379.699 L1629.56 390.626 L1629.09 399.68 L1628.63 412.21 L1628.17 412.283 L1627.71 406.583 L1627.25 388.265 L1626.79 380.115 L1626.32 363.231 L1625.86 355.114 L1625.4 356.794 L1624.94 354.09 L1624.48 373.613 L1624.02 394.203 L1623.55 401.9 L1623.09 416.242 L1622.63 418.814 L1622.17 414.567 L1621.71 405.735 L1621.25 392.475 L1620.78 379.509 L1620.32 373.496 L1619.86 381.348 L1619.4 400.167 L1618.94 408.89 L1618.48 420.691 L1618.01 435.044 L1617.55 443.05 L1617.09 450.725 L1616.63 453.74 L1616.17 456.127 L1615.71 457.3 L1615.24 457.347 L1614.78 459.701 L1614.32 462.273 L1613.86 458.361 L1613.4 454.005 L1612.94 440.616 L1612.47 416.597 L1612.01 397.154 L1611.55 368.631 L1611.09 344.794 L1610.63 334.896 L1610.17 331.941 L1609.7 339.683 L1609.24 352.615 L1608.78 360.395 L1608.32 373.468 L1607.86 376.054 L1607.4 372.125 L1606.93 370.105 L1606.47 377.499 L1606.01 387.549 L1605.55 399.3 L1605.09 409.859 L1604.63 420.086 L1604.16 429.067 L1603.7 430.592 L1603.24 440.009 L1602.78 454.137 L1602.32 452.108 L1601.86 445.374 L1601.39 429.369 L1600.93 422.934 L1600.47 419.813 L1600.01 422.208 L1599.55 422.5 L1599.09 429.301 L1598.62 420.973 L1598.16 408.023 L1597.7 392.95 L1597.24 370.085 L1596.78 347.944 L1596.32 323.747 L1595.85 301.069 L1595.39 278.611 L1594.93 258.996 L1594.47 256.089 L1594.01 269.515 L1593.55 290.267 L1593.08 311.9 L1592.62 345.173 L1592.16 365.772 L1591.7 387.848 L1591.24 406.826 L1590.78 425.027 L1590.32 436.656 L1589.85 441.195 L1589.39 439.316 L1588.93 427.839 L1588.47 415.587 L1588.01 407.676 L1587.55 401.12 L1587.08 407.938 L1586.62 415.476 L1586.16 426.729 L1585.7 434.225 L1585.24 443.916 L1584.78 452.974 L1584.31 450.685 L1583.85 435.134 L1583.39 412.464 L1582.93 389.35 L1582.47 370.579 L1582.01 359.759 L1581.54 355.115 L1581.08 349.441 L1580.62 348.047 L1580.16 352.895 L1579.7 354.58 L1579.24 364.284 L1578.77 364.974 L1578.31 357.209 L1577.85 361.189 L1577.39 369.262 L1576.93 374.249 L1576.47 389.353 L1576 407.853 L1575.54 423.51 L1575.08 446.533 L1574.62 458.701 L1574.16 468.789 L1573.7 474.536 L1573.23 469.045 L1572.77 453.27 L1572.31 430.282 L1571.85 406.4 L1571.39 379.099 L1570.93 357.103 L1570.46 331.146 L1570 313.215 L1569.54 285.49 L1569.08 270.528 L1568.62 265.458 L1568.16 274.854 L1567.69 294.442 L1567.23 323.449 L1566.77 364.068 L1566.31 397.063 L1565.85 428.32 L1565.39 463.028 L1564.92 488.575 L1564.46 508.269 L1564 522.271 L1563.54 527.765 L1563.08 521.349 L1562.62 512.837 L1562.15 494.897 L1561.69 465.743 L1561.23 431.064 L1560.77 408.295 L1560.31 385.489 L1559.85 370.912 L1559.38 358.974 L1558.92 348.146 L1558.46 343.385 L1558 332.376 L1557.54 320.424 L1557.08 308.39 L1556.61 298.486 L1556.15 302.135 L1555.69 310.475 L1555.23 312.625 L1554.77 308.248 L1554.31 309.223 L1553.84 328.094 L1553.38 353.685 L1552.92 375.272 L1552.46 386.39 L1552 391.779 L1551.54 391.865 L1551.07 375.208 L1550.61 367.515 L1550.15 362.297 L1549.69 363.263 L1549.23 357.028 L1548.77 358.481 L1548.3 359.275 L1547.84 360.574 L1547.38 379.1 L1546.92 400.512 L1546.46 421.557 L1546 439.967 L1545.53 471.887 L1545.07 503.505 L1544.61 531.91 L1544.15 553.573 L1543.69 563.403 L1543.23 556.14 L1542.76 524.663 L1542.3 486.038 L1541.84 433.559 L1541.38 384.022 L1540.92 341.93 L1540.46 307.595 L1539.99 288.586 L1539.53 279.816 L1539.07 284.853 L1538.61 296.261 L1538.15 324.546 L1537.69 366.535 L1537.22 412.545 L1536.76 459.508 L1536.3 500.481 L1535.84 523.822 L1535.38 548.922 L1534.92 549.577 L1534.46 542.53 L1533.99 520.193 L1533.53 494.838 L1533.07 459.766 L1532.61 423.912 L1532.15 388.949 L1531.69 356.425 L1531.22 334.347 L1530.76 320.377 L1530.3 324.868 L1529.84 342.234 L1529.38 363.404 L1528.92 382.346 L1528.45 397.694 L1527.99 413.072 L1527.53 434.015 L1527.07 446.724 L1526.61 456.976 L1526.15 458.23 L1525.68 455.033 L1525.22 453.452 L1524.76 438.024 L1524.3 417.596 L1523.84 403.094 L1523.38 390.244 L1522.91 381.987 L1522.45 382.601 L1521.99 397.029 L1521.53 412.154 L1521.07 434.544 L1520.61 454.177 L1520.14 456.079 L1519.68 451.95 L1519.22 445.176 L1518.76 425.166 L1518.3 413.937 L1517.84 404.5 L1517.37 391.936 L1516.91 383.445 L1516.45 378.346 L1515.99 381.817 L1515.53 388.691 L1515.07 401.206 L1514.6 417.185 L1514.14 429.124 L1513.68 442.642 L1513.22 433.098 L1512.76 434.396 L1512.3 430.601 L1511.83 414.614 L1511.37 394.804 L1510.91 381.891 L1510.45 361.729 L1509.99 348.315 L1509.53 353.475 L1509.06 364.312 L1508.6 390.25 L1508.14 421.545 L1507.68 449.906 L1507.22 468.341 L1506.76 475.029 L1506.29 466.912 L1505.83 443.381 L1505.37 416.173 L1504.91 384.899 L1504.45 358.028 L1503.99 325.986 L1503.52 300.954 L1503.06 289.535 L1502.6 288.021 L1502.14 295.05 L1501.68 309.809 L1501.22 338.429 L1500.75 373.005 L1500.29 417.115 L1499.83 453.551 L1499.37 480.558 L1498.91 490.317 L1498.45 497.309 L1497.98 495.76 L1497.52 489.823 L1497.06 477.823 L1496.6 460.432 L1496.14 440.928 L1495.68 413.605 L1495.21 382.094 L1494.75 373.119 L1494.29 365.42 L1493.83 361.284 L1493.37 363.803 L1492.91 368.335 L1492.44 374.865 L1491.98 389.479 L1491.52 409.004 L1491.06 427.598 L1490.6 438.922 L1490.14 443.087 L1489.67 440.079 L1489.21 439.991 L1488.75 437.658 L1488.29 435.611 L1487.83 428.496 L1487.37 420.602 L1486.9 408.648 L1486.44 395.218 L1485.98 375.353 L1485.52 362.223 L1485.06 349.025 L1484.6 351.175 L1484.13 359.76 L1483.67 372.322 L1483.21 397.78 L1482.75 411.199 L1482.29 422.809 L1481.83 435.914 L1481.37 454.019 L1480.9 460.061 L1480.44 456.714 L1479.98 449.403 L1479.52 438.895 L1479.06 427.075 L1478.6 412.404 L1478.13 392.388 L1477.67 379.127 L1477.21 370.208 L1476.75 365.374 L1476.29 369.045 L1475.83 372.421 L1475.36 386.33 L1474.9 391.132 L1474.44 392.198 L1473.98 398.003 L1473.52 402.31 L1473.06 413.823 L1472.59 424.645 L1472.13 427.543 L1471.67 431.661 L1471.21 434.525 L1470.75 423.126 L1470.29 406.401 L1469.82 391.935 L1469.36 385.791 L1468.9 381.961 L1468.44 389.24 L1467.98 406.056 L1467.52 420.761 L1467.05 431.601 L1466.59 435.683 L1466.13 434.079 L1465.67 419.53 L1465.21 404.757 L1464.75 392.771 L1464.28 388.454 L1463.82 402.283 L1463.36 413.87 L1462.9 436.627 L1462.44 453.366 L1461.98 470.802 L1461.51 475.754 L1461.05 478.124 L1460.59 467.311 L1460.13 451.616 L1459.67 434.89 L1459.21 421.655 L1458.74 406.871 L1458.28 412.955 L1457.82 409.169 L1457.36 409.06 L1456.9 396.132 L1456.44 373.869 L1455.97 346.513 L1455.51 321.583 L1455.05 296.214 L1454.59 272.485 L1454.13 270.034 L1453.67 282.461 L1453.2 314.044 L1452.74 346.534 L1452.28 377.82 L1451.82 404.439 L1451.36 423.745 L1450.9 429.306 L1450.43 431.428 L1449.97 436.525 L1449.51 431.822 L1449.05 421.663 L1448.59 413.788 L1448.13 407.909 L1447.66 398.435 L1447.2 396.075 L1446.74 390.352 L1446.28 384.658 L1445.82 384.607 L1445.36 387.211 L1444.89 389.85 L1444.43 394.228 L1443.97 396.142 L1443.51 401.972 L1443.05 404.906 L1442.59 400.729 L1442.12 402.185 L1441.66 391.757 L1441.2 382.086 L1440.74 378.006 L1440.28 375.394 L1439.82 387.236 L1439.35 401.587 L1438.89 417.614 L1438.43 430.073 L1437.97 439.469 L1437.51 441.469 L1437.05 441.669 L1436.58 442.748 L1436.12 443.621 L1435.66 438.04 L1435.2 424.97 L1434.74 413.503 L1434.28 405.186 L1433.81 397.177 L1433.35 387.815 L1432.89 381.396 L1432.43 379.963 L1431.97 382.523 L1431.51 381.462 L1431.04 389.043 L1430.58 396.465 L1430.12 398.532 L1429.66 395.861 L1429.2 390.461 L1428.74 392.159 L1428.28 393.089 L1427.81 390.928 L1427.35 376.608 L1426.89 361.871 L1426.43 351.036 L1425.97 351.908 L1425.51 366.714 L1425.04 379.9 L1424.58 388.425 L1424.12 388.219 L1423.66 393.219 L1423.2 394.32 L1422.74 405.297 L1422.27 417.027 L1421.81 423.671 L1421.35 421.21 L1420.89 414.704 L1420.43 409.031 L1419.97 392.405 L1419.5 387.208 L1419.04 383.81 L1418.58 389.978 L1418.12 396.948 L1417.66 404.064 L1417.2 414.23 L1416.73 415.914 L1416.27 419.17 L1415.81 417.681 L1415.35 420.483 L1414.89 414.271 L1414.43 401.951 L1413.96 396.571 L1413.5 393.262 L1413.04 396.353 L1412.58 396.666 L1412.12 387.061 L1411.66 379.13 L1411.19 384.612 L1410.73 393.668 L1410.27 397.346 L1409.81 407.182 L1409.35 409.375 L1408.89 405.187 L1408.42 399.674 L1407.96 393.917 L1407.5 396.938 L1407.04 401.298 L1406.58 410.202 L1406.12 416.512 L1405.65 428.558 L1405.19 434.137 L1404.73 439.59 L1404.27 448.098 L1403.81 439.455 L1403.35 424.788 L1402.88 408.26 L1402.42 388.361 L1401.96 377.606 L1401.5 357.509 L1401.04 351.687 L1400.58 356.979 L1400.11 373.15 L1399.65 390.555 L1399.19 408.474 L1398.73 425.386 L1398.27 425.613 L1397.81 428.138 L1397.34 416.775 L1396.88 394.132 L1396.42 376.673 L1395.96 367.641 L1395.5 370.766 L1395.04 381.79 L1394.57 394.489 L1394.11 400.017 L1393.65 414.095 L1393.19 423.982 L1392.73 429.607 L1392.27 426.613 L1391.8 425.859 L1391.34 406.838 L1390.88 396.83 L1390.42 387.812 L1389.96 380.466 L1389.5 381.523 L1389.03 373.016 L1388.57 371.534 L1388.11 382.844 L1387.65 400.082 L1387.19 411.613 L1386.73 418.668 L1386.26 431.511 L1385.8 431.216 L1385.34 440.505 L1384.88 443.204 L1384.42 437.805 L1383.96 424.729 L1383.49 408.049 L1383.03 388.347 L1382.57 370.427 L1382.11 355.484 L1381.65 343.364 L1381.19 343.776 L1380.72 358.889 L1380.26 377.583 L1379.8 393.374 L1379.34 407.968 L1378.88 417.936 L1378.42 415.097 L1377.95 414.655 L1377.49 398.421 L1377.03 387.427 L1376.57 384.038 L1376.11 376.444 L1375.65 367.788 L1375.18 352.721 L1374.72 340.065 L1374.26 337.15 L1373.8 342.493 L1373.34 364.854 L1372.88 386.245 L1372.42 411.464 L1371.95 437.304 L1371.49 456.239 L1371.03 476.256 L1370.57 484.507 L1370.11 479.322 L1369.65 466.343 L1369.18 450.286 L1368.72 430.741 L1368.26 415.408 L1367.8 411.237 L1367.34 400.612 L1366.88 386.821 L1366.41 376.119 L1365.95 372.178 L1365.49 366.347 L1365.03 362.828 L1364.57 356.09 L1364.11 351.338 L1363.64 352.406 L1363.18 347.662 L1362.72 354.046 L1362.26 370.433 L1361.8 385.932 L1361.34 407.294 L1360.87 420.532 L1360.41 429.311 L1359.95 441.065 L1359.49 448.909 L1359.03 464.264 L1358.57 486.673 L1358.1 505.23 L1357.64 513.248 L1357.18 514.964 L1356.72 515.605 L1356.26 509.46 L1355.8 505.015 L1355.33 491.313 L1354.87 475.131 L1354.41 453.298 L1353.95 429.597 L1353.49 401.92 L1353.03 377.577 L1352.56 350.578 L1352.1 335.598 L1351.64 330.612 L1351.18 337.831 L1350.72 349.429 L1350.26 367.335 L1349.79 376.652 L1349.33 385.593 L1348.87 384.571 L1348.41 388.607 L1347.95 396.243 L1347.49 414.451 L1347.02 436.265 L1346.56 457.982 L1346.1 467.806 L1345.64 466.724 L1345.18 454.946 L1344.72 436.747 L1344.25 414.229 L1343.79 388.458 L1343.33 361.68 L1342.87 334.187 L1342.41 306.951 L1341.95 295.612 L1341.48 300.037 L1341.02 316.937 L1340.56 340.402 L1340.1 361.892 L1339.64 383.123 L1339.18 401.743 L1338.71 415.298 L1338.25 435.303 L1337.79 459.699 L1337.33 484.492 L1336.87 495.393 L1336.41 493.165 L1335.94 489.05 L1335.48 474.13 L1335.02 450.29 L1334.56 430.26 L1334.1 408.563 L1333.64 395.652 L1333.17 380.225 L1332.71 371.483 L1332.25 370.119 L1331.79 379.403 L1331.33 388.204 L1330.87 406.617 L1330.4 413.09 L1329.94 415.379 L1329.48 417.679 L1329.02 409.553 L1328.56 400.284 L1328.1 398.792 L1327.63 391.633 L1327.17 396.875 L1326.71 408.431 L1326.25 414.735 L1325.79 414.942 L1325.33 419.476 L1324.86 416.473 L1324.4 420.994 L1323.94 423.766 L1323.48 419.491 L1323.02 416.945 L1322.56 419.167 L1322.09 417.793 L1321.63 409.532 L1321.17 406.404 L1320.71 399.745 L1320.25 406.027 L1319.79 407.922 L1319.33 407.008 L1318.86 403.65 L1318.4 409.56 L1317.94 413.461 L1317.48 419.603 L1317.02 431.937 L1316.56 451.78 L1316.09 465.57 L1315.63 460.688 L1315.17 438.974 L1314.71 414.907 L1314.25 394.671 L1313.79 376.279 L1313.32 360.997 L1312.86 338.458 L1312.4 329.386 L1311.94 324.888 L1311.48 332.759 L1311.02 342.143 L1310.55 350.177 L1310.09 364.463 L1309.63 381.18 L1309.17 401.652 L1308.71 411.988 L1308.25 425.695 L1307.78 432.448 L1307.32 448.429 L1306.86 463.333 L1306.4 475.904 L1305.94 478.513 L1305.48 473.656 L1305.01 468.201 L1304.55 465.76 L1304.09 442.515 L1303.63 421.519 L1303.17 401.072 L1302.71 383.001 L1302.24 364.45 L1301.78 346.208 L1301.32 323.683 L1300.86 303.9 L1300.4 291.121 L1299.94 285.184 L1299.47 296.211 L1299.01 326.661 L1298.55 360.528 L1298.09 398.143 L1297.63 441.252 L1297.17 477.376 L1296.7 500.029 L1296.24 508.832 L1295.78 502.762 L1295.32 475.728 L1294.86 444.403 L1294.4 420.251 L1293.93 401.871 L1293.47 389.168 L1293.01 386.852 L1292.55 398.834 L1292.09 411.437 L1291.63 429.01 L1291.16 444.599 L1290.7 455.784 L1290.24 456.323 L1289.78 448.447 L1289.32 429.083 L1288.86 410.073 L1288.39 390.606 L1287.93 374.153 L1287.47 360.694 L1287.01 350.31 L1286.55 341.347 L1286.09 345.505 L1285.62 343.642 L1285.16 352.141 L1284.7 363.927 L1284.24 366.793 L1283.78 364.908 L1283.32 364.457 L1282.85 371.266 L1282.39 384.635 L1281.93 399.516 L1281.47 417.574 L1281.01 440.219 L1280.55 459.27 L1280.08 466.652 L1279.62 466.892 L1279.16 458.679 L1278.7 451.349 L1278.24 432.715 L1277.78 407.177 L1277.31 386.024 L1276.85 374.825 L1276.39 373.24 L1275.93 380.027 L1275.47 384.127 L1275.01 386.308 L1274.54 389.192 L1274.08 383.645 L1273.62 383.688 L1273.16 378.946 L1272.7 381.559 L1272.24 384.761 L1271.77 386.026 L1271.31 394.103 L1270.85 403.926 L1270.39 408.736 L1269.93 417.349 L1269.47 427.431 L1269 432.324 L1268.54 436.359 L1268.08 425.32 L1267.62 401.662 L1267.16 376.087 L1266.7 351.54 L1266.23 329.915 L1265.77 314.606 L1265.31 317.822 L1264.85 327.1 L1264.39 353.66 L1263.93 369.315 L1263.47 378.251 L1263 373.402 L1262.54 355.481 L1262.08 341.065 L1261.62 325.448 L1261.16 322.479 L1260.7 326.591 L1260.23 346.054 L1259.77 368.58 L1259.31 394.848 L1258.85 418.086 L1258.39 440.372 L1257.93 457.973 L1257.46 461.242 L1257 459.977 L1256.54 459.922 L1256.08 461.518 L1255.62 458.425 L1255.16 454.461 L1254.69 450.889 L1254.23 451.404 L1253.77 447.829 L1253.31 443.499 L1252.85 431.268 L1252.39 423.002 L1251.92 415.002 L1251.46 409.849 L1251 399.161 L1250.54 398.67 L1250.08 394.199 L1249.62 387.647 L1249.15 387.311 L1248.69 389.784 L1248.23 400.931 L1247.77 409.066 L1247.31 421.573 L1246.85 426.375 L1246.38 431.181 L1245.92 436.502 L1245.46 435.331 L1245 426.59 L1244.54 413.918 L1244.08 397.526 L1243.61 386.395 L1243.15 370.659 L1242.69 369.373 L1242.23 369.839 L1241.77 367.377 L1241.31 365.463 L1240.84 363.71 L1240.38 363.556 L1239.92 359.368 L1239.46 365.972 L1239 385.459 L1238.54 408.525 L1238.07 435.754 L1237.61 456.369 L1237.15 470.18 L1236.69 476.466 L1236.23 474.543 L1235.77 459.14 L1235.3 441.68 L1234.84 434.81 L1234.38 436.948 L1233.92 437.037 L1233.46 436.115 L1233 430.637 L1232.53 434.684 L1232.07 439.069 L1231.61 437.854 L1231.15 428.297 L1230.69 408.001 L1230.23 386.951 L1229.76 370.358 L1229.3 362.105 L1228.84 355.788 L1228.38 353.176 L1227.92 356.811 L1227.46 360.545 L1226.99 350.727 L1226.53 335.971 L1226.07 329.336 L1225.61 330.895 L1225.15 339.841 L1224.69 342.794 L1224.22 347.412 L1223.76 347.132 L1223.3 352.279 L1222.84 364.549 L1222.38 375.914 L1221.92 387.446 L1221.45 396.925 L1220.99 408.262 L1220.53 411.716 L1220.07 415.56 L1219.61 418.785 L1219.15 433.449 L1218.68 466.795 L1218.22 496.938 L1217.76 513.652 L1217.3 515.316 L1216.84 499.951 L1216.38 481.182 L1215.91 449.199 L1215.45 411.878 L1214.99 377.162 L1214.53 352.339 L1214.07 337.927 L1213.61 333.478 L1213.14 345.415 L1212.68 367.795 L1212.22 387.575 L1211.76 402.179 L1211.3 413.533 L1210.84 415.58 L1210.38 412.8 L1209.91 409.802 L1209.45 411.282 L1208.99 414.712 L1208.53 423.935 L1208.07 430.273 L1207.61 441.27 L1207.14 457.072 L1206.68 480.626 L1206.22 490.518 L1205.76 500.312 L1205.3 504.487 L1204.84 500.279 L1204.37 489.081 L1203.91 484.582 L1203.45 481.774 L1202.99 468.476 L1202.53 446.831 L1202.07 436.966 L1201.6 434.836 L1201.14 437.606 L1200.68 436.193 L1200.22 427.535 L1199.76 410.181 L1199.3 390.748 L1198.83 365.975 L1198.37 341.354 L1197.91 329.146 L1197.45 312.389 L1196.99 302.181 L1196.53 294.621 L1196.06 293.503 L1195.6 296.772 L1195.14 317.559 L1194.68 334.544 L1194.22 354.016 L1193.76 374.52 L1193.29 386.937 L1192.83 394.589 L1192.37 401.87 L1191.91 408.385 L1191.45 414.51 L1190.99 421.796 L1190.52 433.714 L1190.06 443.876 L1189.6 442.089 L1189.14 434.222 L1188.68 427.904 L1188.22 421.599 L1187.75 408.749 L1187.29 404.456 L1186.83 394.774 L1186.37 395.266 L1185.91 397.269 L1185.45 393.142 L1184.98 384.105 L1184.52 381.079 L1184.06 380.003 L1183.6 385.158 L1183.14 391.295 L1182.68 397.483 L1182.21 403.145 L1181.75 423.204 L1181.29 431.013 L1180.83 435.657 L1180.37 437.834 L1179.91 441.598 L1179.44 439.631 L1178.98 438.731 L1178.52 443.604 L1178.06 433.557 L1177.6 422.141 L1177.14 415.283 L1176.67 404.629 L1176.21 395.763 L1175.75 382.3 L1175.29 371.715 L1174.83 362.074 L1174.37 357.989 L1173.9 361.359 L1173.44 368.791 L1172.98 377.594 L1172.52 386.848 L1172.06 396.892 L1171.6 406.945 L1171.13 414.487 L1170.67 424.216 L1170.21 428.708 L1169.75 432.582 L1169.29 432.84 L1168.83 433.766 L1168.36 431.276 L1167.9 427.516 L1167.44 415.538 L1166.98 396.83 L1166.52 378.967 L1166.06 368.232 L1165.59 357.542 L1165.13 360.23 L1164.67 361.228 L1164.21 367.311 L1163.75 382.227 L1163.29 390.749 L1162.82 404.285 L1162.36 418.577 L1161.9 425.093 L1161.44 422.699 L1160.98 406.524 L1160.52 388.502 L1160.05 365.447 L1159.59 346.145 L1159.13 327.04 L1158.67 321.251 L1158.21 324.419 L1157.75 330.933 L1157.29 349.98 L1156.82 378.429 L1156.36 406.151 L1155.9 430.236 L1155.44 444.924 L1154.98 464.158 L1154.52 459.798 L1154.05 447.954 L1153.59 422.966 L1153.13 397.503 L1152.67 382.224 L1152.21 376.385 L1151.75 384.763 L1151.28 390.744 L1150.82 397.484 L1150.36 397.832 L1149.9 395.874 L1149.44 381.987 L1148.98 358.455 L1148.51 333.341 L1148.05 306.762 L1147.59 300.526 L1147.13 310.402 L1146.67 326.925 L1146.21 347.263 L1145.74 373.14 L1145.28 405.32 L1144.82 429.617 L1144.36 448.069 L1143.9 449.632 L1143.44 443.882 L1142.97 429.264 L1142.51 414.859 L1142.05 394.767 L1141.59 364.353 L1141.13 332.205 L1140.67 303.826 L1140.2 293.564 L1139.74 296.213 L1139.28 309.853 L1138.82 334.255 L1138.36 355.58 L1137.9 381.357 L1137.43 404.852 L1136.97 420.952 L1136.51 429.876 L1136.05 431.466 L1135.59 437.225 L1135.13 438.571 L1134.66 429.085 L1134.2 432.1 L1133.74 432.113 L1133.28 423.015 L1132.82 408.61 L1132.36 387.365 L1131.89 376.62 L1131.43 375.698 L1130.97 368.782 L1130.51 359.709 L1130.05 353.58 L1129.59 352.931 L1129.12 357.748 L1128.66 373.461 L1128.2 390.977 L1127.74 394.545 L1127.28 398.658 L1126.82 402.942 L1126.35 405.989 L1125.89 395.68 L1125.43 384.076 L1124.97 372.771 L1124.51 362.202 L1124.05 358.751 L1123.58 363.279 L1123.12 372.638 L1122.66 373.484 L1122.2 366.406 L1121.74 368.343 L1121.28 385.538 L1120.81 398.26 L1120.35 411.621 L1119.89 431.256 L1119.43 446.574 L1118.97 443.677 L1118.51 431.798 L1118.04 413.436 L1117.58 394.993 L1117.12 380.171 L1116.66 357.44 L1116.2 342.92 L1115.74 334.839 L1115.27 331.959 L1114.81 336.081 L1114.35 335.534 L1113.89 341.694 L1113.43 339.845 L1112.97 337.378 L1112.5 341.038 L1112.04 344.593 L1111.58 344.618 L1111.12 351.793 L1110.66 365.596 L1110.2 383.09 L1109.73 400.272 L1109.27 427.256 L1108.81 461.192 L1108.35 478.823 L1107.89 490.293 L1107.43 489.773 L1106.96 484.553 L1106.5 466.863 L1106.04 449.972 L1105.58 434.597 L1105.12 411.482 L1104.66 381.29 L1104.19 357.778 L1103.73 334.67 L1103.27 322.85 L1102.81 322.332 L1102.35 331.592 L1101.89 340.633 L1101.43 349.278 L1100.96 361.792 L1100.5 384.63 L1100.04 405.764 L1099.58 407.882 L1099.12 419.075 L1098.66 432.422 L1098.19 438.139 L1097.73 444.654 L1097.27 455.458 L1096.81 461.05 L1096.35 461.326 L1095.89 450.422 L1095.42 423.538 L1094.96 397.293 L1094.5 376.893 L1094.04 360.918 L1093.58 354.045 L1093.12 343.002 L1092.65 339.42 L1092.19 349.841 L1091.73 372.718 L1091.27 396.17 L1090.81 419.595 L1090.35 428.716 L1089.88 436.007 L1089.42 451.398 L1088.96 458.419 L1088.5 458.219 L1088.04 443.119 L1087.58 432.315 L1087.11 425.533 L1086.65 414.764 L1086.19 398.914 L1085.73 383.544 L1085.27 373.6 L1084.81 370.834 L1084.34 370.071 L1083.88 383.398 L1083.42 397.636 L1082.96 406.191 L1082.5 415.321 L1082.04 406.482 L1081.57 394.283 L1081.11 385.065 L1080.65 372.622 L1080.19 366.733 L1079.73 362.187 L1079.27 355.473 L1078.8 351.679 L1078.34 349.759 L1077.88 357.716 L1077.42 376.478 L1076.96 391.021 L1076.5 404.334 L1076.03 419.534 L1075.57 430.165 L1075.11 432.206 L1074.65 443.111 L1074.19 450.895 L1073.73 456.051 L1073.26 449.433 L1072.8 441.776 L1072.34 436.715 L1071.88 431.236 L1071.42 418.578 L1070.96 406.475 L1070.49 391.611 L1070.03 385.476 L1069.57 383.322 L1069.11 382.635 L1068.65 383.199 L1068.19 377.098 L1067.72 377.774 L1067.26 383.151 L1066.8 384.019 L1066.34 381.454 L1065.88 381.269 L1065.42 376.82 L1064.95 371.388 L1064.49 365.015 L1064.03 362.057 L1063.57 368.87 L1063.11 372.69 L1062.65 392.788 L1062.18 404.664 L1061.72 415.576 L1061.26 424.752 L1060.8 441.002 L1060.34 470.795 L1059.88 491.715 L1059.41 503.929 L1058.95 512.873 L1058.49 509.155 L1058.03 498.73 L1057.57 469.415 L1057.11 443.757 L1056.64 418.149 L1056.18 387.508 L1055.72 355.984 L1055.26 344.039 L1054.8 347.1 L1054.34 357.038 L1053.87 368.341 L1053.41 381.892 L1052.95 396.692 L1052.49 409.454 L1052.03 415.795 L1051.57 418.846 L1051.1 417.061 L1050.64 422.117 L1050.18 419.122 L1049.72 415.885 L1049.26 404.919 L1048.8 393.111 L1048.34 388.433 L1047.87 388.151 L1047.41 394.51 L1046.95 403.072 L1046.49 413.216 L1046.03 404.609 L1045.57 405.768 L1045.1 400.681 L1044.64 387.924 L1044.18 379.595 L1043.72 374.611 L1043.26 368.885 L1042.8 367.832 L1042.33 372.402 L1041.87 370.227 L1041.41 373.575 L1040.95 373.761 L1040.49 374.992 L1040.03 374.222 L1039.56 371.612 L1039.1 375.897 L1038.64 377.695 L1038.18 378.798 L1037.72 376.749 L1037.26 361.878 L1036.79 345.747 L1036.33 335.241 L1035.87 327.6 L1035.41 329.643 L1034.95 333.554 L1034.49 348.611 L1034.02 366.162 L1033.56 391.406 L1033.1 408.666 L1032.64 413.133 L1032.18 408.618 L1031.72 394.029 L1031.25 380.472 L1030.79 361.375 L1030.33 350.142 L1029.87 347.206 L1029.41 341.416 L1028.95 342.639 L1028.48 353.216 L1028.02 357.259 L1027.56 359.354 L1027.1 345.492 L1026.64 334.094 L1026.18 328.066 L1025.71 327.418 L1025.25 330.141 L1024.79 336.2 L1024.33 351.767 L1023.87 367.431 L1023.41 382.964 L1022.94 401.995 L1022.48 420.975 L1022.02 440.02 L1021.56 469.399 L1021.1 496.033 L1020.64 511.705 L1020.17 512.334 L1019.71 504.502 L1019.25 477.521 L1018.79 443.719 L1018.33 405.374 L1017.87 375.636 L1017.4 346.935 L1016.94 346.537 L1016.48 356.502 L1016.02 366.274 L1015.56 380.566 L1015.1 394.126 L1014.63 400.457 L1014.17 400.688 L1013.71 416.913 L1013.25 435.526 L1012.79 451.255 L1012.33 462.955 L1011.86 470.209 L1011.4 474.997 L1010.94 479.126 L1010.48 465.478 L1010.02 440.563 L1009.56 416.922 L1009.09 398.622 L1008.63 371.114 L1008.17 348.803 L1007.71 334.867 L1007.25 324.136 L1006.79 325.956 L1006.32 328.376 L1005.86 333.957 L1005.4 344.433 L1004.94 355.906 L1004.48 375.41 L1004.02 397.648 L1003.55 411.787 L1003.09 422.268 L1002.63 427.01 L1002.17 436.722 L1001.71 439.873 L1001.25 428.061 L1000.78 410.236 L1000.32 398.701 L999.862 389.583 L999.4 385.418 L998.938 383.126 L998.477 379.288 L998.015 376.714 L997.553 367.093 L997.092 368.632 L996.63 379.407 L996.168 388.352 L995.707 409.445 L995.245 436.652 L994.783 454.237 L994.322 467.825 L993.86 479.409 L993.398 470.657 L992.937 449.36 L992.475 430.916 L992.013 416.761 L991.552 395.286 L991.09 387 L990.628 388.733 L990.167 398.878 L989.705 407.252 L989.244 412.794 L988.782 409.297 L988.32 406.964 L987.859 408.88 L987.397 401.014 L986.935 399.707 L986.474 407.966 L986.012 418.231 L985.55 433.144 L985.089 443.787 L984.627 451.71 L984.165 445.187 L983.704 433.548 L983.242 422.389 L982.78 421.365 L982.319 408.507 L981.857 387.289 L981.395 372.957 L980.934 358.507 L980.472 356.161 L980.01 348.007 L979.549 337.439 L979.087 334.596 L978.626 339.156 L978.164 341.094 L977.702 341.237 L977.241 350.65 L976.779 354.048 L976.317 356.875 L975.856 365.769 L975.394 382.597 L974.932 400.856 L974.471 413.002 L974.009 418.309 L973.547 420.856 L973.086 422.507 L972.624 425.058 L972.162 434.487 L971.701 442.444 L971.239 439.66 L970.777 440.192 L970.316 428.116 L969.854 416.362 L969.392 409.141 L968.931 404.82 L968.469 403.501 L968.008 415.631 L967.546 415.522 L967.084 419.953 L966.623 423.727 L966.161 436.825 L965.699 445.683 L965.238 443.52 L964.776 433.699 L964.314 421.025 L963.853 405.214 L963.391 388.45 L962.929 372.075 L962.468 360.183 L962.006 349.242 L961.544 349.024 L961.083 360.059 L960.621 365.867 L960.159 378.619 L959.698 381.417 L959.236 387.656 L958.774 388.797 L958.313 390.431 L957.851 391.63 L957.389 404.149 L956.928 416.632 L956.466 439.572 L956.005 470.509 L955.543 479.873 L955.081 479.92 L954.62 472.07 L954.158 446.024 L953.696 413.317 L953.235 373.062 L952.773 335.77 L952.311 320.651 L951.85 317.973 L951.388 332.051 L950.926 349.212 L950.465 373.152 L950.003 394.562 L949.541 420.958 L949.08 454.31 L948.618 477.726 L948.156 492.672 L947.695 505.511 L947.233 503.697 L946.771 498.366 L946.31 491.791 L945.848 470.568 L945.387 441.242 L944.925 410.725 L944.463 395.976 L944.002 383.369 L943.54 392.06 L943.078 416.727 L942.617 445.32 L942.155 468.607 L941.693 493.211 L941.232 506.102 L940.77 506.514 L940.308 494.462 L939.847 478.204 L939.385 455.001 L938.923 430.303 L938.462 407.813 L938 396.854 L937.538 392.747 L937.077 377.937 L936.615 364.717 L936.153 348.232 L935.692 343.958 L935.23 355.758 L934.769 356.653 L934.307 362.804 L933.845 383.236 L933.384 399.769 L932.922 411.29 L932.46 420.765 L931.999 433.826 L931.537 455.141 L931.075 471.671 L930.614 491.017 L930.152 506.386 L929.69 509.678 L929.229 504.604 L928.767 501.036 L928.305 496.747 L927.844 486.398 L927.382 476.047 L926.92 459.995 L926.459 431.365 L925.997 410.303 L925.535 412.667 L925.074 421.156 L924.612 434.445 L924.151 444.864 L923.689 454.338 L923.227 454.15 L922.766 446.117 L922.304 435.994 L921.842 425.743 L921.381 413.843 L920.919 396.399 L920.457 369.488 L919.996 339.11 L919.534 329.377 L919.072 325.201 L918.611 322.981 L918.149 330.357 L917.687 338.335 L917.226 355.712 L916.764 373.052 L916.302 400.999 L915.841 426.185 L915.379 444.344 L914.917 461.066 L914.456 471.278 L913.994 479.33 L913.533 480.001 L913.071 461.458 L912.609 436.396 L912.148 405.021 L911.686 384.873 L911.224 376.871 L910.763 368.121 L910.301 354.785 L909.839 353.386 L909.378 351.938 L908.916 365.13 L908.454 382.752 L907.993 392.997 L907.531 400.787 L907.069 401.373 L906.608 400.586 L906.146 403.05 L905.684 409.805 L905.223 404.508 L904.761 396.912 L904.299 389.12 L903.838 393.221 L903.376 402.013 L902.915 409.491 L902.453 414.296 L901.991 406.265 L901.53 396.432 L901.068 383.17 L900.606 372.018 L900.145 363.936 L899.683 350.089 L899.221 342.04 L898.76 339.493 L898.298 338.177 L897.836 337.532 L897.375 340.381 L896.913 351.799 L896.451 364.643 L895.99 388.636 L895.528 413.092 L895.066 451.039 L894.605 480.091 L894.143 513.643 L893.681 527.961 L893.22 534.081 L892.758 538.645 L892.297 537.647 L891.835 523.22 L891.373 504.642 L890.912 483.702 L890.45 463.303 L889.988 443.58 L889.527 418.335 L889.065 391.866 L888.603 363.953 L888.142 343.482 L887.68 334.249 L887.218 317.182 L886.757 304.325 L886.295 292.887 L885.833 289.218 L885.372 301.151 L884.91 319.55 L884.448 346.58 L883.987 383.219 L883.525 412.76 L883.063 433.686 L882.602 441.213 L882.14 450.143 L881.678 441.054 L881.217 434.034 L880.755 410.78 L880.294 399.772 L879.832 392.786 L879.37 397.456 L878.909 399.564 L878.447 410.804 L877.985 421.772 L877.524 428.368 L877.062 421.588 L876.6 408.032 L876.139 389.207 L875.677 377.162 L875.215 363.754 L874.754 363.426 L874.292 361.955 L873.83 359.994 L873.369 368.042 L872.907 377.417 L872.445 383.846 L871.984 393.331 L871.522 401.578 L871.06 407.139 L870.599 406.777 L870.137 403.235 L869.676 395.605 L869.214 390.304 L868.752 387.054 L868.291 391.147 L867.829 394.286 L867.367 395.558 L866.906 398.394 L866.444 388.984 L865.982 382.775 L865.521 380.892 L865.059 390.946 L864.597 411.323 L864.136 435.767 L863.674 465.54 L863.212 479.236 L862.751 482.917 L862.289 479.395 L861.827 464.044 L861.366 434.926 L860.904 396.243 L860.442 361.215 L859.981 337.09 L859.519 330.385 L859.058 342.047 L858.596 356.217 L858.134 376.512 L857.673 400.649 L857.211 422.56 L856.749 432.782 L856.288 442.473 L855.826 442.716 L855.364 443.071 L854.903 433.914 L854.441 430.879 L853.979 430.419 L853.518 426.631 L853.056 424.461 L852.594 420.685 L852.133 427.094 L851.671 440.271 L851.209 448.536 L850.748 448.457 L850.286 453.32 L849.824 445.828 L849.363 449.528 L848.901 445.751 L848.44 435.146 L847.978 413.106 L847.516 392.624 L847.055 367.319 L846.593 348.315 L846.131 325.773 L845.67 307.303 L845.208 296.381 L844.746 284.68 L844.285 282.871 L843.823 294.407 L843.361 308.746 L842.9 329.54 L842.438 356.187 L841.976 381.599 L841.515 414.178 L841.053 436.588 L840.591 452.632 L840.13 451.022 L839.668 433.78 L839.206 413.41 L838.745 397.217 L838.283 375.708 L837.822 352.548 L837.36 347.375 L836.898 337.176 L836.437 350.806 L835.975 360.343 L835.513 371.579 L835.052 388.338 L834.59 400.75 L834.128 404.772 L833.667 405.948 L833.205 402.001 L832.743 398.591 L832.282 400.639 L831.82 396.872 L831.358 393.307 L830.897 399.919 L830.435 400.655 L829.973 400.302 L829.512 405.33 L829.05 405.006 L828.588 410.299 L828.127 416.078 L827.665 421.422 L827.204 422.093 L826.742 426.489 L826.28 416.089 L825.819 409.672 L825.357 403.122 L824.895 396 L824.434 393.666 L823.972 391.175 L823.51 391.759 L823.049 384.419 L822.587 383.144 L822.125 379.765 L821.664 388.578 L821.202 398.857 L820.74 401.84 L820.279 394.252 L819.817 394.71 L819.355 404.818 L818.894 410.822 L818.432 413.455 L817.97 420.425 L817.509 409.911 L817.047 405.411 L816.585 394.274 L816.124 389.47 L815.662 387.528 L815.201 381.936 L814.739 368.279 L814.277 365.076 L813.816 373.888 L813.354 389.028 L812.892 398.808 L812.431 416.274 L811.969 440.598 L811.507 450.02 L811.046 452.974 L810.584 441.303 L810.122 423.857 L809.661 401.268 L809.199 373.022 L808.737 352.394 L808.276 340.749 L807.814 342.898 L807.352 349.568 L806.891 359.035 L806.429 369.286 L805.967 382.784 L805.506 403.606 L805.044 430.453 L804.583 451.877 L804.121 470.031 L803.659 482.123 L803.198 476.14 L802.736 468.418 L802.274 450.437 L801.813 426.012 L801.351 395.568 L800.889 360.273 L800.428 336.289 L799.966 327.925 L799.504 318.406 L799.043 323.544 L798.581 334.085 L798.119 360.232 L797.658 394.173 L797.196 424.626 L796.734 456.279 L796.273 478.565 L795.811 491.697 L795.349 485.279 L794.888 466.751 L794.426 446.274 L793.965 417.69 L793.503 393.286 L793.041 373.34 L792.58 358.826 L792.118 350.864 L791.656 361.25 L791.195 371.399 L790.733 374.757 L790.271 375.846 L789.81 382.934 L789.348 389.479 L788.886 397.15 L788.425 406.032 L787.963 417.114 L787.501 432.214 L787.04 449.081 L786.578 460.884 L786.116 474.68 L785.655 484.444 L785.193 484.037 L784.731 470.358 L784.27 454.981 L783.808 434.519 L783.347 411.962 L782.885 396.042 L782.423 389.443 L781.962 381.794 L781.5 374.053 L781.038 367.074 L780.577 351.668 L780.115 349.958 L779.653 348.936 L779.192 339.381 L778.73 345.578 L778.268 355.002 L777.807 368.199 L777.345 375.288 L776.883 377.707 L776.422 385.923 L775.96 405.579 L775.498 435.209 L775.037 463.342 L774.575 481.464 L774.113 493.528 L773.652 501.262 L773.19 489.954 L772.729 466.123 L772.267 439.961 L771.805 419.14 L771.344 392.95 L770.882 363.924 L770.42 346.185 L769.959 341.809 L769.497 344.837 L769.035 358.993 L768.574 373.82 L768.112 393.111 L767.65 406.681 L767.189 410.265 L766.727 407.476 L766.265 399.117 L765.804 385.571 L765.342 367.693 L764.88 367.009 L764.419 371.833 L763.957 378.471 L763.495 388.212 L763.034 398.727 L762.572 404.015 L762.111 412.306 L761.649 414.797 L761.187 415.784 L760.726 416.192 L760.264 413.416 L759.802 399.097 L759.341 387.308 L758.879 375.573 L758.417 370.47 L757.956 370.83 L757.494 383.229 L757.032 390.396 L756.571 392.674 L756.109 409.827 L755.647 426.401 L755.186 448.684 L754.724 458.885 L754.262 461.019 L753.801 458.031 L753.339 439.973 L752.877 424.002 L752.416 405.05 L751.954 392.345 L751.493 370.131 L751.031 348.138 L750.569 333.141 L750.108 328.828 L749.646 333.686 L749.184 343.543 L748.723 360.018 L748.261 370.94 L747.799 384.926 L747.338 400.365 L746.876 411.808 L746.414 422.44 L745.953 443.549 L745.491 462.326 L745.029 481.914 L744.568 487.348 L744.106 482.242 L743.644 477.436 L743.183 457.361 L742.721 434.851 L742.259 398.558 L741.798 362.829 L741.336 337.424 L740.874 323.952 L740.413 313.821 L739.951 324.416 L739.49 337.847 L739.028 353.739 L738.566 362.384 L738.105 370.803 L737.643 377.714 L737.181 387.499 L736.72 409.015 L736.258 423.961 L735.796 434.508 L735.335 427.728 L734.873 419.075 L734.411 400.044 L733.95 386.66 L733.488 376.646 L733.026 369.926 L732.565 360.644 L732.103 343.023 L731.641 322.536 L731.18 302.064 L730.718 294.385 L730.256 308.427 L729.795 336.806 L729.333 365.961 L728.872 395.895 L728.41 429.959 L727.948 465.734 L727.487 490.142 L727.025 502.593 L726.563 498.097 L726.102 484.673 L725.64 461.282 L725.178 432.53 L724.717 410.74 L724.255 407.664 L723.793 409.109 L723.332 420.217 L722.87 429.562 L722.408 432.43 L721.947 433.182 L721.485 443.945 L721.023 452.926 L720.562 452.855 L720.1 458.35 L719.638 464.014 L719.177 472.425 L718.715 472.572 L718.254 454.971 L717.792 439.246 L717.33 415.47 L716.869 395.628 L716.407 384.891 L715.945 372.837 L715.484 363.002 L715.022 345.844 L714.56 335.732 L714.099 324.04 L713.637 309.14 L713.175 291.121 L712.714 289.958 L712.252 310.031 L711.79 339.905 L711.329 366.629 L710.867 389.34 L710.405 410.677 L709.944 444.832 L709.482 460.506 L709.02 456.672 L708.559 449.182 L708.097 436.133 L707.636 420.539 L707.174 413.737 L706.712 403.091 L706.251 398.472 L705.789 406.722 L705.327 422.84 L704.866 425.864 L704.404 412.766 L703.942 402.125 L703.481 397.873 L703.019 395.359 L702.557 395.704 L702.096 403.864 L701.634 406.17 L701.172 412.096 L700.711 419.828 L700.249 413.83 L699.787 404.298 L699.326 390.825 L698.864 381.815 L698.402 367.442 L697.941 349.131 L697.479 334.516 L697.018 327.104 L696.556 336.386 L696.094 357.852 L695.633 385.852 L695.171 421.498 L694.709 444.854 L694.248 460.909 L693.786 466.848 L693.324 457.84 L692.863 455.498 L692.401 463.87 L691.939 469.598 L691.478 472.193 L691.016 481.046 L690.554 493.736 L690.093 498.641 L689.631 495.406 L689.169 494.644 L688.708 498.209 L688.246 496.323 L687.784 486.821 L687.323 475.236 L686.861 464.926 L686.4 450.98 L685.938 437.405 L685.476 427.501 L685.015 410.596 L684.553 404.694 L684.091 409.776 L683.63 406.467 L683.168 407.783 L682.706 399.396 L682.245 387.787 L681.783 374.586 L681.321 369.692 L680.86 367.68 L680.398 376.206 L679.936 378.183 L679.475 386.769 L679.013 390.255 L678.551 394.888 L678.09 391.344 L677.628 393.339 L677.166 384.924 L676.705 382.121 L676.243 386.262 L675.781 401.13 L675.32 419.423 L674.858 439.615 L674.397 449.365 L673.935 457.494 L673.473 464.426 L673.012 465.336 L672.55 454.527 L672.088 442.524 L671.627 428.785 L671.165 424.655 L670.703 417.554 L670.242 407.002 L669.78 392.365 L669.318 373.848 L668.857 349.261 L668.395 326.086 L667.933 314.75 L667.472 317.863 L667.01 327.081 L666.548 346.293 L666.087 379.559 L665.625 410.104 L665.163 443.876 L664.702 470.529 L664.24 484.304 L663.779 489.18 L663.317 482.134 L662.855 458.409 L662.394 432.188 L661.932 404.879 L661.47 383.546 L661.009 371.649 L660.547 369.972 L660.085 375.892 L659.624 385.432 L659.162 395.023 L658.7 415.699 L658.239 438.549 L657.777 461.973 L657.315 481.669 L656.854 493.71 L656.392 499.909 L655.93 502.07 L655.469 499.042 L655.007 498.795 L654.545 499.637 L654.084 491.795 L653.622 489.42 L653.161 483.316 L652.699 456.675 L652.237 432.998 L651.776 407.634 L651.314 385.277 L650.852 357.535 L650.391 333.317 L649.929 319.383 L649.467 316.735 L649.006 321.037 L648.544 339.506 L648.082 352.684 L647.621 351.683 L647.159 337.841 L646.697 334.599 L646.236 345.618 L645.774 360.013 L645.312 368.675 L644.851 372.132 L644.389 378.322 L643.927 384.555 L643.466 387.743 L643.004 390.928 L642.543 383.509 L642.081 380.477 L641.619 387.727 L641.158 396.725 L640.696 410.973 L640.234 427.153 L639.773 445.674 L639.311 471.279 L638.849 479.786 L638.388 483.602 L637.926 471.329 L637.464 459.932 L637.003 438.172 L636.541 422.32 L636.079 412.153 L635.618 407.469 L635.156 407.86 L634.694 418.163 L634.233 424.493 L633.771 419.091 L633.309 411.511 L632.848 398.365 L632.386 384.527 L631.925 368.663 L631.463 353.509 L631.001 344.19 L630.54 346.276 L630.078 348.945 L629.616 357.69 L629.155 373.897 L628.693 385.458 L628.231 388.417 L627.77 385.192 L627.308 379.528 L626.846 364.916 L626.385 347.519 L625.923 342.528 L625.461 351.337 L625 370.274 L624.538 404.207 L624.076 440.823 L623.615 472.321 L623.153 506.907 L622.691 532.479 L622.23 548.476 L621.768 559.946 L621.307 549.807 L620.845 519.783 L620.383 490.114 L619.922 469.962 L619.46 436.789 L618.998 415.495 L618.537 399.901 L618.075 388.752 L617.613 379.664 L617.152 384.389 L616.69 390.715 L616.228 390.953 L615.767 390.506 L615.305 382.513 L614.843 371.14 L614.382 370.039 L613.92 378.336 L613.458 389.89 L612.997 396.566 L612.535 400.52 L612.073 398.408 L611.612 403.546 L611.15 403.095 L610.689 408.249 L610.227 411.785 L609.765 414.951 L609.304 412.401 L608.842 416.42 L608.38 416.366 L607.919 406.114 L607.457 397.636 L606.995 389.104 L606.534 366.878 L606.072 354.322 L605.61 353.135 L605.149 351.637 L604.687 354.438 L604.225 362.414 L603.764 369.025 L603.302 385.795 L602.84 396.591 L602.379 409.123 L601.917 415.573 L601.455 417.091 L600.994 413.988 L600.532 419.488 L600.07 421.72 L599.609 418.348 L599.147 418.663 L598.686 412.388 L598.224 401.214 L597.762 395.502 L597.301 381.445 L596.839 371.589 L596.377 366.598 L595.916 367.359 L595.454 364.557 L594.992 366.31 L594.531 382.247 L594.069 390.895 L593.607 393.18 L593.146 391.834 L592.684 384.616 L592.222 366.435 L591.761 347.686 L591.299 324.632 L590.837 317.628 L590.376 317.104 L589.914 325.289 L589.452 349.802 L588.991 382.29 L588.529 409.441 L588.068 423.999 L587.606 430.1 L587.144 428.927 L586.683 427.336 L586.221 418.332 L585.759 406.818 L585.298 390.285 L584.836 387.828 L584.374 393.602 L583.913 397.155 L583.451 402.079 L582.989 421.788 L582.528 437.349 L582.066 443.803 L581.604 442.701 L581.143 424.284 L580.681 404.305 L580.219 386.343 L579.758 376.921 L579.296 370.88 L578.834 357.955 L578.373 343.4 L577.911 328.357 L577.45 327.4 L576.988 326.572 L576.526 337.545 L576.065 347.649 L575.603 372.291 L575.141 401.31 L574.68 434.717 L574.218 460.174 L573.756 459.345 L573.295 455.949 L572.833 438.628 L572.371 418.309 L571.91 395.232 L571.448 366.375 L570.986 354.026 L570.525 342.068 L570.063 332.549 L569.601 324.958 L569.14 325.625 L568.678 334.666 L568.216 328.935 L567.755 333.991 L567.293 345.05 L566.832 357.774 L566.37 376.64 L565.908 396.888 L565.447 406.85 L564.985 423.387 L564.523 427.348 L564.062 430.254 L563.6 433.815 L563.138 432.187 L562.677 424.94 L562.215 417.896 L561.753 410.125 L561.292 402.883 L560.83 404.175 L560.368 407.042 L559.907 407.024 L559.445 412.386 L558.983 408.481 L558.522 408.577 L558.06 405.474 L557.598 391.502 L557.137 386.327 L556.675 380.43 L556.214 371.77 L555.752 360.836 L555.29 358.866 L554.829 370.905 L554.367 372.867 L553.905 368.89 L553.444 362.057 L552.982 355.999 L552.52 354.464 L552.059 355.08 L551.597 359.422 L551.135 365.724 L550.674 371.822 L550.212 392.683 L549.75 421.383 L549.289 437.196 L548.827 455.337 L548.365 466.849 L547.904 476.77 L547.442 477.222 L546.98 470.342 L546.519 461.857 L546.057 454.218 L545.596 444.83 L545.134 441.973 L544.672 433.955 L544.211 429.978 L543.749 434.178 L543.287 427.907 L542.826 415.319 L542.364 410.477 L541.902 401.122 L541.441 391.267 L540.979 370.466 L540.517 362.875 L540.056 345.2 L539.594 334.789 L539.132 336.544 L538.671 351.443 L538.209 370.787 L537.747 398.357 L537.286 436.663 L536.824 484.271 L536.362 519.134 L535.901 538.43 L535.439 550.304 L534.977 540.965 L534.516 513.274 L534.054 481.251 L533.593 448.881 L533.131 421.449 L532.669 399.252 L532.208 387.555 L531.746 394.408 L531.284 407.548 L530.823 420.174 L530.361 426.785 L529.899 430.971 L529.438 427.165 L528.976 422.072 L528.514 406.173 L528.053 391.1 L527.591 383.531 L527.129 382.767 L526.668 390.831 L526.206 411.705 L525.744 426.766 L525.283 435.76 L524.821 437.469 L524.359 422.145 L523.898 414.861 L523.436 405.991 L522.975 402.321 L522.513 401.539 L522.051 393.066 L521.59 383.759 L521.128 382.604 L520.666 383.097 L520.205 378.981 L519.743 372.593 L519.281 368.319 L518.82 359.84 L518.358 356.564 L517.896 360.637 L517.435 360.263 L516.973 370.503 L516.511 387.73 L516.05 404.87 L515.588 432.425 L515.126 446.172 L514.665 451.597 L514.203 458.096 L513.741 461.575 L513.28 463.974 L512.818 471.781 L512.357 475.911 L511.895 475.86 L511.433 476.7 L510.972 467.097 L510.51 449.85 L510.048 427.3 L509.587 395.749 L509.125 360.283 L508.663 336.954 L508.202 324.145 L507.74 320.688 L507.278 322.111 L506.817 330.399 L506.355 343.942 L505.893 364.658 L505.432 392.989 L504.97 409.191 L504.508 415.615 L504.047 411.838 L503.585 408.419 L503.123 415.558 L502.662 427.476 L502.2 429.445 L501.739 436.886 L501.277 456.897 L500.815 477.464 L500.354 486.07 L499.892 491.16 L499.43 491.016 L498.969 488.751 L498.507 487.397 L498.045 480.9 L497.584 457.388 L497.122 431.225 L496.66 414.814 L496.199 401.701 L495.737 384.031 L495.275 368.296 L494.814 354.09 L494.352 350.905 L493.89 349.467 L493.429 356.661 L492.967 371.369 L492.505 380.395 L492.044 386.97 L491.582 390.043 L491.121 391.24 L490.659 402.624 L490.197 415.541 L489.736 432.101 L489.274 450.157 L488.812 472.215 L488.351 490.823 L487.889 503.814 L487.427 507.521 L486.966 501.861 L486.504 489.727 L486.042 470.235 L485.581 468.941 L485.119 471.036 L484.657 473.183 L484.196 462.762 L483.734 452.02 L483.272 435.401 L482.811 420.089 L482.349 405.514 L481.887 392.35 L481.426 386.409 L480.964 380.184 L480.503 375.688 L480.041 379.358 L479.579 383.612 L479.118 395.486 L478.656 411.12 L478.194 422.529 L477.733 437.084 L477.271 453.131 L476.809 465.339 L476.348 473.648 L475.886 471.614 L475.424 465.226 L474.963 446.758 L474.501 434.003 L474.039 417.066 L473.578 391.793 L473.116 370.175 L472.654 351.89 L472.193 329.152 L471.731 328.755 L471.269 337.334 L470.808 350.755 L470.346 361.234 L469.885 360.33 L469.423 354.193 L468.961 357.498 L468.5 358.698 L468.038 363.179 L467.576 375.102 L467.115 388.825 L466.653 408.973 L466.191 440.41 L465.73 469.591 L465.268 484.475 L464.806 491.375 L464.345 491.437 L463.883 491.269 L463.421 481.66 L462.96 462.635 L462.498 443.847 L462.036 426.064 L461.575 406.11 L461.113 397.491 L460.651 402.195 L460.19 409.966 L459.728 419.816 L459.266 427.934 L458.805 419.844 L458.343 410.234 L457.882 390.254 L457.42 357.39 L456.958 334.303 L456.497 325.008 L456.035 313.23 L455.573 299.812 L455.112 294.61 L454.65 292.391 L454.188 294.6 L453.727 309.473 L453.265 327.002 L452.803 348.588 L452.342 378.853 L451.88 411.394 L451.418 428.623 L450.957 440.839 L450.495 451.22 L450.033 461.65 L449.572 459.506 L449.11 451.358 L448.648 450.512 L448.187 448.325 L447.725 435.022 L447.264 420.928 L446.802 406.849 L446.34 397.503 L445.879 389.792 L445.417 391.064 L444.955 393.486 L444.494 407.367 L444.032 426.417 L443.57 437.412 L443.109 440.339 L442.647 443.91 L442.185 437.651 L441.724 431.833 L441.262 426.308 L440.8 424.484 L440.339 422.917 L439.877 425.159 L439.415 425.156 L438.954 421.333 L438.492 414.242 L438.03 409.906 L437.569 403.188 L437.107 389.47 L436.646 374.059 L436.184 361.21 L435.722 340.368 L435.261 325.887 L434.799 313.687 L434.337 299.125 L433.876 306.863 L433.414 338.777 L432.952 382.28 L432.491 420.802 L432.029 465.895 L431.567 505.899 L431.106 530.163 L430.644 539.676 L430.182 534.702 L429.721 526.913 L429.259 509.778 L428.797 480.306 L428.336 457.961 L427.874 440.304 L427.412 426.78 L426.951 416.262 L426.489 412.447 L426.028 398.9 L425.566 390.716 L425.104 391.058 L424.643 381.363 L424.181 371.173 L423.719 362.252 L423.258 343.518 L422.796 332.195 L422.334 330.505 L421.873 347.833 L421.411 376.135 L420.949 406.397 L420.488 434.882 L420.026 458.883 L419.564 475.312 L419.103 484.479 L418.641 480.969 L418.179 469.43 L417.718 449.654 L417.256 431.306 L416.794 407.821 L416.333 383.922 L415.871 356.912 L415.41 353.84 L414.948 353.595 L414.486 355.345 L414.025 366.358 L413.563 374.653 L413.101 389.608 L412.64 410.006 L412.178 429.518 L411.716 444.655 L411.255 458.988 L410.793 466.624 L410.331 472.978 L409.87 471.563 L409.408 469.555 L408.946 473.748 L408.485 461.404 L408.023 453.18 L407.561 446.022 L407.1 440.854 L406.638 448.687 L406.176 453.569 L405.715 460.951 L405.253 467.207 L404.792 465.995 L404.33 461.049 L403.868 457.745 L403.407 462.19 L402.945 462.439 L402.483 448.583 L402.022 436.553 L401.56 414.282 L401.098 394.062 L400.637 378.354 L400.175 377.678 L399.713 378.725 L399.252 380.452 L398.79 389.045 L398.328 388.95 L397.867 393.868 L397.405 394.1 L396.943 391.874 L396.482 396.3 L396.02 405.984 L395.558 430.395 L395.097 450.114 L394.635 470.612 L394.174 488.909 L393.712 485.954 L393.25 473.952 L392.789 450.542 L392.327 419.777 L391.865 388.225 L391.404 363.26 L390.942 354.154 L390.48 349.916 L390.019 349.673 L389.557 355.796 L389.095 362.376 L388.634 376.83 L388.172 401.884 L387.71 422.276 L387.249 440.522 L386.787 446.42 L386.325 448.982 L385.864 456.157 L385.402 449.447 L384.94 438.111 L384.479 432.64 L384.017 434.026 L383.555 435.169 L383.094 442.667 L382.632 448.527 L382.171 453.608 L381.709 458.718 L381.247 465.618 L380.786 480.746 L380.324 493.553 L379.862 505.489 L379.401 522.04 L378.939 538.782 L378.477 550.971 L378.016 549.468 L377.554 540.088 L377.092 520.308 L376.631 495.119 L376.169 469.537 L375.707 450.267 L375.246 454.49  Z" fill="#ffa500" fill-rule="evenodd" fill-opacity="0.3"/>
<polyline clip-path="url(#clip042)" style="stroke:#ffa500; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" stroke-dasharray="32, 20" points="375.246,516.612 375.707,514.095 376.169,521.439 376.631,528.259 377.092,534.143 377.554,539.031 378.016,539.653 378.477,537.711 378.939,525.765 379.401,511.515 379.862,498.692 380.324,491.08 380.786,482.817 381.247,472.244 381.709,469.805 382.171,469.015 382.632,468.1 383.094,466.254 383.555,462.625 384.017,465.215 384.479,467.434 384.94,476.386 385.402,491.082 385.864,501.031 386.325,496.975 386.787,497.41 387.249,494.386 387.71,478.889 388.172,461.123 388.634,438.571 389.095,426.495 389.557,422.172 390.019,418.185 390.48,420.446 390.942,426.589 391.404,437.486 391.865,464.134 392.327,497.264 392.789,529.505 393.25,554.294 393.712,567.58 394.174,571.729 394.635,554.538 395.097,535.065 395.558,516.29 396.02,492.748 396.482,483.861 396.943,480.164 397.405,483.053 397.867,483.425 398.328,479.052 398.79,479.639 399.252,471.488 399.713,470.154 400.175,469.457 400.637,470.444 401.098,486.423 401.56,506.881 402.022,529.357 402.483,541.563 402.945,555.569 403.407,555.445 403.868,551.104 404.33,554.492 404.792,559.504 405.253,560.765 405.715,554.545 406.176,547.186 406.638,542.316 407.1,534.483 407.561,539.644 408.023,546.785 408.485,554.986 408.946,567.3 409.408,563.071 409.87,565.038 410.331,566.406 410.793,560 411.255,552.308 411.716,537.914 412.178,522.713 412.64,503.131 413.101,482.659 413.563,467.626 414.025,459.248 414.486,448.147 414.948,446.305 415.41,446.453 415.871,449.423 416.333,476.327 416.794,500.114 417.256,523.483 417.718,541.71 418.179,561.361 418.641,572.77 419.103,576.145 419.564,566.841 420.026,550.269 420.488,526.123 420.949,497.49 421.411,467.078 421.873,438.624 422.334,421.142 422.796,422.678 423.258,433.848 423.719,452.428 424.181,461.198 424.643,471.239 425.104,480.788 425.566,480.304 426.028,488.352 426.489,501.768 426.951,505.458 427.412,515.859 427.874,529.274 428.336,546.831 428.797,569.086 429.259,598.477 429.721,615.543 430.182,623.275 430.644,628.204 431.106,618.658 431.567,594.375 432.029,554.363 432.491,509.277 432.952,470.776 433.414,427.306 433.876,395.44 434.337,387.763 434.799,402.399 435.261,414.686 435.722,429.267 436.184,450.221 436.646,463.193 437.107,478.739 437.569,492.601 438.03,499.474 438.492,503.973 438.954,511.234 439.415,515.235 439.877,515.422 440.339,513.369 440.8,515.131 441.262,517.151 441.724,522.876 442.185,528.895 442.647,535.355 443.109,531.985 443.57,529.257 444.032,518.459 444.494,499.603 444.955,485.914 445.417,483.677 445.879,482.586 446.34,490.472 446.802,499.987 447.264,514.229 447.725,528.478 448.187,541.929 448.648,544.255 449.11,545.233 449.572,553.505 450.033,555.764 450.495,545.442 450.957,535.16 451.418,523.036 451.88,505.89 452.342,473.426 452.803,443.229 453.265,421.706 453.727,404.233 454.188,389.409 454.65,387.243 455.112,389.5 455.573,394.736 456.035,408.183 456.497,419.987 456.958,429.304 457.42,452.409 457.882,485.29 458.343,505.285 458.805,514.909 459.266,523.012 459.728,514.906 460.19,505.069 460.651,497.31 461.113,492.619 461.575,501.252 462.036,521.222 462.498,539.022 462.96,557.828 463.421,576.874 463.883,586.505 464.345,586.698 464.806,586.663 465.268,579.793 465.73,564.94 466.191,535.793 466.653,504.392 467.115,484.282 467.576,470.598 468.038,458.716 468.5,454.279 468.961,453.124 469.423,449.864 469.885,456.048 470.346,456.999 470.808,446.569 471.269,433.195 471.731,424.665 472.193,425.11 472.654,447.895 473.116,466.226 473.578,487.889 474.039,513.206 474.501,530.186 474.963,542.982 475.424,561.489 475.886,567.914 476.348,569.983 476.809,561.706 477.271,549.529 477.733,533.509 478.194,518.979 478.656,507.592 479.118,491.978 479.579,480.121 480.041,475.881 480.503,472.223 480.964,476.728 481.426,482.96 481.887,488.906 482.349,502.073 482.811,516.648 483.272,531.958 483.734,548.573 484.196,559.31 484.657,569.725 485.119,567.57 485.581,565.466 486.042,566.751 486.504,586.233 486.966,598.356 487.427,604.006 487.889,600.288 488.351,587.287 488.812,568.669 489.274,546.602 489.736,528.538 490.197,511.97 490.659,499.047 491.121,487.658 491.582,486.457 492.044,483.382 492.505,476.807 492.967,467.783 493.429,453.079 493.89,445.89 494.352,447.335 494.814,450.53 495.275,464.746 495.737,480.495 496.199,498.18 496.66,511.31 497.122,527.741 497.584,553.925 498.045,577.46 498.507,583.982 498.969,585.362 499.43,587.654 499.892,587.828 500.354,582.769 500.815,574.196 501.277,553.661 501.739,533.685 502.2,526.278 502.662,524.345 503.123,512.464 503.585,505.362 504.047,508.818 504.508,512.633 504.97,506.247 505.432,490.082 505.893,461.789 506.355,441.11 506.817,427.605 507.278,419.353 507.74,417.966 508.202,421.458 508.663,434.302 509.125,457.664 509.587,493.163 510.048,524.746 510.51,547.327 510.972,564.604 511.433,574.235 511.895,573.423 512.357,573.501 512.818,569.396 513.28,561.614 513.741,559.237 514.203,555.78 514.665,549.302 515.126,543.897 515.588,530.167 516.05,502.63 516.511,485.506 516.973,468.294 517.435,458.068 517.896,458.454 518.358,454.393 518.82,457.679 519.281,466.168 519.743,470.45 520.205,476.846 520.666,480.969 521.128,480.482 521.59,481.641 522.051,490.953 522.513,499.43 522.975,500.214 523.436,503.886 523.898,512.758 524.359,520.042 524.821,535.366 525.283,533.657 525.744,524.662 526.206,509.6 526.668,488.724 527.129,480.656 527.591,481.418 528.053,488.984 528.514,504.052 528.976,519.948 529.438,525.036 529.899,528.837 530.361,524.646 530.823,518.03 531.284,505.398 531.746,492.252 532.208,485.393 532.669,497.083 533.131,519.274 533.593,546.7 534.054,579.063 534.516,611.08 534.977,638.764 535.439,648.096 535.901,636.216 536.362,616.913 536.824,582.043 537.286,534.428 537.747,496.116 538.209,468.54 538.671,449.189 539.132,434.285 539.594,432.523 540.056,442.929 540.517,460.599 540.979,468.185 541.441,488.981 541.902,498.832 542.364,508.183 542.826,513.021 543.287,525.605 543.749,531.874 544.211,527.671 544.672,531.646 545.134,539.662 545.596,542.518 546.057,551.905 546.519,559.543 546.98,568.029 547.442,574.908 547.904,574.457 548.365,564.537 548.827,553.027 549.289,534.888 549.75,519.078 550.212,490.38 550.674,469.522 551.135,463.427 551.597,457.129 552.059,452.791 552.52,452.18 552.982,453.719 553.444,459.782 553.905,466.62 554.367,470.602 554.829,468.645 555.29,456.611 555.752,458.587 556.214,469.527 556.675,478.192 557.137,484.095 557.598,489.276 558.06,503.254 558.522,506.362 558.983,506.272 559.445,510.183 559.907,504.826 560.368,504.85 560.83,501.988 561.292,500.702 561.753,507.949 562.215,515.724 562.677,522.773 563.138,530.025 563.6,531.657 564.062,528.101 564.523,525.198 564.985,521.241 565.447,504.708 565.908,494.749 566.37,474.505 566.832,455.642 567.293,442.921 567.755,431.865 568.216,426.811 568.678,432.545 569.14,423.506 569.601,422.841 570.063,430.434 570.525,439.955 570.986,451.915 571.448,464.265 571.91,493.123 572.371,516.202 572.833,536.522 573.295,553.844 573.756,557.241 574.218,558.072 574.68,532.616 575.141,499.21 575.603,470.191 576.065,445.551 576.526,435.448 576.988,424.476 577.45,425.305 577.911,426.263 578.373,441.307 578.834,455.863 579.296,468.788 579.758,474.831 580.219,484.253 580.681,502.216 581.143,522.196 581.604,540.614 582.066,541.717 582.528,535.265 582.989,519.704 583.451,499.996 583.913,495.073 584.374,491.521 584.836,485.748 585.298,488.206 585.759,504.74 586.221,516.255 586.683,525.259 587.144,526.852 587.606,528.025 588.068,521.926 588.529,507.368 588.991,480.218 589.452,447.73 589.914,423.218 590.376,415.033 590.837,415.558 591.299,422.562 591.761,445.616 592.222,464.366 592.684,482.547 593.146,489.765 593.607,491.111 594.069,488.826 594.531,480.178 594.992,464.24 595.454,462.487 595.916,465.29 596.377,464.528 596.839,469.519 597.301,479.374 597.762,493.431 598.224,499.143 598.686,510.317 599.147,516.591 599.609,516.276 600.07,519.647 600.532,517.415 600.994,511.914 601.455,515.017 601.917,513.498 602.379,507.048 602.84,494.515 603.302,483.719 603.764,466.949 604.225,460.338 604.687,452.361 605.149,449.56 605.61,451.058 606.072,452.245 606.534,464.8 606.995,487.026 607.457,495.559 607.919,504.037 608.38,514.289 608.842,514.343 609.304,510.324 609.765,512.875 610.227,509.71 610.689,506.174 611.15,501.021 611.612,501.472 612.073,496.335 612.535,498.447 612.997,494.494 613.458,487.819 613.92,476.266 614.382,467.97 614.843,469.072 615.305,480.446 615.767,488.44 616.228,488.889 616.69,488.652 617.152,482.327 617.613,477.604 618.075,486.693 618.537,497.842 618.998,513.437 619.46,534.733 619.922,567.907 620.383,588.06 620.845,617.731 621.307,647.756 621.768,657.897 622.23,646.427 622.691,630.432 623.153,604.861 623.615,570.276 624.076,538.779 624.538,502.165 625,468.233 625.461,449.297 625.923,440.489 626.385,445.481 626.846,462.879 627.308,477.492 627.77,483.157 628.231,486.383 628.693,483.424 629.155,471.864 629.616,455.658 630.078,446.914 630.54,444.246 631.001,442.16 631.463,451.479 631.925,466.634 632.386,482.498 632.848,496.337 633.309,509.483 633.771,517.063 634.233,522.466 634.694,516.136 635.156,505.834 635.618,505.443 636.079,510.127 636.541,520.294 637.003,536.146 637.464,557.906 637.926,569.304 638.388,581.577 638.849,577.761 639.311,569.254 639.773,543.648 640.234,525.127 640.696,508.947 641.158,494.7 641.619,485.701 642.081,478.451 642.543,481.483 643.004,488.902 643.466,485.717 643.927,482.529 644.389,476.295 644.851,470.104 645.312,466.648 645.774,457.985 646.236,443.589 646.697,432.571 647.159,435.812 647.621,449.654 648.082,450.654 648.544,437.477 649.006,419.007 649.467,414.705 649.929,417.352 650.391,431.286 650.852,455.504 651.314,483.246 651.776,505.602 652.237,530.966 652.699,554.643 653.161,581.283 653.622,587.388 654.084,589.762 654.545,597.603 655.007,596.761 655.469,597.008 655.93,600.036 656.392,597.875 656.854,591.676 657.315,579.634 657.777,559.938 658.239,536.514 658.7,513.664 659.162,492.988 659.624,483.397 660.085,473.857 660.547,467.937 661.009,469.614 661.47,481.511 661.932,502.844 662.394,530.153 662.855,556.374 663.317,580.099 663.779,587.145 664.24,582.269 664.702,568.495 665.163,541.841 665.625,508.07 666.087,477.524 666.548,444.258 667.01,425.047 667.472,415.829 667.933,412.716 668.395,424.052 668.857,447.228 669.318,471.815 669.78,490.332 670.242,504.969 670.703,515.521 671.165,522.623 671.627,526.752 672.088,540.492 672.55,552.495 673.012,563.304 673.473,562.394 673.935,555.462 674.397,547.334 674.858,537.584 675.32,517.393 675.781,499.1 676.243,484.231 676.705,480.091 677.166,482.894 677.628,491.309 678.09,489.314 678.551,492.858 679.013,488.225 679.475,484.74 679.936,476.154 680.398,474.177 680.86,465.651 681.321,467.663 681.783,472.558 682.245,485.759 682.706,497.367 683.168,505.755 683.63,504.439 684.091,507.748 684.553,502.666 685.015,508.568 685.476,525.473 685.938,535.378 686.4,548.953 686.861,562.898 687.323,573.209 687.784,584.794 688.246,594.296 688.708,596.182 689.169,592.617 689.631,593.379 690.093,596.614 690.554,591.71 691.016,579.019 691.478,570.166 691.939,567.571 692.401,561.843 692.863,553.471 693.324,555.813 693.786,564.822 694.248,558.883 694.709,542.828 695.171,519.471 695.633,483.825 696.094,455.826 696.556,434.359 697.018,425.078 697.479,432.49 697.941,447.105 698.402,465.415 698.864,479.788 699.326,488.799 699.787,502.272 700.249,511.804 700.711,517.802 701.172,510.07 701.634,504.144 702.096,501.838 702.557,493.678 703.019,493.332 703.481,495.847 703.942,500.099 704.404,510.74 704.866,523.837 705.327,520.814 705.789,504.696 706.251,496.446 706.712,501.065 707.174,511.711 707.636,518.513 708.097,534.106 708.559,547.156 709.02,554.646 709.482,558.48 709.944,542.805 710.405,508.651 710.867,487.314 711.329,464.603 711.79,437.878 712.252,408.005 712.714,387.932 713.175,389.095 713.637,407.113 714.099,422.013 714.56,433.705 715.022,443.818 715.484,460.975 715.945,470.811 716.407,482.865 716.869,493.602 717.33,513.443 717.792,537.22 718.254,552.945 718.715,570.546 719.177,570.399 719.638,561.987 720.1,556.324 720.562,550.828 721.023,550.899 721.485,541.918 721.947,531.155 722.408,530.403 722.87,527.536 723.332,518.19 723.793,507.083 724.255,505.637 724.717,508.714 725.178,530.504 725.64,559.256 726.102,582.646 726.563,596.071 727.025,600.566 727.487,588.116 727.948,563.707 728.41,527.933 728.872,493.869 729.333,463.935 729.795,434.779 730.256,406.401 730.718,392.359 731.18,400.038 731.641,420.51 732.103,440.997 732.565,458.618 733.026,467.9 733.488,474.62 733.95,484.634 734.411,498.018 734.873,517.049 735.335,525.703 735.796,532.482 736.258,521.935 736.72,506.989 737.181,485.473 737.643,475.688 738.105,468.777 738.566,460.359 739.028,451.714 739.49,435.822 739.951,422.39 740.413,411.796 740.874,421.926 741.336,435.399 741.798,460.804 742.259,496.533 742.721,532.826 743.183,555.336 743.644,575.411 744.106,580.217 744.568,585.323 745.029,579.889 745.491,560.301 745.953,541.524 746.414,520.415 746.876,509.783 747.338,498.34 747.799,482.901 748.261,468.915 748.723,457.993 749.184,441.518 749.646,431.662 750.108,426.803 750.569,431.116 751.031,446.113 751.493,468.106 751.954,490.32 752.416,503.025 752.877,521.977 753.339,537.948 753.801,556.006 754.262,558.995 754.724,556.86 755.186,546.659 755.647,524.377 756.109,507.802 756.571,490.649 757.032,488.371 757.494,481.205 757.956,468.805 758.417,468.445 758.879,473.548 759.341,485.283 759.802,497.072 760.264,511.392 760.726,514.167 761.187,513.759 761.649,512.773 762.111,510.281 762.572,501.99 763.034,496.702 763.495,486.187 763.957,476.446 764.419,469.808 764.88,464.984 765.342,465.668 765.804,483.546 766.265,497.092 766.727,505.451 767.189,508.24 767.65,504.656 768.112,491.085 768.574,471.795 769.035,456.968 769.497,442.812 769.959,439.784 770.42,444.16 770.882,461.899 771.344,490.925 771.805,517.115 772.267,537.936 772.729,564.098 773.19,587.929 773.652,599.237 774.113,591.503 774.575,579.438 775.037,561.317 775.498,533.184 775.96,503.554 776.422,483.898 776.883,475.682 777.345,473.263 777.807,466.174 778.268,452.976 778.73,443.553 779.192,437.356 779.653,446.911 780.115,447.933 780.577,449.643 781.038,465.049 781.5,472.028 781.962,479.769 782.423,487.417 782.885,494.017 783.347,509.937 783.808,532.494 784.27,552.956 784.731,568.333 785.193,582.012 785.655,582.419 786.116,572.655 786.578,558.859 787.04,547.056 787.501,530.189 787.963,515.089 788.425,504.007 788.886,495.125 789.348,487.454 789.81,480.909 790.271,473.821 790.733,472.732 791.195,469.374 791.656,459.225 792.118,448.839 792.58,456.801 793.041,471.315 793.503,491.261 793.965,515.665 794.426,544.249 794.888,564.726 795.349,583.254 795.811,589.672 796.273,576.54 796.734,554.254 797.196,522.601 797.658,492.148 798.119,458.208 798.581,432.06 799.043,421.519 799.504,416.381 799.966,425.901 800.428,434.264 800.889,458.249 801.351,493.543 801.813,523.988 802.274,548.412 802.736,566.393 803.198,574.115 803.659,580.098 804.121,568.006 804.583,549.853 805.044,528.429 805.506,501.581 805.967,480.76 806.429,467.261 806.891,457.01 807.352,447.543 807.814,440.873 808.276,438.725 808.737,450.369 809.199,470.997 809.661,499.244 810.122,521.832 810.584,539.278 811.046,550.949 811.507,547.995 811.969,538.573 812.431,514.249 812.892,496.783 813.354,487.003 813.816,471.863 814.277,463.051 814.739,466.254 815.201,479.912 815.662,485.504 816.124,487.445 816.585,492.25 817.047,503.386 817.509,507.886 817.97,518.4 818.432,511.43 818.894,508.797 819.355,502.793 819.817,492.685 820.279,492.227 820.74,499.815 821.202,496.832 821.664,486.554 822.125,477.74 822.587,481.119 823.049,482.394 823.51,489.734 823.972,489.15 824.434,491.641 824.895,493.976 825.357,501.097 825.819,507.648 826.28,514.065 826.742,524.465 827.204,520.069 827.665,519.398 828.127,514.053 828.588,508.274 829.05,502.981 829.512,503.305 829.973,498.277 830.435,498.63 830.897,497.894 831.358,491.282 831.82,494.847 832.282,498.614 832.743,496.566 833.205,499.977 833.667,503.924 834.128,502.747 834.59,498.725 835.052,486.313 835.513,469.554 835.975,458.319 836.437,448.782 836.898,435.151 837.36,445.35 837.822,450.523 838.283,473.683 838.745,495.193 839.206,511.385 839.668,531.756 840.13,548.997 840.591,550.607 841.053,534.563 841.515,512.154 841.976,479.575 842.438,454.162 842.9,427.515 843.361,406.721 843.823,392.382 844.285,380.846 844.746,382.655 845.208,394.356 845.67,405.278 846.131,423.748 846.593,446.291 847.055,465.294 847.516,490.599 847.978,511.081 848.44,533.121 848.901,543.726 849.363,547.503 849.824,543.803 850.286,551.295 850.748,546.432 851.209,546.511 851.671,538.246 852.133,525.069 852.594,518.66 853.056,522.436 853.518,524.606 853.979,528.395 854.441,528.855 854.903,531.889 855.364,541.046 855.826,540.691 856.288,540.449 856.749,530.757 857.211,520.536 857.673,498.624 858.134,474.487 858.596,454.192 859.058,440.022 859.519,428.36 859.981,435.065 860.442,459.191 860.904,494.218 861.366,532.901 861.827,562.019 862.289,577.37 862.751,580.893 863.212,577.211 863.674,563.515 864.136,533.743 864.597,509.298 865.059,488.921 865.521,478.867 865.982,480.75 866.444,486.959 866.906,496.37 867.367,493.533 867.829,492.261 868.291,489.122 868.752,485.029 869.214,488.279 869.676,493.58 870.137,501.211 870.599,504.752 871.06,505.114 871.522,499.554 871.984,491.306 872.445,481.822 872.907,475.392 873.369,466.018 873.83,457.969 874.292,459.93 874.754,461.402 875.215,461.729 875.677,475.137 876.139,487.183 876.6,506.007 877.062,519.563 877.524,526.343 877.985,519.747 878.447,508.779 878.909,497.54 879.37,495.431 879.832,490.762 880.294,497.747 880.755,508.755 881.217,532.009 881.678,539.029 882.14,548.118 882.602,539.188 883.063,531.661 883.525,510.736 883.987,481.194 884.448,444.555 884.91,417.525 885.372,399.126 885.833,387.193 886.295,390.862 886.757,402.301 887.218,415.157 887.68,432.224 888.142,441.458 888.603,461.928 889.065,489.841 889.527,516.31 889.988,541.555 890.45,561.278 890.912,581.678 891.373,602.617 891.835,621.195 892.297,635.623 892.758,636.62 893.22,632.056 893.681,625.937 894.143,611.619 894.605,578.066 895.066,549.014 895.528,511.067 895.99,486.611 896.451,462.618 896.913,449.774 897.375,438.356 897.836,435.507 898.298,436.152 898.76,437.468 899.221,440.015 899.683,448.064 900.145,461.911 900.606,469.993 901.068,481.145 901.53,494.407 901.991,504.24 902.453,512.271 902.915,507.466 903.376,499.988 903.838,491.196 904.299,487.095 904.761,494.887 905.223,502.484 905.684,507.78 906.146,501.026 906.608,498.561 907.069,499.348 907.531,498.762 907.993,490.972 908.454,480.728 908.916,463.105 909.378,449.914 909.839,451.362 910.301,452.761 910.763,466.096 911.224,474.846 911.686,482.848 912.148,502.997 912.609,534.371 913.071,559.433 913.533,577.977 913.994,577.305 914.456,569.253 914.917,559.041 915.379,542.319 915.841,524.161 916.302,498.974 916.764,471.028 917.226,453.687 917.687,436.31 918.149,428.332 918.611,420.957 919.072,423.177 919.534,427.352 919.996,437.086 920.457,467.464 920.919,494.374 921.381,511.818 921.842,523.718 922.304,533.969 922.766,544.092 923.227,552.125 923.689,552.314 924.151,542.839 924.612,532.42 925.074,519.131 925.535,510.642 925.997,508.278 926.459,529.341 926.92,557.971 927.382,574.022 927.844,584.373 928.305,594.722 928.767,599.012 929.229,602.579 929.69,607.653 930.152,604.362 930.614,588.992 931.075,569.647 931.537,553.116 931.999,531.801 932.46,518.74 932.922,509.265 933.384,497.744 933.845,481.211 934.307,460.779 934.769,454.628 935.23,453.733 935.692,441.933 936.153,446.207 936.615,462.692 937.077,475.913 937.538,490.722 938,494.829 938.462,505.788 938.923,528.278 939.385,552.976 939.847,576.179 940.308,592.437 940.77,604.49 941.232,604.077 941.693,591.186 942.155,566.582 942.617,543.295 943.078,514.703 943.54,490.035 944.002,481.344 944.463,493.951 944.925,508.7 945.387,539.217 945.848,568.544 946.31,589.767 946.771,596.341 947.233,601.672 947.695,603.486 948.156,590.648 948.618,575.701 949.08,552.286 949.541,518.933 950.003,492.537 950.465,471.127 950.926,447.187 951.388,430.026 951.85,415.948 952.311,418.626 952.773,433.745 953.235,471.037 953.696,511.292 954.158,543.999 954.62,570.045 955.081,577.895 955.543,577.849 956.005,568.484 956.466,537.548 956.928,514.607 957.389,502.124 957.851,489.605 958.313,488.406 958.774,486.772 959.236,485.631 959.698,479.393 960.159,476.595 960.621,463.842 961.083,458.034 961.544,447 962.006,447.217 962.468,458.158 962.929,470.051 963.391,486.425 963.853,503.19 964.314,519 964.776,531.674 965.238,541.496 965.699,543.658 966.161,534.801 966.623,521.703 967.084,517.929 967.546,513.497 968.008,513.606 968.469,501.476 968.931,502.795 969.392,507.116 969.854,514.338 970.316,526.091 970.777,538.167 971.239,537.635 971.701,540.419 972.162,532.462 972.624,523.034 973.086,520.482 973.547,518.831 974.009,516.284 974.471,510.977 974.932,498.832 975.394,480.572 975.856,463.744 976.317,454.85 976.779,452.023 977.241,448.626 977.702,439.212 978.164,439.069 978.626,437.132 979.087,432.571 979.549,435.414 980.01,445.982 980.472,454.137 980.934,456.482 981.395,470.932 981.857,485.264 982.319,506.482 982.78,519.34 983.242,520.364 983.704,531.523 984.165,543.162 984.627,549.685 985.089,541.763 985.55,531.12 986.012,516.206 986.474,505.941 986.935,497.682 987.397,498.99 987.859,506.856 988.32,504.939 988.782,507.273 989.244,510.77 989.705,505.227 990.167,496.853 990.628,486.708 991.09,484.976 991.552,493.261 992.013,514.736 992.475,528.891 992.937,547.335 993.398,568.632 993.86,577.384 994.322,565.8 994.783,552.213 995.245,534.627 995.707,507.42 996.168,486.327 996.63,477.382 997.092,466.608 997.553,465.069 998.015,474.689 998.477,477.264 998.938,481.101 999.4,483.393 999.862,487.558 1000.32,496.677 1000.78,508.211 1001.25,526.036 1001.71,537.848 1002.17,534.697 1002.63,524.986 1003.09,520.244 1003.55,509.762 1004.02,495.623 1004.48,473.385 1004.94,453.881 1005.4,442.408 1005.86,431.932 1006.32,426.351 1006.79,423.931 1007.25,422.111 1007.71,432.843 1008.17,446.778 1008.63,469.09 1009.09,496.598 1009.56,514.897 1010.02,538.538 1010.48,563.453 1010.94,577.102 1011.4,572.973 1011.86,568.184 1012.33,560.931 1012.79,549.23 1013.25,533.502 1013.71,514.889 1014.17,498.663 1014.63,498.432 1015.1,492.101 1015.56,478.541 1016.02,464.249 1016.48,454.477 1016.94,444.512 1017.4,444.91 1017.87,473.611 1018.33,503.349 1018.79,541.695 1019.25,575.497 1019.71,602.477 1020.17,610.309 1020.64,609.68 1021.1,594.008 1021.56,567.374 1022.02,537.995 1022.48,518.95 1022.94,499.97 1023.41,480.939 1023.87,465.407 1024.33,449.742 1024.79,434.175 1025.25,428.116 1025.71,425.394 1026.18,426.041 1026.64,432.069 1027.1,443.468 1027.56,457.33 1028.02,455.234 1028.48,451.191 1028.95,440.614 1029.41,439.391 1029.87,445.181 1030.33,448.118 1030.79,459.35 1031.25,478.448 1031.72,492.004 1032.18,506.594 1032.64,511.108 1033.1,506.641 1033.56,489.382 1034.02,464.137 1034.49,446.586 1034.95,431.529 1035.41,427.618 1035.87,425.576 1036.33,433.216 1036.79,443.722 1037.26,459.853 1037.72,474.724 1038.18,476.773 1038.64,475.67 1039.1,473.872 1039.56,469.587 1040.03,472.197 1040.49,472.968 1040.95,471.736 1041.41,471.551 1041.87,468.202 1042.33,470.377 1042.8,465.808 1043.26,466.86 1043.72,472.586 1044.18,477.57 1044.64,485.899 1045.1,498.656 1045.57,503.744 1046.03,502.585 1046.49,511.191 1046.95,501.048 1047.41,492.485 1047.87,486.126 1048.34,486.409 1048.8,491.086 1049.26,502.894 1049.72,513.86 1050.18,517.097 1050.64,520.092 1051.1,515.036 1051.57,516.821 1052.03,513.771 1052.49,507.43 1052.95,494.667 1053.41,479.867 1053.87,466.317 1054.34,455.013 1054.8,445.076 1055.26,442.014 1055.72,453.959 1056.18,485.484 1056.64,516.124 1057.11,541.733 1057.57,567.39 1058.03,596.705 1058.49,607.13 1058.95,610.848 1059.41,601.904 1059.88,589.69 1060.34,568.77 1060.8,538.977 1061.26,522.727 1061.72,513.551 1062.18,502.639 1062.65,490.763 1063.11,470.666 1063.57,466.846 1064.03,460.032 1064.49,462.99 1064.95,469.363 1065.42,474.795 1065.88,479.244 1066.34,479.43 1066.8,481.994 1067.26,481.126 1067.72,475.75 1068.19,475.074 1068.65,481.174 1069.11,480.61 1069.57,481.297 1070.03,483.451 1070.49,489.586 1070.96,504.451 1071.42,516.553 1071.88,529.211 1072.34,534.69 1072.8,539.752 1073.26,547.408 1073.73,554.026 1074.19,548.871 1074.65,541.086 1075.11,530.181 1075.57,528.14 1076.03,517.509 1076.5,502.309 1076.96,488.996 1077.42,474.453 1077.88,455.691 1078.34,447.734 1078.8,449.654 1079.27,453.448 1079.73,460.162 1080.19,464.708 1080.65,470.597 1081.11,483.04 1081.57,492.259 1082.04,504.457 1082.5,513.296 1082.96,504.166 1083.42,495.611 1083.88,481.373 1084.34,468.046 1084.81,468.809 1085.27,471.575 1085.73,481.519 1086.19,496.89 1086.65,512.739 1087.11,523.508 1087.58,530.29 1088.04,541.094 1088.5,556.194 1088.96,556.394 1089.42,549.374 1089.88,533.983 1090.35,526.691 1090.81,517.57 1091.27,494.145 1091.73,470.694 1092.19,447.816 1092.65,437.395 1093.12,440.977 1093.58,452.02 1094.04,458.894 1094.5,474.868 1094.96,495.268 1095.42,521.513 1095.89,548.397 1096.35,559.301 1096.81,559.025 1097.27,553.434 1097.73,542.63 1098.19,536.114 1098.66,530.397 1099.12,517.05 1099.58,505.857 1100.04,503.74 1100.5,482.606 1100.96,459.767 1101.43,447.253 1101.89,438.608 1102.35,429.567 1102.81,420.307 1103.27,420.825 1103.73,432.646 1104.19,455.753 1104.66,479.265 1105.12,509.457 1105.58,532.572 1106.04,547.947 1106.5,564.838 1106.96,582.529 1107.43,587.748 1107.89,588.268 1108.35,576.798 1108.81,559.167 1109.27,525.231 1109.73,498.247 1110.2,481.066 1110.66,463.571 1111.12,449.768 1111.58,442.593 1112.04,442.569 1112.5,439.013 1112.97,435.353 1113.43,437.82 1113.89,439.669 1114.35,433.509 1114.81,434.056 1115.27,429.934 1115.74,432.814 1116.2,440.896 1116.66,455.416 1117.12,478.146 1117.58,492.968 1118.04,511.412 1118.51,529.773 1118.97,541.653 1119.43,544.55 1119.89,529.232 1120.35,509.596 1120.81,496.235 1121.28,483.513 1121.74,466.319 1122.2,464.381 1122.66,471.459 1123.12,470.613 1123.58,461.254 1124.05,456.726 1124.51,460.177 1124.97,470.746 1125.43,482.051 1125.89,493.656 1126.35,503.964 1126.82,500.917 1127.28,496.633 1127.74,492.52 1128.2,488.952 1128.66,471.436 1129.12,455.723 1129.59,450.906 1130.05,451.556 1130.51,457.685 1130.97,466.757 1131.43,473.674 1131.89,474.595 1132.36,485.34 1132.82,506.585 1133.28,520.99 1133.74,530.088 1134.2,530.076 1134.66,527.06 1135.13,536.547 1135.59,535.2 1136.05,529.441 1136.51,527.852 1136.97,518.927 1137.43,502.827 1137.9,479.333 1138.36,453.555 1138.82,432.23 1139.28,407.829 1139.74,394.188 1140.2,391.539 1140.67,401.801 1141.13,430.18 1141.59,462.328 1142.05,492.742 1142.51,512.834 1142.97,527.239 1143.44,541.857 1143.9,547.608 1144.36,546.044 1144.82,527.593 1145.28,503.295 1145.74,471.115 1146.21,445.238 1146.67,424.901 1147.13,408.377 1147.59,398.501 1148.05,404.738 1148.51,431.316 1148.98,456.43 1149.44,479.962 1149.9,493.85 1150.36,495.807 1150.82,495.459 1151.28,488.719 1151.75,482.738 1152.21,474.36 1152.67,480.199 1153.13,495.478 1153.59,520.941 1154.05,545.929 1154.52,557.773 1154.98,562.134 1155.44,542.899 1155.9,528.212 1156.36,504.127 1156.82,476.404 1157.29,447.955 1157.75,428.908 1158.21,422.394 1158.67,419.226 1159.13,425.016 1159.59,444.12 1160.05,463.422 1160.52,486.477 1160.98,504.499 1161.44,520.674 1161.9,523.069 1162.36,516.553 1162.82,502.26 1163.29,488.724 1163.75,480.202 1164.21,465.286 1164.67,459.203 1165.13,458.206 1165.59,455.517 1166.06,466.207 1166.52,476.942 1166.98,494.805 1167.44,513.513 1167.9,525.491 1168.36,529.251 1168.83,531.742 1169.29,530.815 1169.75,530.557 1170.21,526.683 1170.67,522.191 1171.13,512.463 1171.6,504.92 1172.06,494.867 1172.52,484.823 1172.98,475.57 1173.44,466.766 1173.9,459.334 1174.37,455.964 1174.83,460.049 1175.29,469.69 1175.75,480.276 1176.21,493.738 1176.67,502.604 1177.14,513.258 1177.6,520.116 1178.06,531.532 1178.52,541.579 1178.98,536.707 1179.44,537.606 1179.91,539.573 1180.37,535.81 1180.83,533.632 1181.29,528.988 1181.75,521.18 1182.21,501.12 1182.68,495.459 1183.14,489.27 1183.6,483.133 1184.06,477.979 1184.52,479.054 1184.98,482.08 1185.45,491.117 1185.91,495.244 1186.37,493.241 1186.83,492.749 1187.29,502.431 1187.75,506.724 1188.22,519.575 1188.68,525.88 1189.14,532.197 1189.6,540.064 1190.06,541.851 1190.52,531.689 1190.99,519.772 1191.45,512.485 1191.91,506.361 1192.37,499.845 1192.83,492.564 1193.29,484.913 1193.76,472.495 1194.22,451.992 1194.68,432.519 1195.14,415.534 1195.6,394.747 1196.06,391.478 1196.53,392.597 1196.99,400.157 1197.45,410.364 1197.91,427.121 1198.37,439.329 1198.83,463.951 1199.3,488.723 1199.76,508.156 1200.22,525.511 1200.68,534.168 1201.14,535.581 1201.6,532.812 1202.07,534.942 1202.53,544.806 1202.99,566.451 1203.45,579.75 1203.91,582.558 1204.37,587.057 1204.84,598.254 1205.3,602.462 1205.76,598.288 1206.22,588.493 1206.68,578.601 1207.14,555.047 1207.61,539.245 1208.07,528.249 1208.53,521.91 1208.99,512.688 1209.45,509.257 1209.91,507.778 1210.38,510.775 1210.84,513.555 1211.3,511.508 1211.76,500.155 1212.22,485.55 1212.68,465.77 1213.14,443.39 1213.61,431.453 1214.07,435.902 1214.53,450.314 1214.99,475.137 1215.45,509.854 1215.91,547.174 1216.38,579.157 1216.84,597.927 1217.3,613.291 1217.76,611.627 1218.22,594.913 1218.68,564.77 1219.15,531.424 1219.61,516.761 1220.07,513.535 1220.53,509.691 1220.99,506.237 1221.45,494.901 1221.92,485.421 1222.38,473.889 1222.84,462.524 1223.3,450.254 1223.76,445.107 1224.22,445.387 1224.69,440.769 1225.15,437.817 1225.61,428.87 1226.07,427.311 1226.53,433.946 1226.99,448.702 1227.46,458.52 1227.92,454.787 1228.38,451.151 1228.84,453.763 1229.3,460.08 1229.76,468.333 1230.23,484.926 1230.69,505.977 1231.15,526.273 1231.61,535.829 1232.07,537.044 1232.53,532.659 1233,528.612 1233.46,534.09 1233.92,535.012 1234.38,534.923 1234.84,532.785 1235.3,539.655 1235.77,557.115 1236.23,572.518 1236.69,574.441 1237.15,568.155 1237.61,554.344 1238.07,533.729 1238.54,506.5 1239,483.434 1239.46,463.947 1239.92,457.343 1240.38,461.531 1240.84,461.685 1241.31,463.438 1241.77,465.352 1242.23,467.814 1242.69,467.349 1243.15,468.635 1243.61,484.371 1244.08,495.501 1244.54,511.894 1245,524.565 1245.46,533.306 1245.92,534.477 1246.38,529.156 1246.85,524.35 1247.31,519.549 1247.77,507.041 1248.23,498.907 1248.69,487.759 1249.15,485.286 1249.62,485.622 1250.08,492.175 1250.54,496.645 1251,497.136 1251.46,507.824 1251.92,512.977 1252.39,520.977 1252.85,529.244 1253.31,541.475 1253.77,545.804 1254.23,549.379 1254.69,548.864 1255.16,552.436 1255.62,556.401 1256.08,559.493 1256.54,557.898 1257,557.952 1257.46,559.217 1257.93,555.949 1258.39,538.347 1258.85,516.061 1259.31,492.823 1259.77,466.555 1260.23,444.029 1260.7,424.566 1261.16,420.455 1261.62,423.424 1262.08,439.04 1262.54,453.456 1263,471.377 1263.47,476.226 1263.93,467.29 1264.39,451.636 1264.85,425.075 1265.31,415.797 1265.77,412.581 1266.23,427.89 1266.7,449.515 1267.16,474.062 1267.62,499.637 1268.08,523.295 1268.54,534.334 1269,530.299 1269.47,525.407 1269.93,515.324 1270.39,506.711 1270.85,501.901 1271.31,492.078 1271.77,484.001 1272.24,482.736 1272.7,479.534 1273.16,476.921 1273.62,481.663 1274.08,481.62 1274.54,487.167 1275.01,484.283 1275.47,482.102 1275.93,478.002 1276.39,471.215 1276.85,472.8 1277.31,484 1277.78,505.153 1278.24,530.691 1278.7,549.325 1279.16,556.654 1279.62,564.868 1280.08,564.627 1280.55,557.245 1281.01,538.194 1281.47,515.549 1281.93,497.491 1282.39,482.61 1282.85,469.242 1283.32,462.432 1283.78,462.883 1284.24,464.768 1284.7,461.902 1285.16,450.117 1285.62,441.618 1286.09,443.481 1286.55,439.322 1287.01,448.285 1287.47,458.67 1287.93,472.128 1288.39,488.582 1288.86,508.048 1289.32,527.059 1289.78,546.422 1290.24,554.299 1290.7,553.76 1291.16,542.574 1291.63,526.985 1292.09,509.412 1292.55,496.81 1293.01,484.828 1293.47,487.143 1293.93,499.847 1294.4,518.227 1294.86,542.378 1295.32,573.703 1295.78,600.738 1296.24,606.808 1296.7,598.004 1297.17,575.352 1297.63,539.228 1298.09,496.118 1298.55,458.503 1299.01,424.636 1299.47,394.186 1299.94,383.159 1300.4,389.096 1300.86,401.876 1301.32,421.658 1301.78,444.184 1302.24,462.426 1302.71,480.977 1303.17,499.047 1303.63,519.494 1304.09,540.491 1304.55,563.736 1305.01,566.177 1305.48,571.631 1305.94,576.489 1306.4,573.879 1306.86,561.308 1307.32,546.404 1307.78,530.423 1308.25,523.67 1308.71,509.963 1309.17,499.627 1309.63,479.155 1310.09,462.438 1310.55,448.152 1311.02,440.118 1311.48,430.734 1311.94,422.864 1312.4,427.361 1312.86,436.433 1313.32,458.972 1313.79,474.255 1314.25,492.646 1314.71,512.882 1315.17,536.949 1315.63,558.663 1316.09,563.545 1316.56,549.755 1317.02,529.912 1317.48,517.579 1317.94,511.436 1318.4,507.536 1318.86,501.625 1319.33,504.983 1319.79,505.897 1320.25,504.002 1320.71,497.72 1321.17,504.379 1321.63,507.507 1322.09,515.769 1322.56,517.143 1323.02,514.921 1323.48,517.467 1323.94,521.741 1324.4,518.969 1324.86,514.449 1325.33,517.451 1325.79,512.918 1326.25,512.71 1326.71,506.406 1327.17,494.85 1327.63,489.608 1328.1,496.768 1328.56,498.26 1329.02,507.528 1329.48,515.654 1329.94,513.355 1330.4,511.065 1330.87,504.592 1331.33,486.18 1331.79,477.378 1332.25,468.094 1332.71,469.458 1333.17,478.2 1333.64,493.627 1334.1,506.538 1334.56,528.235 1335.02,548.265 1335.48,572.105 1335.94,587.025 1336.41,591.141 1336.87,593.368 1337.33,582.467 1337.79,557.675 1338.25,533.278 1338.71,513.273 1339.18,499.719 1339.64,481.098 1340.1,459.867 1340.56,438.377 1341.02,414.912 1341.48,398.013 1341.95,393.587 1342.41,404.926 1342.87,432.162 1343.33,459.655 1343.79,486.433 1344.25,512.204 1344.72,534.723 1345.18,552.921 1345.64,564.699 1346.1,565.781 1346.56,555.957 1347.02,534.24 1347.49,512.427 1347.95,494.218 1348.41,486.582 1348.87,482.546 1349.33,483.568 1349.79,474.628 1350.26,465.311 1350.72,447.404 1351.18,435.806 1351.64,428.587 1352.1,433.573 1352.56,448.553 1353.03,475.552 1353.49,499.895 1353.95,527.572 1354.41,551.273 1354.87,573.106 1355.33,589.288 1355.8,602.99 1356.26,607.435 1356.72,613.58 1357.18,612.939 1357.64,611.224 1358.1,603.205 1358.57,584.648 1359.03,562.239 1359.49,546.885 1359.95,539.04 1360.41,527.286 1360.87,518.508 1361.34,505.27 1361.8,483.907 1362.26,468.409 1362.72,452.021 1363.18,445.637 1363.64,450.381 1364.11,449.313 1364.57,454.066 1365.03,460.803 1365.49,464.322 1365.95,470.153 1366.41,474.095 1366.88,484.796 1367.34,498.587 1367.8,509.212 1368.26,513.383 1368.72,528.716 1369.18,548.261 1369.65,564.318 1370.11,577.297 1370.57,582.482 1371.03,574.232 1371.49,554.215 1371.95,535.279 1372.42,509.439 1372.88,484.221 1373.34,462.829 1373.8,440.468 1374.26,435.125 1374.72,438.04 1375.18,450.696 1375.65,465.763 1376.11,474.419 1376.57,482.013 1377.03,485.402 1377.49,496.396 1377.95,512.63 1378.42,513.072 1378.88,515.911 1379.34,505.943 1379.8,491.349 1380.26,475.558 1380.72,456.864 1381.19,441.751 1381.65,441.339 1382.11,453.459 1382.57,468.403 1383.03,486.322 1383.49,506.025 1383.96,522.704 1384.42,535.781 1384.88,541.179 1385.34,538.481 1385.8,529.191 1386.26,529.486 1386.73,516.643 1387.19,509.588 1387.65,498.057 1388.11,480.819 1388.57,469.509 1389.03,470.991 1389.5,479.499 1389.96,478.441 1390.42,485.787 1390.88,494.805 1391.34,504.813 1391.8,523.834 1392.27,524.588 1392.73,527.583 1393.19,521.957 1393.65,512.07 1394.11,497.993 1394.57,492.464 1395.04,479.766 1395.5,468.741 1395.96,465.617 1396.42,474.648 1396.88,492.107 1397.34,514.75 1397.81,526.114 1398.27,523.588 1398.73,523.361 1399.19,506.449 1399.65,488.53 1400.11,471.125 1400.58,454.955 1401.04,449.662 1401.5,455.485 1401.96,475.582 1402.42,486.336 1402.88,506.235 1403.35,522.763 1403.81,537.43 1404.27,546.073 1404.73,537.565 1405.19,532.112 1405.65,526.533 1406.12,514.488 1406.58,508.177 1407.04,499.273 1407.5,494.913 1407.96,491.893 1408.42,497.649 1408.89,503.162 1409.35,507.35 1409.81,505.157 1410.27,495.321 1410.73,491.644 1411.19,482.587 1411.66,477.106 1412.12,485.036 1412.58,494.642 1413.04,494.328 1413.5,491.238 1413.96,494.546 1414.43,499.927 1414.89,512.246 1415.35,518.458 1415.81,515.657 1416.27,517.145 1416.73,513.889 1417.2,512.205 1417.66,502.039 1418.12,494.924 1418.58,487.954 1419.04,481.786 1419.5,485.183 1419.97,490.38 1420.43,507.006 1420.89,512.679 1421.35,519.186 1421.81,521.646 1422.27,515.002 1422.74,503.272 1423.2,492.295 1423.66,491.194 1424.12,486.194 1424.58,486.4 1425.04,477.875 1425.51,464.69 1425.97,449.883 1426.43,449.011 1426.89,459.846 1427.35,474.584 1427.81,488.903 1428.28,491.065 1428.74,490.134 1429.2,488.436 1429.66,493.836 1430.12,496.507 1430.58,494.44 1431.04,487.018 1431.51,479.438 1431.97,480.498 1432.43,477.938 1432.89,479.371 1433.35,485.791 1433.81,495.152 1434.28,503.162 1434.74,511.478 1435.2,522.945 1435.66,536.015 1436.12,541.596 1436.58,540.723 1437.05,539.644 1437.51,539.444 1437.97,537.444 1438.43,528.048 1438.89,515.59 1439.35,499.563 1439.82,485.211 1440.28,473.37 1440.74,475.981 1441.2,480.061 1441.66,489.733 1442.12,500.16 1442.59,498.704 1443.05,502.881 1443.51,499.947 1443.97,494.117 1444.43,492.203 1444.89,487.825 1445.36,485.186 1445.82,482.582 1446.28,482.633 1446.74,488.328 1447.2,494.051 1447.66,496.41 1448.13,505.884 1448.59,511.763 1449.05,519.638 1449.51,529.797 1449.97,534.501 1450.43,529.403 1450.9,527.281 1451.36,521.72 1451.82,502.414 1452.28,475.795 1452.74,444.509 1453.2,412.019 1453.67,380.437 1454.13,368.01 1454.59,370.46 1455.05,394.189 1455.51,419.558 1455.97,444.488 1456.44,471.844 1456.9,494.107 1457.36,507.035 1457.82,507.144 1458.28,510.931 1458.74,504.846 1459.21,519.63 1459.67,532.865 1460.13,549.592 1460.59,565.287 1461.05,576.099 1461.51,573.729 1461.98,568.778 1462.44,551.342 1462.9,534.603 1463.36,511.845 1463.82,500.258 1464.28,486.43 1464.75,490.746 1465.21,502.732 1465.67,517.505 1466.13,532.054 1466.59,533.659 1467.05,529.576 1467.52,518.736 1467.98,504.031 1468.44,487.215 1468.9,479.936 1469.36,483.766 1469.82,489.911 1470.29,504.376 1470.75,521.102 1471.21,532.501 1471.67,529.636 1472.13,525.518 1472.59,522.62 1473.06,511.798 1473.52,500.285 1473.98,495.979 1474.44,490.173 1474.9,489.108 1475.36,484.305 1475.83,470.396 1476.29,467.02 1476.75,463.35 1477.21,468.184 1477.67,477.102 1478.13,490.364 1478.6,510.379 1479.06,525.05 1479.52,536.87 1479.98,547.378 1480.44,554.69 1480.9,558.036 1481.37,551.995 1481.83,533.89 1482.29,520.784 1482.75,509.174 1483.21,495.756 1483.67,470.297 1484.13,457.735 1484.6,449.151 1485.06,447 1485.52,460.198 1485.98,473.328 1486.44,493.193 1486.9,506.624 1487.37,518.577 1487.83,526.471 1488.29,533.587 1488.75,535.633 1489.21,537.966 1489.67,538.055 1490.14,541.062 1490.6,536.897 1491.06,525.573 1491.52,506.979 1491.98,487.454 1492.44,472.84 1492.91,466.31 1493.37,461.778 1493.83,459.259 1494.29,463.396 1494.75,471.094 1495.21,480.07 1495.68,511.58 1496.14,538.904 1496.6,558.407 1497.06,575.798 1497.52,587.798 1497.98,593.735 1498.45,595.284 1498.91,588.292 1499.37,578.533 1499.83,551.526 1500.29,515.091 1500.75,470.98 1501.22,436.405 1501.68,407.784 1502.14,393.026 1502.6,385.996 1503.06,387.511 1503.52,398.929 1503.99,423.961 1504.45,456.004 1504.91,482.874 1505.37,514.149 1505.83,541.356 1506.29,564.888 1506.76,573.004 1507.22,566.317 1507.68,547.882 1508.14,519.52 1508.6,488.225 1509.06,462.287 1509.53,451.451 1509.99,446.29 1510.45,459.704 1510.91,479.866 1511.37,492.779 1511.83,512.589 1512.3,528.576 1512.76,532.371 1513.22,531.074 1513.68,540.617 1514.14,527.099 1514.6,515.16 1515.07,499.181 1515.53,486.666 1515.99,479.793 1516.45,476.321 1516.91,481.421 1517.37,489.911 1517.84,502.475 1518.3,511.913 1518.76,523.141 1519.22,543.152 1519.68,549.925 1520.14,554.055 1520.61,552.152 1521.07,532.519 1521.53,510.129 1521.99,495.004 1522.45,480.576 1522.91,479.962 1523.38,488.219 1523.84,501.069 1524.3,515.571 1524.76,535.999 1525.22,551.427 1525.68,553.008 1526.15,556.205 1526.61,554.951 1527.07,544.699 1527.53,531.991 1527.99,511.048 1528.45,495.669 1528.92,480.321 1529.38,461.379 1529.84,440.21 1530.3,422.843 1530.76,418.352 1531.22,432.323 1531.69,454.4 1532.15,486.924 1532.61,521.888 1533.07,557.741 1533.53,592.813 1533.99,618.169 1534.46,640.505 1534.92,647.552 1535.38,646.897 1535.84,621.797 1536.3,598.456 1536.76,557.483 1537.22,510.52 1537.69,464.511 1538.15,422.521 1538.61,394.237 1539.07,382.828 1539.53,377.792 1539.99,386.561 1540.46,405.57 1540.92,439.906 1541.38,481.997 1541.84,531.534 1542.3,584.014 1542.76,622.638 1543.23,654.115 1543.69,661.378 1544.15,651.548 1544.61,629.885 1545.07,601.48 1545.53,569.862 1546,537.943 1546.46,519.532 1546.92,498.487 1547.38,477.075 1547.84,458.549 1548.3,457.25 1548.77,456.456 1549.23,455.003 1549.69,461.238 1550.15,460.272 1550.61,465.49 1551.07,473.184 1551.54,489.841 1552,489.754 1552.46,484.365 1552.92,473.247 1553.38,451.661 1553.84,426.069 1554.31,407.198 1554.77,406.223 1555.23,410.6 1555.69,408.45 1556.15,400.11 1556.61,396.461 1557.08,406.365 1557.54,418.399 1558,430.351 1558.46,441.36 1558.92,446.122 1559.38,456.95 1559.85,468.887 1560.31,483.464 1560.77,506.27 1561.23,529.039 1561.69,563.718 1562.15,592.872 1562.62,610.812 1563.08,619.325 1563.54,625.74 1564,620.246 1564.46,606.244 1564.92,586.55 1565.39,561.003 1565.85,526.295 1566.31,495.039 1566.77,462.043 1567.23,421.424 1567.69,392.418 1568.16,372.83 1568.62,363.434 1569.08,368.503 1569.54,383.466 1570,411.19 1570.46,429.121 1570.93,455.078 1571.39,477.074 1571.85,504.375 1572.31,528.257 1572.77,551.245 1573.23,567.02 1573.7,572.512 1574.16,566.764 1574.62,556.676 1575.08,544.508 1575.54,521.485 1576,505.829 1576.47,487.328 1576.93,472.225 1577.39,467.237 1577.85,459.165 1578.31,455.184 1578.77,462.949 1579.24,462.259 1579.7,452.555 1580.16,450.87 1580.62,446.022 1581.08,447.416 1581.54,453.091 1582.01,457.734 1582.47,468.554 1582.93,487.325 1583.39,510.439 1583.85,533.109 1584.31,548.66 1584.78,550.949 1585.24,541.891 1585.7,532.201 1586.16,524.704 1586.62,513.451 1587.08,505.913 1587.55,499.096 1588.01,505.651 1588.47,513.562 1588.93,525.814 1589.39,537.292 1589.85,539.17 1590.32,534.632 1590.78,523.002 1591.24,504.802 1591.7,485.823 1592.16,463.747 1592.62,443.148 1593.08,409.876 1593.55,388.242 1594.01,367.49 1594.47,354.064 1594.93,356.971 1595.39,376.587 1595.85,399.044 1596.32,421.723 1596.78,445.919 1597.24,468.06 1597.7,490.926 1598.16,505.998 1598.62,518.948 1599.09,527.276 1599.55,520.475 1600.01,520.183 1600.47,517.788 1600.93,520.909 1601.39,527.344 1601.86,543.349 1602.32,550.084 1602.78,552.112 1603.24,537.984 1603.7,528.568 1604.16,527.042 1604.63,518.061 1605.09,507.834 1605.55,497.275 1606.01,485.524 1606.47,475.474 1606.93,468.08 1607.4,470.101 1607.86,474.029 1608.32,471.443 1608.78,458.37 1609.24,450.59 1609.7,437.658 1610.17,429.917 1610.63,432.871 1611.09,442.77 1611.55,466.606 1612.01,495.129 1612.47,514.572 1612.94,538.591 1613.4,551.981 1613.86,556.336 1614.32,560.248 1614.78,557.676 1615.24,555.322 1615.71,555.275 1616.17,554.102 1616.63,551.715 1617.09,548.7 1617.55,541.025 1618.01,533.019 1618.48,518.666 1618.94,506.865 1619.4,498.142 1619.86,479.323 1620.32,471.471 1620.78,477.484 1621.25,490.45 1621.71,503.71 1622.17,512.542 1622.63,516.79 1623.09,514.217 1623.55,499.875 1624.02,492.178 1624.48,471.588 1624.94,452.065 1625.4,454.769 1625.86,453.089 1626.32,461.206 1626.79,478.09 1627.25,486.24 1627.71,504.558 1628.17,510.258 1628.63,510.185 1629.09,497.656 1629.56,488.601 1630.02,477.674 1630.48,476.896 1630.94,470.876 1631.4,464.965 1631.86,462.624 1632.33,462.518 1632.79,460.292 1633.25,456.931 1633.71,452.055 1634.17,444.619 1634.63,441.565 1635.1,449.556 1635.56,452.211 1636.02,465.663 1636.48,483.174 1636.94,501.205 1637.4,512.777 1637.87,512.007 1638.33,506.531 1638.79,504.841 1639.25,489.706 1639.71,473.598 1640.17,461.431 1640.64,445.648 1641.1,435.074 1641.56,430.677 1642.02,439.251 1642.48,457.404 1642.94,475.29 1643.41,500.236 1643.87,526.447 1644.33,551.626 1644.79,571.067 1645.25,595.453 1645.71,603.469 1646.17,597.826 1646.64,579.762 1647.1,553.806 1647.56,519.935 1648.02,475.286 1648.48,424.88 1648.94,377.743 1649.41,344.818 1649.87,331.549 1650.33,329.386 1650.79,346.064 1651.25,373.309 1651.71,404.865 1652.18,432.411 1652.64,478.401 1653.1,521.118 1653.56,563.367 1654.02,586.64 1654.48,598.846 1654.95,593.152 1655.41,566.347 1655.87,533.589 1656.33,504.231 1656.79,474.563 1657.25,455.007 1657.72,445.887 1658.18,442.512 1658.64,447.666 1659.1,459.758 1659.56,473.812 1660.02,489.28 1660.49,514.095 1660.95,531.561 1661.41,535.945 1661.87,527.072 1662.33,512.081 1662.79,494.536 1663.26,470.266 1663.72,443.51 1664.18,424.123 1664.64,414.222 1665.1,413.455 1665.56,421.348 1666.03,435.913 1666.49,458.089 1666.95,477.316 1667.41,502.995 1667.87,540.717 1668.33,565.782 1668.8,583.299 1669.26,597.369 1669.72,603.028 1670.18,596.446 1670.64,587.144 1671.1,573.419 1671.57,561.165 1672.03,542.813 1672.49,528.39 1672.95,509.292 1673.41,496.983 1673.87,482.059 1674.34,474.465 1674.8,471.307 1675.26,472.239 1675.72,474.264 1676.18,472.13 1676.64,473.459 1677.11,472.985 1677.57,477.704 1678.03,480.1 1678.49,489.011 1678.95,489.433 1679.41,498.858 1679.88,512.275 1680.34,530.748 1680.8,554.916 1681.26,584.302 1681.72,600.324 1682.18,603.785 1682.65,606.02 1683.11,600.427 1683.57,579.087 1684.03,552.515 1684.49,528.289 1684.95,500.39 1685.42,484.162 1685.88,475.842 1686.34,481.194 1686.8,497.954 1687.26,523.217 1687.72,553.615 1688.19,569.115 1688.65,566.908 1689.11,558.715 1689.57,549.621 1690.03,536.728 1690.49,519.465 1690.96,500.908 1691.42,484.335 1691.88,471.351 1692.34,466.074 1692.8,469.894 1693.26,477.801 1693.73,496.171 1694.19,500.103 1694.65,498.409 1695.11,500.341 1695.57,491.315 1696.03,484.4 1696.5,477.612 1696.96,474.865 1697.42,474.277 1697.88,477.941 1698.34,487.08 1698.8,500.152 1699.26,513.899 1699.73,529.865 1700.19,531.774 1700.65,524.264 1701.11,519.421 1701.57,513.395 1702.03,505.425 1702.5,496.973 1702.96,490.113 1703.42,492.075 1703.88,495.632 1704.34,501.157 1704.8,515.974 1705.27,524.569 1705.73,532.065 1706.19,543.314 1706.65,554.15 1707.11,562.555 1707.57,553.324 1708.04,549.302 1708.5,542.253 1708.96,532.862 1709.42,531.846 1709.88,523.77 1710.34,517.07 1710.81,506.518 1711.27,498.774 1711.73,504.62 1712.19,515.416 1712.65,526.616 1713.11,535.422 1713.58,527.832 1714.04,522.92 1714.5,500.858 1714.96,483.932 1715.42,456.412 1715.88,437.871 1716.35,431.282 1716.81,426.682 1717.27,433.34 1717.73,448.617 1718.19,469.499 1718.65,497.582 1719.12,517.467 1719.58,536.832 1720.04,567.197 1720.5,586.952 1720.96,599.151 1721.42,585.795 1721.89,564.039 1722.35,543.78 1722.81,539.061 1723.27,531.577 1723.73,527.075 1724.19,521.231 1724.66,511.85 1725.12,502.005 1725.58,496.601 1726.04,491.629 1726.5,487.76 1726.96,480.224 1727.43,469.99 1727.89,476.705 1728.35,483.327 1728.81,496.566 1729.27,509.085 1729.73,516.995 1730.2,527.557 1730.66,546.641 1731.12,562.357 1731.58,569.68 1732.04,577.783 1732.5,577.607 1732.97,571.593 1733.43,555.784 1733.89,535.637 1734.35,519.42 1734.81,504.579 1735.27,488.725 1735.74,478.358 1736.2,471.849 1736.66,474.402 1737.12,467.581 1737.58,466.634 1738.04,455.863 1738.51,448.048 1738.97,446.42 1739.43,437.326 1739.89,427.181 1740.35,418.136 1740.81,425.611 1741.28,439.037 1741.74,447.771 1742.2,470.614 1742.66,496.28 1743.12,512.062 1743.58,526.681 1744.05,538.42 1744.51,556.542 1744.97,555.246 1745.43,549.822 1745.89,537.092 1746.35,521.699 1746.82,507.232 1747.28,497.67 1747.74,490.373 1748.2,489.591 1748.66,483.134 1749.12,476.604 1749.59,478.23 1750.05,485.465 1750.51,501.465 1750.97,507.076 1751.43,514.121 1751.89,518.232 1752.36,520.703 1752.82,513.264 1753.28,508.862 1753.74,501.851 1754.2,496.524 1754.66,508.52 1755.12,510.189 1755.59,516.599 1756.05,520.776 1756.51,520.976 1756.97,513.92 1757.43,503.18 1757.89,482.531 1758.36,474.433 1758.82,476.966 1759.28,480.421 1759.74,491.022 1760.2,505.163 1760.66,512.874 1761.13,515.598 1761.59,514.281 1762.05,499.673 1762.51,491.077 1762.97,482.312 1763.43,483.25 1763.9,485.819 1764.36,488.269 1764.82,486.21 1765.28,494.489 1765.74,501.986 1766.2,510.508 1766.67,507.088 1767.13,503.7 1767.59,506.47 1768.05,497.186 1768.51,494.025 1768.97,494.602 1769.44,501.731 1769.9,516.056 1770.36,526.012 1770.82,537.902 1771.28,537.282 1771.74,531.3 1772.21,534.221 1772.67,526.452 1773.13,519.255 1773.59,516.464 1774.05,512.303 1774.51,505.244 1774.98,505.412 1775.44,511.199 1775.9,520.776 1776.36,534.364 1776.82,544.849 1777.28,555.605 1777.75,569.909 1778.21,575.236 1778.67,565.657 1779.13,566.909 1779.59,569.168 1780.05,568.749 1780.52,558.894 1780.98,554.488 1781.44,540.814 1781.9,523.415 1782.36,503.952 1782.82,476.847 1783.29,470.601 1783.75,476.377 1784.21,489.538 1784.67,496.7 1785.13,492.234 1785.59,484.471 1786.06,477.551 1786.52,467.958 1786.98,460.481 1787.44,452.005 1787.9,447.484 1788.36,451.388 1788.83,460.423 1789.29,468.881 1789.75,483.447 1790.21,491.781 1790.67,501.749 1791.13,515.29 1791.6,521.657 1792.06,531.489 1792.52,535.397 1792.98,534.436 1793.44,534.396 1793.9,538.604 1794.37,546.486 1794.83,551.201 1795.29,554.394 1795.75,548.152 1796.21,535.8 1796.67,524.306 1797.14,520.298 1797.6,512.988 1798.06,510.677 1798.52,508.258 1798.98,507.021 1799.44,505.834 1799.91,509.861 1800.37,520.478 1800.83,521.24 1801.29,519.889 1801.75,514.581 1802.21,520.346 1802.68,525.768 1803.14,520.309 1803.6,524.288 1804.06,522.195 1804.52,515.74 1804.98,511.378 1805.45,513.146 1805.91,505.376 1806.37,477.543 1806.83,454.191 1807.29,431.036 1807.75,413.471 1808.21,419.272 1808.68,432.118 1809.14,452.701 1809.6,483.296 1810.06,518.157 1810.52,545.157 1810.98,569.758 1811.45,586.257 1811.91,590.331 1812.37,585.801 1812.83,564.853 1813.29,538.585 1813.75,511.232 1814.22,497.646 1814.68,492.152 1815.14,496.739 1815.6,495.311 1816.06,496.53 1816.52,494.553 1816.99,485.842 1817.45,476.711 1817.91,460.916 1818.37,449.116 1818.83,454.11 1819.29,461.589 1819.76,464.326 1820.22,474.383 1820.68,486.809 1821.14,501.523 1821.6,506.687 1822.06,497.664 1822.53,490.081 1822.99,479.384 1823.45,465.634 1823.91,455.262 1824.37,457.855 1824.83,459.96 1825.3,463.027 1825.76,476.731 1826.22,479.462 1826.68,484.158 1827.14,486.261 1827.6,484.43 1828.07,481.898 1828.53,471.951 1828.99,462.73 1829.45,455.857 1829.91,451.825 1830.37,450.919 1830.84,450.816 1831.3,453.173 1831.76,452.652 1832.22,454.688 1832.68,454.555 1833.14,454.643 1833.61,453.438 1834.07,469.127 1834.53,484.061 1834.99,505.567 1835.45,523.659 1835.91,544.081 1836.38,567.917 1836.84,574.787 1837.3,580.09 1837.76,567.583 1838.22,541.345 1838.68,505.646 1839.15,457.243 1839.61,408.318 1840.07,361.679 1840.53,327.513 1840.99,310.837 1841.45,319.428 1841.92,350.371 1842.38,387.24 1842.84,445.137 1843.3,505.665 1843.76,553.885 1844.22,591.215 1844.69,614.289 1845.15,614.522 1845.61,606.655 1846.07,580.312 1846.53,546.05 1846.99,514.222 1847.46,480.938 1847.92,457.076 1848.38,440.982 1848.84,428.966 1849.3,434.028 1849.76,446.446 1850.23,471.13 1850.69,503.578 1851.15,528.88 1851.61,544.502 1852.07,546.166 1852.53,540.146 1853,531.432 1853.46,514.841 1853.92,495.006 1854.38,465.786 1854.84,445.88 1855.3,433.311 1855.77,431.528 1856.23,432.297 1856.69,435.58 1857.15,447.936 1857.61,459.795 1858.07,474.089 1858.54,491.384 1859,499.265 1859.46,514.451 1859.92,525.078 1860.38,537.154 1860.84,549.425 1861.31,565.019 1861.77,570.026 1862.23,575.689 1862.69,574.349 1863.15,567.219 1863.61,554.405 1864.07,537.503 1864.54,513.893 1865,488.054 1865.46,465.085 1865.92,443.185 1866.38,439.346 1866.84,439.763 1867.31,440.72 1867.77,444.016 1868.23,440.883 1868.69,438.42 1869.15,435.719 1869.61,424.661 1870.08,413.915 1870.54,407.772 1871,401.942 1871.46,403.108 1871.92,409.244 1872.38,420.139 1872.85,433.593 1873.31,438.416 1873.77,451.115 1874.23,468.157 1874.69,489.177 1875.15,516.179 1875.62,541.568 1876.08,559.806 1876.54,569.413 1877,568.481 1877.46,564.674 1877.92,558.007 1878.39,545.743 1878.85,531.839 1879.31,510.793 1879.77,487.481 1880.23,468.343 1880.69,442.775 1881.16,423.229 1881.62,422.36 1882.08,425.099 1882.54,438.32 1883,461.085 1883.46,485.242 1883.93,511.069 1884.39,523.035 1884.85,536.227 1885.31,542.078 1885.77,540.782 1886.23,538.688 1886.7,542.871 1887.16,543.091 1887.62,544.182 1888.08,551.213 1888.54,554.243 1889,545.625 1889.47,530.128 1889.93,512.92 1890.39,491.121 1890.85,472.523 1891.31,456.144 1891.77,445.052 1892.24,446.143 1892.7,455.849 1893.16,459.966 1893.62,462.884 1894.08,455.763 1894.54,437.589 1895.01,419.008 1895.47,402.215 1895.93,384.224 1896.39,381.009 1896.85,393.371 1897.31,403.937 1897.78,416.993 1898.24,433.122 1898.7,457.961 1899.16,475.625 1899.62,499.29 1900.08,528.553 1900.55,564.916 1901.01,596.256 1901.47,615.496 1901.93,617.074 1902.39,611.794 1902.85,599.668 1903.32,582.592 1903.78,551.149 1904.24,520.816 1904.7,492.9 1905.16,461.663 1905.62,446.831 1906.09,442.787 1906.55,439.55 1907.01,448.086 1907.47,456.55 1907.93,468.163 1908.39,484.336 1908.86,501.2 1909.32,524.526 1909.78,542.298 1910.24,564.076 1910.7,580.748 1911.16,594.119 1911.63,602.523 1912.09,586.163 1912.55,554.936 1913.01,511.256 1913.47,465.033 1913.93,426.456 1914.4,391.537 1914.86,371.1 1915.32,381.741 1915.78,398.927 1916.24,423.958 1916.7,465.616 1917.16,511.495 1917.63,546.779 1918.09,569.719 1918.55,589.062 1919.01,591.009 1919.47,573.648 1919.93,540.186 1920.4,502.434 1920.86,466.735 1921.32,444.965 1921.78,437.696 1922.24,443.847 1922.7,463.925 1923.17,493.868 1923.63,513.045 1924.09,534.049 1924.55,540.43 1925.01,545.218 1925.47,547.044 1925.94,537.098 1926.4,525.474 1926.86,511.03 1927.32,488.463 1927.78,472.867 1928.24,455.602 1928.71,437.603 1929.17,434.498 1929.63,445.042 1930.09,452.214 1930.55,457.533 1931.01,458.736 1931.48,460.875 1931.94,469.419 1932.4,478.094 1932.86,484.436 1933.32,492.565 1933.78,496.73 1934.25,503.352 1934.71,502.592 1935.17,506.135 1935.63,504.775 1936.09,496.174 1936.55,490.377 1937.02,481.902 1937.48,481.37 1937.94,486.136 1938.4,492.126 1938.86,496.807 1939.32,500.806 1939.79,503.009 1940.25,502.71 1940.71,497.89 1941.17,499.97 1941.63,496.846 1942.09,502.645 1942.56,514.526 1943.02,525.425 1943.48,529.809 1943.94,535.602 1944.4,523.387 1944.86,497.497 1945.33,468.262 1945.79,448.867 1946.25,425.267 1946.71,407.951 1947.17,402.243 1947.63,408.548 1948.1,419.549 1948.56,439.207 1949.02,471.471 1949.48,501.742 1949.94,530.111 1950.4,547.295 1950.87,549.045 1951.33,542.262 1951.79,523.11 1952.25,518.06 1952.71,506.53 1953.17,489.864 1953.64,473.684 1954.1,471.415 1954.56,473.96 1955.02,483.291 1955.48,492.053 1955.94,488.763 1956.41,492.062 1956.87,499.287 1957.33,510.907 1957.79,517.926 1958.25,530.174 1958.71,538.03 1959.18,547.955 1959.64,556.975 1960.1,563.847 1960.56,561.142 1961.02,542.084 1961.48,507.374 1961.95,474.58 1962.41,439.278 1962.87,412.872 1963.33,408.437 1963.79,408.735 1964.25,423.371 1964.72,447.826 1965.18,474.115 1965.64,490.919 1966.1,512.85 1966.56,528.52 1967.02,543.014 1967.49,547.593 1967.95,554.118 1968.41,560.581 1968.87,554.63 1969.33,542.935 1969.79,525.969 1970.25,510.744 1970.72,498.994 1971.18,491.057 1971.64,502.523 1972.1,515.933 1972.56,534.371 1973.02,551.521 1973.49,563.362 1973.95,576.624 1974.41,574.562 1974.87,565.571 1975.33,541.556 1975.79,518.811 1976.26,503.53 1976.72,490.015 1977.18,484.893 1977.64,484.073 1978.1,481.735 1978.56,487.829 1979.03,490.634 1979.49,502.397 1979.95,519.465 1980.41,534.416 1980.87,531.792 1981.33,533.179 1981.8,536.219 1982.26,530.727 1982.72,525.179 1983.18,520.14 1983.64,523.352 1984.1,522.04 1984.57,521.642 1985.03,518.94 1985.49,524.306 1985.95,539.077 1986.41,558.069 1986.87,576.908 1987.34,578.146 1987.8,571.691 1988.26,550.215 1988.72,519.301 1989.18,485.714 1989.64,460.006 1990.11,434.71 1990.57,415.119 1991.03,400.796 1991.49,401.45 1991.95,407.222 1992.41,417.839 1992.88,436.984 1993.34,460.291 1993.8,496.94 1994.26,526.863 1994.72,555.165 1995.18,573.641 1995.65,588.595 1996.11,594.173 1996.57,582.427 1997.03,564.079 1997.49,539.857 1997.95,505.22 1998.42,463.853 1998.88,424.327 1999.34,397.131 1999.8,385.944 2000.26,377.594 2000.72,380.131 2001.19,385.268 2001.65,399.047 2002.11,413.756 2002.57,436.219 2003.03,462.009 2003.49,492.344 2003.96,513.058 2004.42,523.198 2004.88,527.071 2005.34,519.092 2005.8,513.256 2006.26,506.8 2006.73,493.628 2007.19,471.808 2007.65,456.101 2008.11,452.76 2008.57,459.345 2009.03,470.16 2009.5,492.674 2009.96,515.866 2010.42,538.476 2010.88,559.817 2011.34,575.345 2011.8,573.762 2012.27,569.538 2012.73,558.259 2013.19,539.735 2013.65,513.748 2014.11,488.52 2014.57,466.083 2015.04,443.021 2015.5,421.213 2015.96,412.233 2016.42,425.106 2016.88,433.197 2017.34,444.563 2017.81,453.011 2018.27,468.804 2018.73,471.056 2019.19,479.074 2019.65,493.172 2020.11,516.302 2020.58,544.471 2021.04,566.601 2021.5,580.352 2021.96,593.117 2022.42,606.147 2022.88,611.928 2023.35,608.003 2023.81,594.615 2024.27,563.021 2024.73,521.087 2025.19,481.069 2025.65,446.677 2026.11,424.673 2026.58,415.737 2027.04,419.964 2027.5,431.824 2027.96,449.176 2028.42,473.355 2028.88,499.841 2029.35,517.083 2029.81,529.93 2030.27,533.503 2030.73,543.334 2031.19,538.611 2031.65,530.723 2032.12,515.163 2032.58,509.362 2033.04,511.842 2033.5,511.452 2033.96,511.924 2034.42,513.551 2034.89,508.992 2035.35,511.171 2035.81,510.916 2036.27,512.985 2036.73,509.401 2037.19,510.284 2037.66,504.399 2038.12,494.994 2038.58,495.611 2039.04,501.494 2039.5,509.642 2039.96,517.736 2040.43,509.021 2040.89,496.316 2041.35,472.622 2041.81,455.381 2042.27,444.866 2042.73,435.413 2043.2,433.338 2043.66,436.632 2044.12,440.492 2044.58,454.892 2045.04,459.666 2045.5,464.689 2045.97,468.518 2046.43,474.353 2046.89,483.591 2047.35,508.409 2047.81,526.491 2048.27,531.012 2048.74,523.523 2049.2,508.469 2049.66,491.569 2050.12,481.345 2050.58,464.82 2051.04,458.437 2051.51,456.254 2051.97,449.304 2052.43,448.577 2052.89,455.214 2053.35,466.775 2053.81,474.352 2054.28,482.421 2054.74,489.143 2055.2,495.663 2055.66,499.139 2056.12,492.691 2056.58,483.292 2057.05,484.303 2057.51,490.387 2057.97,500.042 2058.43,519.491 2058.89,542.689 2059.35,558.072 2059.82,549.826 2060.28,550.066 2060.74,545.285 2061.2,538.461 2061.66,533.21 2062.12,529.078 2062.59,531.129 2063.05,520.323 2063.51,501.738 2063.97,485.087 2064.43,466.584 2064.89,452.669 2065.36,440.734 2065.82,446.603 2066.28,455.195 2066.74,464.195 2067.2,477.072 2067.66,489.778 2068.13,497.289 2068.59,509.818 2069.05,509.968 2069.51,513.153 2069.97,511.395 2070.43,518.651 2070.9,527.072 2071.36,532.771 2071.82,537.562 2072.28,537.036 2072.74,530.048 2073.2,529.19 2073.67,523.288 2074.13,524.8 2074.59,522.731 2075.05,513.838 2075.51,496.415 2075.97,483.355 2076.44,467.878 2076.9,452.015 2077.36,434.29 2077.82,426.189 2078.28,418.413 2078.74,416.362 2079.2,425.551 2079.67,441.032 2080.13,457.905 2080.59,480.947 2081.05,499.39 2081.51,512.621 2081.97,532.432 2082.44,540.847 2082.9,549.685 2083.36,557.773 2083.82,556.467 2084.28,546.311 2084.74,533.245 2085.21,520.558 2085.67,507.172 2086.13,489.302 2086.59,477.87 2087.05,469.405 2087.51,462.243 2087.98,455.948 2088.44,442.662 2088.9,436.237 2089.36,432.264 2089.82,425.727 2090.28,424.001 2090.75,435.238 2091.21,450.162 2091.67,467.854 2092.13,465.618 2092.59,467.268 2093.05,468.941 2093.52,472.841 2093.98,487.189 2094.44,501.415 2094.9,512.789 2095.36,533.256 2095.82,540.128 2096.29,547.55 2096.75,553.756 2097.21,566.203 2097.67,576.501 2098.13,577.437 2098.59,571.15 2099.06,569.357 2099.52,564.978 2099.98,569.741 2100.44,565.644 2100.9,557.401 2101.36,543.393 2101.83,525.117 2102.29,506.435 2102.75,486.308 2103.21,474.681 2103.67,463.293 2104.13,446.285 2104.6,431.696 2105.06,419.804 2105.52,425.034 2105.98,441.817 2106.44,470.303 2106.9,501.68 2107.37,528.768 2107.83,549.025 2108.29,556.026 2108.75,543.642 2109.21,523.199 2109.67,497.579 2110.14,475.978 2110.6,455.447 2111.06,454.127 2111.52,467.248 2111.98,482.452 2112.44,495.637 2112.91,510.621 2113.37,518.692 2113.83,537.321 2114.29,541.405 2114.75,545.045 2115.21,538.517 2115.68,528.289 2116.14,511.618 2116.6,502.487 2117.06,510.951 2117.52,522.393 2117.98,527.805 2118.45,534.245 2118.91,534.556 2119.37,533.693 2119.83,539.897 2120.29,543.934 2120.75,546.994 2121.22,539.728 2121.68,524.915 2122.14,508.864 2122.6,485.164 2123.06,463.781 2123.52,456.593 2123.99,455.864 2124.45,471.391 2124.91,486.922 2125.37,500.946 2125.83,518.052 2126.29,532.592 2126.76,546.039 2127.22,543.459 2127.68,525.978 2128.14,499.939 2128.6,476.334 2129.06,452.708 2129.53,438.217 2129.99,431.521 2130.45,428.365 2130.91,430.824 2131.37,428.762 2131.83,431.95 2132.3,442.125 2132.76,455.364 2133.22,482.268 2133.68,513.528 2134.14,548.251 2134.6,567.387 2135.06,578.639 2135.53,579.287 2135.99,558.582 2136.45,521.047 2136.91,500.09 2137.37,476.827 2137.83,462.908 2138.3,454.243 2138.76,451.019 2139.22,443.27 2139.68,436.215 2140.14,436.583 2140.6,432.396 2141.07,434.19 2141.53,437.389 2141.99,445.173 2142.45,461.278 2142.91,483.606 2143.37,507.53 2143.84,518.315 2144.3,535.518 2144.76,549.1 2145.22,557.815 2145.68,555.982 2146.14,544.028 2146.61,536.069 2147.07,527.263 2147.53,526.053 2147.99,517.622 2148.45,516.406 2148.91,517.309 2149.38,525.353 2149.84,522.129 2150.3,522.261 2150.76,516.868 2151.22,518.363 2151.68,503.834 2152.15,486.432 2152.61,479.409 2153.07,475.738 2153.53,479.171 2153.99,481.7 2154.45,487.122 2154.92,486.144 2155.38,482.383 2155.84,462.247 2156.3,438.651 2156.76,412.807 2157.22,390.232 2157.69,382.001 2158.15,390.234 2158.61,404.643 2159.07,431.17 2159.53,454.309 2159.99,468.597 2160.46,485.373 2160.92,490.657 2161.38,490.659 2161.84,486.213 2162.3,477.04 2162.76,475.092 2163.23,476.461 2163.69,476.652 2164.15,478.442 2164.61,485.836 2165.07,491.473 2165.53,496.356 2166,501.609 2166.46,485.78 2166.92,468.907 2167.38,448.454 2167.84,436.231 2168.3,443.667 2168.77,448.978 2169.23,453.871 2169.69,465.677 2170.15,479.774 2170.61,495.087 2171.07,500.191 2171.54,503.588 2172,510.517 2172.46,521.213 2172.92,529.792 2173.38,541.216 2173.84,548.042 2174.31,557.787 2174.77,558.892 2175.23,563.451 2175.69,566.952 2176.15,568.898 2176.61,571.747 2177.08,575.464 2177.54,566.722 2178,563.186 2178.46,546.583 2178.92,543.791 2179.38,540.105 2179.85,526.829 2180.31,502.028 2180.77,475.844 2181.23,463.635 2181.69,461.381 2182.15,475.568 2182.62,489.223 2183.08,503.18 2183.54,520.364 2184,526.103 2184.46,523.876 2184.92,520.05 2185.39,509.46 2185.85,496.989 2186.31,477.321 2186.77,452.969 2187.23,426.229 2187.69,413.992 2188.15,422.047 2188.62,443.046 2189.08,469.081 2189.54,492.384 2190,512.473 2190.46,537.762 2190.92,558.439 2191.39,568.671 2191.85,570.296 2192.31,561.977 2192.77,546.442 2193.23,528.504 2193.69,504.98 2194.16,481.73 2194.62,463.266 2195.08,437.875 2195.54,424.018 2196,416.65 2196.46,407.833 2196.93,414.529 2197.39,424.357 2197.85,429.035 2198.31,438.407 2198.77,446.333 2199.23,461.27 2199.7,466.546 2200.16,468.342 2200.62,470.951 2201.08,485.438 2201.54,507.866 2202,536.763 2202.47,555.627 2202.93,579.176 2203.39,589.284 2203.85,590.377 2204.31,570.052 2204.77,535.486 2205.24,509.458 2205.7,480.598 2206.16,454.275 2206.62,431.325 2207.08,420.815 2207.54,426.366 2208.01,440.311 2208.47,465.18 2208.93,485.863 2209.39,501.137 2209.85,510.511 2210.31,525.666 2210.78,535.299 2211.24,545.589 2211.7,550.62 2212.16,548.695 2212.62,557.824 2213.08,551.351 2213.55,541.123 2214.01,535.796 2214.47,537.507 2214.93,530.969 2215.39,532.933 2215.85,532.068 2216.32,534.061 2216.78,545.339 2217.24,556.582 2217.7,559.236 2218.16,557.972 2218.62,551.028 2219.09,539.096 2219.55,514.696 2220.01,482.377 2220.47,449.529 2220.93,424.098 2221.39,415.613 2221.86,412.998 2222.32,412.297 2222.78,412.924 2223.24,420.067 2223.7,439.282 2224.16,468.701 2224.63,499.461 2225.09,521.341 2225.55,540.396 2226.01,549.801 2226.47,543.889 2226.93,526.141 2227.4,505.987 2227.86,489.668 2228.32,483.534 2228.78,478.088 2229.24,480.509 2229.7,493.476 2230.17,501.26 2230.63,497.908 2231.09,497.909 2231.55,499.744 2232.01,505.046 2232.47,507.736 2232.94,504.122 2233.4,502.567 2233.86,521.532 2234.32,543.532 2234.78,557.806 2235.24,556.342 2235.71,549.993 2236.17,536.467 2236.63,523.726 2237.09,516.194 2237.55,507.444 2238.01,500.176 2238.48,500.223 2238.94,500.414 2239.4,497.601 2239.86,483.217 2240.32,471.929 2240.78,461.33 2241.24,450.307 2241.71,442.178 2242.17,438.165 2242.63,441.092 2243.09,442.953 2243.55,453.875 2244.01,484.436 2244.48,497.121 2244.94,526.061 2245.4,537.389 2245.86,545.548 2246.32,540.346 2246.78,531.098 2247.25,525.62 2247.71,531.378 2248.17,540.298 2248.63,541.714 2249.09,552.299 2249.55,550.285 2250.02,540.609 2250.48,534.152 2250.94,530.191 2251.4,528.23 2251.86,521.549 2252.32,524.928 2252.79,521.41 2253.25,519.948 2253.71,524.632 2254.17,518.581 2254.63,514.429 2255.09,513.911 2255.56,513.544 2256.02,506.582 2256.48,502.453 2256.94,494.596 2257.4,484.145 2257.86,472.483 2258.33,457.969 2258.79,452.89 2259.25,448.547 2259.71,439.29 2260.17,441.198 2260.63,447.693 2261.1,456.281 2261.56,480.314 2262.02,508.412 2262.48,517.731 2262.94,523.612 2263.4,512.627 2263.87,497.955 2264.33,476.388 2264.79,454.743 2265.25,433.186 2265.71,421.408 2266.17,407.555 2266.64,404.352 2267.1,407.68 2267.56,412.631 2268.02,429.239 2268.48,451.933 2268.94,463.325 2269.41,478.712 2269.87,497.807 2270.33,515.089 2270.79,542.252 2271.25,571.129 2271.71,593.391 2272.18,593.543 2272.64,576.341 2273.1,557.834 2273.56,537.079 2274.02,517.719 2274.48,513.386 2274.95,512.805 2275.41,501.552 2275.87,489.724 2276.33,482.465 2276.79,479.595 2277.25,467.027 2277.72,449.523 2278.18,436.537 2278.64,428.684 2279.1,426.347 2279.56,429.105 2280.02,442.642 2280.49,460.998 2280.95,483.086 2281.41,494.131 2281.87,505.949 2282.33,506.762 2282.79,502.231 2283.26,497.384 2283.72,486.904 2284.18,470.583 2284.64,456.255 2285.1,445.993 2285.56,443.811 2286.03,454.266 2286.49,470.215 2286.95,484.164 2287.41,496.463 2287.87,509.089 2288.33,517.648 2288.8,522.907 2289.26,518.788 2289.72,504.409 2290.18,483.396 2290.64,463.109 2291.1,449.576 2291.57,444.146 2292.03,448.976 2292.49,459.841 2292.95,473.729 2293.41,489.621 2293.87,508.951 2294.34,515.067 2294.8,509.949 2295.26,500.179 2295.72,490.613 2296.18,483.16 2296.64,481.165 2297.1,488.764 2297.57,492.484 2298.03,495.201 2298.49,510.892 2298.95,515.18 2299.41,513.809 2299.87,509.144 2300.34,503.639 2300.8,489.034 2301.26,468.927 2301.72,456.16 2302.18,463.195 2302.64,465.592 2303.11,475.149 2303.57,479.091 2304.03,494.805 2304.49,506.559 2304.95,507.452 2305.41,503.559 2305.88,491.275 2306.34,490.475 2306.8,485.456 2307.26,479.339 2307.72,479.245 2308.18,471.737 2308.65,468.765 2309.11,464.873 2309.57,479.285 2310.03,497.771 2310.49,504.574 2310.95,511.105 2311.42,516.309 2311.88,511.688 2312.34,502.531 2312.8,490.419 2313.26,481.923 2313.72,479.533 2314.19,475.024 2314.65,472.165 2315.11,468.037 2315.57,469.233 2316.03,464.637 2316.49,459.205 2316.96,456.68 2317.42,441.666 2317.88,433.055 2318.34,421.005 2318.8,417.812 2319.26,425.198 2319.73,433.609 2320.19,438.428 2320.65,432.472 2321.11,436.568 2321.57,445.675 2322.03,449.704 2322.5,449.051 2322.96,440.439 2323.42,428.546 2323.88,418.972 2324.34,420.36 2324.8,422.366 2325.27,428.469 2325.73,436.891 2326.19,445.553 2326.65,469.012 2327.11,501.678 2327.57,525.837 2328.04,531.683 2328.5,532.944 2328.96,524.755 2329.42,516.196 2329.88,501.517 2330.34,490.034 2330.81,472.734 2331.27,468.552 2331.73,465.752 2332.19,467.993 2332.65,473.011 2333.11,483.715 2333.58,486.186 2334.04,472.16 2334.5,462.256 2334.96,454.159 2335.42,464.276 2335.88,475.928 2336.35,492.245 2336.81,515.473 2337.27,535.276 2337.73,550.901 2338.19,556.059 2338.65,555.146 2339.12,557.775 2339.58,549.767 2340.04,536.629 2340.5,526.155 2340.96,513.071 2341.42,499.427 2341.89,486.195 2342.35,469.724 2342.81,461.156 2343.27,455.885 2343.73,454.006 2344.19,465.034 2344.66,475.778 2345.12,480.335 2345.58,479.343 2346.04,469.342 2346.5,459.367 2346.96,449.622 2347.43,449.337 2347.89,454.726 2348.35,461.855 2348.81,476.034 2349.27,488.384 2349.73,501.417 2350.19,516.401 2350.66,519.733 2351.12,520.14 2351.58,517.014 2352.04,511.955 2352.5,489.312 2352.96,466.435 2353.43,443.73 2353.89,437.893 2354.35,443.061 2354.81,456.807 2355.27,475.683 2355.73,487.11 2356.2,505.018 2356.66,513.119 2357.12,511.811 2357.58,509.344 2358.04,510.527 2358.5,498.439 2358.97,497.658 2359.43,493.617 2359.89,500.033 2360.35,506.712 2360.81,511.263 2361.27,519.624 2361.74,519.596 2362.2,508.829 2362.66,495.786 2363.12,490.248 2363.58,484.673 2364.04,483.259 2364.51,479.168 2364.97,470.256 2365.43,464.104 2365.89,458.656 2366.35,468.291 2366.81,485.616 2367.28,507.197 2367.74,526.069 2368.2,538.501 2368.66,525.145 2369.12,512.145 2369.58,504.988 2370.05,500.018 2370.51,493.39 2370.97,488.951 2371.43,486.181 2371.89,487.47 2372.35,491.331 2372.82,496.585 2373.28,492.68 2373.74,483.584 2374.2,473.407 2374.66,463.444 2375.12,449.338 2375.59,448.671 2376.05,455.674 2376.51,462.08 2376.97,466.36 2377.43,467.489 2377.89,461.271 2378.36,461.611 2378.82,451.097 2379.28,436.787 2379.74,433.76 2380.2,438.771 2380.66,448.4 2381.13,473.51 2381.59,506.964 2382.05,521.265 2382.51,534.167 2382.97,538.92 2383.43,545.712 2383.9,542.661 2384.36,536.52 2384.82,521.714 2385.28,504.978 2385.74,480.889 2386.2,457.446 2386.67,439.674 2387.13,430.874 2387.59,433.177 2388.05,449.44 2388.51,466.15 2388.97,472.33 2389.44,477.815 2389.9,483.575 2390.36,479.503 2390.82,471.286 2391.28,466.599 2391.74,467.927 2392.21,468.293 2392.67,464.141 2393.13,458.89 2393.59,453.505 2394.05,449.533 2394.51,440.394 2394.98,433.201 2395.44,432.487 2395.9,439.778 2396.36,451.753 2396.82,466.497 2397.28,477.938 2397.75,493.546 2398.21,509.63 2398.67,519.629 2399.13,528.402 2399.59,532.385 2400.05,538.589 2400.52,538.915 2400.98,535.318 2401.44,542.836 2401.9,541.21 2402.36,533.986 2402.82,524.922 2403.28,518.731 2403.75,500.069 2404.21,482.93 2404.67,463.687 2405.13,446.552 2405.59,438.491 2406.05,439.281 2406.52,442.2 2406.98,445.642 2407.44,459.694 2407.9,475.536 2408.36,478.843 2408.82,475.747 2409.29,471.223 2409.75,457.944 2410.21,442.453 2410.67,430.119 2411.13,417.955 2411.59,409.314 2412.06,398.61 2412.52,398.571 2412.98,404.604 2413.44,422.228 2413.9,450.553 2414.36,491.756 2414.83,528.273 2415.29,565.338 2415.75,597.056 2416.21,624.154 2416.67,637.564 2417.13,637.468 2417.6,627.817 2418.06,610.919 2418.52,590.451 2418.98,569.258 2419.44,543.369 2419.9,511.129 2420.37,470.138 2420.83,437.205 2421.29,410.703 2421.75,392.958 2422.21,384.759 2422.67,390.008 2423.14,410.276 2423.6,437.446 2424.06,462.339 2424.52,487.39 2424.98,503.399 2425.44,507.08 2425.91,505.277 2426.37,507.6 2426.83,512.268 2427.29,524.525 2427.75,529.453 2428.21,531.965 2428.68,517.472 2429.14,501.017 2429.6,478.028 2430.06,462.486 2430.52,460.792 2430.98,469.946 2431.45,481.507 2431.91,483.054 2432.37,494.212 2432.83,504.015 2433.29,518.465 2433.75,529.6 2434.22,540.511 2434.68,554.917 2435.14,567.505 2435.6,571.7 2436.06,575.666 2436.52,577.241 2436.99,576.932 2437.45,575.43 2437.91,570.941 2438.37,550.819 2438.83,532.151 2439.29,493.668 2439.76,460.766 2440.22,439.724 2440.68,429.469 2441.14,434.874 2441.6,440.14 2442.06,443.35 2442.53,453.815 2442.99,460.741 2443.45,464.716 2443.91,467.984 2444.37,470.022 2444.83,470.696 2445.3,477.815 2445.76,482.073 2446.22,493.659 2446.68,503.745 2447.14,503.698 2447.6,513.716 2448.07,515.751 2448.53,504.809 2448.99,494.316 2449.45,480.146 2449.91,474.388 2450.37,474.178 2450.84,475.911 2451.3,470.387 2451.76,474.566 2452.22,466.723 2452.68,454.2 2453.14,446.632 2453.61,448.629 2454.07,450.652 2454.53,462.657 2454.99,462.428 2455.45,467.919 2455.91,468.057 2456.38,481.785 2456.84,498.394 2457.3,507.66 2457.76,509.921 2458.22,509.401 2458.68,500.269 2459.14,488.993 2459.61,480.222 2460.07,477.758 2460.53,481.939 2460.99,495.108 2461.45,511.383 2461.91,525.165 2462.38,520.79 2462.84,520.91 2463.3,517.209 2463.76,502.262 2464.22,480.699 2464.68,458.473 2465.15,447.304 2465.61,440.321 2466.07,437.403 2466.53,438.055 2466.99,446.693 2467.45,459.037 2467.92,480.331 2468.38,513.407 2468.84,546.443 2469.3,574.324 2469.76,590.193 2470.22,592.98 2470.69,568.477 2471.15,531.724 2471.61,502.617 2472.07,475.106 2472.53,455.7 2472.99,434.03 2473.46,421.662 2473.92,411.494 2474.38,403.561 2474.84,399.327 2475.3,399.974 2475.76,398.976 2476.23,397.365 2476.69,408.705 2477.15,414.627 2477.61,422.427 2478.07,436.046 2478.53,453.427 2479,460.855 2479.46,467.48 2479.92,469.929 2480.38,477.796 2480.84,481.932 2481.3,505.295 2481.77,533.306 2482.23,556.082 2482.69,573.432 2483.15,584.391 2483.61,571.412 2484.07,554.318 2484.54,531.908 2485,504.86 2485.46,470.962 2485.92,452.65 2486.38,432.648 2486.84,412.715 2487.31,406.598 2487.77,410.131 2488.23,422.837 2488.69,436.283 2489.15,451.813 2489.61,467.284 2490.08,481.853 2490.54,501.458 2491,509.664 2491.46,497.511 2491.92,486.084 2492.38,479.342 2492.85,464.743 2493.31,463.709 2493.77,459.384 2494.23,459.939 2494.69,473.992 2495.15,484.194 2495.62,497.546 2496.08,510.516 2496.54,519.602 2497,529.6 2497.46,523.909 2497.92,520.318 2498.39,514.738 2498.85,525.944 2499.31,515.916 2499.77,503.865 2500.23,496.555 2500.69,494.757 2501.16,500.186 2501.62,503.597 2502.08,501.621 2502.54,497.791 2503,494.702 2503.46,510.503 2503.93,522.627 2504.39,524.711 2504.85,532.088 2505.31,546.628 2505.77,566.626 2506.23,581.153 2506.7,587.523 2507.16,581.043 2507.62,579.722 2508.08,570.246 2508.54,555.305 2509,539.721 2509.47,511.136 2509.93,485.168 2510.39,465.603 2510.85,450.438 2511.31,435.362 2511.77,433.236 2512.23,432.113 2512.7,440.539 2513.16,446.34 2513.62,460.555 2514.08,479.377 2514.54,499.292 2515,517.292 2515.47,531.347 2515.93,549.473 2516.39,566.925 2516.85,584.925 2517.31,604.747 2517.77,612.114 2518.24,618.124 2518.7,618.801 2519.16,615.206 2519.62,606.849 2520.08,589.448 2520.54,566.985 2521.01,539.699 2521.47,516.487 2521.93,491.902 2522.39,475.039 2522.85,465.376 2523.31,459.285 2523.78,451.36 2524.24,450.436 2524.7,453.339 2525.16,455.603 2525.62,458.745 2526.08,465.666 2526.55,469.299 2527.01,470.791 2527.47,474.076 2527.93,472.924 2528.39,484.023 2528.85,499.697 2529.32,515.06 2529.78,523.877 2530.24,532.414 2530.7,530.498 2531.16,516.526 2531.62,498.105 2532.09,488.374 2532.55,471.311 2533.01,461.154 2533.47,459.197 2533.93,460.811 2534.39,467.169 2534.86,476.027 2535.32,486.689 2535.78,491.85 2536.24,498.224 2536.7,491.055 2537.16,480.419 2537.63,471.436 2538.09,461.332 2538.55,457.636 2539.01,468.498 2539.47,479.836 2539.93,497.383 2540.4,516.807 2540.86,530.479 2541.32,542.876 2541.78,553.477 2542.24,561.946 2542.7,569.334 2543.17,586.679 2543.63,601.466 2544.09,599.877 2544.55,579.374 2545.01,564.531 2545.47,532.86 2545.94,515.645 2546.4,507.008 2546.86,500.784 2547.32,486.863 2547.78,486.622 2548.24,482.124 2548.71,471.906 2549.17,456.294 2549.63,443.019 2550.09,449.672 2550.55,465.765 2551.01,491.327 2551.48,517.964 2551.94,540 2552.4,557.225 2552.86,567.557 2553.32,569.395 2553.78,567.649 2554.25,566.348 2554.71,583.393 2555.17,609.235 2555.63,629.811 2556.09,639.58 2556.55,641.351 2557.02,628.703 2557.48,599.499 2557.94,565.283 2558.4,532.864 2558.86,505.362 2559.32,474.639 2559.79,461.157 2560.25,466.338 2560.71,474.198 2561.17,479.464 2561.63,489.96 2562.09,491.789 2562.56,489.161 2563.02,478.37 2563.48,473.425 2563.94,477.267 2564.4,493.639 2564.86,515.921 2565.33,537.913 2565.79,557.65 2566.25,567.596 2566.71,573.266 2567.17,574.362 2567.63,579.517 2568.09,570.186 2568.56,550.259 2569.02,525.227 2569.48,505.115 2569.94,490.983 2570.4,476.668 2570.86,471.758 2571.33,476.559 2571.79,484.101 2572.25,501.831 2572.71,521.684 2573.17,524.292 2573.63,527.962 2574.1,525.168 2574.56,512.896 2575.02,497.836 2575.48,490.31 2575.94,471.705 2576.4,460.957 2576.87,447.58 2577.33,444.255 2577.79,450.386 2578.25,452.117 2578.71,454.77 2579.17,458.325 2579.64,465.866 2580.1,471.543 2580.56,475.251 2581.02,478.61 2581.48,478.06 2581.94,478.42 2582.41,476.146 2582.87,471.001 2583.33,461.28 2583.79,462.378 2584.25,460.982 2584.71,456.82 2585.18,452.195 2585.64,445.112 2586.1,442.466 2586.56,434.458 2587.02,421.085 2587.48,422.13 2587.95,432.058 2588.41,452.611 2588.87,476.953 2589.33,506.213 2589.79,526.904 2590.25,534.368 2590.72,534.295 2591.18,536.481 2591.64,529.939 2592.1,519.003 2592.56,497.087 2593.02,475.747 2593.49,447.706 2593.95,417.636 2594.41,384.067 2594.87,359.861 2595.33,342.824 2595.79,337.396 2596.26,343.074 2596.72,362.021 2597.18,398.82 2597.64,438.52 2598.1,467.51 2598.56,492.693 2599.03,527.348 2599.49,549.184 2599.95,564.807 2600.41,560.796 2600.87,540.212 2601.33,512.574 2601.8,479.951 2602.26,447.532 2602.72,424.109 2603.18,413.113 2603.64,422.856 2604.1,432.646 2604.57,440.731 2605.03,449.207 2605.49,457.205 2605.95,463.159 2606.41,471.899 2606.87,466.076 2607.34,452.433 2607.8,436.748 2608.26,422.218 2608.72,410.546 2609.18,409.902 2609.64,421.838 2610.11,434.433 2610.57,450.25 2611.03,466.988 2611.49,486.62 2611.95,489.26 2612.41,483.775 2612.88,477.663 2613.34,467.438 2613.8,463.558 2614.26,464.609 2614.72,474.273 2615.18,488.415 2615.65,499.307 2616.11,499.579 2616.57,503.203 2617.03,514.71 2617.49,530.917 2617.95,544.568 2618.42,558.298 2618.88,549.929 2619.34,531.937 2619.8,511.202 2620.26,484.557 2620.72,458.01 2621.18,434.599 2621.65,412.284 2622.11,406.951 2622.57,406.582 2623.03,426.36 2623.49,445.461 2623.95,466.442 2624.42,483.941 2624.88,502.931 2625.34,523.938 2625.8,538.086 2626.26,543.216 2626.72,542.115 2627.19,543.741 2627.65,541.108 2628.11,530.362 2628.57,507.044 2629.03,481.68 2629.49,458.149 2629.96,440.353 2630.42,429.323 2630.88,422.412 2631.34,433.385 2631.8,454.841 2632.26,486.963 2632.73,526.611 2633.19,567.627 2633.65,597.769 2634.11,618.505 2634.57,613.682 2635.03,596.125 2635.5,562.771 2635.96,529.748 2636.42,501.15 2636.88,471.983 2637.34,449.881 2637.8,440.057 2638.27,442.667 2638.73,447.625 2639.19,452.897 2639.65,455.432 2640.11,463.697 2640.57,466.471 2641.04,473.606 2641.5,488.924 2641.96,522.036 2642.42,548.933 2642.88,568.946 2643.34,582.679 2643.81,598.895 2644.27,600.111 2644.73,599.726 2645.19,592.652 2645.65,586.982 2646.11,576.059 2646.58,565.56 2647.04,556.418 2647.5,552.097 2647.96,553.523 2648.42,559.152 2648.88,575.903 2649.35,592.239 2649.81,603.656 2650.27,620.353 2650.73,635.02 2651.19,639.392 2651.65,628.34 2652.12,614.896 2652.58,595.263 2653.04,570.153 2653.5,555.9 2653.96,544.94 2654.42,536.14 2654.89,537.847 2655.35,538.058 2655.81,544.765 2656.27,563.778 2656.73,583.685 2657.19,620.165 2657.66,652.51 2658.12,681.339 2658.58,701.952 2659.04,690.596 2659.5,669.661 2659.96,654.574 2660.43,627.567 2660.89,599.398 2661.35,578.161 2661.81,552.911 2662.27,538.933 2662.73,539.411 2663.2,543.421 2663.66,566.97 2664.12,592.773 2664.58,615.734 2665.04,635.07 2665.5,651.008 2665.97,668.493 2666.43,677.222 2666.89,682.03 2667.35,679.802 2667.81,679.467 2668.27,677.858 2668.74,667.78 2669.2,661.155 2669.66,655.248 2670.12,648.074 2670.58,639.857 2671.04,631.425 2671.51,615.655 2671.97,613.521 2672.43,608.189 2672.89,600.835 2673.35,593.39 2673.81,581.546 2674.27,570.076 2674.74,560.45 2675.2,560.249 2675.66,577.404 2676.12,599.833 2676.58,626.757 2677.04,651.335 2677.51,676.656 2677.97,683.477 2678.43,686.218 2678.89,685.602 2679.35,687.686 2679.81,702.035 2680.28,728.103 2680.74,761.795 2681.2,795.906 2681.66,830.917 2682.12,859.936 2682.58,881.179 2683.05,884.261 2683.51,462.709 "/>
<path clip-path="url(#clip040)" d="M387.556 965.881 L1217.92 965.881 L1217.92 810.361 L387.556 810.361  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"/>
<polyline clip-path="url(#clip040)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="387.556,965.881 1217.92,965.881 1217.92,810.361 387.556,810.361 387.556,965.881 "/>
<polyline clip-path="url(#clip040)" style="stroke:#0000ff; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" points="414.743,862.201 577.86,862.201 "/>
<path clip-path="url(#clip040)" d="M612.453 846.194 L612.453 853.555 L621.227 853.555 L621.227 856.865 L612.453 856.865 L612.453 870.939 Q612.453 874.11 613.31 875.013 Q614.19 875.916 616.852 875.916 L621.227 875.916 L621.227 879.481 L616.852 879.481 Q611.921 879.481 610.046 877.652 Q608.171 875.8 608.171 870.939 L608.171 856.865 L605.046 856.865 L605.046 853.555 L608.171 853.555 L608.171 846.194 L612.453 846.194 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M641.851 857.536 Q641.134 857.12 640.277 856.935 Q639.444 856.726 638.426 856.726 Q634.814 856.726 632.87 859.087 Q630.949 861.425 630.949 865.823 L630.949 879.481 L626.666 879.481 L626.666 853.555 L630.949 853.555 L630.949 857.583 Q632.291 855.222 634.444 854.087 Q636.597 852.93 639.676 852.93 Q640.115 852.93 640.648 852.999 Q641.18 853.046 641.828 853.161 L641.851 857.536 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M645.879 869.249 L645.879 853.555 L650.138 853.555 L650.138 869.087 Q650.138 872.768 651.574 874.62 Q653.009 876.448 655.879 876.448 Q659.328 876.448 661.319 874.249 Q663.333 872.05 663.333 868.254 L663.333 853.555 L667.592 853.555 L667.592 879.481 L663.333 879.481 L663.333 875.499 Q661.782 877.86 659.722 879.018 Q657.685 880.152 654.976 880.152 Q650.509 880.152 648.194 877.374 Q645.879 874.597 645.879 869.249 M656.597 852.93 L656.597 852.93 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M698.541 865.453 L698.541 867.536 L678.958 867.536 Q679.236 871.934 681.597 874.249 Q683.981 876.541 688.217 876.541 Q690.671 876.541 692.962 875.939 Q695.277 875.337 697.546 874.134 L697.546 878.161 Q695.254 879.134 692.847 879.643 Q690.439 880.152 687.962 880.152 Q681.759 880.152 678.124 876.541 Q674.513 872.93 674.513 866.772 Q674.513 860.407 677.939 856.68 Q681.388 852.93 687.222 852.93 Q692.453 852.93 695.485 856.31 Q698.541 859.666 698.541 865.453 M694.282 864.203 Q694.235 860.708 692.314 858.624 Q690.416 856.541 687.268 856.541 Q683.703 856.541 681.55 858.555 Q679.421 860.569 679.097 864.226 L694.282 864.203 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M730.832 843.509 Q727.731 848.833 726.226 854.041 Q724.721 859.249 724.721 864.597 Q724.721 869.944 726.226 875.198 Q727.754 880.43 730.832 885.731 L727.129 885.731 Q723.657 880.291 721.92 875.036 Q720.208 869.782 720.208 864.597 Q720.208 859.435 721.92 854.203 Q723.633 848.972 727.129 843.509 L730.832 843.509 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M739.096 853.555 L743.356 853.555 L743.356 879.481 L739.096 879.481 L739.096 853.555 M739.096 843.462 L743.356 843.462 L743.356 848.856 L739.096 848.856 L739.096 843.462 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M773.818 863.833 L773.818 879.481 L769.559 879.481 L769.559 863.972 Q769.559 860.291 768.124 858.462 Q766.689 856.634 763.818 856.634 Q760.369 856.634 758.379 858.833 Q756.388 861.032 756.388 864.828 L756.388 879.481 L752.105 879.481 L752.105 853.555 L756.388 853.555 L756.388 857.583 Q757.916 855.245 759.976 854.087 Q762.059 852.93 764.767 852.93 Q769.235 852.93 771.527 855.708 Q773.818 858.462 773.818 863.833 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M786.434 875.592 L786.434 889.342 L782.152 889.342 L782.152 853.555 L786.434 853.555 L786.434 857.49 Q787.777 855.175 789.814 854.064 Q791.874 852.93 794.721 852.93 Q799.443 852.93 802.383 856.68 Q805.346 860.43 805.346 866.541 Q805.346 872.652 802.383 876.402 Q799.443 880.152 794.721 880.152 Q791.874 880.152 789.814 879.041 Q787.777 877.907 786.434 875.592 M800.925 866.541 Q800.925 861.842 798.98 859.18 Q797.059 856.495 793.679 856.495 Q790.3 856.495 788.355 859.18 Q786.434 861.842 786.434 866.541 Q786.434 871.24 788.355 873.925 Q790.3 876.587 793.679 876.587 Q797.059 876.587 798.98 873.925 Q800.925 871.24 800.925 866.541 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M811.966 869.249 L811.966 853.555 L816.226 853.555 L816.226 869.087 Q816.226 872.768 817.661 874.62 Q819.096 876.448 821.966 876.448 Q825.415 876.448 827.406 874.249 Q829.42 872.05 829.42 868.254 L829.42 853.555 L833.679 853.555 L833.679 879.481 L829.42 879.481 L829.42 875.499 Q827.869 877.86 825.809 879.018 Q823.772 880.152 821.063 880.152 Q816.596 880.152 814.281 877.374 Q811.966 874.597 811.966 869.249 M822.684 852.93 L822.684 852.93 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M846.665 846.194 L846.665 853.555 L855.438 853.555 L855.438 856.865 L846.665 856.865 L846.665 870.939 Q846.665 874.11 847.522 875.013 Q848.401 875.916 851.063 875.916 L855.438 875.916 L855.438 879.481 L851.063 879.481 Q846.133 879.481 844.258 877.652 Q842.383 875.8 842.383 870.939 L842.383 856.865 L839.258 856.865 L839.258 853.555 L842.383 853.555 L842.383 846.194 L846.665 846.194 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M889.234 843.462 L889.234 847.004 L885.16 847.004 Q882.869 847.004 881.966 847.93 Q881.086 848.856 881.086 851.263 L881.086 853.555 L888.1 853.555 L888.1 856.865 L881.086 856.865 L881.086 879.481 L876.804 879.481 L876.804 856.865 L872.73 856.865 L872.73 853.555 L876.804 853.555 L876.804 851.749 Q876.804 847.421 878.818 845.453 Q880.832 843.462 885.207 843.462 L889.234 843.462 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M902.845 856.541 Q899.42 856.541 897.429 859.226 Q895.438 861.888 895.438 866.541 Q895.438 871.194 897.406 873.879 Q899.396 876.541 902.845 876.541 Q906.248 876.541 908.239 873.856 Q910.23 871.171 910.23 866.541 Q910.23 861.935 908.239 859.249 Q906.248 856.541 902.845 856.541 M902.845 852.93 Q908.401 852.93 911.572 856.541 Q914.743 860.152 914.743 866.541 Q914.743 872.907 911.572 876.541 Q908.401 880.152 902.845 880.152 Q897.267 880.152 894.095 876.541 Q890.947 872.907 890.947 866.541 Q890.947 860.152 894.095 856.541 Q897.267 852.93 902.845 852.93 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M936.827 857.536 Q936.109 857.12 935.253 856.935 Q934.419 856.726 933.401 856.726 Q929.79 856.726 927.845 859.087 Q925.924 861.425 925.924 865.823 L925.924 879.481 L921.642 879.481 L921.642 853.555 L925.924 853.555 L925.924 857.583 Q927.267 855.222 929.419 854.087 Q931.572 852.93 934.651 852.93 Q935.091 852.93 935.623 852.999 Q936.155 853.046 936.804 853.161 L936.827 857.536 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M958.91 854.55 L958.91 858.532 Q957.104 857.536 955.276 857.05 Q953.47 856.541 951.618 856.541 Q947.475 856.541 945.183 859.18 Q942.891 861.796 942.891 866.541 Q942.891 871.286 945.183 873.925 Q947.475 876.541 951.618 876.541 Q953.47 876.541 955.276 876.055 Q957.104 875.546 958.91 874.55 L958.91 878.485 Q957.128 879.319 955.206 879.735 Q953.308 880.152 951.155 880.152 Q945.299 880.152 941.85 876.472 Q938.401 872.791 938.401 866.541 Q938.401 860.198 941.873 856.564 Q945.368 852.93 951.433 852.93 Q953.401 852.93 955.276 853.347 Q957.151 853.74 958.91 854.55 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M988.493 865.453 L988.493 867.536 L968.91 867.536 Q969.188 871.934 971.549 874.249 Q973.933 876.541 978.169 876.541 Q980.623 876.541 982.914 875.939 Q985.229 875.337 987.498 874.134 L987.498 878.161 Q985.206 879.134 982.799 879.643 Q980.391 880.152 977.914 880.152 Q971.711 880.152 968.077 876.541 Q964.465 872.93 964.465 866.772 Q964.465 860.407 967.891 856.68 Q971.34 852.93 977.174 852.93 Q982.405 852.93 985.438 856.31 Q988.493 859.666 988.493 865.453 M984.234 864.203 Q984.188 860.708 982.266 858.624 Q980.368 856.541 977.22 856.541 Q973.655 856.541 971.502 858.555 Q969.373 860.569 969.049 864.226 L984.234 864.203 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1011.97 875.546 L1019.6 875.546 L1019.6 849.18 L1011.29 850.847 L1011.29 846.587 L1019.56 844.921 L1024.23 844.921 L1024.23 875.546 L1031.87 875.546 L1031.87 879.481 L1011.97 879.481 L1011.97 875.546 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1040.04 843.509 L1043.75 843.509 Q1047.22 848.972 1048.93 854.203 Q1050.67 859.435 1050.67 864.597 Q1050.67 869.782 1048.93 875.036 Q1047.22 880.291 1043.75 885.731 L1040.04 885.731 Q1043.12 880.43 1044.63 875.198 Q1046.15 869.944 1046.15 864.597 Q1046.15 859.249 1044.63 854.041 Q1043.12 848.833 1040.04 843.509 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><polyline clip-path="url(#clip040)" style="stroke:#ffa500; stroke-linecap:round; stroke-linejoin:round; stroke-width:8; stroke-opacity:1; fill:none" stroke-dasharray="32, 20" points="414.743,914.041 577.86,914.041 "/>
<path clip-path="url(#clip040)" d="M629.074 917.293 L629.074 919.376 L609.491 919.376 Q609.768 923.774 612.129 926.089 Q614.514 928.381 618.75 928.381 Q621.203 928.381 623.495 927.779 Q625.81 927.177 628.078 925.974 L628.078 930.001 Q625.787 930.974 623.379 931.483 Q620.972 931.992 618.495 931.992 Q612.291 931.992 608.657 928.381 Q605.046 924.77 605.046 918.612 Q605.046 912.247 608.472 908.52 Q611.921 904.77 617.754 904.77 Q622.986 904.77 626.018 908.15 Q629.074 911.506 629.074 917.293 M624.814 916.043 Q624.768 912.548 622.847 910.464 Q620.949 908.381 617.801 908.381 Q614.236 908.381 612.083 910.395 Q609.953 912.409 609.629 916.066 L624.814 916.043 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M652.592 906.159 L652.592 910.187 Q650.787 909.261 648.842 908.798 Q646.898 908.335 644.814 908.335 Q641.643 908.335 640.046 909.307 Q638.472 910.279 638.472 912.224 Q638.472 913.705 639.606 914.562 Q640.74 915.395 644.166 916.159 L645.625 916.483 Q650.162 917.455 652.06 919.237 Q653.981 920.997 653.981 924.168 Q653.981 927.779 651.111 929.886 Q648.263 931.992 643.263 931.992 Q641.18 931.992 638.912 931.575 Q636.666 931.182 634.166 930.372 L634.166 925.974 Q636.527 927.2 638.819 927.825 Q641.111 928.427 643.356 928.427 Q646.365 928.427 647.986 927.409 Q649.606 926.367 649.606 924.492 Q649.606 922.756 648.425 921.83 Q647.268 920.904 643.31 920.048 L641.828 919.7 Q637.87 918.867 636.111 917.154 Q634.351 915.418 634.351 912.409 Q634.351 908.751 636.944 906.761 Q639.537 904.77 644.305 904.77 Q646.666 904.77 648.75 905.117 Q650.833 905.464 652.592 906.159 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M664.976 898.034 L664.976 905.395 L673.749 905.395 L673.749 908.705 L664.976 908.705 L664.976 922.779 Q664.976 925.95 665.833 926.853 Q666.712 927.756 669.374 927.756 L673.749 927.756 L673.749 931.321 L669.374 931.321 Q664.444 931.321 662.569 929.492 Q660.694 927.64 660.694 922.779 L660.694 908.705 L657.569 908.705 L657.569 905.395 L660.694 905.395 L660.694 898.034 L664.976 898.034 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M679.351 905.395 L683.61 905.395 L683.61 931.321 L679.351 931.321 L679.351 905.395 M679.351 895.302 L683.61 895.302 L683.61 900.696 L679.351 900.696 L679.351 895.302 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M712.708 910.372 Q714.305 907.501 716.527 906.136 Q718.749 904.77 721.758 904.77 Q725.809 904.77 728.008 907.617 Q730.207 910.441 730.207 915.673 L730.207 931.321 L725.925 931.321 L725.925 915.812 Q725.925 912.085 724.606 910.279 Q723.286 908.474 720.578 908.474 Q717.268 908.474 715.346 910.673 Q713.425 912.872 713.425 916.668 L713.425 931.321 L709.143 931.321 L709.143 915.812 Q709.143 912.062 707.823 910.279 Q706.504 908.474 703.749 908.474 Q700.485 908.474 698.564 910.696 Q696.643 912.895 696.643 916.668 L696.643 931.321 L692.36 931.321 L692.36 905.395 L696.643 905.395 L696.643 909.423 Q698.101 907.038 700.138 905.904 Q702.175 904.77 704.976 904.77 Q707.8 904.77 709.768 906.205 Q711.758 907.64 712.708 910.372 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M750.485 918.288 Q745.323 918.288 743.332 919.469 Q741.342 920.65 741.342 923.497 Q741.342 925.765 742.823 927.108 Q744.328 928.427 746.897 928.427 Q750.439 928.427 752.568 925.927 Q754.721 923.404 754.721 919.237 L754.721 918.288 L750.485 918.288 M758.98 916.529 L758.98 931.321 L754.721 931.321 L754.721 927.386 Q753.263 929.747 751.087 930.881 Q748.911 931.992 745.763 931.992 Q741.781 931.992 739.42 929.77 Q737.082 927.524 737.082 923.774 Q737.082 919.4 739.999 917.177 Q742.939 914.955 748.749 914.955 L754.721 914.955 L754.721 914.538 Q754.721 911.599 752.777 910.001 Q750.855 908.381 747.36 908.381 Q745.138 908.381 743.031 908.913 Q740.925 909.446 738.981 910.511 L738.981 906.576 Q741.319 905.673 743.518 905.233 Q745.717 904.77 747.8 904.77 Q753.425 904.77 756.203 907.687 Q758.98 910.603 758.98 916.529 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M771.966 898.034 L771.966 905.395 L780.74 905.395 L780.74 908.705 L771.966 908.705 L771.966 922.779 Q771.966 925.95 772.823 926.853 Q773.703 927.756 776.365 927.756 L780.74 927.756 L780.74 931.321 L776.365 931.321 Q771.434 931.321 769.559 929.492 Q767.684 927.64 767.684 922.779 L767.684 908.705 L764.559 908.705 L764.559 905.395 L767.684 905.395 L767.684 898.034 L771.966 898.034 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M808.517 917.293 L808.517 919.376 L788.934 919.376 Q789.212 923.774 791.573 926.089 Q793.957 928.381 798.193 928.381 Q800.647 928.381 802.939 927.779 Q805.253 927.177 807.522 925.974 L807.522 930.001 Q805.23 930.974 802.823 931.483 Q800.415 931.992 797.939 931.992 Q791.735 931.992 788.101 928.381 Q784.49 924.77 784.49 918.612 Q784.49 912.247 787.915 908.52 Q791.365 904.77 797.198 904.77 Q802.429 904.77 805.462 908.15 Q808.517 911.506 808.517 917.293 M804.258 916.043 Q804.212 912.548 802.29 910.464 Q800.392 908.381 797.244 908.381 Q793.679 908.381 791.527 910.395 Q789.397 912.409 789.073 916.066 L804.258 916.043 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M832.568 909.33 L832.568 895.302 L836.827 895.302 L836.827 931.321 L832.568 931.321 L832.568 927.432 Q831.225 929.747 829.165 930.881 Q827.128 931.992 824.258 931.992 Q819.559 931.992 816.596 928.242 Q813.656 924.492 813.656 918.381 Q813.656 912.27 816.596 908.52 Q819.559 904.77 824.258 904.77 Q827.128 904.77 829.165 905.904 Q831.225 907.015 832.568 909.33 M818.054 918.381 Q818.054 923.08 819.975 925.765 Q821.92 928.427 825.3 928.427 Q828.679 928.427 830.624 925.765 Q832.568 923.08 832.568 918.381 Q832.568 913.682 830.624 911.02 Q828.679 908.335 825.3 908.335 Q821.92 908.335 819.975 911.02 Q818.054 913.682 818.054 918.381 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M870.901 895.349 Q867.799 900.673 866.295 905.881 Q864.79 911.089 864.79 916.437 Q864.79 921.784 866.295 927.038 Q867.822 932.27 870.901 937.571 L867.197 937.571 Q863.725 932.131 861.989 926.876 Q860.276 921.622 860.276 916.437 Q860.276 911.275 861.989 906.043 Q863.702 900.812 867.197 895.349 L870.901 895.349 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M879.165 905.395 L883.424 905.395 L883.424 931.321 L879.165 931.321 L879.165 905.395 M879.165 895.302 L883.424 895.302 L883.424 900.696 L879.165 900.696 L879.165 895.302 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M913.887 915.673 L913.887 931.321 L909.628 931.321 L909.628 915.812 Q909.628 912.131 908.193 910.302 Q906.757 908.474 903.887 908.474 Q900.438 908.474 898.447 910.673 Q896.457 912.872 896.457 916.668 L896.457 931.321 L892.174 931.321 L892.174 905.395 L896.457 905.395 L896.457 909.423 Q897.984 907.085 900.045 905.927 Q902.128 904.77 904.836 904.77 Q909.304 904.77 911.595 907.548 Q913.887 910.302 913.887 915.673 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M926.503 927.432 L926.503 941.182 L922.22 941.182 L922.22 905.395 L926.503 905.395 L926.503 909.33 Q927.845 907.015 929.882 905.904 Q931.942 904.77 934.79 904.77 Q939.512 904.77 942.452 908.52 Q945.415 912.27 945.415 918.381 Q945.415 924.492 942.452 928.242 Q939.512 931.992 934.79 931.992 Q931.942 931.992 929.882 930.881 Q927.845 929.747 926.503 927.432 M940.993 918.381 Q940.993 913.682 939.049 911.02 Q937.128 908.335 933.748 908.335 Q930.368 908.335 928.424 911.02 Q926.503 913.682 926.503 918.381 Q926.503 923.08 928.424 925.765 Q930.368 928.427 933.748 928.427 Q937.128 928.427 939.049 925.765 Q940.993 923.08 940.993 918.381 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M952.035 921.089 L952.035 905.395 L956.294 905.395 L956.294 920.927 Q956.294 924.608 957.729 926.46 Q959.165 928.288 962.035 928.288 Q965.484 928.288 967.475 926.089 Q969.489 923.89 969.489 920.094 L969.489 905.395 L973.748 905.395 L973.748 931.321 L969.489 931.321 L969.489 927.339 Q967.938 929.7 965.877 930.858 Q963.84 931.992 961.132 931.992 Q956.665 931.992 954.35 929.214 Q952.035 926.437 952.035 921.089 M962.753 904.77 L962.753 904.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M986.734 898.034 L986.734 905.395 L995.507 905.395 L995.507 908.705 L986.734 908.705 L986.734 922.779 Q986.734 925.95 987.59 926.853 Q988.47 927.756 991.132 927.756 L995.507 927.756 L995.507 931.321 L991.132 931.321 Q986.201 931.321 984.326 929.492 Q982.451 927.64 982.451 922.779 L982.451 908.705 L979.326 908.705 L979.326 905.395 L982.451 905.395 L982.451 898.034 L986.734 898.034 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1029.3 895.302 L1029.3 898.844 L1025.23 898.844 Q1022.94 898.844 1022.03 899.77 Q1021.15 900.696 1021.15 903.103 L1021.15 905.395 L1028.17 905.395 L1028.17 908.705 L1021.15 908.705 L1021.15 931.321 L1016.87 931.321 L1016.87 908.705 L1012.8 908.705 L1012.8 905.395 L1016.87 905.395 L1016.87 903.589 Q1016.87 899.261 1018.89 897.293 Q1020.9 895.302 1025.28 895.302 L1029.3 895.302 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1042.91 908.381 Q1039.49 908.381 1037.5 911.066 Q1035.51 913.728 1035.51 918.381 Q1035.51 923.034 1037.47 925.719 Q1039.47 928.381 1042.91 928.381 Q1046.32 928.381 1048.31 925.696 Q1050.3 923.011 1050.3 918.381 Q1050.3 913.775 1048.31 911.089 Q1046.32 908.381 1042.91 908.381 M1042.91 904.77 Q1048.47 904.77 1051.64 908.381 Q1054.81 911.992 1054.81 918.381 Q1054.81 924.747 1051.64 928.381 Q1048.47 931.992 1042.91 931.992 Q1037.34 931.992 1034.16 928.381 Q1031.02 924.747 1031.02 918.381 Q1031.02 911.992 1034.16 908.381 Q1037.34 904.77 1042.91 904.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1076.9 909.376 Q1076.18 908.96 1075.32 908.775 Q1074.49 908.566 1073.47 908.566 Q1069.86 908.566 1067.91 910.927 Q1065.99 913.265 1065.99 917.663 L1065.99 931.321 L1061.71 931.321 L1061.71 905.395 L1065.99 905.395 L1065.99 909.423 Q1067.34 907.062 1069.49 905.927 Q1071.64 904.77 1074.72 904.77 Q1075.16 904.77 1075.69 904.839 Q1076.22 904.886 1076.87 905.001 L1076.9 909.376 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1098.98 906.39 L1098.98 910.372 Q1097.17 909.376 1095.34 908.89 Q1093.54 908.381 1091.69 908.381 Q1087.54 908.381 1085.25 911.02 Q1082.96 913.636 1082.96 918.381 Q1082.96 923.126 1085.25 925.765 Q1087.54 928.381 1091.69 928.381 Q1093.54 928.381 1095.34 927.895 Q1097.17 927.386 1098.98 926.39 L1098.98 930.325 Q1097.2 931.159 1095.27 931.575 Q1093.38 931.992 1091.22 931.992 Q1085.37 931.992 1081.92 928.312 Q1078.47 924.631 1078.47 918.381 Q1078.47 912.038 1081.94 908.404 Q1085.44 904.77 1091.5 904.77 Q1093.47 904.77 1095.34 905.187 Q1097.22 905.58 1098.98 906.39 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1128.56 917.293 L1128.56 919.376 L1108.98 919.376 Q1109.26 923.774 1111.62 926.089 Q1114 928.381 1118.24 928.381 Q1120.69 928.381 1122.98 927.779 Q1125.3 927.177 1127.57 925.974 L1127.57 930.001 Q1125.27 930.974 1122.87 931.483 Q1120.46 931.992 1117.98 931.992 Q1111.78 931.992 1108.15 928.381 Q1104.53 924.77 1104.53 918.612 Q1104.53 912.247 1107.96 908.52 Q1111.41 904.77 1117.24 904.77 Q1122.47 904.77 1125.51 908.15 Q1128.56 911.506 1128.56 917.293 M1124.3 916.043 Q1124.26 912.548 1122.33 910.464 Q1120.44 908.381 1117.29 908.381 Q1113.72 908.381 1111.57 910.395 Q1109.44 912.409 1109.12 916.066 L1124.3 916.043 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1152.03 927.386 L1159.67 927.386 L1159.67 901.02 L1151.36 902.687 L1151.36 898.427 L1159.63 896.761 L1164.3 896.761 L1164.3 927.386 L1171.94 927.386 L1171.94 931.321 L1152.03 931.321 L1152.03 927.386 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /><path clip-path="url(#clip040)" d="M1180.11 895.349 L1183.82 895.349 Q1187.29 900.812 1189 906.043 Q1190.74 911.275 1190.74 916.437 Q1190.74 921.622 1189 926.876 Q1187.29 932.131 1183.82 937.571 L1180.11 937.571 Q1183.19 932.27 1184.7 927.038 Q1186.22 921.784 1186.22 916.437 Q1186.22 911.089 1184.7 905.881 Q1183.19 900.673 1180.11 895.349 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1" /></svg>
<p>Let&rsquo;s quickly go over these results now:</p>
<ol>
<li>State estimation: The <strong>true state</strong> and the <strong>estimated state</strong> show excellent agreement, demonstrating the accuracy of the smoother model implemented via <code>RxInfer</code>. The <strong>uncertainty bounds</strong> around the estimated states are noticeable, especially early in the domain. This reflects the natural uncertainty in state estimation since only <strong>accelerations</strong> are observed, whereas displacements and velocities are inferred through integration.</li>
<li>Reconstructed response: the <strong>real response</strong> and the <strong>reconstructed response</strong> align well across the domain, confirming that the filter captures the dynamics quite nicely. The uncertainty bounds here are narrower, showing that the confidence improves as the filter incorporates observations of these quantities of interest (i.e. accelerations).</li>
<li>Input force reconstruction: The <strong>input force</strong> and its <strong>reconstructed counterpart</strong> show significant high frequency variations with very narrow uncertainty bounds. This is expected because accelerations, being the directly observed quantities, are estimated with higher confidence. Plus, we gave ourselves a small advantage by using a well-calibrated prior on this quantity of interest ($Q_p$).</li>
</ol>
<p>The results demonstrate how well the smoother model, implemented with RxInfer, performs in capturing the system dynamics and reconstructing hidden states and inputs. Notably, setting up the probabilistic model was straightforward and intuitive—much easier than dealing with the rest of the structural modeling! This highlights the power of RxInfer for quickly building and solving complex inference problems while keeping the implementation clean and efficient.</p>
<p>With just a few lines of code, we were able to estimate states, reconstruct responses, and confidently quantify uncertainties—a win for both accuracy and usability. 🚀</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Classification and Survival Analysis with NumPyro</title>
      <link>http://localhost:59413/posts/20240924_numpyro_logreg_surv_analysis/np01_logreg_surv_analysis/</link>
      <pubDate>Tue, 24 Sep 2024 14:12:51 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240924_numpyro_logreg_surv_analysis/np01_logreg_surv_analysis/</guid>
      <description>Applying Bayesian Classification and Survival Analysis to the Cirrhosis Patient Dataset.</description>
      <content:encoded><![CDATA[<p><a href="https://colab.research.google.com/github/vflores-io/Portfolio/blob/main/Bayesian%20Methods%20Tutorials/Python/NumPyro/NP01_LogReg_Surv_Analysis/NP01_LogReg_Surv_Analysis.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></p>
<hr>
<p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/intro.png" type="" alt="image"  /></p>
<h1 id="1-introduction">1. Introduction</h1>
<p>Cirrhosis is a progressive liver disease characterized by the replacement of healthy liver tissue with scar tissue, leading to impaired liver function. Early prediction of patient survival can significantly impact treatment decisions and improve outcomes. In this project, we employ Bayesian statistical methods to analyze and predict the survival of patients with cirrhosis using a publicly available dataset from the UCI ML Dataset Repository.</p>
<ol>
<li>
<p><strong>Bayesian Classification (Logistic Regression):</strong> We develop a Bayesian logistic regression model to predict the survival status of patients based on various clinical features. This probabilistic approach allows us to incorporate prior knowledge and quantify uncertainty in our predictions.</p>
</li>
<li>
<p><strong>Bayesian Survival Analysis:</strong> We perform a comprehensive survival analysis using Bayesian methods. We start with a basic Weibull model without covariates to understand the baseline survival function. We then introduce covariates to the Weibull model, and despite encountering challenges with this approach, we proceed to implement a log-normal model with covariates, which demonstrates improved performance. Finally, we refine the Weibull model by including selected covariates and accounting for censored data to enhance the model&rsquo;s applicability to real-world scenarios.</p>
</li>
</ol>
<p>Throughout this project, we emphasize the iterative nature of model development in Bayesian statistics and showcase how to handle practical issues that may arise during analysis.</p>
<h2 id="11-importing-packages">1.1 Importing Packages</h2>
<p>To begin our analysis, we first import the necessary Python libraries for data manipulation, visualization, and Bayesian modeling.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="s1">&#39;google.colab&#39;</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">get_ipython</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="s1">&#39;numpyro&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
</span></span><span class="line"><span class="cl">        <span class="n">drive</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s1">&#39;/content/drive&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Running on Google Colab. NumPyro will be installed in this environment.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">q</span> <span class="n">numpyro</span><span class="nd">@git</span><span class="o">+</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pyro</span><span class="o">-</span><span class="n">ppl</span><span class="o">/</span><span class="n">numpyro</span> <span class="n">arviz</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;NumPyro is already installed. Skipping installation.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Running locally. Make sure NumPyro and dependencies are installed in the environment.&#34;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Running locally. Make sure NumPyro and dependencies are installed in the environment.
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpyro</span>
</span></span><span class="line"><span class="cl"><span class="n">numpyro</span><span class="o">.</span><span class="n">set_host_device_count</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpyro.distributions</span> <span class="k">as</span> <span class="nn">dist</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">numpyro.infer</span> <span class="kn">import</span> <span class="n">MCMC</span><span class="p">,</span> <span class="n">NUTS</span><span class="p">,</span> <span class="n">Predictive</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">jax</span> <span class="kn">import</span> <span class="n">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jax.numpy</span> <span class="k">as</span> <span class="nn">jnp</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">arviz</span> <span class="k">as</span> <span class="nn">az</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">cm</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span><span class="p">,</span> <span class="n">scale</span>
</span></span></code></pre></div><h2 id="12-loading-the-dataset">1.2 Loading the Dataset</h2>
<p>We load the cirrhosis dataset, adjusting the file path depending on whether we&rsquo;re running the code on Google Colab or locally. After reading the data into a pandas DataFrame, we display the first few rows to preview the dataset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="s1">&#39;google.colab&#39;</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">get_ipython</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">  <span class="n">data_path</span> <span class="o">=</span> <span class="s1">&#39;https://archive.ics.uci.edu/static/public/878/data.csv&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">data_path</span> <span class="o">=</span> <span class="s1">&#39;data/cirrhosis.csv&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">data_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ID</th>
      <th>N_Days</th>
      <th>Status</th>
      <th>Drug</th>
      <th>Age</th>
      <th>Sex</th>
      <th>Ascites</th>
      <th>Hepatomegaly</th>
      <th>Spiders</th>
      <th>Edema</th>
      <th>Bilirubin</th>
      <th>Cholesterol</th>
      <th>Albumin</th>
      <th>Copper</th>
      <th>Alk_Phos</th>
      <th>SGOT</th>
      <th>Tryglicerides</th>
      <th>Platelets</th>
      <th>Prothrombin</th>
      <th>Stage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>400</td>
      <td>D</td>
      <td>D-penicillamine</td>
      <td>21464</td>
      <td>F</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>14.5</td>
      <td>261.0</td>
      <td>2.60</td>
      <td>156.0</td>
      <td>1718.0</td>
      <td>137.95</td>
      <td>172.0</td>
      <td>190.0</td>
      <td>12.2</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>4500</td>
      <td>C</td>
      <td>D-penicillamine</td>
      <td>20617</td>
      <td>F</td>
      <td>N</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
      <td>1.1</td>
      <td>302.0</td>
      <td>4.14</td>
      <td>54.0</td>
      <td>7394.8</td>
      <td>113.52</td>
      <td>88.0</td>
      <td>221.0</td>
      <td>10.6</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1012</td>
      <td>D</td>
      <td>D-penicillamine</td>
      <td>25594</td>
      <td>M</td>
      <td>N</td>
      <td>N</td>
      <td>N</td>
      <td>S</td>
      <td>1.4</td>
      <td>176.0</td>
      <td>3.48</td>
      <td>210.0</td>
      <td>516.0</td>
      <td>96.10</td>
      <td>55.0</td>
      <td>151.0</td>
      <td>12.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1925</td>
      <td>D</td>
      <td>D-penicillamine</td>
      <td>19994</td>
      <td>F</td>
      <td>N</td>
      <td>Y</td>
      <td>Y</td>
      <td>S</td>
      <td>1.8</td>
      <td>244.0</td>
      <td>2.54</td>
      <td>64.0</td>
      <td>6121.8</td>
      <td>60.63</td>
      <td>92.0</td>
      <td>183.0</td>
      <td>10.3</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>1504</td>
      <td>CL</td>
      <td>Placebo</td>
      <td>13918</td>
      <td>F</td>
      <td>N</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
      <td>3.4</td>
      <td>279.0</td>
      <td>3.53</td>
      <td>143.0</td>
      <td>671.0</td>
      <td>113.15</td>
      <td>72.0</td>
      <td>136.0</td>
      <td>10.9</td>
      <td>3.0</td>
    </tr>
  </tbody>
</table>
</div>
<h1 id="2-preparing-and-cleaning-the-data">2. Preparing and Cleaning the Data</h1>
<p>We examine the dataset&rsquo;s structure and data types using the <code>data.info()</code> method. This provides an overview of the dataset, including the number of entries, columns, non-null counts, data types, and memory usage. This step is crucial for identifying missing values and planning how to handle them in our analysis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">info</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 418 entries, 0 to 417
Data columns (total 20 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   ID             418 non-null    int64  
 1   N_Days         418 non-null    int64  
 2   Status         418 non-null    object 
 3   Drug           312 non-null    object 
 4   Age            418 non-null    int64  
 5   Sex            418 non-null    object 
 6   Ascites        312 non-null    object 
 7   Hepatomegaly   312 non-null    object 
 8   Spiders        312 non-null    object 
 9   Edema          418 non-null    object 
 10  Bilirubin      418 non-null    float64
 11  Cholesterol    284 non-null    float64
 12  Albumin        418 non-null    float64
 13  Copper         310 non-null    float64
 14  Alk_Phos       312 non-null    float64
 15  SGOT           312 non-null    float64
 16  Tryglicerides  282 non-null    float64
 17  Platelets      407 non-null    float64
 18  Prothrombin    416 non-null    float64
 19  Stage          412 non-null    float64
dtypes: float64(10), int64(3), object(7)
memory usage: 65.4+ KB
</code></pre>
<p>To assess the extent of missing data in our dataset, we calculate the total number of NaN (missing) values.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># check for nan</span>
</span></span><span class="line"><span class="cl"><span class="n">nan_values</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of NaN values:&#39;</span><span class="p">,</span> <span class="n">nan_values</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span>
</span></span></code></pre></div><pre><code>Number of NaN values: 1033
</code></pre>
<p>This reveals that there are <strong>1,033 missing values</strong> across various columns. Understanding the amount and distribution of missing data is crucial for deciding how to handle it in our analysis, whether through imputation, removal, or other methods.</p>
<p>To pinpoint which columns contain missing values, we identify and list all columns with NaN entries. Recognizing these columns is essential for data cleaning and preprocessing steps. To handle the missing data, we choose to fill all NaN values with zeros using the <code>fillna(0)</code> method. This approach ensures that our dataset is complete and ready for analysis, without excluding any records due to missing values. After performing this operation, we display the updated dataset to confirm that all missing values have been addressed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># find columns with NaN values</span>
</span></span><span class="line"><span class="cl"><span class="n">nan_columns</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">any</span><span class="p">()]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Columns with NaN values:</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">nan_columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># fill NaN values with 0</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span>
</span></span></code></pre></div><pre><code>Columns with NaN values:
 ['Drug', 'Ascites', 'Hepatomegaly', 'Spiders', 'Cholesterol', 'Copper', 'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin', 'Stage']
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ID</th>
      <th>N_Days</th>
      <th>Status</th>
      <th>Drug</th>
      <th>Age</th>
      <th>Sex</th>
      <th>Ascites</th>
      <th>Hepatomegaly</th>
      <th>Spiders</th>
      <th>Edema</th>
      <th>Bilirubin</th>
      <th>Cholesterol</th>
      <th>Albumin</th>
      <th>Copper</th>
      <th>Alk_Phos</th>
      <th>SGOT</th>
      <th>Tryglicerides</th>
      <th>Platelets</th>
      <th>Prothrombin</th>
      <th>Stage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>400</td>
      <td>D</td>
      <td>D-penicillamine</td>
      <td>21464</td>
      <td>F</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>14.5</td>
      <td>261.0</td>
      <td>2.60</td>
      <td>156.0</td>
      <td>1718.0</td>
      <td>137.95</td>
      <td>172.0</td>
      <td>190.0</td>
      <td>12.2</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>4500</td>
      <td>C</td>
      <td>D-penicillamine</td>
      <td>20617</td>
      <td>F</td>
      <td>N</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
      <td>1.1</td>
      <td>302.0</td>
      <td>4.14</td>
      <td>54.0</td>
      <td>7394.8</td>
      <td>113.52</td>
      <td>88.0</td>
      <td>221.0</td>
      <td>10.6</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1012</td>
      <td>D</td>
      <td>D-penicillamine</td>
      <td>25594</td>
      <td>M</td>
      <td>N</td>
      <td>N</td>
      <td>N</td>
      <td>S</td>
      <td>1.4</td>
      <td>176.0</td>
      <td>3.48</td>
      <td>210.0</td>
      <td>516.0</td>
      <td>96.10</td>
      <td>55.0</td>
      <td>151.0</td>
      <td>12.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1925</td>
      <td>D</td>
      <td>D-penicillamine</td>
      <td>19994</td>
      <td>F</td>
      <td>N</td>
      <td>Y</td>
      <td>Y</td>
      <td>S</td>
      <td>1.8</td>
      <td>244.0</td>
      <td>2.54</td>
      <td>64.0</td>
      <td>6121.8</td>
      <td>60.63</td>
      <td>92.0</td>
      <td>183.0</td>
      <td>10.3</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>1504</td>
      <td>CL</td>
      <td>Placebo</td>
      <td>13918</td>
      <td>F</td>
      <td>N</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
      <td>3.4</td>
      <td>279.0</td>
      <td>3.53</td>
      <td>143.0</td>
      <td>671.0</td>
      <td>113.15</td>
      <td>72.0</td>
      <td>136.0</td>
      <td>10.9</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>413</th>
      <td>414</td>
      <td>681</td>
      <td>D</td>
      <td>0</td>
      <td>24472</td>
      <td>F</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>N</td>
      <td>1.2</td>
      <td>0.0</td>
      <td>2.96</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>174.0</td>
      <td>10.9</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>414</th>
      <td>415</td>
      <td>1103</td>
      <td>C</td>
      <td>0</td>
      <td>14245</td>
      <td>F</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>N</td>
      <td>0.9</td>
      <td>0.0</td>
      <td>3.83</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>180.0</td>
      <td>11.2</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>415</th>
      <td>416</td>
      <td>1055</td>
      <td>C</td>
      <td>0</td>
      <td>20819</td>
      <td>F</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>N</td>
      <td>1.6</td>
      <td>0.0</td>
      <td>3.42</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>143.0</td>
      <td>9.9</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>416</th>
      <td>417</td>
      <td>691</td>
      <td>C</td>
      <td>0</td>
      <td>21185</td>
      <td>F</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>N</td>
      <td>0.8</td>
      <td>0.0</td>
      <td>3.75</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>269.0</td>
      <td>10.4</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>417</th>
      <td>418</td>
      <td>976</td>
      <td>C</td>
      <td>0</td>
      <td>19358</td>
      <td>F</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>N</td>
      <td>0.7</td>
      <td>0.0</td>
      <td>3.29</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>350.0</td>
      <td>10.6</td>
      <td>4.0</td>
    </tr>
  </tbody>
</table>
<p>418 rows × 20 columns</p>
</div>
<h3 id="21-data-preprocessing">2.1 Data Preprocessing</h3>
<p>To prepare the dataset for modeling, we perform several preprocessing steps, including handling categorical variables, scaling numerical features, and encoding target variables.</p>
<p><strong>1. Extracting and Processing Categorical Data:</strong></p>
<ul>
<li>
<p><strong>Selecting Categorical Columns:</strong> We extract all columns with data type <code>'object'</code>, which represent categorical variables in the dataset.</p>
</li>
<li>
<p><strong>Including <code>'Stage'</code> as Categorical:</strong> Although the <code>'Stage'</code> column is numeric, it represents categorical stages of cirrhosis, so we include it in the categorical data.</p>
</li>
<li>
<p><strong>Mapping <code>'Status'</code> to Binary Values:</strong> The <code>'Status'</code> column indicates the patient&rsquo;s survival status with values <code>'C'</code> (Censored), <code>'CL'</code> (Censored Liver), and <code>'D'</code> (Deceased). We map these to binary values for modeling, where <code>'C'</code> and <code>'CL'</code> are mapped to 0 (survived), and <code>'D'</code> is mapped to 1 (did not survive).</p>
</li>
</ul>
<p><strong>2. Extracting and Scaling Numerical Data:</strong></p>
<ul>
<li>
<p><strong>Selecting Numerical Features:</strong> We select all numerical columns from the dataset, excluding <code>'ID'</code>, <code>'N_Days'</code>, and <code>'Stage'</code>.</p>
<ul>
<li><strong><code>'ID'</code>:</strong> A unique identifier for each patient, which does not contribute to the model and can be excluded.</li>
<li><strong><code>'N_Days'</code>:</strong> Represents the number of days of follow-up and will be used as the target variable in survival analysis.</li>
<li><strong><code>'Stage'</code>:</strong> Already included as a categorical variable.</li>
</ul>
</li>
<li>
<p><strong>Scaling Numerical Features:</strong> We scale the numerical features using standard scaling (mean = 0, variance = 1) to normalize the data, which can improve the performance of many machine learning models.</p>
</li>
</ul>
<p><strong>3. Encoding Categorical Variables:</strong></p>
<ul>
<li><strong>Label Encoding:</strong> We encode the categorical variables into numerical format using label encoding, which assigns unique integer values to each category in a column.</li>
</ul>
<p><strong>4. Combining Processed Data:</strong></p>
<ul>
<li><strong>Concatenating DataFrames:</strong> We concatenate the encoded categorical data, the scaled numerical data, and the <code>'ID'</code>, <code>'N_Days'</code>, and <code>'Stage'</code> columns into a single DataFrame. This consolidated dataset is now ready for modeling.</li>
</ul>
<p>Finally, we display the first few rows of the processed dataset to verify that the preprocessing steps have been applied correctly.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># separate categorical and numerical features</span>
</span></span><span class="line"><span class="cl"><span class="n">categorical_data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span> <span class="o">=</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># include &#39;Stage&#39; in categorical data</span>
</span></span><span class="line"><span class="cl"><span class="n">categorical_data</span><span class="p">[</span><span class="s1">&#39;Stage&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Stage&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># map status to binary vlaues</span>
</span></span><span class="line"><span class="cl"><span class="n">status_mapping</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;C&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;CL&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">categorical_data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">categorical_data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">status_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select numerical features, excluding &#39;Stage&#39;, &#39;ID&#39; and &#39;N_Days&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;Stage&#39; is actually a categorical feature</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;ID&#39; has no relevance</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;N_Days&#39; is the target value</span>
</span></span><span class="line"><span class="cl"><span class="n">numerical_data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">include</span> <span class="o">=</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="s1">&#39;N_Days&#39;</span><span class="p">,</span> <span class="s1">&#39;Stage&#39;</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># scale numerical features</span>
</span></span><span class="line"><span class="cl"><span class="n">numerical_scaled</span> <span class="o">=</span> <span class="n">scale</span><span class="p">(</span><span class="n">numerical_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">numerical_scaled_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">numerical_scaled</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="n">numerical_data</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># label encoder</span>
</span></span><span class="line"><span class="cl"><span class="n">label_encoder</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">categorical_data</span> <span class="o">=</span> <span class="n">categorical_data</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">label_encoder</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># concatenate encoded categorical and scaled numerical features</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">categorical_data</span><span class="p">,</span> <span class="n">data</span><span class="p">[[</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="s1">&#39;N_Days&#39;</span><span class="p">,</span> <span class="s1">&#39;Stage&#39;</span><span class="p">]],</span> <span class="n">numerical_scaled_df</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Status</th>
      <th>Drug</th>
      <th>Sex</th>
      <th>Ascites</th>
      <th>Hepatomegaly</th>
      <th>Spiders</th>
      <th>Edema</th>
      <th>Stage</th>
      <th>ID</th>
      <th>N_Days</th>
      <th>...</th>
      <th>Age</th>
      <th>Bilirubin</th>
      <th>Cholesterol</th>
      <th>Albumin</th>
      <th>Copper</th>
      <th>Alk_Phos</th>
      <th>SGOT</th>
      <th>Tryglicerides</th>
      <th>Platelets</th>
      <th>Prothrombin</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>4</td>
      <td>1</td>
      <td>400</td>
      <td>...</td>
      <td>0.768941</td>
      <td>2.562152</td>
      <td>0.038663</td>
      <td>-2.114296</td>
      <td>0.981918</td>
      <td>0.116853</td>
      <td>0.642305</td>
      <td>1.110012</td>
      <td>-0.572406</td>
      <td>1.20688</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>2</td>
      <td>0</td>
      <td>3</td>
      <td>2</td>
      <td>4500</td>
      <td>...</td>
      <td>0.546706</td>
      <td>-0.481759</td>
      <td>0.198060</td>
      <td>1.513818</td>
      <td>-0.216383</td>
      <td>2.902613</td>
      <td>0.304654</td>
      <td>0.048897</td>
      <td>-0.277943</td>
      <td>-0.06384</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>4</td>
      <td>3</td>
      <td>1012</td>
      <td>...</td>
      <td>1.852567</td>
      <td>-0.413611</td>
      <td>-0.291793</td>
      <td>-0.041088</td>
      <td>1.616312</td>
      <td>-0.473001</td>
      <td>0.063889</td>
      <td>-0.367969</td>
      <td>-0.942860</td>
      <td>1.04804</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>2</td>
      <td>1</td>
      <td>4</td>
      <td>4</td>
      <td>1925</td>
      <td>...</td>
      <td>0.383244</td>
      <td>-0.322748</td>
      <td>-0.027428</td>
      <td>-2.255651</td>
      <td>-0.098903</td>
      <td>2.277917</td>
      <td>-0.426348</td>
      <td>0.099427</td>
      <td>-0.638898</td>
      <td>-0.30210</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>2</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>2</td>
      <td>0</td>
      <td>3</td>
      <td>5</td>
      <td>1504</td>
      <td>...</td>
      <td>-1.210972</td>
      <td>0.040704</td>
      <td>0.108642</td>
      <td>0.076708</td>
      <td>0.829193</td>
      <td>-0.396938</td>
      <td>0.299540</td>
      <td>-0.153220</td>
      <td>-1.085342</td>
      <td>0.17442</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 21 columns</p>
</div>
<h3 id="22-exploratory-data-analysis-eda">2.2 Exploratory Data Analysis (EDA)</h3>
<p>With the data preprocessed, we now perform Exploratory Data Analysis to gain insights into the dataset. This involves visualizing the distributions of key variables and exploring patterns that might inform our modeling approach.</p>
<h4 id="visualizing-survival-status">Visualizing Survival Status</h4>
<p>We begin by examining the distribution of the &lsquo;Status&rsquo; variable, which indicates whether a patient survived (0) or did not survive (1). Understanding the class balance is crucial for classification tasks and can impact the performance of our predictive models.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># count plot</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;Status&#39;</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;lightblue&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_16_0.png" type="" alt="png"  /></p>
<p>The bar plot above shows the distribution of patient survival status in the dataset. The <code>'Status'</code> variable is binary, with 0 representing patients who survived and 1 representing those who did not survive. The plot reveals that there are more patients who survived (labeled as 0) compared to those who did not survive (labeled as 1), indicating a slight class imbalance in the dataset.</p>
<h4 id="correlation-heatmap">Correlation Heatmap</h4>
<p>Next, we examine the relationships between the numerical features by visualizing their pairwise correlations using a heatmap. A correlation heatmap helps us understand how different variables are related to one another, which is particularly useful for identifying multicollinearity or discovering variables that might be strong predictors of survival.</p>
<p>In this plot, the correlation coefficients range from -1 to 1:</p>
<ul>
<li><strong>Positive correlation (values closer to 1)</strong> indicates that as one variable increases, the other also increases.</li>
<li><strong>Negative correlation (values closer to -1)</strong> indicates that as one variable increases, the other decreases.</li>
<li><strong>Values near 0</strong> suggest little to no linear relationship between the variables.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># correlation heatmap</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">numerical_data</span><span class="o">.</span><span class="n">corr</span><span class="p">(),</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span> <span class="o">=</span> <span class="s1">&#39;coolwarm&#39;</span><span class="p">,</span> <span class="n">annot</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;Correlation Heatmap&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_19_0.png" type="" alt="png"  /></p>
<p><strong>Interpretation of the Correlation Heatmap</strong></p>
<p>The heatmap reveals several interesting relationships between the features. For example:</p>
<ul>
<li><strong>Cholesterol and SGOT</strong> have a relatively high positive correlation (0.61), indicating that as cholesterol levels increase, SGOT tends to increase as well.</li>
<li><strong>Cholesterol and Triglycerides</strong> also show a strong positive correlation (0.63), which suggests that these two features might capture similar information.</li>
<li><strong>Bilirubin and Copper</strong> exhibit a moderate positive correlation (0.36), which could indicate some physiological link between these features.</li>
</ul>
<p>By identifying correlated features, we can make informed decisions on feature selection for modeling to avoid multicollinearity or redundancy in the predictors.</p>
<h4 id="correlation-of-features-with-the-target">Correlation of Features with the Target</h4>
<p>To further investigate the predictive power of each feature, we calculate the absolute correlation between each feature and the target variable, <code>Status</code>, which represents patient survival. Correlation with the target helps us identify which features are most strongly associated with survival and might be valuable predictors in our classification and survival models.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># calculate correlations with the target variable</span>
</span></span><span class="line"><span class="cl"><span class="n">correlations</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="s1">&#39;N_Days&#39;</span><span class="p">,</span> <span class="s1">&#39;Stage&#39;</span><span class="p">,</span> <span class="s1">&#39;Status&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">corrwith</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">abs</span><span class="p">()</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># generate colors</span>
</span></span><span class="line"><span class="cl"><span class="n">n_features</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">correlations</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="n">cm</span><span class="o">.</span><span class="n">rainbow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n_features</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot horizontal bar plot for feature correlations with the target</span>
</span></span><span class="line"><span class="cl"><span class="n">correlations</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">barh</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Feature Correlations with the Target&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Correlation&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Feature&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_22_0.png" type="" alt="png"  /></p>
<p><strong>Plotting Feature Correlations</strong></p>
<p>In the horizontal bar plot above, the features are sorted by their correlation with the target variable. Features with higher correlations are likely to be more informative in predicting the patient&rsquo;s survival status.</p>
<p><strong>Interpretation of the Plot</strong></p>
<ul>
<li><strong>Bilirubin</strong>, <strong>Edema</strong>, and <strong>Copper</strong> are among the features with the strongest correlation to the target, suggesting they may be highly influential in determining survival outcomes.</li>
<li><strong>Sex</strong> and <strong>Drug</strong> show relatively weak correlations, indicating they might have less impact on survival predictions.</li>
<li>This plot will help guide the selection of features in our model, focusing on those with higher correlations for better predictive performance.</li>
</ul>
<h4 id="pair-plot-of-selected-features">Pair Plot of Selected Features</h4>
<p>To explore the relationships between the most significant features and the target variable, we create a pair plot. This type of plot is particularly useful for visualizing the pairwise relationships between features, along with their distributions, while also distinguishing between different classes of the target variable.</p>
<p><strong>Selecting Top Features</strong></p>
<p>We focus on the top features identified from the previous correlation analysis to avoid overloading the plot with too many variables. The selected features have the strongest correlation with the target variable, <code>Status</code>, and are likely to be the most informative for our analysis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pairplot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># first, take care of the warning:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># FutureWarning: use_inf_as_na option is deprecated and will be removed</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in a future version. Convert inf values to NaN before operating instead.</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">replace</span><span class="p">([</span><span class="n">np</span><span class="o">.</span><span class="n">inf</span><span class="p">,</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">inf</span><span class="p">],</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># there are too many features, so we only plot some of them</span>
</span></span><span class="line"><span class="cl"><span class="c1"># we have previously assigned the correlations and sorted them</span>
</span></span><span class="line"><span class="cl"><span class="c1"># so now we select the top features</span>
</span></span><span class="line"><span class="cl"><span class="n">top_features</span> <span class="o">=</span> <span class="n">correlations</span><span class="o">.</span><span class="n">index</span><span class="p">[:</span><span class="mi">7</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">selected_features</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">top_features</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span> <span class="o">+</span> <span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">top_features</span><span class="o">.</span><span class="n">to_list</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">pairplot</span><span class="p">(</span><span class="n">selected_features</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s1">&#39;Status&#39;</span><span class="p">);</span>
</span></span></code></pre></div><pre><code>['Bilirubin', 'Edema', 'Copper', 'Prothrombin', 'Albumin', 'Age', 'Alk_Phos']
</code></pre>
<p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_25_1.png" type="" alt="png"  /></p>
<p><strong>Interpretation of the Pair Plot</strong></p>
<p>In the pair plot above, we observe scatter plots for each pair of selected features, with data points colored by the patient&rsquo;s survival status (<code>Status</code>):</p>
<ul>
<li><strong>Blue</strong> represents patients who survived (<code>Status = 0</code>).</li>
<li><strong>Orange</strong> represents patients who did not survive (<code>Status = 1</code>).</li>
</ul>
<p>Diagonal plots show the distribution of individual features, while off-diagonal plots reveal the relationships between different features. This helps us identify potential clusters, outliers, and separations between survival classes based on feature combinations. For example, we can observe how <strong>Bilirubin</strong> and <strong>Edema</strong> may differ between the two groups, providing insights into their predictive power.</p>
<h1 id="3-bayesian-logistic-regression-for-survival-classification">3. Bayesian Logistic Regression for Survival Classification</h1>
<p>In this section, we implement a Bayesian logistic regression model to predict patient survival based on clinical features. The logistic regression model is a widely used method for binary classification tasks. In a Bayesian framework, the model allows us to incorporate prior knowledge and quantify uncertainty in the predictions, making it especially suitable for medical applications where uncertainty plays a crucial role.</p>
<h2 id="31-defining-the-bayesian-logistic-regression-model">3.1 Defining the Bayesian Logistic Regression Model</h2>
<p>The logistic regression model predicts the probability of an event (in this case, patient survival) occurring. The model&rsquo;s structure can be described as:</p>
<p>\begin{aligned}
\text{logit}(P(y = 1 \mid X)) = \alpha + X\beta
\end{aligned}</p>
<p>Where:</p>
<ul>
<li>$ y $ is the binary outcome (survival: 0 or 1).</li>
<li>$ X $ is the matrix of features (predictors).</li>
<li>$ \alpha $ is the intercept term (a scalar).</li>
<li>$ \beta $ is the vector of coefficients corresponding to the features in $ X $.</li>
<li>$ \text{logit}(p) $ is the log-odds transformation: $ \text{logit}(p) = \log\left(\frac{p}{1 - p}\right) $.</li>
</ul>
<p>The posterior distribution for the model parameters $ \alpha $ and $ \beta $ is obtained using Bayesian inference, which combines prior distributions with the likelihood of the data.</p>
<h3 id="code-explanation">Code Explanation</h3>
<p>In the code below, we define the Bayesian logistic regression model using <a href="https://num.pyro.ai/en/stable/index.html"><strong>NumPyro</strong></a>:</p>
<ul>
<li>
<p><strong>Priors:</strong> We assume normal priors for both the intercept term $ \alpha $ and the coefficients $ \beta $. These priors reflect our belief about the parameters before observing the data:</p>
<ul>
<li>$ \alpha \sim \mathcal{N}(0, 1) $</li>
<li>$ \beta_j \sim \mathcal{N}(0, 1) $ for each feature $ j $.</li>
</ul>
</li>
<li>
<p><strong>Likelihood:</strong> The likelihood function specifies how the data (observed outcomes) are generated given the parameters. In this case, the likelihood follows a Bernoulli distribution, where the probability of success (survival) is given by the logistic function applied to the linear combination of the features.</p>
</li>
</ul>
<p>\begin{aligned}
P(y_i = 1 \mid X_i, \alpha, \beta) = \frac{1}{1 + \exp^{-(\alpha + X_i\beta)}}
\end{aligned}</p>
<p>The code block defines the model structure, including priors and likelihood, and will be used in the next steps for inference using MCMC (Markov Chain Monte Carlo).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define the bayesian model</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jax.numpy</span> <span class="k">as</span> <span class="nn">jnp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">cirrhosis_classification_model</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># define priors</span>
</span></span><span class="line"><span class="cl">    <span class="n">alpha</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">beta</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">dist</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                              <span class="n">jnp</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]]),</span>
</span></span><span class="line"><span class="cl">                              <span class="n">jnp</span><span class="o">.</span><span class="n">ones</span><span class="p">([</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]]))</span>
</span></span><span class="line"><span class="cl">                          <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">logits</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">+</span> <span class="n">jnp</span><span class="o">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># define likelihood</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">plate</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Bernoulli</span><span class="p">(</span><span class="n">logits</span> <span class="o">=</span> <span class="n">logits</span><span class="p">),</span> <span class="n">obs</span> <span class="o">=</span> <span class="n">y</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="preparing-the-data-for-modeling">Preparing the Data for Modeling</h3>
<p>Before fitting the Bayesian logistic regression model, we need to prepare the input data. We use the top features identified from the correlation analysis as our predictors, and the <code>Status</code> column as the binary outcome (survival).</p>
<ul>
<li><strong><code>X</code>:</strong> The matrix of predictor variables (features), consisting of the top correlated features selected during EDA.</li>
<li><strong><code>y</code>:</strong> The target variable, representing the patient&rsquo;s survival status (0 for survived, 1 for not survived).</li>
</ul>
<p>We then check the shape of <code>X</code> to confirm that it has the correct dimensions for modeling (rows corresponding to patients and columns corresponding to features).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># prepare the data</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">top_features</span><span class="o">.</span><span class="n">to_list</span><span class="p">()]</span><span class="o">.</span><span class="n">values</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">X</span><span class="o">.</span><span class="n">shape</span>
</span></span></code></pre></div><pre><code>(418, 7)
</code></pre>
<h3 id="visualizing-the-model-structure">Visualizing the Model Structure</h3>
<p>To better understand the structure of our Bayesian logistic regression model, we generate a graphical representation using <code>numpyro.render_model()</code>. This function provides a clear visualization of the model&rsquo;s components, including the priors, likelihood, and data dependencies.</p>
<p>In the rendered graph, we can see:</p>
<ul>
<li><strong>Priors:</strong> The intercept <code>alpha</code> and coefficients <code>beta</code> are sampled from normal distributions.</li>
<li><strong>Likelihood:</strong> The binary target variable <code>y</code> follows a Bernoulli distribution with probabilities defined by the logistic transformation of the linear combination of features (<code>logits</code>).</li>
</ul>
<p>This graphical model representation helps ensure that the model is correctly specified and provides insights into how the data interacts with the parameters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">numpyro</span><span class="o">.</span><span class="n">render_model</span><span class="p">(</span><span class="n">cirrhosis_classification_model</span><span class="p">,</span> <span class="n">model_args</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_32_0.svg" type="" alt="svg"  /></p>
<h3 id="32-running-mcmc-inference">3.2 Running MCMC Inference</h3>
<p>We use <strong>Markov Chain Monte Carlo (MCMC)</strong> with the <strong>No-U-Turn Sampler (NUTS)</strong> to perform Bayesian inference on our logistic regression model. MCMC is a powerful method for sampling from the posterior distribution of our model&rsquo;s parameters, especially in cases where analytical solutions are intractable.</p>
<ul>
<li><strong><code>NUTS</code>:</strong> A variant of Hamiltonian Monte Carlo (HMC) that automatically tunes the step size and trajectory length, improving the efficiency of the sampling process.</li>
<li><strong><code>num_warmup</code>:</strong> The number of warm-up steps (burn-in period) where the sampler adapts to the posterior distribution.</li>
<li><strong><code>num_samples</code>:</strong> The number of samples to draw from the posterior after the warm-up phase.</li>
<li><strong><code>num_chains</code>:</strong> The number of independent MCMC chains to run in parallel, allowing us to evaluate the convergence of the model.</li>
</ul>
<p>We then execute the sampling procedure using the <code>run()</code> method, which generates samples from the posterior distribution of the model parameters. After sampling, we print the summary of the results, which includes posterior means, standard deviations, and diagnostics such as effective sample size (ESS) and R-hat (a measure of convergence).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">mcmc</span> <span class="o">=</span> <span class="n">MCMC</span><span class="p">(</span><span class="n">NUTS</span><span class="p">(</span><span class="n">cirrhosis_classification_model</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">num_warmup</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">num_chains</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mcmc</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc</span><span class="o">.</span><span class="n">print_summary</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



                mean       std    median      5.0%     95.0%     n_eff     r_hat
     alpha     -0.54      0.14     -0.54     -0.76     -0.32   6398.50      1.00
   beta[0]      1.21      0.21      1.21      0.85      1.55   6336.86      1.00
   beta[1]      0.65      0.30      0.65      0.11      1.09   4819.01      1.00
   beta[2]      0.32      0.15      0.32      0.06      0.55   6200.94      1.00
   beta[3]      0.44      0.15      0.44      0.21      0.69   6358.73      1.00
   beta[4]     -0.14      0.13     -0.15     -0.36      0.07   6798.94      1.00
   beta[5]      0.64      0.14      0.64      0.41      0.86   7289.60      1.00
   beta[6]      0.41      0.13      0.40      0.19      0.62   6308.57      1.00

Number of divergences: 0
</code></pre>
<h4 id="mcmc-inference-summary">MCMC Inference Summary</h4>
<p>The output of the MCMC inference provides a summary of the posterior distributions for each parameter in the model, including the intercept (<code>alpha</code>) and the coefficients for the selected features (<code>beta</code> values). Each row represents a parameter, and the summary includes the following key statistics:</p>
<ul>
<li><strong>mean:</strong> The mean of the posterior distribution, which gives us a point estimate of the parameter.</li>
<li><strong>std:</strong> The standard deviation of the posterior, indicating the uncertainty in the parameter estimate.</li>
<li><strong>median:</strong> The median of the posterior distribution, often used as a robust point estimate.</li>
<li><strong>5.0% and 95.0% percentiles:</strong> The lower and upper bounds of the 90% credible interval, giving us a range within which the true value of the parameter is likely to lie with 90% probability.</li>
<li><strong>n_eff:</strong> The effective sample size, which quantifies the amount of independent information in the MCMC samples. A higher value suggests that the chain is well-mixed and the samples are less correlated.</li>
<li><strong>r_hat:</strong> The R-hat statistic, which measures the convergence of the MCMC chains. Values close to 1 indicate good convergence, meaning the chains have converged to the same distribution.</li>
</ul>
<h4 id="interpretation">Interpretation</h4>
<ul>
<li>
<p><strong><code>alpha</code>:</strong> The intercept has a posterior mean of -0.54 with a standard deviation of 0.14, indicating moderate uncertainty. The 90% credible interval ranges from -0.76 to -0.32.</p>
</li>
<li>
<p><strong><code>beta[0]</code>:</strong> This coefficient has the highest posterior mean (1.21) and the smallest credible interval, suggesting that it has a strong positive effect on the probability of survival.</p>
</li>
<li>
<p><strong><code>beta[1]</code> to <code>beta[6]</code>:</strong> These coefficients represent the effects of the top features on survival. The values range between -0.14 and 0.65, indicating varying levels of influence. For example, <code>beta[5]</code> (0.64) and <code>beta[6]</code> (0.41) show relatively strong positive associations with the target variable.</p>
</li>
<li>
<p><strong>Effective Sample Size (n_eff):</strong> All parameters have high effective sample sizes (in the thousands), indicating that the MCMC sampler performed efficiently and produced a large number of independent samples.</p>
</li>
<li>
<p><strong>R-hat:</strong> The R-hat values are all 1.00, confirming that the MCMC chains have converged successfully for each parameter.</p>
</li>
</ul>
<p>The inference results show that the model has converged well, and we have meaningful posterior estimates for the model parameters. The posterior means and credible intervals provide insights into how the features are associated with the probability of survival, with several coefficients (e.g., <code>beta[0]</code>, <code>beta[5]</code>) standing out as strong predictors.</p>
<h3 id="33-trace-and-pair-plots-for-mcmc-diagnostics">3.3 Trace and Pair Plots for MCMC Diagnostics</h3>
<p>To assess the performance and convergence of the MCMC sampler, we generate trace plots and pair plots of the sampled posterior distributions. These plots allow us to visually inspect how well the sampler explored the parameter space and whether there were any issues, such as divergences.</p>
<ol>
<li>
<p><strong>Trace Plot:</strong>
The trace plot shows the sampled values of each parameter across the MCMC iterations. Ideally, we expect to see &ldquo;well-mixed&rdquo; chains, where the samples quickly explore the parameter space without getting stuck, indicating good convergence.</p>
</li>
<li>
<p><strong>Pair Plot:</strong>
The pair plot visualizes the relationships between the parameters by plotting their joint posterior distributions. We also include information about divergences, which can indicate potential problems with the sampling process. Divergences suggest that the sampler struggled to explore certain regions of the posterior, often due to ill-specified priors or likelihoods.</p>
</li>
</ol>
<p>These plots provide valuable diagnostics for ensuring that the MCMC sampling was successful and that the posterior estimates are reliable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">trace</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">compact</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_37_0.png" type="" alt="png"  /></p>
<h4 id="interpreting-the-trace-plot">Interpreting the Trace Plot</h4>
<p>The <strong>trace plot</strong> shows the sampled values of each parameter (both <code>alpha</code> and <code>beta</code> coefficients) across the iterations of the MCMC chains. The left-hand side of each panel displays the posterior distribution (density plot), while the right-hand side shows the trace of the samples.</p>
<ul>
<li>
<p><strong>Posterior Distributions:</strong> Each parameter&rsquo;s posterior distribution appears well-behaved and roughly Gaussian, with all MCMC chains overlapping significantly. This indicates good convergence across the different chains.</p>
</li>
<li>
<p><strong>Trace of Samples:</strong> The trace plots show that the MCMC samples fluctuate around a stable mean, with no obvious trends or drifts. This behavior suggests that the chains have mixed well and are sampling from the stationary distribution, which is essential for reliable posterior estimates.</p>
</li>
</ul>
<p>Overall, the trace plot confirms that the model parameters have converged and the posterior distributions are stable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_pair</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">divergences</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_39_0.png" type="" alt="png"  /></p>
<h4 id="interpreting-the-pair-plot">Interpreting the Pair Plot</h4>
<p>The <strong>pair plot</strong> shows pairwise relationships between the parameters (<code>alpha</code> and <code>beta</code> coefficients), with each dot representing a sample from the posterior distribution. The diagonal plots display the marginal distributions for each parameter, while the off-diagonal scatter plots show the joint distributions between pairs of parameters.</p>
<ul>
<li>
<p><strong>Joint Distributions:</strong> The scatter plots between parameter pairs show no strong patterns, such as high correlations or dependencies. This suggests that the parameters are relatively independent of each other, which is a positive sign for the model&rsquo;s stability and interpretability.</p>
</li>
<li>
<p><strong>Divergences:</strong> No major divergences or problematic regions are visible in the joint distributions, indicating that the sampler did not struggle with any particular combination of parameters.</p>
</li>
</ul>
<p>The pair plot helps us visually confirm that the posterior samples form well-behaved distributions, with no obvious issues like strong correlations or divergences. Together, the trace and pair plots provide strong evidence that the MCMC sampling has performed effectively and that the posterior estimates are trustworthy.</p>
<h3 id="34-prior-predictive-checks">3.4 Prior Predictive Checks</h3>
<p>Before analyzing the posterior predictive distribution, it is important to first check the prior predictive distribution to ensure that our prior assumptions make sense. A <strong>prior predictive check</strong> involves generating data from the model using only the priors, without any influence from the observed data. This allows us to see if the priors we have chosen are reasonable and if they align with plausible outcomes.</p>
<ul>
<li><strong><code>Predictive</code>:</strong> We use the <code>Predictive</code> class to sample from the prior distribution of our Bayesian model.</li>
<li><strong><code>y_prior</code>:</strong> This contains samples generated from the prior distribution. These are drawn without considering the observed data, giving us a sense of the expected outcomes under the prior assumptions.</li>
<li><strong><code>prior_data</code>:</strong> The prior samples are converted into an <code>InferenceData</code> object, which allows us to use <strong>ArviZ</strong>&rsquo;s plotting utilities.</li>
<li><strong>Plotting Prior Predictive Samples:</strong> The prior predictive plot shows the range of outcomes generated purely from the prior distributions.</li>
</ul>
<p>This check ensures that our prior assumptions are not unrealistic and that the prior distributions provide a reasonable range of expected outcomes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prior</span> <span class="o">=</span> <span class="n">Predictive</span><span class="p">(</span><span class="n">cirrhosis_classification_model</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get the prior samples</span>
</span></span><span class="line"><span class="cl"><span class="n">y_prior</span> <span class="o">=</span> <span class="n">prior</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">X</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert to InferenceData</span>
</span></span><span class="line"><span class="cl"><span class="n">prior_data</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc</span><span class="p">,</span> <span class="n">prior</span> <span class="o">=</span> <span class="n">y_prior</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the prior samples</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_ppc</span><span class="p">(</span><span class="n">prior_data</span><span class="p">,</span> <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;prior&#39;</span><span class="p">,</span> <span class="n">observed</span> <span class="o">=</span> <span class="kc">True</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_42_0.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-prior-predictive-check">Interpretation of the Prior Predictive Check</h4>
<p>The prior predictive check plot shows the range of possible outcomes (in blue) generated from the model based purely on the prior distributions. The dashed orange line represents the mean of the prior predictive distribution, while the solid black line indicates the observed data.</p>
<ul>
<li>
<p><strong>Prior Predictive Range:</strong> The blue lines show a wide spread of potential outcomes, indicating that the priors we defined for the model parameters allow for a broad range of values for the binary target variable (<code>y</code>), which corresponds to patient survival. This ensures that the priors are not overly restrictive.</p>
</li>
<li>
<p><strong>Comparison to Observed Data:</strong> The observed data (black lines) mostly align within the range of the prior predictive distribution, suggesting that the priors are reasonable and that the model is well-calibrated to allow for plausible outcomes before even fitting to the actual data.</p>
</li>
</ul>
<p>Overall, this plot suggests that the prior distributions are neither too narrow nor too unrealistic, providing a good foundation for the next step: posterior inference based on observed data.</p>
<h3 id="35-posterior-predictive-check">3.5 Posterior Predictive Check</h3>
<p>After fitting the model to the observed data, we perform a <strong>posterior predictive check</strong>. This step involves generating new data from the posterior distribution of the model, which incorporates both the prior information and the observed data. By comparing the posterior predictive distribution to the actual observed outcomes, we can assess how well the model fits the data.</p>
<ul>
<li><strong><code>posterior_samples</code>:</strong> These are the samples drawn from the posterior distribution after fitting the model to the data using MCMC.</li>
<li><strong><code>Predictive</code>:</strong> We use the <code>Predictive</code> class to generate predictions based on the posterior samples.</li>
<li><strong>Posterior Predictive Distribution:</strong> The plot visualizes the range of predicted values from the posterior distribution, along with the observed data for comparison.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get samples from the posterior</span>
</span></span><span class="line"><span class="cl"><span class="n">posterior_samples</span> <span class="o">=</span> <span class="n">mcmc</span><span class="o">.</span><span class="n">get_samples</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define a Predictive class</span>
</span></span><span class="line"><span class="cl"><span class="n">predictive</span> <span class="o">=</span> <span class="n">Predictive</span><span class="p">(</span><span class="n">cirrhosis_classification_model</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">posterior_samples</span> <span class="o">=</span> <span class="n">posterior_samples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get the samples</span>
</span></span><span class="line"><span class="cl"><span class="n">y_pred</span> <span class="o">=</span> <span class="n">predictive</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">X</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert to inference data</span>
</span></span><span class="line"><span class="cl"><span class="n">posterior_data</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc</span><span class="p">,</span> <span class="n">posterior_predictive</span> <span class="o">=</span> <span class="n">y_pred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_ppc</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="n">posterior_data</span><span class="p">,</span> <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;posterior&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_45_0.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-posterior-predictive-plot">Interpretation of the Posterior Predictive Plot</h4>
<p>In the resulting plot:</p>
<ul>
<li>The <strong>blue lines</strong> represent the range of possible outcomes generated from the posterior predictive distribution.</li>
<li>The <strong>solid black line</strong> shows the observed data.</li>
<li>The <strong>dashed orange line</strong> indicates the posterior predictive mean.</li>
</ul>
<p>In contrast to the prior predictive plot, the posterior predictive distribution is now informed by the data:</p>
<ul>
<li>The posterior predictive outcomes are much more closely aligned with the observed data, indicating that the model has successfully learned from the data.</li>
<li>The <strong>posterior predictive mean</strong> closely matches the observed values, showing that the model is well-calibrated and provides accurate predictions for the binary survival outcomes.</li>
</ul>
<p>This posterior predictive check confirms that the model is capable of producing predictions that are consistent with the observed data, providing confidence in its predictive power.</p>
<h3 id="36-visualizing-the-logistic-regression-sigmoid-curves">3.6 Visualizing the Logistic Regression Sigmoid Curves</h3>
<p>To better understand the relationship between <strong>Bilirubin</strong> (one of the top predictive features) and the <strong>survival status</strong> of patients, we plot the sigmoid function for each of the posterior samples. The sigmoid curve represents the probability of survival as a function of the Bilirubin levels.</p>
<ul>
<li>
<p><strong>Sigmoid Function:</strong> The logistic regression model uses the sigmoid function to transform the linear combination of features into a probability:</p>
<p>\begin{aligned}
\text{sigmoid}(x) = \frac{1}{1 + \exp{-(\alpha + x \cdot \beta)}}
\end{aligned}</p>
<p>where $ \alpha $ is the intercept and $ \beta $ is the coefficient for Bilirubin in this case.</p>
</li>
<li>
<p><strong>Posterior Samples:</strong> We draw several samples from the posterior distribution of the model parameters (<code>alpha</code> and <code>beta</code>), and for each sample, we plot the corresponding sigmoid curve. This gives us a range of possible outcomes, representing the uncertainty in the model.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define the sigmoid function</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">beta</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">jnp</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">alpha</span> <span class="o">+</span> <span class="n">jnp</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">beta</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># generate a range of X values for plotting the sigmoid functions</span>
</span></span><span class="line"><span class="cl"><span class="n">x_range</span> <span class="o">=</span> <span class="n">jnp</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">(),</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the data</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Data&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">edgecolors</span> <span class="o">=</span> <span class="s1">&#39;black&#39;</span><span class="p">)</span>  <span class="c1"># bilirubin vs status</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot sigmoid functions from the posterior samples</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x_range</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">alpha_sample</span> <span class="o">=</span> <span class="n">posterior_samples</span><span class="p">[</span><span class="s1">&#39;alpha&#39;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">beta_sample</span> <span class="o">=</span> <span class="n">posterior_samples</span><span class="p">[</span><span class="s1">&#39;beta&#39;</span><span class="p">][</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_sample</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">x_range</span><span class="p">,</span> <span class="n">alpha_sample</span><span class="p">,</span> <span class="n">beta_sample</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x_range</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">y_sample</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="n">top_features</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Status&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Cirrhosis Classification Model&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">();</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_48_0.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-plot">Interpretation of the Plot</h4>
<ul>
<li>
<p><strong>Red Points:</strong> These represent the actual data, with the x-axis showing Bilirubin levels and the y-axis showing the observed survival status (0 or 1).</p>
</li>
<li>
<p><strong>Blue Sigmoid Curves:</strong> The faint blue lines represent the range of sigmoid functions sampled from the posterior distribution. These curves show how the model&rsquo;s predictions vary depending on different samples from the posterior. The spread of the curves reflects the uncertainty in the model&rsquo;s predictions.</p>
</li>
<li>
<p><strong>General Trend:</strong> As Bilirubin levels increase, the probability of survival decreases, as shown by the steep rise of the sigmoid curves from 0 to 1. This suggests that higher Bilirubin levels are associated with a higher likelihood of not surviving.</p>
</li>
</ul>
<p>This plot provides a clear visualization of how the model is using Bilirubin to predict patient survival and the uncertainty in those predictions.</p>
<h3 id="37-model-evaluation-confusion-matrix">3.7 Model Evaluation: Confusion Matrix</h3>
<p>After generating predictions using the posterior samples, we evaluate the model&rsquo;s performance by comparing the predicted classes to the actual survival outcomes. This is done using a <strong>confusion matrix</strong>, which summarizes the classification results in terms of:</p>
<ul>
<li><strong>True Positives (TP):</strong> Correct predictions of non-survival.</li>
<li><strong>True Negatives (TN):</strong> Correct predictions of survival.</li>
<li><strong>False Positives (FP):</strong> Incorrect predictions of non-survival.</li>
<li><strong>False Negatives (FN):</strong> Incorrect predictions of survival.</li>
</ul>
<p>In the code:</p>
<ul>
<li>We use the sigmoid function to convert the posterior samples into probabilities.</li>
<li>We then average the probabilities across all posterior samples and apply a threshold of 0.5 to classify each patient as either survived (0) or not survived (1).</li>
<li>Finally, we generate a confusion matrix to visually assess the performance of the classifier.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">,</span> <span class="n">precision_score</span><span class="p">,</span> <span class="n">recall_score</span><span class="p">,</span> <span class="n">f1_score</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># generate predictions</span>
</span></span><span class="line"><span class="cl"><span class="c1"># use sigmoid function defined previously</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># generate predictions using the posterior samples</span>
</span></span><span class="line"><span class="cl"><span class="n">n_samples</span> <span class="o">=</span> <span class="n">posterior_samples</span><span class="p">[</span><span class="s1">&#39;alpha&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># calculate the mean probability across posterior samples</span>
</span></span><span class="line"><span class="cl"><span class="n">predicted_probabilities</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">sigmoid</span><span class="p">(</span><span class="n">X</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">posterior_samples</span><span class="p">[</span><span class="s1">&#39;alpha&#39;</span><span class="p">][</span><span class="n">i</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">             <span class="n">posterior_samples</span><span class="p">[</span><span class="s1">&#39;beta&#39;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">             <span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_samples</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">             <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert probabilities to binary predictions</span>
</span></span><span class="line"><span class="cl"><span class="n">threshold</span> <span class="o">=</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl"><span class="n">predicted_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">predicted_probabilities</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># compare predicted classes with true classes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># actual labels</span>
</span></span><span class="line"><span class="cl"><span class="n">y_true</span> <span class="o">=</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># confusion matrix</span>
</span></span><span class="line"><span class="cl"><span class="n">conf_matrix</span> <span class="o">=</span> <span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">predicted_classes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">conf_matrix</span><span class="p">,</span> <span class="n">annot</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">fmt</span> <span class="o">=</span> <span class="s1">&#39;d&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_51_0.png" type="" alt="png"  /></p>
<h4 id="confusion-matrix-interpretation">Confusion Matrix Interpretation</h4>
<p>In the plot:</p>
<ul>
<li><strong>233 true negatives</strong>: The model correctly predicted 233 patients as survivors.</li>
<li><strong>98 true positives</strong>: The model correctly predicted 98 patients as non-survivors.</li>
<li><strong>24 false positives</strong>: The model incorrectly predicted 24 patients as non-survivors when they actually survived.</li>
<li><strong>63 false negatives</strong>: The model incorrectly predicted 63 patients as survivors when they did not survive.</li>
</ul>
<h4 id="overall-performance">Overall Performance</h4>
<p>The confusion matrix shows that the model performs well on survival predictions, with more correct predictions than incorrect ones. The balance between true positives and true negatives suggests that the model handles both classes reasonably well, but there are more false negatives than false positives, indicating that the model might underpredict non-survival cases slightly.</p>
<h1 id="4-bayesian-survival-analysis">4. Bayesian Survival Analysis</h1>
<p>In this section, we shift our focus from classification to <strong>Bayesian survival analysis</strong>. Survival analysis is a statistical method used to estimate the time until an event of interest occurs, often referred to as &ldquo;time-to-event&rdquo; data. In our case, we are interested in modeling the time until either a patient succumbs to cirrhosis or is censored (i.e., the event does not occur during the observation period). This form of analysis allows us to incorporate censored data and provides insights into the distribution of survival times.</p>
<h2 id="41-basics-of-survival-analysis">4.1 Basics of Survival Analysis</h2>
<p>In classical survival analysis, we model the <strong>survival function</strong> $S(t)$, which represents the probability of survival beyond time $t$:</p>
<p>\begin{aligned}
S(t) = P(T &gt; t)
\end{aligned}</p>
<p>Where:</p>
<ul>
<li>$T$ is the random variable representing the time to the event (e.g., death or censoring).</li>
<li>$t$ is the specific time of interest.</li>
</ul>
<p>The complementary function, called the <strong>hazard function</strong>, $h(t)$, represents the instantaneous rate at which events occur at time $t$, given that the individual has survived up to that time. The hazard function is defined as:</p>
<p>\begin{aligned}
h(t) = \frac{f(t)}{S(t)}
\end{aligned}</p>
<p>Where $f(t)$ is the probability density function of survival times.</p>
<h3 id="bayesian-survival-analysis">Bayesian Survival Analysis</h3>
<p>In a Bayesian framework, we treat the parameters governing the survival function (or hazard function) as random variables, and we estimate their posterior distributions using observed data. By incorporating prior beliefs about these parameters, Bayesian methods offer a natural way to handle uncertainty, particularly in the presence of censored data.</p>
<p>The general approach involves:</p>
<ol>
<li><strong>Defining a Parametric Survival Model:</strong> A common choice for the survival model is the Weibull distribution, which provides flexibility in modeling both increasing and decreasing hazard rates.</li>
<li><strong>Priors:</strong> Assign prior distributions to the model parameters (e.g., shape and scale parameters of the Weibull distribution).</li>
<li><strong>Likelihood:</strong> The likelihood is defined based on the observed survival times and whether the event was censored.</li>
<li><strong>Posterior Inference:</strong> Use Markov Chain Monte Carlo (MCMC) or similar methods to draw samples from the posterior distribution of the parameters.</li>
</ol>
<p>For example, the <strong>Weibull distribution</strong> is a common parametric model for survival times. Its survival function is given by:</p>
<p>\begin{aligned}
S(t) = \exp \left( - \left( \frac{t}{\lambda} \right)^\kappa \right)
\end{aligned}</p>
<p>Where:</p>
<ul>
<li>$\lambda$ is the scale parameter.</li>
<li>$\kappa$ is the shape parameter.</li>
</ul>
<p>In the Bayesian context, we assign priors to $\lambda$ and $\kappa$, then use the observed data to update these priors to form the posterior distributions.</p>
<h3 id="censored-data">Censored Data</h3>
<p>In survival analysis, it&rsquo;s common to have censored data, where we know that the event of interest did not occur before a certain time, but we do not know the exact time of the event. Bayesian methods handle censored data naturally within the likelihood function by accounting for both observed events and censored observations.</p>
<p>The likelihood for a censored observation is:</p>
<p>\begin{aligned}
P(T &gt; t \mid \text{censored}) = S(t)
\end{aligned}</p>
<p>Thus, in a Bayesian survival model, the posterior distribution is based on both observed survival times and the fact that certain observations were censored.</p>
<p>This framework allows for a flexible and powerful analysis of time-to-event data while handling uncertainties in parameter estimates.</p>
<h2 id="42-weibull-survival-model-without-covariates">4.2 Weibull Survival Model Without Covariates</h2>
<p>We begin by defining a <strong>Weibull survival model</strong> for time-to-event data, with no covariates. The <strong>Weibull distribution</strong> is a flexible parametric model commonly used in survival analysis due to its ability to model both increasing and decreasing hazard rates over time, depending on the value of its shape parameter $k$.</p>
<p>The model assumes that survival times follow a Weibull distribution parameterized by:</p>
<ul>
<li>$k$ (shape parameter): This determines the form of the hazard function. A value of $k &gt; 1$ suggests an increasing hazard rate, while $k &lt; 1$ implies a decreasing hazard rate.</li>
<li>$\lambda$ (scale parameter): This controls the scale of the distribution and shifts the time-to-event distribution horizontally.</li>
</ul>
<h4 id="code-explanation-1">Code Explanation</h4>
<ol>
<li>
<p><strong>Priors:</strong></p>
<ul>
<li>
<p>We place <strong>Exponential(1.0)</strong> priors on both the shape parameter $k$ and the scale parameter $\lambda$. The exponential distribution is a standard choice when we do not have strong prior information and expect non-negative values for these parameters.</p>
</li>
<li>
<p>$k \sim \text{Exponential}(1.0)$</p>
</li>
<li>
<p>$\lambda \sim \text{Exponential}(1.0)$</p>
</li>
</ul>
</li>
<li>
<p><strong>Likelihood:</strong></p>
<ul>
<li>
<p>The likelihood assumes that the observed survival times follow a <strong>Weibull distribution</strong>. We model the observed data (<code>obs</code>) as being drawn from a Weibull distribution, parameterized by the sampled values of $k$ and $\lambda$.</p>
</li>
<li>
<p>The survival times in <code>data</code> are modeled using this likelihood, and if no data is provided, a placeholder dimension (1000) is used to define the plate.</p>
</li>
</ul>
</li>
</ol>
<p>The Weibull model is ideal for analyzing baseline survival without introducing any covariates to the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">survival_weibull_model</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># define priors</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Exponential</span><span class="p">(</span><span class="mf">1.0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">lam</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;lam&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Exponential</span><span class="p">(</span><span class="mf">1.0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># likelihood</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">plate</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="k">else</span> <span class="mi">1000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;obs&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Weibull</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">lam</span><span class="p">),</span> <span class="n">obs</span> <span class="o">=</span> <span class="n">data</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="preparing-the-data-for-survival-analysis">Preparing the Data for Survival Analysis</h3>
<p>Before fitting the survival model, we need to preprocess the data by selecting only the <strong>uncensored</strong> survival times. In survival analysis, censored data refers to cases where the event of interest (e.g., death) did not occur during the observation period, and we do not know the exact time of the event. For this initial analysis, we focus on observed events.</p>
<ul>
<li><strong><code>survival_times_observed</code>:</strong> We extract the survival times for patients where the event (death) was observed, indicated by <code>Status == 1</code>. This ensures that only complete (uncensored) data is included in the model.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># prepare the data</span>
</span></span><span class="line"><span class="cl"><span class="c1"># select only the uncensored data</span>
</span></span><span class="line"><span class="cl"><span class="n">survival_times_observed</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][</span><span class="s1">&#39;N_Days&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span></span></code></pre></div><h3 id="fitting-the-weibull-survival-model">Fitting the Weibull Survival Model</h3>
<p>We now proceed to fit the <strong>Weibull survival model</strong> to the uncensored survival times using <strong>Markov Chain Monte Carlo (MCMC)</strong> with the <strong>No-U-Turn Sampler (NUTS)</strong>. This step involves estimating the posterior distributions of the model parameters ($k$ and $\lambda$) based on the observed data.</p>
<ul>
<li><strong><code>NUTS</code>:</strong> The No-U-Turn Sampler is a variant of Hamiltonian Monte Carlo (HMC), which efficiently explores the posterior distribution by dynamically tuning the step size and trajectory length.</li>
<li><strong><code>num_warmup</code>:</strong> The number of warm-up (burn-in) iterations, where the sampler adapts to the posterior distribution before drawing final samples.</li>
<li><strong><code>num_samples</code>:</strong> The number of posterior samples to draw after the warm-up phase.</li>
<li><strong><code>num_chains</code>:</strong> The number of independent MCMC chains to run in parallel, which helps assess convergence and reduce bias.</li>
</ul>
<p>After running the MCMC sampler, we print a summary of the estimated posterior distributions for the model parameters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fit the model</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_weibull</span> <span class="o">=</span> <span class="n">MCMC</span><span class="p">(</span><span class="n">NUTS</span><span class="p">(</span><span class="n">survival_weibull_model</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_warmup</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_chains</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_weibull</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">data</span> <span class="o">=</span> <span class="n">survival_times_observed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_weibull</span><span class="o">.</span><span class="n">print_summary</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



                mean       std    median      5.0%     95.0%     n_eff     r_hat
         k     48.25      7.99     47.86     35.15     61.08   1442.43      1.00
       lam      0.25      0.02      0.25      0.22      0.28   1419.78      1.00

Number of divergences: 0
</code></pre>
<h4 id="interpretation-of-weibull-model-posterior-estimates">Interpretation of Weibull Model Posterior Estimates</h4>
<p>The output from the MCMC run provides the posterior distributions for the shape parameter $k$ and the scale parameter $\lambda$ of the Weibull survival model. Here’s a brief interpretation of the results:</p>
<ul>
<li>
<p><strong>$k$ (shape parameter):</strong> The posterior mean of $k$ is <strong>48.25</strong>, with a standard deviation of <strong>7.99</strong>. The 90% credible interval (from 5% to 95%) ranges from <strong>35.15</strong> to <strong>61.08</strong>. A high value of $k$ suggests that the hazard rate increases rapidly over time, indicating that the risk of the event (death) increases as time progresses.</p>
</li>
<li>
<p><strong>$\lambda$ (scale parameter):</strong> The posterior mean of $\lambda$ is <strong>0.25</strong>, with a standard deviation of <strong>0.02</strong>. The 90% credible interval ranges from <strong>0.22</strong> to <strong>0.28</strong>. The scale parameter affects the distribution&rsquo;s spread; smaller values of $\lambda$ indicate that the survival times are more concentrated around lower values, meaning shorter survival times are more likely.</p>
</li>
<li>
<p><strong>Effective Sample Size (n_eff):</strong> Both $k$ and $\lambda$ have high effective sample sizes, indicating that the MCMC chains were well-mixed and independent, producing a sufficient number of effective samples.</p>
</li>
<li>
<p><strong>$\hat{R}$ values:</strong> The $\hat{R}$ values for both parameters are exactly <strong>1.00</strong>, indicating that the MCMC chains have converged well, and the posterior estimates are reliable.</p>
</li>
<li>
<p><strong>Number of Divergences:</strong> There were <strong>0 divergences</strong>, meaning that the NUTS sampler encountered no issues while exploring the posterior distribution.</p>
</li>
</ul>
<p>The posterior estimates suggest that the risk of the event (death) increases as time passes, with the hazard rate rising rapidly due to the large shape parameter $k$. The small scale parameter $\lambda$ indicates that shorter survival times are common in the dataset.</p>
<h3 id="prior-predictive-check-for-the-weibull-survival-model">Prior Predictive Check for the Weibull Survival Model</h3>
<p>Before we assess the model&rsquo;s posterior predictions, we perform a <strong>prior predictive check</strong> to ensure that the prior distributions we&rsquo;ve chosen are reasonable. This step involves generating data based purely on the priors, without any observed data influencing the predictions. By comparing the prior predictive distribution to the observed data, we can determine if our prior assumptions lead to plausible outcomes.</p>
<h4 id="code-explanation-2">Code Explanation</h4>
<ul>
<li><strong><code>Predictive</code>:</strong> We use the <code>Predictive</code> class to generate survival times from the prior distribution by drawing 1,000 samples.</li>
<li><strong>Prior Predictive Plot:</strong> The plot visualizes the prior predictive distribution, represented by the dashed orange line (the mean of the prior predictions), and the solid blue line shows the individual prior predictive samples.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># perform prior predictive check</span>
</span></span><span class="line"><span class="cl"><span class="n">prior_predictive_survival_weibull</span> <span class="o">=</span> <span class="n">Predictive</span><span class="p">(</span><span class="n">survival_weibull_model</span><span class="p">,</span> <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">prior_samples_survival_weibull</span> <span class="o">=</span> <span class="n">prior_predictive_survival_weibull</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">data</span> <span class="o">=</span> <span class="n">survival_times_observed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert to InferenceData</span>
</span></span><span class="line"><span class="cl"><span class="n">prior_predictive_data_survival_weibull</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc_survival_weibull</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                                         <span class="n">prior</span> <span class="o">=</span> <span class="n">prior_samples_survival_weibull</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prior_samples_survival_weibull</span>
</span></span><span class="line"><span class="cl"><span class="n">prior_predictive_data_survival_weibull</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the prior samples</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_ppc</span><span class="p">(</span><span class="n">prior_predictive_data_survival_weibull</span><span class="p">,</span> <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;prior&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_62_0.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-plot-1">Interpretation of the Plot</h4>
<ul>
<li>The <strong>solid blue line</strong> represents the individual prior predictive samples, while the <strong>dashed orange line</strong> represents the mean of these prior predictions.</li>
<li>The plot shows how the model&rsquo;s prior assumptions generate survival times, and we can compare this to the range of observed data to evaluate the plausibility of the priors.</li>
<li>In this case, the prior predictive distribution seems to cover a reasonable range of potential survival times, suggesting that the prior assumptions about the shape and scale of the Weibull distribution are not overly restrictive or implausible.</li>
</ul>
<p>This prior predictive check gives us confidence that the model&rsquo;s priors are sensible, providing a good foundation for further inference when we include the observed data.</p>
<h3 id="posterior-trace-plot-for-weibull-survival-model">Posterior Trace Plot for Weibull Survival Model</h3>
<p>After fitting the Weibull survival model, we generate a <strong>trace plot</strong> to assess the MCMC sampling process and the posterior distributions of the model parameters. The trace plot shows both the posterior distributions and the sampling traces for the shape parameter $k$ and the scale parameter $\lambda$.</p>
<h4 id="code-explanation-3">Code Explanation</h4>
<ul>
<li><strong><code>survival_posterior_samples_weibull</code>:</strong> We extract the posterior samples for the model parameters.</li>
<li><strong><code>az.plot_trace</code>:</strong> This function generates the trace plot, showing the posterior distribution and the corresponding MCMC trace for each parameter.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">survival_posterior_samples_weibull</span> <span class="o">=</span> <span class="n">mcmc_survival_weibull</span><span class="o">.</span><span class="n">get_samples</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az_survival_weibull</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc_survival_weibull</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_trace</span><span class="p">(</span><span class="n">az_survival_weibull</span><span class="p">,</span> <span class="n">compact</span> <span class="o">=</span> <span class="kc">False</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_65_0.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-trace-plot">Interpretation of the Trace Plot</h4>
<ol>
<li>
<p><strong>Posterior Distributions (Left Panels):</strong></p>
<ul>
<li>The left panels show the posterior distributions for $k$ and $\lambda$. Both parameters exhibit well-defined, unimodal distributions, which indicate stable and meaningful posterior estimates.</li>
<li>For $k$, the distribution has a peak around <strong>48</strong>, while for $\lambda$, the peak is around <strong>0.25</strong>.</li>
</ul>
</li>
<li>
<p><strong>Sampling Trace (Right Panels):</strong></p>
<ul>
<li>The right panels show the sampling trace for each parameter across the MCMC iterations. Both $k$ and $\lambda$ exhibit well-mixed traces, with no visible trends or drifts over time. This indicates that the sampler explored the parameter space effectively, without getting stuck in any particular region.</li>
<li>The trace plots confirm that the MCMC chains have converged well, as there is good overlap between the chains and no sign of poor mixing.</li>
</ul>
</li>
</ol>
<p>Overall, the trace plot shows that the MCMC sampling worked efficiently, with well-behaved posterior distributions and convergence for both $k$ and $\lambda$. This gives us confidence in the reliability of the posterior estimates for the survival model.</p>
<h3 id="posterior-predictive-check-for-weibull-survival-model">Posterior Predictive Check for Weibull Survival Model</h3>
<p>We now perform a <strong>posterior predictive check</strong> to evaluate how well the Weibull survival model, after being fitted to the data, predicts survival times. Posterior predictive checks allow us to compare the model&rsquo;s predicted values to the observed data, providing insight into how well the model captures the true underlying patterns.</p>
<h4 id="code-explanation-4">Code Explanation</h4>
<ul>
<li><strong><code>Predictive</code>:</strong> We use the <code>Predictive</code> class to generate survival times based on the posterior samples of the model parameters ($k$ and $\lambda$).</li>
<li><strong>Posterior Predictive Data:</strong> We create an <code>InferenceData</code> object using the posterior predictive samples, which includes both the predicted survival times and the observed data.</li>
<li><strong>Posterior Predictive Plot:</strong> The plot visualizes the posterior predictive distribution (blue lines), the observed data (solid black line), and the posterior predictive mean (dashed orange line).</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">survival_posterior_predictive_weibull</span> <span class="o">=</span> <span class="n">Predictive</span><span class="p">(</span><span class="n">survival_weibull_model</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="n">posterior_samples</span> <span class="o">=</span> <span class="n">survival_posterior_samples_weibull</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">survival_times_predicted_weibull</span> <span class="o">=</span> <span class="n">survival_posterior_predictive_weibull</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">survival_times_observed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">survival_posterior_data_weibull</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc_survival_weibull</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="n">posterior_predictive</span> <span class="o">=</span> <span class="n">survival_times_predicted_weibull</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_ppc</span><span class="p">(</span><span class="n">survival_posterior_data_weibull</span><span class="p">,</span> <span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;kde&#39;</span><span class="p">,</span> <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;posterior&#39;</span><span class="p">,</span> <span class="n">observed</span> <span class="o">=</span> <span class="kc">True</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_68_0.png" type="" alt="png"  /></p>
<h3 id="plot-interpretation-for-weibull-posterior-predictive-vs-observed-data-uncensored">Plot Interpretation for Weibull Posterior Predictive vs. Observed Data (Uncensored)</h3>
<p>This plot shows a comparison between the <strong>Weibull posterior predictive distribution</strong> and the <strong>observed uncensored survival data</strong>, without any covariates involved. The purpose of this plot is to evaluate how well the Weibull model, fit to the uncensored data, can replicate the distribution of survival times.</p>
<h4 id="explanation-of-the-plot">Explanation of the Plot:</h4>
<ul>
<li>
<p><strong>X-axis (Survival Times):</strong></p>
<ul>
<li>The x-axis represents the survival times (in days), ranging from 0 to about 4500 days.</li>
</ul>
</li>
<li>
<p><strong>Y-axis (Density):</strong></p>
<ul>
<li>The y-axis shows the <strong>density</strong> of survival times, or the likelihood of individuals surviving for certain durations, based on both the observed data and the model&rsquo;s posterior predictions.</li>
</ul>
</li>
</ul>
<h4 id="lines-in-the-plot">Lines in the Plot:</h4>
<ul>
<li>
<p><strong>Blue Line (Weibull Posterior Predictive):</strong></p>
<ul>
<li>This line represents the predicted survival times from the Weibull model. It shows the expected distribution of survival times based on the model&rsquo;s posterior distribution.</li>
</ul>
</li>
<li>
<p><strong>Green Line (Weibull Observed Data):</strong></p>
<ul>
<li>This line represents the true observed distribution of uncensored survival times. It shows the actual survival time density for individuals who experienced the event (e.g., death).</li>
</ul>
</li>
</ul>
<h4 id="interpretation-1">Interpretation:</h4>
<ul>
<li>
<p><strong>Fit Between Lines:</strong></p>
<ul>
<li>The <strong>green line</strong> (observed data) and the <strong>blue line</strong> (posterior predictive) show a relatively good alignment in terms of overall trend, particularly in the early time periods (0 to 2000 days). The posterior predictive distribution follows the general trend of the observed data, which suggests that the Weibull model does an acceptable job at capturing the distribution of survival times in this range.</li>
</ul>
</li>
<li>
<p><strong>Discrepancies:</strong></p>
<ul>
<li>Similar to the lognormal model, we observe that the posterior predictive line fluctuates more in the earlier survival times, indicating higher uncertainty or variability in the predictions.</li>
<li>The fit becomes more diverging in the later periods (beyond 2500 days), where the posterior predictive distribution starts to exhibit higher peaks and troughs compared to the observed data, suggesting that the Weibull model may struggle to accurately capture extreme or late survival times.</li>
</ul>
</li>
<li>
<p><strong>Conclusion:</strong></p>
<ul>
<li>The Weibull model generally captures the trend of survival times, but as seen, there are some inconsistencies in the later survival times, where the model tends to overestimate or underestimate specific time periods. These fluctuations indicate that while the model is useful for capturing general trends, it might not fully account for more extreme cases of survival.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span><span class="n">survival_posterior_data_weibull</span><span class="p">[</span><span class="s1">&#39;posterior_predictive&#39;</span><span class="p">][</span><span class="s1">&#39;obs&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> 
</span></span><span class="line"><span class="cl">            <span class="n">plot_kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;color&#39;</span> <span class="p">:</span> <span class="s1">&#39;C0&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span> <span class="p">:</span> <span class="s1">&#39;Weibull Posterior Predictive&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span><span class="n">survival_posterior_data_weibull</span><span class="p">[</span><span class="s1">&#39;observed_data&#39;</span><span class="p">][</span><span class="s1">&#39;obs&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> 
</span></span><span class="line"><span class="cl">            <span class="n">plot_kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;color&#39;</span> <span class="p">:</span> <span class="s1">&#39;C2&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span> <span class="p">:</span> <span class="s1">&#39;Weibull Observed Data&#39;</span><span class="p">})</span>
</span></span></code></pre></div><pre><code>&lt;Axes: &gt;
</code></pre>
<p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_70_1.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-posterior-predictive-check-plot">Interpretation of the Posterior Predictive Check Plot</h4>
<ul>
<li>
<p><strong>Blue Lines (Posterior Predictive Samples):</strong> These represent the survival times generated from the posterior distribution. The spread of the lines shows the model&rsquo;s uncertainty in predicting survival times based on the posterior samples.</p>
</li>
<li>
<p><strong>Solid Black Line (Observed Data):</strong> This represents the actual observed survival times.</p>
</li>
<li>
<p><strong>Dashed Orange Line (Posterior Predictive Mean):</strong> This shows the mean of the posterior predictive samples.</p>
</li>
</ul>
<p>In this case, the posterior predictive samples align well with the observed survival data, suggesting that the Weibull survival model provides a good fit to the data. The predicted survival times fall within a reasonable range around the observed data, and the posterior predictive mean closely follows the observed survival trend. This check confirms that the model has successfully learned from the data and is capable of generating realistic survival time predictions.</p>
<h3 id="posterior-summary-for-weibull-survival-model">Posterior Summary for Weibull Survival Model</h3>
<p>The summary table provides key statistics for the posterior distributions of the shape parameter ($k$) and scale parameter ($\lambda$) of the Weibull survival model. These values give us insights into the uncertainty and characteristics of the estimated parameters after fitting the model to the data.</p>
<h4 id="key-metrics">Key Metrics:</h4>
<ul>
<li>
<p><strong>Mean:</strong> The posterior mean of each parameter, representing the expected value based on the posterior distribution.</p>
<ul>
<li>$k$ (shape): <strong>48.25</strong> — This value indicates that the hazard rate increases rapidly over time.</li>
<li>$\lambda$ (scale): <strong>0.25</strong> — A small scale parameter, which suggests that the model predicts shorter survival times on average.</li>
</ul>
</li>
<li>
<p><strong>Standard Deviation (sd):</strong> The standard deviation of the posterior distribution, reflecting the uncertainty in the parameter estimates.</p>
<ul>
<li>$k$: <strong>7.99</strong></li>
<li>$\lambda$: <strong>0.017</strong></li>
</ul>
</li>
<li>
<p><strong>HDI 3% - 97%:</strong> The highest density interval (HDI) represents the 94% credible interval for the parameters, showing the range of likely values.</p>
<ul>
<li>$k$: <strong>34.08</strong> to <strong>63.65</strong></li>
<li>$\lambda$: <strong>0.219</strong> to <strong>0.283</strong></li>
</ul>
</li>
<li>
<p><strong>ESS (Effective Sample Size):</strong> Indicates the number of effectively independent samples in the posterior. High values of ESS mean that the MCMC chains mixed well, and the posterior is reliable.</p>
<ul>
<li>$k$: <strong>1451.0</strong></li>
<li>$\lambda$: <strong>1423.0</strong></li>
</ul>
</li>
<li>
<p><strong>$\hat{R}$ (r_hat):</strong> A diagnostic measure for MCMC convergence. Values close to <strong>1.0</strong> indicate good convergence, meaning the chains have reached the same distribution.</p>
<ul>
<li>Both $k$ and $\lambda$ have $\hat{R} = 1.0$, confirming that the model has converged.</li>
</ul>
</li>
</ul>
<p>The summary shows that the model has successfully converged, with high effective sample sizes and credible intervals that provide reasonable bounds on the parameter estimates. The increasing hazard rate (high $k$ value) suggests that the risk of death increases over time, while the small $\lambda$ value indicates relatively short survival times. This analysis gives us a good understanding of the survival patterns in the data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">survival_posterior_data_weibull</span><span class="p">)</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>mean</th>
      <th>sd</th>
      <th>hdi_3%</th>
      <th>hdi_97%</th>
      <th>mcse_mean</th>
      <th>mcse_sd</th>
      <th>ess_bulk</th>
      <th>ess_tail</th>
      <th>r_hat</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>k</th>
      <td>48.249</td>
      <td>7.987</td>
      <td>34.077</td>
      <td>63.653</td>
      <td>0.209</td>
      <td>0.148</td>
      <td>1451.0</td>
      <td>1795.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>lam</th>
      <td>0.251</td>
      <td>0.017</td>
      <td>0.219</td>
      <td>0.283</td>
      <td>0.000</td>
      <td>0.000</td>
      <td>1423.0</td>
      <td>1762.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
<h2 id="43-weibull-survival-model-with-covariates">4.3 Weibull Survival Model With Covariates</h2>
<p>In this section, we will extend the Weibull survival model to account for individual-specific covariates. by introducing covariates, we allow the model to make &ldquo;personalized&rdquo; predictions for survival times, based on characteristics like <strong>age, bilirubin levels</strong> and <strong>albumin</strong>.</p>
<p>The scale parameter $\lambda_i$, which influences the expected survival time, will now depend on a <strong>combination of covariates (characteristics)</strong> for each individual. This makes the model more flexible and capable of capturing how different factors impact survival.</p>
<p>The scale parameter $\lambda_i$ for individual $i$ is modeled as:</p>
<p>$$\lambda_i = \exp \left( \beta_0 + \beta_1 \cdot x_{1i} + \beta_2 \cdot x_{2i} + \dots + \beta_k \cdot x_{ki} \right)$$</p>
<p>Where:</p>
<ul>
<li>$ x_{1i}, x_{2i}, \dots, x_{ki} $ are the covariates for individual  i ,</li>
<li>$ \beta_0, \beta_1, \dots, \beta_k $ are the regression coefficients for each covariate.</li>
</ul>
<p>The likelihood function for the observed survival times $t_i$ is given by the Weibull distribution:</p>
<p>$$ f(t_i | k, \lambda_i) = \frac{k}{\lambda_i} \left( \frac{t_i}{\lambda_i}  \right)^{k-1} \exp \left(- \left(\frac{t_i}{\lambda_i}\right)^k\right) $$</p>
<p>Where:</p>
<ul>
<li>$k$ is the shape parameter,</li>
<li>$\lambda_i$ is the scale parameter that varies with covariates.</li>
</ul>
<p>By estimating the coefficients $\beta$, we can assess how each covariate influences survival time. This approach personalizes the model to each individual&rsquo;s characteristics, leading to more tailored predictions.</p>
<p>We will implement this in the following steps:</p>
<ol>
<li>Define the model where $\lambda_i$ is a function of covariates.</li>
<li>Prepare the data (covariates and survival times)</li>
<li>Perform MCMC sampling to fit the model</li>
<li>Analyze the results.</li>
</ol>
<h3 id="define-the-weibull-survival-model-with-covariates">Define the Weibull Survival Model with Covariates</h3>
<p>We will now define the model with priors for both the <strong>shape parameter</strong> $k$ and the <strong>regression coefficients</strong> $\beta$. The scale parameter $\lambda_i$ will be modeled as the exponential of a linear combination of the covariates.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">survival_model_weibull_with_covariates</span><span class="p">(</span><span class="n">covariates</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># define priors</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Exponential</span><span class="p">(</span><span class="mf">1.0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">beta</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">expand</span><span class="p">([</span><span class="n">covariates</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]]))</span>  <span class="c1"># coefficients (beta)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># linear model for log(lambda)</span>
</span></span><span class="line"><span class="cl">    <span class="n">log_lambda</span> <span class="o">=</span> <span class="n">jnp</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">covariates</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>      <span class="c1"># linear combination of covariates</span>
</span></span><span class="line"><span class="cl">    <span class="n">lambda_i</span> <span class="o">=</span> <span class="n">jnp</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">log_lambda</span><span class="p">)</span>              <span class="c1"># ensure scale parameter lambda is positive</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># likelihood</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">plate</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="k">else</span> <span class="mi">1000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;obs&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Weibull</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">lambda_i</span><span class="p">),</span> <span class="n">obs</span> <span class="o">=</span> <span class="n">data</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="selecting-covariates-for-the-weibull-model">Selecting Covariates for the Weibull Model</h3>
<p>Before fitting the Weibull model with covariates, we need to ensure that the relevant covariates are selected from the dataset. These covariates will be used to personalize the scale parameter $\lambda_i$ for each individual, allowing the model to capture how various features influence survival times.</p>
<p>In this step, we simply print the list of top features, which were previously selected based on their correlation with the survival outcome. These features will serve as the covariates in the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">top_features</span><span class="o">.</span><span class="n">to_list</span><span class="p">())</span>
</span></span></code></pre></div><pre><code>['Bilirubin', 'Edema', 'Copper', 'Prothrombin', 'Albumin', 'Age', 'Alk_Phos']
</code></pre>
<p>To extend the Weibull model with covariates, we need to prepare two key components:</p>
<ol>
<li><strong>Covariates:</strong> The selected covariates (features) that will be used to predict survival times for each individual.</li>
<li><strong>Survival Times:</strong> The observed survival times for the uncensored data (i.e., where the event of interest has occurred).</li>
</ol>
<h4 id="code-explanation-5">Code Explanation</h4>
<ul>
<li><strong><code>covariate_selection</code>:</strong> We explicitly select a subset of covariates that are expected to have an influence on survival, including <strong>Bilirubin</strong>, <strong>Edema</strong>, <strong>Prothrombin</strong>, <strong>Albumin</strong>, and <strong>Age</strong>.</li>
<li><strong><code>covariates_survival</code>:</strong> We filter the dataset to include only individuals with observed survival times (where <code>Status == 1</code>) and extract the covariate values.</li>
<li><strong><code>survival_times</code>:</strong> We extract the corresponding survival times for these individuals.</li>
</ul>
<p>Finally, we print the top features and the selected covariates to verify that the correct data is being used for the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">covariate_selection</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Bilirubin&#39;</span><span class="p">,</span> <span class="s1">&#39;Edema&#39;</span><span class="p">,</span> <span class="s1">&#39;Prothrombin&#39;</span><span class="p">,</span> <span class="s1">&#39;Albumin&#39;</span><span class="p">,</span> <span class="s1">&#39;Age&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">covariates_survival</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][</span><span class="n">covariate_selection</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span></span><span class="line"><span class="cl"><span class="n">survival_times</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][</span><span class="s1">&#39;N_Days&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">top_features</span><span class="o">.</span><span class="n">to_list</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">covariate_selection</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>['Bilirubin', 'Edema', 'Copper', 'Prothrombin', 'Albumin', 'Age', 'Alk_Phos']
['Bilirubin', 'Edema', 'Prothrombin', 'Albumin', 'Age']
</code></pre>
<h3 id="fitting-the-weibull-survival-model-with-covariates">Fitting the Weibull Survival Model with Covariates</h3>
<p>We now fit the Weibull survival model with covariates using <strong>Markov Chain Monte Carlo (MCMC)</strong> with the <strong>No-U-Turn Sampler (NUTS)</strong>. This model accounts for the effects of the selected covariates on the survival times, making the predictions more personalized for each individual.</p>
<h4 id="code-explanation-6">Code Explanation</h4>
<ul>
<li><strong>NUTS:</strong> We use the NUTS kernel to efficiently explore the posterior distribution of the parameters.</li>
<li><strong>MCMC Setup:</strong> The model is run with 1,000 warm-up iterations, followed by 2,000 sampling iterations, and using 4 chains to assess convergence.</li>
<li><strong>Covariates:</strong> The scale parameter $\lambda_i$ is modeled as a function of the selected covariates, allowing the model to account for individual characteristics when predicting survival times.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nuts_kernel_survival_weibull_with_covariates</span> <span class="o">=</span> <span class="n">NUTS</span><span class="p">(</span><span class="n">survival_model_weibull_with_covariates</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_weibull_with_covariates</span> <span class="o">=</span> <span class="n">MCMC</span><span class="p">(</span><span class="n">nuts_kernel_survival_weibull_with_covariates</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_warmup</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">2000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_chains</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_weibull_with_covariates</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> 
</span></span><span class="line"><span class="cl">                  <span class="n">data</span> <span class="o">=</span> <span class="n">survival_times_observed</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                  <span class="n">covariates</span> <span class="o">=</span> <span class="n">covariates_survival</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_weibull_with_covariates</span><span class="o">.</span><span class="n">print_summary</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>  0%|          | 0/3000 [00:00&lt;?, ?it/s]



  0%|          | 0/3000 [00:00&lt;?, ?it/s]



  0%|          | 0/3000 [00:00&lt;?, ?it/s]



  0%|          | 0/3000 [00:00&lt;?, ?it/s]



                mean       std    median      5.0%     95.0%     n_eff     r_hat
   beta[0]      0.07      0.04      0.07      0.03      0.12      2.96      1.70
   beta[1]      0.03      0.54     -0.24     -0.36      0.96      2.02      8.85
   beta[2]     -0.05      0.05     -0.06     -0.11      0.04      2.42      2.29
   beta[3]      0.12      0.39     -0.10     -0.14      0.80      2.00     20.11
   beta[4]     -0.19      0.30     -0.03     -0.72      0.01      2.01     14.35
         k    284.18    163.08    372.41      2.42    392.76       nan     15.33

Number of divergences: 2000
</code></pre>
<h3 id="results-interpretation">Results Interpretation:</h3>
<p>The output provides the posterior estimates for the regression coefficients ($\beta$) and the shape parameter ($k$), along with diagnostics.</p>
<ul>
<li>
<p><strong>$\beta$ coefficients:</strong></p>
<ul>
<li><strong>beta[0] (Bilirubin):</strong> Mean of <strong>0.07</strong>, indicating a small positive effect on survival time, though there is substantial uncertainty as indicated by the standard deviation (std).</li>
<li><strong>beta[1] to beta[4] (Other Covariates):</strong> The estimates for the remaining covariates (Edema, Prothrombin, Albumin, Age) show wide credible intervals and large $\hat{R}$ values, suggesting poor convergence and high uncertainty in the estimates.</li>
</ul>
</li>
<li>
<p><strong>Shape Parameter ($k$):</strong> The mean estimate for $k$ is <strong>284.18</strong>, with a high standard deviation, indicating extreme variability in the estimates. Additionally, the model encountered <strong>2,000 divergences</strong>, signaling serious issues with the MCMC sampling process.</p>
</li>
<li>
<p><strong>Convergence Issues:</strong></p>
<ul>
<li>The <strong>$\hat{R}$</strong> values for most of the parameters are far from <strong>1.0</strong>, indicating that the chains did not converge.</li>
<li><strong>Effective Sample Size (<code>n_eff</code>):</strong> Extremely low values for the effective sample size show that the sampler struggled to explore the posterior efficiently, producing highly correlated samples.</li>
<li><strong>Divergences:</strong> The model reported <strong>2,000 divergences</strong>, suggesting that the NUTS sampler encountered significant problems in exploring the posterior, which likely stems from poor model specification or highly informative priors.</li>
</ul>
</li>
</ul>
<p>The results indicate that the model failed to converge, likely due to the high number of divergences and poor effective sample sizes. These issues point to potential problems with the model&rsquo;s specification, such as overly complex priors or insufficient data to support the model&rsquo;s structure. In subsequent steps, it may be necessary to simplify the model, adjust the priors, or address potential multicollinearity in the covariates.</p>
<h2 id="44-introducing-the-log-normal-survival-model">4.4 Introducing the Log-Normal Survival Model</h2>
<p>After encountering issues with the Weibull model with covariates, we modify the model structure and introduce a <strong>log-normal survival model</strong> with covariates. This change in model specification can sometimes lead to better performance or convergence when the original model struggles with the data.</p>
<p>The <strong>log-normal distribution</strong> assumes that the logarithm of the survival times follows a normal distribution, which is another common choice for modeling time-to-event data. Unlike the Weibull distribution, the log-normal distribution may provide better flexibility when the hazard rate does not follow the typical monotonic increasing or decreasing pattern.</p>
<h4 id="code-explanation-7">Code Explanation</h4>
<ul>
<li>
<p><strong>Priors:</strong></p>
<ul>
<li>We place <strong>Normal(0, 1)</strong> priors on the regression coefficients $\beta$, which influence how each covariate impacts the survival time.</li>
<li>An <strong>Exponential(1.0)</strong> prior is assigned to $\sigma$, the standard deviation, to ensure positivity.</li>
</ul>
</li>
<li>
<p><strong>Log-Mu (Mean of Log-Survival Times):</strong></p>
<ul>
<li>The linear combination of covariates is modeled as $ \log(\mu_i) = \beta_0 + \beta_1 \cdot x_{1i} + \beta_2 \cdot x_{2i} + \dots + \beta_k \cdot x_{ki} $, where $x_{1i}, x_{2i}, \dots, x_{ki}$ are the covariates for individual $i$.</li>
<li>This represents the log of the expected survival time for each individual.</li>
</ul>
</li>
<li>
<p><strong>Likelihood:</strong></p>
<ul>
<li>The observed survival times are modeled as being drawn from a <strong>LogNormal distribution</strong>, where the mean is $\log(\mu)$ and the standard deviation is $\sigma$.</li>
<li>This distribution models the uncertainty in the survival times, allowing the log-transformed times to follow a normal distribution, while ensuring that the predicted survival times themselves are positive.</li>
</ul>
</li>
</ul>
<p>This adjustment in the model may lead to improved performance, especially if the underlying survival times fit better with a log-normal assumption rather than a Weibull distribution.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">lognormal_survival_model_with_covariates</span><span class="p">(</span><span class="n">covariates</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># define priors</span>
</span></span><span class="line"><span class="cl">    <span class="n">beta</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">expand</span><span class="p">([</span><span class="n">covariates</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]]))</span>  <span class="c1"># coefficients (beta)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sigma</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;sigma&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Exponential</span><span class="p">(</span><span class="mf">1.0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># linear model for log(mu)</span>
</span></span><span class="line"><span class="cl">    <span class="n">log_mu</span> <span class="o">=</span> <span class="n">jnp</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">covariates</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>      <span class="c1"># linear combination of covariates</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># likelihood</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">plate</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;obs&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">LogNormal</span><span class="p">(</span><span class="n">log_mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">),</span> <span class="n">obs</span> <span class="o">=</span> <span class="n">data</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="fitting-the-log-normal-survival-model-with-covariates">Fitting the Log-Normal Survival Model with Covariates</h3>
<p>We now fit the <strong>log-normal survival model</strong> with covariates using the <strong>No-U-Turn Sampler (NUTS)</strong>. This model assumes that the logarithm of the survival times follows a normal distribution, and the scale parameter (or mean of the log-survival times) depends on a linear combination of the selected covariates.</p>
<h4 id="code-explanation-8">Code Explanation</h4>
<ul>
<li><strong>Feature Selection:</strong> We choose a new set of covariates based on their relevance to survival: <strong>Bilirubin, Edema, Copper, Prothrombin, Albumin, and Age</strong>.
<ul>
<li>These features are expected to influence survival times based on prior domain knowledge or their relationship with survival.</li>
</ul>
</li>
<li><strong>MCMC with NUTS:</strong> The log-normal model is fitted using MCMC with 1,000 warm-up iterations and 1,000 sampling iterations.
<ul>
<li>The NUTS sampler explores the posterior distribution of the model parameters, accounting for the covariates in predicting survival times.</li>
</ul>
</li>
</ul>
<p>By running this code, we estimate the posterior distributions of the regression coefficients ($\beta$) and the standard deviation ($\sigma$) for the log-normal survival model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">selection_features_lognormal</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Bilirubin&#39;</span><span class="p">,</span> <span class="s1">&#39;Edema&#39;</span><span class="p">,</span> <span class="s1">&#39;Copper&#39;</span><span class="p">,</span> <span class="s1">&#39;Prothrombin&#39;</span><span class="p">,</span> <span class="s1">&#39;Albumin&#39;</span><span class="p">,</span> <span class="s1">&#39;Age&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">covariates_survival_lognormal</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][</span><span class="n">selection_features_lognormal</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span></span><span class="line"><span class="cl"><span class="n">survival_times</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][</span><span class="s1">&#39;N_Days&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_with_covariates_lognormal</span> <span class="o">=</span> <span class="n">MCMC</span><span class="p">(</span><span class="n">NUTS</span><span class="p">(</span><span class="n">lognormal_survival_model_with_covariates</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_warmup</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                     <span class="n">num_chains</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_with_covariates_lognormal</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                  <span class="n">data</span> <span class="o">=</span> <span class="n">survival_times_observed</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">covariates</span> <span class="o">=</span> <span class="n">covariates_survival_lognormal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_survival_with_covariates_lognormal</span><span class="o">.</span><span class="n">print_summary</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



                mean       std    median      5.0%     95.0%     n_eff     r_hat
   beta[0]      0.79      0.34      0.80      0.21      1.34   5897.04      1.00
   beta[1]      1.57      0.60      1.56      0.64      2.56   5230.58      1.00
   beta[2]      0.56      0.38      0.56     -0.07      1.18   6122.26      1.00
   beta[3]      0.60      0.41      0.60     -0.04      1.30   6428.30      1.00
   beta[4]      0.03      0.42      0.03     -0.70      0.68   5850.73      1.00
   beta[5]      1.23      0.46      1.23      0.45      1.95   5866.68      1.00
     sigma      5.96      0.33      5.94      5.39      6.47   6314.24      1.00

Number of divergences: 0
</code></pre>
<h4 id="results-interpretation-for-the-log-normal-survival-model-with-covariates">Results Interpretation for the Log-Normal Survival Model with Covariates</h4>
<p>The output provides the posterior estimates for the regression coefficients ($\beta$) and the standard deviation ($\sigma$) in the log-normal survival model. The model successfully converged with no divergences, and the effective sample sizes ($n_{\text{eff}}$) and $\hat{R}$ values indicate good convergence.</p>
<ul>
<li>
<p><strong>$\beta$ coefficients:</strong></p>
<ul>
<li><strong>beta[0] (Bilirubin):</strong> Mean of <strong>0.79</strong>, suggesting that higher Bilirubin levels are associated with a higher log-survival time, meaning longer survival on average.</li>
<li><strong>beta[1] (Edema):</strong> Mean of <strong>1.57</strong>, showing a relatively strong positive effect on survival. This indicates that patients with Edema have longer predicted survival times.</li>
<li><strong>beta[2] (Copper):</strong> Mean of <strong>0.56</strong>, suggesting that higher copper levels are also associated with longer survival times, though the effect size is smaller than for Bilirubin and Edema.</li>
<li><strong>beta[3] (Prothrombin):</strong> Mean of <strong>0.60</strong>, indicating a positive relationship between Prothrombin and survival time.</li>
<li><strong>beta[4] (Albumin):</strong> Mean of <strong>0.03</strong>, suggesting that the effect of Albumin on survival time is weak and uncertain, as evidenced by the wide credible interval.</li>
<li><strong>beta[5] (Age):</strong> Mean of <strong>1.23</strong>, suggesting that older age is associated with longer survival times, which might be counterintuitive but could reflect a complex interaction with other covariates in this dataset.</li>
</ul>
</li>
<li>
<p><strong>Standard Deviation ($\sigma$):</strong></p>
<ul>
<li>The mean estimate for $\sigma$ is <strong>5.96</strong>, indicating that there is considerable variability in the log-survival times that the model is capturing. The narrow credible interval (5.39 to 6.47) suggests that the uncertainty around this parameter is low.</li>
</ul>
</li>
<li>
<p><strong>Effective Sample Size ($n_{\text{eff}}$) and $\hat{R}$ values:</strong></p>
<ul>
<li>All parameters have high effective sample sizes, indicating good exploration of the posterior distribution during sampling.</li>
<li>The $\hat{R}$ values are all <strong>1.00</strong>, indicating that the MCMC chains have converged well.</li>
</ul>
</li>
</ul>
<p>The results indicate that the log-normal model has fit the data well, with all parameters showing good convergence and meaningful posterior estimates. The positive $\beta$ coefficients for most covariates suggest that these factors are positively correlated with survival times. However, further analysis might be needed to interpret some of the results, such as the positive association between age and survival.</p>
<p>Using a <strong>log-normal model</strong> may be more suitable than the Weibull model in this case because the log-normal distribution can capture more flexible hazard patterns, including non-monotonic hazard rates, which the Weibull model may struggle with. If the survival data exhibits more complex or non-linear relationships, the log-normal model can provide a better fit by allowing the log of survival times to follow a normal distribution, capturing a wider range of survival behaviors.</p>
<h3 id="posterior-trace-and-pair-plots-for-the-log-normal-survival-model">Posterior Trace and Pair Plots for the Log-Normal Survival Model</h3>
<p>After fitting the log-normal survival model with covariates, we use trace and pair plots to assess the quality of the MCMC sampling and the relationships between the parameters. These visualizations help verify that the posterior distributions are well-behaved and that the sampler has explored the parameter space efficiently.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">trace_survival_with_covariates_lognormal</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc_survival_with_covariates_lognormal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_trace</span><span class="p">(</span><span class="n">trace_survival_with_covariates_lognormal</span><span class="p">,</span> <span class="n">compact</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_pair</span><span class="p">(</span><span class="n">trace_survival_with_covariates_lognormal</span><span class="p">,</span> <span class="n">divergences</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_90_0.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_90_1.png" type="" alt="png"  /></p>
<h4 id="trace-plot-interpretation">Trace Plot Interpretation</h4>
<ul>
<li>
<p><strong>Posterior Distributions (Left Panels):</strong></p>
<ul>
<li>The left panels show the posterior distributions for the regression coefficients ($\beta$) and the standard deviation ($\sigma$). All the distributions appear unimodal and well-defined, with little to no skewness, indicating that the model has produced meaningful estimates for each parameter.</li>
<li>Each coefficient corresponds to one of the covariates selected for the model, and $\sigma$ represents the standard deviation of the log-normal distribution.</li>
</ul>
</li>
<li>
<p><strong>MCMC Trace (Right Panels):</strong></p>
<ul>
<li>The right panels show the MCMC sampling traces. All traces exhibit good mixing and stability, meaning that the chains are not stuck and have thoroughly explored the parameter space. The lack of any visible trends suggests that the MCMC chains have converged well.</li>
</ul>
</li>
</ul>
<h4 id="pair-plot-interpretation">Pair Plot Interpretation</h4>
<ul>
<li>The pair plots show the joint distributions and scatter plots of the posterior samples for each pair of parameters.
<ul>
<li>The plots indicate minimal correlation between the parameters, as the scatter plots are roughly circular, suggesting that each parameter is being estimated independently of the others.</li>
<li>No significant divergences are visible in the scatter plots, confirming that the NUTS sampler did not encounter serious issues during sampling.</li>
</ul>
</li>
</ul>
<p>The trace and pair plots demonstrate that the MCMC sampling worked efficiently, with good mixing and convergence. The posterior distributions are well-defined, and the parameter estimates are reliable. Additionally, the pair plots show that there are no strong correlations between the covariates, supporting the validity of the model structure and the sampling process.</p>
<h3 id="posterior-predictive-check-for-log-normal-survival-model-with-covariates">Posterior Predictive Check for Log-Normal Survival Model with Covariates</h3>
<p>We now perform a <strong>posterior predictive check</strong> to evaluate how well the log-normal survival model with covariates predicts the observed survival times. This helps assess the quality of the model’s fit by comparing the predicted and observed data distributions.</p>
<h4 id="code-explanation-9">Code Explanation</h4>
<ul>
<li><strong>Posterior Predictive Samples:</strong> We generate posterior predictive survival times using the posterior samples of the regression coefficients ($\beta$) and standard deviation ($\sigma$). This allows us to simulate the model&rsquo;s predictions based on the observed data and the learned parameters.</li>
<li><strong>Posterior Predictive Plot:</strong> The plot shows the posterior predictive distribution (blue lines), the observed data (black line), and the posterior predictive mean (dashed orange line).</li>
</ul>
<h3 id="posterior-predictive-check-for-log-normal-survival-model-with-covariates-1">Posterior Predictive Check for Log-Normal Survival Model with Covariates</h3>
<p>We now perform a <strong>posterior predictive check</strong> to evaluate how well the log-normal survival model with covariates predicts the observed survival times. This helps assess the quality of the model’s fit by comparing the predicted and observed data distributions.</p>
<h4 id="code-explanation-10">Code Explanation</h4>
<ul>
<li><strong>Posterior Predictive Samples:</strong> We generate posterior predictive survival times using the posterior samples of the regression coefficients ($\beta$) and standard deviation ($\sigma$). This allows us to simulate the model&rsquo;s predictions based on the observed data and the learned parameters.</li>
<li><strong>Posterior Predictive Plot:</strong> The plot shows the posterior predictive distribution (blue lines), the observed data (black line), and the posterior predictive mean (dashed orange line).</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">survival_posterior_samples_lognormal</span> <span class="o">=</span> <span class="n">mcmc_survival_with_covariates_lognormal</span><span class="o">.</span><span class="n">get_samples</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">survival_posterior_predictive_lognormal_with_covariates</span> <span class="o">=</span> <span class="n">Predictive</span><span class="p">(</span><span class="n">lognormal_survival_model_with_covariates</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="n">posterior_samples</span> <span class="o">=</span> <span class="n">survival_posterior_samples_lognormal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">survival_times_predicted_lognormal_with_covariates</span> <span class="o">=</span> <span class="n">survival_posterior_predictive_lognormal_with_covariates</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> 
</span></span><span class="line"><span class="cl">                                                                                                    <span class="n">data</span> <span class="o">=</span> <span class="n">survival_times_observed</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                                                                    <span class="n">covariates</span> <span class="o">=</span> <span class="n">covariates_survival_lognormal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">survival_posterior_data_lognormal_with_covariates</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc_survival_with_covariates_lognormal</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="n">posterior_predictive</span> <span class="o">=</span> <span class="n">survival_times_predicted_lognormal_with_covariates</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_ppc</span><span class="p">(</span><span class="n">survival_posterior_data_lognormal_with_covariates</span><span class="p">,</span> <span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;kde&#39;</span><span class="p">,</span> <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;posterior&#39;</span><span class="p">,</span> <span class="n">observed</span> <span class="o">=</span> <span class="kc">True</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_94_0.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-posterior-predictive-plot-1">Interpretation of the Posterior Predictive Plot</h4>
<ul>
<li>
<p><strong>Blue Lines (Posterior Predictive Samples):</strong> These represent the model’s predictions for survival times based on the posterior distribution. The spread of the lines illustrates the uncertainty in the predictions.</p>
</li>
<li>
<p><strong>Solid Black Line (Observed Data):</strong> This represents the actual observed survival times.</p>
</li>
<li>
<p><strong>Dashed Orange Line (Posterior Predictive Mean):</strong> The dashed line shows the mean of the posterior predictive samples.</p>
</li>
</ul>
<p>The posterior predictive samples align well with the observed data, suggesting that the log-normal survival model with covariates captures the underlying survival patterns in the data. The predicted survival times fall within a reasonable range around the observed data, and the posterior predictive mean closely follows the trend of the observed survival times. This result indicates that the model has fit the data well and is capable of generating realistic survival time predictions.</p>
<h3 id="plot-interpretation-for-lognormal-posterior-predictive-vs-observed-data">Plot Interpretation for Lognormal Posterior Predictive vs. Observed Data</h3>
<p>In this step, we visualize the posterior predictive check for the <strong>lognormal model with covariates</strong> using kernel density estimation (KDE) plots. These plots help us understand how well the model captures the distribution of the survival data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span><span class="n">survival_posterior_data_lognormal_with_covariates</span><span class="p">[</span><span class="s1">&#39;posterior_predictive&#39;</span><span class="p">][</span><span class="s1">&#39;obs&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">plot_kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;color&#39;</span> <span class="p">:</span> <span class="s1">&#39;C0&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span> <span class="p">:</span> <span class="s1">&#39;Lognormal Posterior Predictive&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span><span class="n">survival_posterior_data_lognormal_with_covariates</span><span class="p">[</span><span class="s1">&#39;observed_data&#39;</span><span class="p">][</span><span class="s1">&#39;obs&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">plot_kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;color&#39;</span><span class="p">:</span> <span class="s1">&#39;C2&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span> <span class="p">:</span> <span class="s1">&#39;Observed Data&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_97_0.png" type="" alt="png"  /></p>
<h4 id="explanation-of-the-plot-1">Explanation of the Plot:</h4>
<ul>
<li>
<p><strong>X-axis (Survival Times):</strong></p>
<ul>
<li>The x-axis represents the <strong>survival times</strong> (in days), ranging from 0 to about 4500 days.</li>
</ul>
</li>
<li>
<p><strong>Y-axis (Density):</strong></p>
<ul>
<li>The y-axis represents the <strong>density</strong> of survival times, or how frequently individuals survive for certain durations based on the observed data and model predictions.</li>
</ul>
</li>
</ul>
<h4 id="lines-in-the-plot-1">Lines in the Plot:</h4>
<ul>
<li>
<p><strong>Blue Line (Lognormal Posterior Predictive Uncensored):</strong></p>
<ul>
<li>This line represents the model&rsquo;s prediction of uncensored survival times using the <strong>lognormal distribution</strong>. It shows how the model expects individuals to survive over time, based on the posterior samples.</li>
</ul>
</li>
<li>
<p><strong>Green Line (Observed Data):</strong></p>
<ul>
<li>This line represents the <strong>actual observed data</strong> of uncensored survival times. It shows the true distribution of survival times for individuals where the event (e.g., death) has occurred.</li>
</ul>
</li>
</ul>
<h4 id="interpretation-2">Interpretation:</h4>
<ul>
<li>
<p><strong>Alignment of the Lines:</strong></p>
<ul>
<li>The blue and green lines show some overlap, especially in the range from <strong>500 to 2000 days</strong>. This indicates that the model has captured the trend of survival times relatively well in this region.</li>
</ul>
</li>
<li>
<p><strong>Discrepancies at the Extremes:</strong></p>
<ul>
<li>The blue line fluctuates more at the start of the timeline (before 1000 days) and at the far right (after 3000 days). This suggests that the model has higher variability in predicting shorter survival times and potentially struggles to match the observed data precisely in those ranges.</li>
</ul>
</li>
<li>
<p><strong>Overall Fit:</strong></p>
<ul>
<li>Despite some variability, the general trend of the posterior predictive distribution (blue) aligns with the observed data (green). This indicates that the <strong>lognormal model with covariates</strong> is reasonably accurate in predicting uncensored survival times but could be improved in certain time ranges, especially for early and late survival times.</li>
</ul>
</li>
</ul>
<p>By including this plot, we visually validate that the <strong>lognormal model</strong> captures key aspects of the survival data, though some refinement may be needed for more extreme cases.</p>
<h2 id="45-log-normal-survival-model-with-covariates-and-censored-data">4.5 Log-Normal Survival Model with Covariates and Censored Data</h2>
<p>In this final part, we extend the log-normal survival model to account for <strong>censored data</strong>. In survival analysis, <strong>censoring</strong> occurs when we do not observe the exact event time for some individuals. For example, if a patient is still alive at the end of the study or drops out before experiencing the event (death), their survival time is <strong>right-censored</strong>—we only know that the event did not occur before a certain time.</p>
<h3 id="modeling-censored-data">Modeling Censored Data</h3>
<p>To account for censored data, we modify the likelihood function to handle both <strong>observed</strong> and <strong>censored</strong> survival times. Specifically, for censored data, the likelihood is based on the <strong>survival function</strong> rather than the probability density function (PDF).</p>
<h3 id="likelihood-for-censored-and-observed-data">Likelihood for Censored and Observed Data</h3>
<p>For observed survival times $t_i$ (i.e., the event occurred):
$$ f(t_i | \mu_i, \sigma) = \frac{1}{t_i \sigma \sqrt{2\pi}} \exp\left(-\frac{(\log t_i - \mu_i)^2}{2\sigma^2}\right) $$</p>
<p>For censored survival times $t_i$ (i.e., the event did not occur by time $t_i$):
$$ S(t_i | \mu_i, \sigma) = 1 - F(t_i | \mu_i, \sigma) $$</p>
<p>Where:</p>
<ul>
<li>$f(t_i | \mu_i, \sigma)$ is the <strong>log-normal probability density function</strong> (PDF) for observed data,</li>
<li>$S(t_i | \mu_i, \sigma)$ is the <strong>survival function</strong>, representing the probability of survival beyond time $t_i$ for censored data,</li>
<li>$F(t_i | \mu_i, \sigma)$ is the <strong>cumulative distribution function</strong> (CDF) of the log-normal distribution,</li>
<li>$\mu_i = \beta_0 + \beta_1 x_{1i} + \dots + \beta_k x_{ki}$ is the mean of the log-survival times for individual $i$, based on their covariates,</li>
<li>$\sigma$ is the standard deviation of the log-survival times.</li>
</ul>
<h3 id="handling-censoring">Handling Censoring</h3>
<p>In the likelihood, we condition on whether the data is censored or not:</p>
<ul>
<li>For <strong>observed data</strong>, we use the PDF of the log-normal distribution.</li>
<li>For <strong>censored data</strong>, we use the survival function (1 minus the CDF).</li>
</ul>
<p>By incorporating both observed and censored survival times, this model can better capture the full picture of the dataset, including individuals who did not experience the event during the study period.</p>
<h3 id="steps-for-the-model">Steps for the Model:</h3>
<ol>
<li>Define the log-normal survival model with covariates, including censored data.</li>
<li>Prepare the dataset, distinguishing between censored and uncensored observations.</li>
<li>Fit the model using MCMC and analyze the results.</li>
</ol>
<h3 id="defining-the-log-normal-survival-model-with-censored-data">Defining the Log-Normal Survival Model with Censored Data</h3>
<p>In this model, we incorporate <strong>censored data</strong> into the log-normal survival model with covariates. Censoring allows us to handle cases where the exact survival time is unknown because the event (e.g., death) has not yet occurred by the end of the observation period.</p>
<h4 id="code-explanation-11">Code Explanation</h4>
<ul>
<li>
<p><strong>Priors:</strong></p>
<ul>
<li><strong>$\sigma$ (standard deviation parameter):</strong> We place an <strong>Exponential(1.0)</strong> prior on $\sigma$. This parameter controls the spread of the log-normal distribution for survival times, representing the variability in the log-transformed survival times.</li>
<li><strong>$\beta$ (covariate coefficients):</strong> If covariates are provided, we define a normal prior on $\beta$, which adjusts the mean of the log-survival times $\mu_i$ for each individual based on their characteristics.</li>
</ul>
</li>
<li>
<p><strong>Handling Censored Data:</strong></p>
<ul>
<li>We use a <strong>mask</strong> to differentiate between uncensored (event occurred) and censored (event did not occur) data.</li>
<li>For <strong>uncensored data</strong>, the likelihood is based on the <strong>log-normal distribution</strong>: $f(t_i | \mu_i, \sigma)$, where $\mu_i$ is the mean log-survival time (a linear combination of the covariates).</li>
<li>For <strong>censored data</strong>, the likelihood is based on the <strong>survival function</strong> of the log-normal distribution: $S(t_i | \mu_i, \sigma) = 1 - F(t_i | \mu_i, \sigma)$, where $F(t_i | \mu_i, \sigma)$ is the cumulative distribution function (CDF) of the log-normal distribution.</li>
</ul>
</li>
<li>
<p><strong>Likelihood:</strong></p>
<ul>
<li>We define the likelihood separately for uncensored and censored data:
<ul>
<li>For <strong>uncensored data</strong>, we use the <strong>log-normal distribution</strong> to model the observed survival times.</li>
<li>For <strong>censored data</strong>, we use a Bernoulli likelihood to model the survival probabilities, representing the probability that the event has not yet occurred by the observed time. This is based on the <strong>survival function</strong> of the log-normal distribution.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>By integrating both the <strong>observed events</strong> and <strong>censored data</strong>, this model more accurately reflects the reality of survival analysis, where not all individuals experience the event within the study period. The log-normal model offers flexibility, particularly for data where the hazard rate may change over time, making it a more suitable choice for complex survival data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">survival_model_lognormal_with_censored</span><span class="p">(</span><span class="n">covariates</span><span class="p">,</span> <span class="n">survival_times</span><span class="p">,</span> <span class="n">event_occurred</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># define priors</span>
</span></span><span class="line"><span class="cl">    <span class="n">sigma</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;sigma&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Exponential</span><span class="p">(</span><span class="mf">1.0</span><span class="p">))</span>  <span class="c1"># standard deviation for the log-normal distribution</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">covariates</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">beta</span> <span class="o">=</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">expand</span><span class="p">([</span><span class="n">covariates</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]]))</span>  <span class="c1"># regression coefficients</span>
</span></span><span class="line"><span class="cl">        <span class="n">log_mu</span> <span class="o">=</span> <span class="n">jnp</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">covariates</span><span class="p">,</span> <span class="n">beta</span><span class="p">)</span>  <span class="c1"># linear model for log(mu)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">log_mu</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># if no covariates, set log(mu) to 0 (default)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># likelihood - handle based on censoring status</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">numpyro</span><span class="o">.</span><span class="n">plate</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="n">survival_times</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># uncensored data (event occurred, i.e. event_occurred == 1)</span>
</span></span><span class="line"><span class="cl">        <span class="n">uncensored_mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">event_occurred</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;obs_uncensored&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">LogNormal</span><span class="p">(</span><span class="n">log_mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span><span class="o">.</span><span class="n">mask</span><span class="p">(</span><span class="n">uncensored_mask</span><span class="p">),</span> <span class="n">obs</span><span class="o">=</span><span class="n">survival_times</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># censored data (event did not occur, i.e. event_occurred == 0)</span>
</span></span><span class="line"><span class="cl">        <span class="n">censored_mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">event_occurred</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">survival_prob</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">dist</span><span class="o">.</span><span class="n">LogNormal</span><span class="p">(</span><span class="n">log_mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span><span class="o">.</span><span class="n">cdf</span><span class="p">(</span><span class="n">survival_times</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">numpyro</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="s1">&#39;obs_censored&#39;</span><span class="p">,</span> <span class="n">dist</span><span class="o">.</span><span class="n">Bernoulli</span><span class="p">(</span><span class="n">survival_prob</span><span class="p">)</span><span class="o">.</span><span class="n">mask</span><span class="p">(</span><span class="n">censored_mask</span><span class="p">),</span> <span class="n">obs</span><span class="o">=</span><span class="n">event_occurred</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="preparing-the-data-for-the-log-normal-survival-model-with-censored-data">Preparing the Data for the Log-Normal Survival Model with Censored Data</h3>
<p>To fit the log-normal survival model with censored data, we need to prepare the following components:</p>
<ul>
<li>
<p><strong>Survival Times (<code>survival_times</code>):</strong> This represents the number of days each patient survived. These are the time-to-event data, which include both censored and uncensored observations.</p>
</li>
<li>
<p><strong>Event Occurred (<code>event_occurred</code>):</strong> This variable indicates whether the event (death) occurred or not. We create a binary indicator where <strong>1</strong> represents that the event occurred (i.e., death), and <strong>0</strong> represents that the data is censored (i.e., the patient was alive at the end of the study).</p>
</li>
<li>
<p><strong>Covariates (<code>covariates_survival</code>):</strong> We select a set of covariates that will be used to model the individual-specific survival times. In this case, we choose <code>'Bilirubin'</code>, <code>'Edema'</code>, <code>'Copper'</code>, <code>'Prothrombin'</code>, <code>'Albumin'</code>, and <code>'Age'</code> as the covariates, which are expected to influence the survival times, as we had already observed in EDA.</p>
</li>
</ul>
<h4 id="code-explanation-12">Code Explanation:</h4>
<ul>
<li><strong><code>survival_times</code>:</strong> Extracts the survival times (in days) from the dataset.</li>
<li><strong><code>event_occurred</code>:</strong> Converts the status variable into a binary format where 1 means the event occurred, and 0 means the data is censored.</li>
<li><strong><code>covariates_survival</code>:</strong> Selects the covariates of interest, which are used to predict survival times.</li>
</ul>
<p>This step ensures that we have the necessary data formatted correctly to fit the survival model, accounting for both censored and uncensored data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># prepare the data</span>
</span></span><span class="line"><span class="cl"><span class="n">survival_times</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;N_Days&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>  <span class="c1"># the survival times (days)</span>
</span></span><span class="line"><span class="cl"><span class="n">event_occurred</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;Status&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span><span class="o">.</span><span class="n">values</span>  <span class="c1"># 1 if event (death), 0 if censored</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select your covariates</span>
</span></span><span class="line"><span class="cl"><span class="n">covariates_survival</span> <span class="o">=</span> <span class="n">data</span><span class="p">[[</span><span class="s1">&#39;Bilirubin&#39;</span><span class="p">,</span> <span class="s1">&#39;Edema&#39;</span><span class="p">,</span> <span class="s1">&#39;Copper&#39;</span><span class="p">,</span> <span class="s1">&#39;Prothrombin&#39;</span><span class="p">,</span> <span class="s1">&#39;Albumin&#39;</span><span class="p">,</span> <span class="s1">&#39;Age&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">values</span>  
</span></span></code></pre></div><h3 id="fitting-the-weibull-survival-model-with-censored-data">Fitting the Weibull Survival Model with Censored Data</h3>
<p>We now fit the <strong>Weibull survival model</strong> with covariates and censored data using <strong>Markov Chain Monte Carlo (MCMC)</strong> with the <strong>No-U-Turn Sampler (NUTS)</strong>. The model accounts for both censored and uncensored survival times, making it suitable for real-world survival analysis where not all events occur within the observation window.</p>
<h4 id="code-explanation-13">Code Explanation</h4>
<ul>
<li><strong>NUTS Sampler:</strong> We use the NUTS kernel to efficiently explore the posterior distribution of the parameters.</li>
<li><strong>MCMC Setup:</strong> The model is run with 1,000 warm-up iterations and 1,000 sampling iterations, with 4 independent chains to ensure proper convergence and mixing.</li>
<li><strong>Input Data:</strong>
<ul>
<li><strong>Covariates:</strong> The selected covariates are passed to the model.</li>
<li><strong>Survival Times:</strong> The observed or censored survival times are provided to the model.</li>
<li><strong>Event Occurred:</strong> This binary indicator differentiates between censored (0) and uncensored (1) data.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fit the Weibull model with censored data</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_lognormal_censored</span> <span class="o">=</span> <span class="n">MCMC</span><span class="p">(</span><span class="n">NUTS</span><span class="p">(</span><span class="n">survival_model_lognormal_with_censored</span><span class="p">),</span> 
</span></span><span class="line"><span class="cl">                             <span class="n">num_warmup</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">num_chains</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_lognormal_censored</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> <span class="n">covariates</span><span class="o">=</span><span class="n">covariates_survival</span><span class="p">,</span> <span class="n">survival_times</span><span class="o">=</span><span class="n">survival_times</span><span class="p">,</span> <span class="n">event_occurred</span><span class="o">=</span><span class="n">event_occurred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mcmc_lognormal_censored</span><span class="o">.</span><span class="n">print_summary</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



  0%|          | 0/2000 [00:00&lt;?, ?it/s]



                mean       std    median      5.0%     95.0%     n_eff     r_hat
   beta[0]      0.91      0.30      0.91      0.44      1.42   5068.22      1.00
   beta[1]      1.32      0.52      1.31      0.50      2.20   5117.46      1.00
   beta[2]      0.61      0.32      0.61      0.11      1.14   6312.73      1.00
   beta[3]      0.68      0.34      0.68      0.09      1.20   6077.50      1.00
   beta[4]     -0.02      0.35     -0.02     -0.62      0.52   6067.08      1.00
   beta[5]      1.16      0.35      1.16      0.59      1.74   6004.50      1.00
     sigma      5.25      0.24      5.24      4.84      5.62   6263.06      1.00

Number of divergences: 0
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"></code></pre></div><h3 id="results-interpretation-for-the-log-normal-survival-model-with-censored-data">Results Interpretation for the Log-Normal Survival Model with Censored Data</h3>
<p>The output provides the posterior estimates for the <strong>regression coefficients</strong> ($\beta$) and the <strong>standard deviation ($\sigma$)</strong> for the log-normal survival model with censored data. The model has converged well, as indicated by the <strong>$\hat{R}$ values</strong> and <strong>effective sample sizes ($n_{\text{eff}}$)</strong>, with no divergences reported during sampling.</p>
<ul>
<li>
<p><strong>$\beta$ Coefficients (Covariates):</strong></p>
<ul>
<li><strong>beta[0] (Bilirubin):</strong> Mean of <strong>0.91</strong>, indicating a positive association between Bilirubin levels and survival time. Higher Bilirubin levels are associated with increased survival times, and the 90% credible interval does not cross zero, suggesting a strong effect.</li>
<li><strong>beta[1] (Albumin):</strong> Mean of <strong>1.32</strong>, showing a significant positive effect of Albumin on survival time. Higher Albumin levels appear to correlate with longer survival times, and the effect is pronounced.</li>
<li><strong>beta[2] (Stage):</strong> Mean of <strong>0.61</strong>, suggesting a positive effect of Stage on survival time. The 90% credible interval remains above zero, implying that individuals at higher stages have slightly increased survival times, though the effect size is moderate.</li>
<li><strong>beta[3] and beta[4]:</strong> These coefficients represent additional covariates in the model. Both show some positive effects, with <strong>beta[3]</strong> having a mean of <strong>0.68</strong> and <strong>beta[4]</strong> showing a very slight negative effect with a mean of <strong>-0.02</strong>. However, the credible interval for <strong>beta[4]</strong> crosses zero, indicating less certainty about this effect.</li>
<li><strong>beta[5]:</strong> A mean of <strong>1.16</strong>, suggesting another strong positive association with survival time, with a credible interval that does not cross zero.</li>
</ul>
</li>
<li>
<p><strong>Standard Deviation ($\sigma$):</strong></p>
<ul>
<li>The parameter <strong>$\sigma$</strong> has a mean of <strong>5.25</strong>, indicating the variability in the log-transformed survival times. This suggests that there is a moderate amount of variance in the log-survival times across individuals, likely due to the influence of covariates.</li>
</ul>
</li>
<li>
<p><strong>Effective Sample Size ($n_{\text{eff}}$) and $\hat{R}$ Values:</strong></p>
<ul>
<li>The effective sample sizes are large, suggesting good mixing of the chains.</li>
<li>All $\hat{R}$ values are equal to <strong>1.00</strong>, confirming that the model has converged correctly.</li>
</ul>
</li>
</ul>
<p>The log-normal survival model with censored data has fit the data well, with meaningful estimates for the regression coefficients and the standard deviation. The positive effects of <strong>Bilirubin</strong> and <strong>Albumin</strong> are particularly strong, suggesting these covariates play a key role in predicting survival times. Additionally, the inclusion of censored data has improved the model&rsquo;s robustness by accounting for individuals whose survival times are unknown by the end of the study.</p>
<h3 id="posterior-predictive-check-for-the-log-normal-survival-model-with-censored-data">Posterior Predictive Check for the Log-Normal Survival Model with Censored Data</h3>
<p>The final step involves performing a <strong>posterior predictive check (PPC)</strong> to evaluate how well the log-normal survival model with censored data fits the observed data. This process involves generating predictions from the model based on the posterior samples and comparing them to the actual observed data.</p>
<h4 id="code-explanation-14">Code Explanation</h4>
<ul>
<li>
<p><strong>Posterior Predictive Samples:</strong></p>
<ul>
<li>We use the <code>Predictive</code> class to sample from the posterior distribution of the model parameters (obtained from the MCMC) and generate new predicted survival times.</li>
</ul>
</li>
<li>
<p><strong>Inference Data:</strong></p>
<ul>
<li>The generated posterior predictive samples are converted into <strong>InferenceData</strong> format using <code>ArviZ</code> to facilitate easy analysis and visualization.</li>
</ul>
</li>
<li>
<p><strong>Trace Plot:</strong></p>
<ul>
<li>The trace plot visualizes the posterior distributions of the model parameters and the convergence of the MCMC chains.</li>
</ul>
</li>
<li>
<p><strong>Posterior Predictive Check (PPC):</strong></p>
<ul>
<li>The PPC compares the predicted survival times (both censored and uncensored) with the observed survival times. This allows us to assess the model&rsquo;s fit by evaluating how closely the predicted values match the actual data.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># posterior predictive check for the Weibull model</span>
</span></span><span class="line"><span class="cl"><span class="n">posterior_samples_lognormal_censored</span> <span class="o">=</span> <span class="n">mcmc_lognormal_censored</span><span class="o">.</span><span class="n">get_samples</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">posterior_predictive_lognormal_censored</span> <span class="o">=</span> <span class="n">Predictive</span><span class="p">(</span><span class="n">survival_model_lognormal_with_censored</span><span class="p">,</span> <span class="n">posterior_samples_lognormal_censored</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">posterior_predictive_samples_lognormal_censored</span> <span class="o">=</span> <span class="n">posterior_predictive_lognormal_censored</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">42</span><span class="p">),</span> 
</span></span><span class="line"><span class="cl">                                                                                      <span class="n">covariates</span><span class="o">=</span><span class="n">covariates_survival</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                                                      <span class="n">survival_times</span><span class="o">=</span><span class="n">survival_times</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                                                                      <span class="n">event_occurred</span><span class="o">=</span><span class="n">event_occurred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert to InferenceData and plot PPC</span>
</span></span><span class="line"><span class="cl"><span class="n">az_data_lognormal_censored</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">from_numpyro</span><span class="p">(</span><span class="n">mcmc_lognormal_censored</span><span class="p">,</span> <span class="n">posterior_predictive</span><span class="o">=</span><span class="n">posterior_predictive_samples_lognormal_censored</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_trace</span><span class="p">(</span><span class="n">trace_survival_with_covariates_lognormal</span><span class="p">,</span> <span class="n">compact</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_ppc</span><span class="p">(</span><span class="n">az_data_lognormal_censored</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="s2">&#34;posterior&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_110_0.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_110_1.png" type="" alt="png"  /></p>
<h4 id="interpretation-of-the-results">Interpretation of the Results</h4>
<ol>
<li>
<p><strong>Trace Plot:</strong></p>
<ul>
<li>The trace plot shows well-mixed chains for each parameter (the $\beta$ coefficients and $\sigma$). The chains appear to have converged properly, with no visible signs of autocorrelation or poor mixing, further confirmed by the high effective sample sizes and $\hat{R}$ values from the summary.</li>
</ul>
</li>
<li>
<p><strong>Posterior Predictive Plot:</strong></p>
<ul>
<li>The PPC plot shows the predicted survival times (for both censored and uncensored data) overlaid with the actual observed data. The <strong>uncensored data</strong> (right plot) shows that the model does a reasonable job of capturing the distribution of the observed survival times, with the <strong>posterior predictive mean</strong> aligning well with the data.</li>
<li>For the <strong>censored data</strong> (left plot), the model also appears to fit well, indicating that the log-normal model appropriately captures the uncertainty introduced by censoring.</li>
</ul>
</li>
</ol>
<p>The posterior predictive check indicates that the log-normal model with censored data provides a good fit to the data. The model successfully handles both censored and uncensored survival times, making accurate predictions for the observed survival times. This confirms the model&rsquo;s robustness in dealing with time-to-event data in the presence of censoring.</p>
<p>The two plots presented below show the posterior predictive checks (PPC) for both <strong>uncensored</strong> and <strong>censored</strong> data from our log-normal survival model with censored observations.</p>
<h3 id="uncensored-data-plot">Uncensored Data Plot:</h3>
<p>The first plot compares the <strong>observed uncensored data</strong> (green line) with the <strong>posterior predictive distribution</strong> (blue line).</p>
<ul>
<li><strong>Observed Uncensored Data</strong>: These are individuals for whom the event (e.g., death) has occurred within the study period, and the exact survival times are known.</li>
<li><strong>Posterior Predictive Uncensored</strong>: The blue line represents the model&rsquo;s predicted distribution for these uncensored individuals, given the posterior distribution of parameters.</li>
</ul>
<p>In this plot, we observe a reasonable fit between the observed and predicted distributions. The general shape of both lines aligns, with some differences in fluctuation, which could be attributed to noise or model limitations. The model captures the overall distribution of survival times for individuals who experienced the event.</p>
<h3 id="censored-data-plot">Censored Data Plot:</h3>
<p>The second plot compares the <strong>observed censored data</strong> (green line) with the <strong>posterior predictive distribution</strong> (blue line).</p>
<ul>
<li><strong>Observed Censored Data</strong>: This represents individuals whose event did not occur by the end of the study period, so we only know they survived at least until a certain time. The x-axis shows the proportion of time for which the event had not occurred (between 0 and 1).</li>
<li><strong>Posterior Predictive Censored</strong>: The blue line shows the predicted distribution for censored individuals based on the posterior samples from the model.</li>
</ul>
<p>The fit is close, with both lines following similar trends. The model correctly predicts that most censored individuals have survival probabilities close to either 0 or 1, reflecting the individuals who were not likely to experience the event by the end of the study. This shows that the model is appropriately accounting for the censored data.</p>
<p>Overall, both PPC plots demonstrate that the model is capable of predicting survival times effectively, accounting for both censored and uncensored data, and matching the general distribution patterns in the dataset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">az_data_lognormal_censored</span><span class="p">[</span><span class="s2">&#34;observed_data&#34;</span><span class="p">][</span><span class="s2">&#34;obs_uncensored&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;C2&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Observed Data Uncensored&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">az_data_lognormal_censored</span><span class="p">[</span><span class="s2">&#34;posterior_predictive&#34;</span><span class="p">][</span><span class="s2">&#34;obs_uncensored&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;C0&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Posterior Predictive Uncensored&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">az_data_lognormal_censored</span><span class="p">[</span><span class="s2">&#34;observed_data&#34;</span><span class="p">][</span><span class="s2">&#34;obs_censored&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;C2&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Observed Data Censored&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_kde</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">az_data_lognormal_censored</span><span class="p">[</span><span class="s2">&#34;posterior_predictive&#34;</span><span class="p">][</span><span class="s2">&#34;obs_censored&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">flatten</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span> <span class="s2">&#34;C0&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Posterior Predictive Censored&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_113_0.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240924_NumPyro_LogReg_Surv_Analysis/output_113_1.png" type="" alt="png"  /></p>
<h1 id="5-conclusion">5. Conclusion</h1>
<p>In this notebook, we conducted a comprehensive analysis using <strong>Bayesian survival modeling</strong> techniques to predict survival times in a dataset of cirrhosis patients. We began with exploratory data analysis (EDA), examining key variables and correlations to gain an understanding of the dataset. We then moved to <strong>classification modeling</strong> using a <strong>Bayesian logistic regression model</strong> to predict survival status, where we explored the relationships between covariates and the binary outcome.</p>
<p>Afterwards, we shifted our focus to <strong>survival analysis</strong>. We first implemented a <strong>Weibull survival model</strong> to model survival times based solely on the observed uncensored data. We explored the shortcomings of this model, particularly when considering the flexibility of the data. Subsequently, we introduced a <strong>log-normal survival model</strong>, which proved more appropriate for capturing the distribution of survival times.</p>
<p>To account for individual-specific factors, we introduced <strong>covariates</strong> into the survival models, enabling more personalized predictions based on factors such as <strong>bilirubin levels</strong>, <strong>age</strong>, and <strong>albumin</strong>. This allowed us to model survival times as a function of these covariates, further improving the predictive power of the model.</p>
<p>Finally, we tackled the challenge of <strong>censored data</strong>, which occurs when the exact event time is unknown for some individuals. We adjusted the <strong>log-normal model</strong> to account for both censored and uncensored observations, demonstrating that Bayesian modeling can handle these complexities effectively. We used <strong>posterior predictive checks (PPC)</strong> to validate the models and showed that the predicted survival times align well with the observed data, both for censored and uncensored cases.</p>
<p>Through this journey, we demonstrated how <strong>Bayesian inference</strong> and <strong>probabilistic programming</strong> provide powerful tools for survival analysis. By leveraging <strong>MCMC sampling</strong>, we were able to estimate the posterior distributions of key parameters and perform robust predictions, while accounting for the uncertainty inherent in the data. Overall, we illustrated the flexibility and capability of Bayesian methods for complex survival analysis tasks.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Linear Regression with PyMC</title>
      <link>http://localhost:59413/posts/20240527_baylinreg_pymc/e01_baylinreg_pymc/</link>
      <pubDate>Mon, 27 May 2024 16:57:31 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240527_baylinreg_pymc/e01_baylinreg_pymc/</guid>
      <description>Learn the basics of Bayesian linear regression using the excellent PyMC Probabilistic Programming package. This focuses on model formulation in PyMC, interpretation, and how to make predictions on out-of-sample data.</description>
      <content:encoded><![CDATA[<p><a href="https://colab.research.google.com/github/vflores-io/Portfolio/blob/main/Bayesian%20Methods%20Tutorials/Python/PyMC/E01_BayLinReg/E01_BayLinReg_PyMC.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></p>
<hr>
<h3 id="problem-statement">Problem Statement</h3>
<p>In this notebook, we will explore the relationship between height and weight using Bayesian linear regression. Our goal is to fit a linear model of the form:</p>
<p>$$ y = \alpha + \beta x + \varepsilon $$</p>
<p>where:</p>
<ul>
<li>$y$ represents the weight,</li>
<li>$x$ represents the height,</li>
<li>$\alpha$ is the intercept,</li>
<li>$\beta$ is the slope,</li>
<li>$\varepsilon$ is the error term, modeled as Gaussian white noise, i.e., $\varepsilon \sim \mathcal{N}(0, \sigma)$, where $\sigma$ is the standard deviation of the noise.</li>
</ul>
<p>We will use Bayesian inference to estimate the posterior distributions of $\alpha$ and $\beta$ given our data and prior assumptions. Bayesian methods provide a natural way to quantify uncertainty in our parameter estimates and predictions.</p>
<h3 id="approach">Approach</h3>
<p>To achieve our goal, we will:</p>
<ol>
<li><strong>Load Real Data:</strong> We will use an actual dataset representing the heights and weights of individuals, sourced from <a href="https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset">Kaggle</a>.</li>
<li><strong>Define the Bayesian Model:</strong> Using the probabilistic programming package <code>PyMC</code>, we will define our Bayesian linear regression model, specifying our priors for $\alpha$, $\beta$, and $\sigma$.</li>
<li><strong>Perform Inference:</strong> We will use Markov Chain Monte Carlo (MCMC) algorithms, such as the No-U-Turn Sampler (NUTS), to sample from the posterior distributions of our model parameters.</li>
<li><strong>Visualization and Prediction:</strong> We will visualize the results, including the regression lines sampled from the posterior, the uncertainty intervals, and make predictions on new, unobserved data points.</li>
</ol>
<h3 id="reference">Reference</h3>
<p>This notebook is inspired by examples from the <code>PyMC</code> documentation, specifically the <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/GLM_linear.html">Generalized Linear Regression tutorial</a>. It also builds upon a <a href="https://vflores-io.github.io/posts/20231110_bayesian_linear_regression_julia/20231110_bayesian_linear_regression_julia/">similar implementation in Julia using <code>Turing.jl</code></a>. This <code>PyMC</code> recreation aims at providing a more complete illustration of the use of probabilistic programming languages.</p>
<h3 id="initial-setup">Initial setup</h3>
<p>Import the necessary packages.</p>
<p>Additionally, this notebook is supposed to be used in Google Colab. The data set (CSV) file is hosted in a private github repo. Therefore, include the github cloning to the temporary session so that the data can be accessed and used in the Colab session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">arviz</span> <span class="k">as</span> <span class="nn">az</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pymc</span> <span class="k">as</span> <span class="nn">pm</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">xarray</span> <span class="k">as</span> <span class="nn">xr</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;text.usetex&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;font.family&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;STIXGeneral&#39;</span>
</span></span></code></pre></div><h2 id="bayesian-workflow">Bayesian Workflow</h2>
<p>For this exercise, I will implement the following workflow:</p>
<ul>
<li>Collect data: this will be implemented by downloading the relevant data set</li>
<li>Build a Bayesian model: this will be built using <code>PyMC</code></li>
<li>Infer the posterior distributions of the parameters $\alpha$ and $\beta$, as well as the model noise</li>
<li>Evaluate the fit of the model</li>
</ul>
<h3 id="collecting-the-data">Collecting the data</h3>
<p>The data to be analyzed will be the height vs. weight data from <a href="https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset">https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the data and print the header</span>
</span></span><span class="line"><span class="cl"><span class="n">csv_path</span> <span class="o">=</span> <span class="s1">&#39;data/SOCR-HeightWeight.csv&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Index</th>
      <th>Height(Inches)</th>
      <th>Weight(Pounds)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>65.78331</td>
      <td>112.9925</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>71.51521</td>
      <td>136.4873</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>69.39874</td>
      <td>153.0269</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>68.21660</td>
      <td>142.3354</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>67.78781</td>
      <td>144.2971</td>
    </tr>
  </tbody>
</table>
</div>
<p>Let&rsquo;s instead work with the International System.</p>
<p>Convert the values to centimeters and kilograms.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Renaming columns 2 and 3</span>
</span></span><span class="line"><span class="cl"><span class="n">new_column_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="s1">&#39;Height (cm)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="s1">&#39;Weight (kg)&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="n">new_column_names</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert the values to SI units</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">*</span><span class="mf">2.54</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span><span class="o">*</span><span class="mf">0.454</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># assign the relevant data to variables for easier manipulation</span>
</span></span><span class="line"><span class="cl"><span class="n">height</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Height (cm)&#39;</span><span class="p">][:</span><span class="mi">1000</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">weight</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Weight (kg)&#39;</span><span class="p">][:</span><span class="mi">1000</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Index</th>
      <th>Height (cm)</th>
      <th>Weight (kg)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>167.089607</td>
      <td>51.298595</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>181.648633</td>
      <td>61.965234</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>176.272800</td>
      <td>69.474213</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>173.270164</td>
      <td>64.620272</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>172.181037</td>
      <td>65.510883</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="visualize-the-data">Visualize the data</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># scatter plot of the data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Height vs. Weight&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Height (cm)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Weight (kg)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="kc">True</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># plt.show()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_11_0.png" type="" alt="png"  /></p>
<h2 id="building-a-bayesian-model-with-pymc">Building a Bayesian model with <code>PyMC</code></h2>
<p>First, we assume that the weight is a variable dependent on the height. Thus, we can express the Bayesian model as:</p>
<p>$$y \sim \mathcal{N}(\alpha + \beta \mathbf{X}, \sigma^2)$$</p>
<p>Since we want to <em>infer</em> the posterior distribution of the parameters $\theta = {\alpha, \beta, \sigma }$, we need to assign priors to those variables. Remember that $\sigma$ is a measure of the uncertainty in <em>the model</em>.</p>
<p>$$
\begin{align*}
\alpha &amp;\sim \mathcal{N}(0,10) \\
\beta &amp;\sim \mathcal{N}(0,1) \\
\sigma &amp;\sim \mathcal{TN}(0,100; 0, \infty)
\end{align*}
$$
The last distribution is a <em>truncated normal distribution</em> bounded from 0 to $\infty$.</p>
<p><strong>Note</strong>: Here, we define the input data <code>height</code> as a <code>MutableData</code> container. The reason for this is because, later, we will want to change this input data, to make predictions. This will become clear a bit later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="n">pm</span><span class="o">.</span><span class="n">Model</span><span class="p">()</span> <span class="k">as</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">MutableData</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># define the priors</span>
</span></span><span class="line"><span class="cl">    <span class="n">alpha</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">beta</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sigma</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">TruncatedNormal</span><span class="p">(</span><span class="s1">&#39;sigma&#39;</span><span class="p">,</span> <span class="n">mu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">lower</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># define the likelihood - assign the variable name &#34;y&#34; to the observations</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">mu</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">+</span> <span class="p">(</span><span class="n">beta</span> <span class="o">*</span> <span class="n">x</span><span class="p">),</span> <span class="n">sigma</span> <span class="o">=</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">observed</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">shape</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># inference - crank up the bayes!</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="n">chains</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [alpha, beta, sigma]
</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
  <progress value='8000' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>
  100.00% [8000/8000 00:37&lt;00:00 Sampling 4 chains, 0 divergences]
</div>
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 53 seconds.
</code></pre>
<p>We can explore the trace object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">trace</span><span class="o">.</span><span class="n">to_dataframe</span><span class="p">()</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index([                                  'chain',
                                          'draw',
                          ('posterior', 'alpha'),
                           ('posterior', 'beta'),
                          ('posterior', 'sigma'),
           ('sample_stats', 'perf_counter_diff'),
          ('sample_stats', 'perf_counter_start'),
             ('sample_stats', 'smallest_eigval'),
               ('sample_stats', 'step_size_bar'),
         ('sample_stats', 'index_in_trajectory'),
                      ('sample_stats', 'energy'),
            ('sample_stats', 'max_energy_error'),
                ('sample_stats', 'energy_error'),
             ('sample_stats', 'acceptance_rate'),
                  ('sample_stats', 'tree_depth'),
           ('sample_stats', 'process_time_diff'),
                   ('sample_stats', 'step_size'),
                     ('sample_stats', 'n_steps'),
              ('sample_stats', 'largest_eigval'),
                   ('sample_stats', 'diverging'),
                          ('sample_stats', 'lp'),
       ('sample_stats', 'reached_max_treedepth')],
      dtype='object')
</code></pre>
<h4 id="visualize-the-inference-diagnostics">Visualize the inference diagnostics</h4>
<p>Now that we have performed Bayesian inference using the <code>NUTS()</code> algorithm, we can visualize the results. Additionally, call for a summary of the statistics of the inferred posterior distributions of $\theta$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># visualize the results</span>
</span></span><span class="line"><span class="cl"><span class="c1"># az.style.use(&#39;arviz-darkgrid&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">labeller</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">labels</span><span class="o">.</span><span class="n">MapLabeller</span><span class="p">(</span><span class="n">var_name_map</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;alpha&#39;</span><span class="p">:</span> <span class="sa">r</span><span class="s1">&#39;$\alpha$&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="s1">&#39;beta&#39;</span><span class="p">:</span> <span class="sa">r</span><span class="s1">&#39;$\beta$&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="s1">&#39;sigma&#39;</span><span class="p">:</span> <span class="sa">r</span><span class="s1">&#39;$\sigma$&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">var_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="s1">&#39;sigma&#39;</span><span class="p">],</span> <span class="n">labeller</span> <span class="o">=</span> <span class="n">labeller</span><span class="p">,</span> <span class="n">compact</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># plt.show()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_17_0.png" type="" alt="png"  /></p>
<h4 id="interpreting-the-mcmc-diagnostics-plots">Interpreting the MCMC Diagnostics Plots</h4>
<p>Trace plots are crucial for diagnosing the performance of Markov Chain Monte Carlo (MCMC) algorithms. These plots typically consist of two parts for each parameter: the trace plot and the posterior density plot.</p>
<p>The trace plot shows the sampled values of a parameter across iterations. A well-behaved trace plot should look like a &ldquo;hairy caterpillar,&rdquo; indicating good mixing. This means the trace should move around the parameter space without getting stuck and should not display any apparent patterns or trends. If the trace shows a clear trend or drift, it suggests that the chain has not yet converged. For the parameters $\alpha$ (intercept), $\beta$ (slope), and $\sigma$ (standard deviation of noise), we want to see the traces for different chains mixing well and stabilizing around a constant mean.</p>
<p>The posterior density plot shows the distribution of the sampled values of a parameter. This plot helps visualize the posterior distribution of the parameter. A good density plot should be smooth and unimodal, indicating that the parameter has a well-defined posterior distribution. If multiple chains are used, their density plots should overlap significantly, suggesting that all chains are sampling from the same distribution. For $\alpha$, $\beta$, and $\sigma$, overlapping density plots indicate that the chains have converged to the same posterior distribution.</p>
<p>Next, we can visualize the posterior distributions of the inferred parameters.eters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># visualize the posterior distributions</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_posterior</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">var_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="s1">&#39;sigma&#39;</span><span class="p">],</span> <span class="n">labeller</span> <span class="o">=</span> <span class="n">labeller</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_19_0.png" type="" alt="png"  /></p>
<p>After visualizing the inference diagnostics and the posterior distributions of the paramters, we can also obtain the summary statistics.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get the summary statistics of the posterior distributions</span>
</span></span><span class="line"><span class="cl"><span class="n">pm</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;stats&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>mean</th>
      <th>sd</th>
      <th>hdi_3%</th>
      <th>hdi_97%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>alpha</th>
      <td>-28.557</td>
      <td>4.558</td>
      <td>-36.650</td>
      <td>-19.619</td>
    </tr>
    <tr>
      <th>beta</th>
      <td>0.500</td>
      <td>0.026</td>
      <td>0.449</td>
      <td>0.548</td>
    </tr>
    <tr>
      <th>sigma</th>
      <td>4.657</td>
      <td>0.100</td>
      <td>4.474</td>
      <td>4.850</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="visualize-the-results">Visualize the results</h3>
<p>Now that we have posterior distributions for the parameters $\theta$, we can plot the the resulting linear regression functions. The following is an excerpt from PyMC&rsquo;s <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/GLM_linear.html">Generalized Linear Regression tutorial</a>:</p>
<blockquote>
<p>In GLMs, we do not only have one best fitting regression line, but many. A posterior predictive plot takes multiple samples from the posterior (intercepts and slopes) and plots a regression line for each of them. We can manually generate these regression lines using the posterior samples directly.</p>
</blockquote>
<p>Below, what we will effectively be doing is:</p>
<p>$$ y_i = \alpha_i + \beta_i \mathbf{X} \ \ \ , \ \ \ {i = 1, \ldots , N_{samples}}$$</p>
<p>where $N_{samples}$ are the number of samples from the posterior. This number comes from the inference procedure, and in practical terms is the umber of samples we asked <code>PyMC</code> to produce.</p>
<p>In other words, plotting the samples from the posterior distribution involves plotting the regression lines sampled from the posterior. Each sample represents a possible realization of the regression line based on the sampled values of the parameters $\alpha$ (intercept) and $\beta$ (slope).</p>
<p>These sample regression lines ullustrate the uncertainty in the regression model&rsquo;s parameters and how this uncertainty propagates into the predictions (of the regression line).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># use the posterior to create regression line samples</span>
</span></span><span class="line"><span class="cl"><span class="c1"># equivalent to: y[i]  = alpha[i] + beta[i]*X</span>
</span></span><span class="line"><span class="cl"><span class="n">trace</span><span class="o">.</span><span class="n">posterior</span><span class="p">[</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">trace</span><span class="o">.</span><span class="n">posterior</span><span class="p">[</span><span class="s2">&#34;alpha&#34;</span><span class="p">]</span> <span class="o">+</span> <span class="n">trace</span><span class="o">.</span><span class="n">posterior</span><span class="p">[</span><span class="s2">&#34;beta&#34;</span><span class="p">]</span><span class="o">*</span><span class="n">xr</span><span class="o">.</span><span class="n">DataArray</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the regression lines</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_lm</span><span class="p">(</span><span class="n">idata</span> <span class="o">=</span> <span class="n">trace</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">y_model</span><span class="o">=</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;alpha&#34;</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;markeredgecolor&#34;</span><span class="p">:</span><span class="s2">&#34;k&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span><span class="s2">&#34;Observed Data&#34;</span><span class="p">,</span> <span class="s2">&#34;markersize&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;zorder&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;#00cc99&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_mean_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;red&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_23_0.png" type="" alt="png"  /></p>
<h2 id="using-the-linear-regression-model-to-make-predictions">Using the Linear Regression Model to Make Predictions</h2>
<p>Now that we have a fitted Bayesian linear regression model, we can use it to make predictions. This involves sampling from the posterior predictive distribution, which allows us to generate predictions for new data points while incorporating the uncertainty from the posterior distribution <em>of the parameters</em>.</p>
<h4 id="sample-from-the-posterior-predictive-distribution">Sample from the Posterior Predictive Distribution:</h4>
<ul>
<li>This step involves using the inferred <code>trace</code> from our Bayesian linear regression model <code>blr_model</code> to generate predictions. The <code>pm.sample_posterior_predictive</code> function in PyMC allows us to do this. It uses the posterior samples of the parameters to compute the predicted values of the outcome variable.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># now predict the outcomes using the inferred trace</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># use the updated values and predict outcomes and probabilities:</span>
</span></span><span class="line"><span class="cl">    <span class="n">pm</span><span class="o">.</span><span class="n">sample_posterior_predictive</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">trace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">var_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">return_inferencedata</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">extend_inferencedata</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div><pre><code>Sampling: [y]
</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
  <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>
  100.00% [4000/4000 00:00&lt;00:00]
</div>
<h4 id="exploring-the-trace-object">Exploring the Trace Object</h4>
<p>The trace object stores the results of our inference. Initially, it contained the posterior samples of the model parameters (e.g., intercept and slope).</p>
<p>After running <code>pm.sample_posterior_predictive</code>, the trace object is extended to include the posterior predictive samples. These are the predicted values for the outcome variable, given the posterior distribution of the model parameters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># explore the trace object again</span>
</span></span><span class="line"><span class="cl"><span class="n">trace</span><span class="o">.</span><span class="n">to_dataframe</span><span class="p">()</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index([                                  'chain',
                                          'draw',
                          ('posterior', 'alpha'),
                           ('posterior', 'beta'),
                          ('posterior', 'sigma'),
              ('posterior', 'y_posterior[0]', 0),
          ('posterior', 'y_posterior[100]', 100),
          ('posterior', 'y_posterior[101]', 101),
          ('posterior', 'y_posterior[102]', 102),
          ('posterior', 'y_posterior[103]', 103),
       ...
                ('sample_stats', 'energy_error'),
             ('sample_stats', 'acceptance_rate'),
                  ('sample_stats', 'tree_depth'),
           ('sample_stats', 'process_time_diff'),
                   ('sample_stats', 'step_size'),
                     ('sample_stats', 'n_steps'),
              ('sample_stats', 'largest_eigval'),
                   ('sample_stats', 'diverging'),
                          ('sample_stats', 'lp'),
       ('sample_stats', 'reached_max_treedepth')],
      dtype='object', length=2022)
</code></pre>
<p>We can observe how now we have another inference data container: <code>posterior_predictive</code>. This was generated by passing the <code>extend_inferencedata</code> argument to the <code>pm.sample_posterior_predictive</code> function above.</p>
<p>This data contains predictions by passing the observed heights through our linear model and making predictions. Note that these &ldquo;predictions&rdquo; are made on <strong>observed data</strong>. This is similar to using validating the predictions on training data in machine learning, i.e. comparing the model predictions to the actual data on an observed input.</p>
<p>We can use the linear regression model to make predictions. It should be noted that, again, the linear regression model is not a single regression line, but rather a set of regression lines generated from the posterior probability of $\theta$.</p>
<h4 id="visualize-the-prediction-confidence-interval">Visualize the Prediction Confidence Interval</h4>
<p>After we sampled from the posterior, we might want to visualize this to understand the posterior predictive distribution.</p>
<p>In the code below, there are two things going on, let&rsquo;s go through them.</p>
<ol>
<li>Plotting the samples from the posterior distribution</li>
</ol>
<p>This part is exactly what we did before, which is plotting the sample posteriors of the <strong>regression line</strong>. These sample regression lines are a natural product of propagating the uncertainty from the parameters unto the prediction line.</p>
<ol start="2">
<li>Plotting the uncertainty in the mean and the observations</li>
</ol>
<p>Now we can add a ribbon to show the uncertainty not only in the regression line, but in the prediction points themselves. That is, that ribbon will tell us where we might expect a prediction point $i+1$, i.e.</p>
<p>$$ y_{i+1} = \alpha_{i+1} + \beta_{i+1} x^* $$</p>
<p>where $x^*$ is a test input point. In other words, and more specific to this demonstration:</p>
<blockquote>
<p>what is the <em>interval</em> where we would expect a predicted weight $y_{i+1}$ of an individual with a height $x*$.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># use the posterior to create regression line samples</span>
</span></span><span class="line"><span class="cl"><span class="c1"># trace.posterior[&#34;y_posterior&#34;] = trace.posterior[&#34;alpha&#34;] + trace.posterior[&#34;beta&#34;]*xr.DataArray(height)  # y_posterior = alpha + beta*x</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_lm</span><span class="p">(</span><span class="n">idata</span> <span class="o">=</span> <span class="n">trace</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">y_model</span><span class="o">=</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;alpha&#34;</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;markeredgecolor&#34;</span><span class="p">:</span><span class="s2">&#34;k&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span><span class="s2">&#34;Observed Data&#34;</span><span class="p">,</span> <span class="s2">&#34;markersize&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;zorder&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;#00cc99&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_mean_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;red&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the prediction interval</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_hdi</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span><span class="o">.</span><span class="n">posterior_predictive</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">hdi_prob</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">fill_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.8</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_30_0.png" type="" alt="png"  /></p>
<h3 id="making-predictions-on-_unobserved-data-inputs_">Making Predictions on <em>Unobserved Data Inputs</em></h3>
<p>Now, how about the case when we want to make predictions on test data that we have not seen? That is, predict the weight of an individual whose height/weight we have not observed (measured)</p>
<p>In other words, we have some test input data, i.e. some heights for which we want to predict the weights.</p>
<p>Some references of where I learned how to do this:</p>
<ol>
<li>
<p>In <a href="https://www.pymc.io/projects/examples/en/latest/fundamentals/data_container.html#applied-example-height-of-toddlers-as-a-function-of-age">this example</a> and <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/posterior_predictive.html">this other example</a> it says that we can generate out-of-sample predictions by using <code>pm.sample_posterior_predictive</code> and it shows an example of how to use the syntax.</p>
</li>
<li>
<p>More recently, <a href="https://www.pymc-labs.com/blog-posts/out-of-model-predictions-with-pymc/">this demo blog post</a> clarifies how to make predictions on out-of-model samples.</p>
</li>
</ol>
<p>Let&rsquo;s do just that now. First, we will define the test inputs we want to predict for, <code>pred_height</code>. Then, inside the model, we replace the data (which was defined as <code>MutableData</code>, with the new data we want to make predictions on. This is done as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># set new data inputs:</span>
</span></span><span class="line"><span class="cl"><span class="n">pred_height</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span> <span class="s1">&#39;new_data&#39;</span> <span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">pm</span><span class="o">.</span><span class="n">set_data</span><span class="p">({</span><span class="s1">&#39;height&#39;</span><span class="p">:</span> <span class="n">pred_height</span><span class="p">})</span>
</span></span></code></pre></div><p>What this is effectively doing is telling <code>sample_posterior_predictive</code> that we need to make predictions on <code>height</code> which now happens to be different.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define the out-of-sample predictors</span>
</span></span><span class="line"><span class="cl"><span class="n">pred_height</span> <span class="o">=</span> <span class="p">[</span><span class="mf">158.0</span><span class="p">,</span> <span class="mf">185.5</span><span class="p">,</span> <span class="mf">165.2</span><span class="p">,</span> <span class="mf">178.0</span><span class="p">,</span>  <span class="mf">180.0</span><span class="p">,</span> <span class="mf">170.2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pred_height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># set the new data we want to make predictions for</span>
</span></span><span class="line"><span class="cl">    <span class="n">pm</span><span class="o">.</span><span class="n">set_data</span><span class="p">({</span><span class="s1">&#39;height&#39;</span><span class="p">:</span> <span class="n">pred_height</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">post_pred</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">sample_posterior_predictive</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">trace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">predictions</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div><pre><code>Sampling: [y]


[158.0, 185.5, 165.2, 178.0, 180.0, 170.2]
</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
  <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>
  100.00% [4000/4000 00:00&lt;00:00]
</div>
<p>What we have done above is create an inference data object called <code>post_pred</code>. This object contains the samples of the predictions on the new data. Specifically, it includes two containers: <code>predictions</code> and <code>predictions_constant_data</code>.</p>
<p>The <code>predictions</code> container holds the predicted samples for our new heights. The <code>predictions_constant_data</code> holds the new heights we passed into the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">post_pred</span><span class="o">.</span><span class="n">to_dataframe</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>chain</th>
      <th>draw</th>
      <th>(y[0], 0)</th>
      <th>(y[1], 1)</th>
      <th>(y[2], 2)</th>
      <th>(y[3], 3)</th>
      <th>(y[4], 4)</th>
      <th>(y[5], 5)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0</td>
      <td>48.981930</td>
      <td>62.971186</td>
      <td>62.143385</td>
      <td>59.300742</td>
      <td>56.100237</td>
      <td>54.329348</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>55.481192</td>
      <td>65.132876</td>
      <td>54.761877</td>
      <td>61.312254</td>
      <td>59.220124</td>
      <td>51.817360</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>2</td>
      <td>49.471550</td>
      <td>66.016910</td>
      <td>60.646273</td>
      <td>57.876344</td>
      <td>56.203720</td>
      <td>60.318281</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>3</td>
      <td>53.373737</td>
      <td>66.593653</td>
      <td>53.085799</td>
      <td>63.437949</td>
      <td>64.336626</td>
      <td>45.372830</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>4</td>
      <td>52.981309</td>
      <td>69.320059</td>
      <td>51.590686</td>
      <td>60.372046</td>
      <td>62.210738</td>
      <td>48.188656</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3995</th>
      <td>3</td>
      <td>995</td>
      <td>52.303814</td>
      <td>61.931117</td>
      <td>47.544216</td>
      <td>60.824401</td>
      <td>61.469545</td>
      <td>62.353284</td>
    </tr>
    <tr>
      <th>3996</th>
      <td>3</td>
      <td>996</td>
      <td>56.032295</td>
      <td>56.979040</td>
      <td>54.584837</td>
      <td>55.894216</td>
      <td>65.943908</td>
      <td>50.929285</td>
    </tr>
    <tr>
      <th>3997</th>
      <td>3</td>
      <td>997</td>
      <td>56.062352</td>
      <td>50.889499</td>
      <td>51.441003</td>
      <td>57.841533</td>
      <td>62.898654</td>
      <td>52.749139</td>
    </tr>
    <tr>
      <th>3998</th>
      <td>3</td>
      <td>998</td>
      <td>48.228772</td>
      <td>65.983383</td>
      <td>52.381164</td>
      <td>55.283946</td>
      <td>65.468049</td>
      <td>70.367514</td>
    </tr>
    <tr>
      <th>3999</th>
      <td>3</td>
      <td>999</td>
      <td>58.434184</td>
      <td>54.739363</td>
      <td>56.773260</td>
      <td>53.128112</td>
      <td>61.695469</td>
      <td>54.874142</td>
    </tr>
  </tbody>
</table>
<p>4000 rows × 8 columns</p>
</div>
<p>We can visualize the posterior distributions of the predictions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_posterior</span><span class="p">(</span><span class="n">post_pred</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="s2">&#34;predictions&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_36_1.png" type="" alt="png"  /></p>
<p>We can obtain point estimates by taking the mean of each prediction distribution. This is done by taking the mean of the predictions over the <code>chain</code> and <code>draw</code> dimensions, as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pred_weight</span> <span class="o">=</span> <span class="n">post_pred</span><span class="o">.</span><span class="n">predictions</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">dim</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;chain&#39;</span><span class="p">,</span> <span class="s1">&#39;draw&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Predicted weights: &#34;</span><span class="p">,</span> <span class="n">pred_weight</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Predicted weights:  [50.37415152 64.29241929 54.02070975 60.60276731 61.36759368 56.53983895]
</code></pre>
<p>Finally, we can visualize where the predictions fall by adding a scatter plot with the new ${x^<em>, y^</em>}$ data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># use the posterior to create regression line samples</span>
</span></span><span class="line"><span class="cl"><span class="c1"># trace.posterior[&#34;y_posterior&#34;] = trace.posterior[&#34;alpha&#34;] + trace.posterior[&#34;beta&#34;]*xr.DataArray(height)  # y_posterior = alpha + beta*x</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_lm</span><span class="p">(</span><span class="n">idata</span> <span class="o">=</span> <span class="n">trace</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">y_model</span><span class="o">=</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;alpha&#34;</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;markeredgecolor&#34;</span><span class="p">:</span><span class="s2">&#34;k&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span><span class="s2">&#34;Observed Data&#34;</span><span class="p">,</span> <span class="s2">&#34;markersize&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;zorder&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;#00cc99&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_mean_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;red&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the prediction interval</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_hdi</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span><span class="o">.</span><span class="n">posterior_predictive</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">hdi_prob</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">fill_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.8</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># add predicted weights to the plot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">pred_height</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">pred_weight</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Predicted Weights&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">zorder</span> <span class="o">=</span> <span class="mi">15</span>
</span></span><span class="line"><span class="cl">           <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_40_0.png" type="" alt="png"  /></p>
<h2 id="thank-you">Thank you!</h2>
<p>This demo focused on a relatively simple task. Here, however, we focused more on what a Bayesian approach means in the context of a linear regression. Additionally, we focused on using <code>PyMC</code> for developing the model, visualizing the results and, just as importantly, on making predictions using those results.</p>
<p>Victor</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Transfer Learning Classifier Again... with Julia!</title>
      <link>http://localhost:59413/posts/20240521_julia_transfer_learning_v5/20240521_julia_transfer_learning_v5/</link>
      <pubDate>Tue, 21 May 2024 22:38:29 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240521_julia_transfer_learning_v5/20240521_julia_transfer_learning_v5/</guid>
      <description>Replicating the cat mood classifier, this time using Julia and Flux.jl.</description>
      <content:encoded><![CDATA[<hr>
<p><img loading="lazy" src="/images/20240521_julia_transfer_learning_v5/intro.png" type="" alt="image"  /></p>
<h2 id="introduction">Introduction</h2>
<p>This guide demonstrates how to apply transfer learning using a pre-trained vision model to classify cat moods based on their facila expressions. We&rsquo;ll learn how to handle custom data setups.</p>
<p>In this demonstration, we recreate the exercise done in PyTorch, <a href="https://vflores-io.github.io/posts/20240515_cat_mood_classification/">available here</a>. Since that demonstration is quite detailed, we keep it pretty straightforward here.</p>
<h4 id="motivation--credit">Motivation &amp; Credit</h4>
<p>When I thought about learning how to implement a computer vision classification model for transfer learning in Julia and <code>Flux</code>, I immediately came upon two roadblocks:</p>
<ol>
<li>Since I am not an expert in Julia, I found the documentation to be a bit difficult to access (again, this is just me!).</li>
<li>There are not many tutorials or resources to illustrate this particular case.</li>
</ol>
<p>Therefore I took it upon myself to put things together and make a demonstration that would hopefully be useful for someone who might not be an expert in Flux (or Julia).</p>
<p>This particular demo was inspired by a combination of the following resources:</p>
<ul>
<li><a href="https://towardsdatascience.com/transfer-learning-and-twin-network-for-image-classification-using-flux-jl-cbe012ced146">Transfer Learning and Twin Network for Image Classification using <code>Flux.jl</code></a></li>
<li><a href="https://github.com/FluxML/model-zoo/tree/master/tutorials/transfer_learning"><code>Flux.jl</code>&rsquo;s Model Zoo Tutorial</a></li>
<li><a href="https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html"><code>PyTorch</code> Transfer Learning for Computer Vision Tutorial</a></li>
</ul>
<h2 id="getting-started">Getting Started</h2>
<p>We will use a pre-trained <code>ResNet18</code> model, initially trained on a general dataset, and fine-tune it for our specific task of classifying cat moods.</p>
<h3 id="initialization">Initialization</h3>
<p>First, we activate the current directory as our project environment by calling the package manager <code>Pkg</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Pkg</span>
</span></span><span class="line"><span class="cl"><span class="n">Pkg</span><span class="o">.</span><span class="n">activate</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span> 
</span></span></code></pre></div><p>Then we will import the required packages. Of course, this is also assuming that one has already added the relevant packages into the environment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Pkg</span>
</span></span><span class="line"><span class="cl"><span class="n">Pkg</span><span class="o">.</span><span class="n">activate</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Random</span><span class="o">:</span> <span class="n">shuffle!</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="n">Base</span><span class="o">:</span> <span class="n">length</span><span class="p">,</span> <span class="n">getindex</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Images</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Flux</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Flux</span><span class="o">:</span> <span class="n">update!</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">DataAugmentation</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Metalhead</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">MLUtils</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">CSV</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Plots</span>
</span></span></code></pre></div><pre><code>[32m[1m  Activating[22m[39m project at `H:\My Drive\Projects\Coding\Portfolio\Machine Learning\Julia\Transfer Learning with Flux`
</code></pre>
<h3 id="retrieve-the-data-and-initial-setup">Retrieve the Data and Initial Setup</h3>
<p>First, we specify the paths to the dataset and labels CSV files for training, validation, and test sets. Then, we load these CSV files into <code>DataFrames</code>. Finally, we create vectors of absolute file paths for each image in the dataset.</p>
<p>This setup is essential for organizing the data and ensuring that our model can access the correct images and labels during training and evaluation.</p>
<h4 id="label-structure">Label Structure</h4>
<p>The data set we are using consists of three folders: <code>train</code>, <code>val</code>, <code>test</code>. Each of them contain a set of images of cats. The labels in this case, are in the form of a CSV file that maps the filename with a one-hot encoding to label the classification of the image, i.e. the cat&rsquo;s mood - alarmed, angry, calm, pleased.</p>
<p>The dataset was obtained <a href="https://universe.roboflow.com/mubbarryz/domestic-cats-facial-expressions">here</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># specify the paths to the dataset and labels CSV</span>
</span></span><span class="line"><span class="cl"><span class="n">train_data_path</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/train&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">train_data_csv</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/train/_classes.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_data_path</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/val&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">val_data_csv</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/val/_classes.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_data_path</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/test&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">test_data_csv</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/test/_classes.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># load the CSV file containing the labels</span>
</span></span><span class="line"><span class="cl"><span class="n">train_labels_df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">train_data_csv</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_labels_df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">test_data_csv</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_labels_df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">val_data_csv</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># setup filepaths to the files as vectors</span>
</span></span><span class="line"><span class="cl"><span class="n">train_filepaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">abspath</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="n">train_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span> <span class="k">for</span> <span class="n">filename</span> <span class="k">in</span> <span class="n">train_labels_df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">test_filepaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">abspath</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="n">test_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span> <span class="k">for</span> <span class="n">filename</span> <span class="k">in</span> <span class="n">test_labels_df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">val_filepaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">abspath</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="n">val_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span> <span class="k">for</span> <span class="n">filename</span> <span class="k">in</span> <span class="n">val_labels_df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">]</span>
</span></span></code></pre></div><pre><code>110-element Vector{String}:
 
 ⋮
</code></pre>
<h3 id="data-exploration">Data Exploration</h3>
<p>As usual, we take a look at the data to understand what we are working with.</p>
<p>Below we make a couple of functions to visualize the data.</p>
<p>Note that the helper function <code>label_from_row</code> will come in handy later on.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># -----------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl"><span class="c"># helper function to extract label from the DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">label_from_row</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># retrieve the label for the image from the DataFrame</span>
</span></span><span class="line"><span class="cl">    <span class="n">label_row</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">filename</span> <span class="o">==</span> <span class="n">filename</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">label_index</span> <span class="o">=</span> <span class="n">findfirst</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">label_row</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="n">names</span><span class="p">(</span><span class="n">labels_df</span><span class="p">)[</span><span class="mi">2</span><span class="o">:</span><span class="k">end</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">label_dict</span><span class="p">[</span><span class="n">label_index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="c"># -----------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># function to display a selection of images and their labels</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">show_sample_images_and_labels</span><span class="p">(</span><span class="n">labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">;</span> <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># randomly pick indices for sampling images</span>
</span></span><span class="line"><span class="cl">    <span class="n">sample_indices</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">labels_df</span><span class="p">),</span> <span class="n">num_samples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sample_filenames</span> <span class="o">=</span> <span class="n">labels_df</span><span class="o">.</span><span class="n">filename</span><span class="p">[</span><span class="n">sample_indices</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># calculate number of rows and columns for the grid layuot</span>
</span></span><span class="line"><span class="cl">    <span class="n">num_cols</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="n">num_samples</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">num_rows</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># prepare a plot with a grid layout for the images</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">layout</span> <span class="o">=</span> <span class="p">(</span><span class="n">num_rows</span><span class="p">,</span> <span class="n">num_cols</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="n">grid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># load and plot each sampled image</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span> <span class="k">in</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">sample_filenames</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">img_path</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">train_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">load</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>   <span class="c"># load the image from the file</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># retrieve the label for the image from the DataFrame</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">label_from_row</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">plot!</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">img</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="n">label</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">display</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>   <span class="c"># display the plot</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define a dictionary for label descriptions:</span>
</span></span><span class="line"><span class="cl"><span class="n">label_dict</span> <span class="o">=</span> <span class="kt">Dict</span><span class="p">(</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="s">&#34;alarmed&#34;</span><span class="p">,</span> <span class="mi">2</span> <span class="o">=&gt;</span> <span class="s">&#34;angry&#34;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">=&gt;</span> <span class="s">&#34;calm&#34;</span><span class="p">,</span> <span class="mi">4</span> <span class="o">=&gt;</span> <span class="s">&#34;pleased&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># run the function to show images</span>
</span></span><span class="line"><span class="cl"><span class="n">show_sample_images_and_labels</span><span class="p">(</span><span class="n">train_labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240521_julia_transfer_learning_v5/output_6_0.svg" type="" alt="svg"  /></p>
<h3 id="working-with-custom-datasets">Working with Custom Datasets</h3>
<p>When working with custom datasets in Julia, the concepts are similar as in PyTorch, but obviously following Julia&rsquo;s syntax.</p>
<p>In essence, we read the CSV files containing image file paths and their corresponding labels into DataFrames. We then create functions to handle data loading and transformations, such as resizing and normalizing images. This approach is similar to PyTorch&rsquo;s <code>Dataset</code>.</p>
<p>Let&rsquo;s have a quick look.</p>
<h3 id="create-a-custom-dataset">Create a Custom Dataset</h3>
<p>We define a custom dataset using a <code>struct</code>, which is similar to using a <code>class</code> in Python. The <code>ImageContainer</code> struct stores the image file paths and their corresponding labels in a DataFrame. We then create instances of this <code>struct</code> for the training, validation, and test datasets.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">struct</span> <span class="kt">ImageContainer</span><span class="p">{</span><span class="kt">T</span><span class="o">&lt;:</span><span class="kt">Vector</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">img</span><span class="o">::</span><span class="kt">T</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels_df</span><span class="o">::</span><span class="kt">DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># generate dataset</span>
</span></span><span class="line"><span class="cl"><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">ImageContainer</span><span class="p">(</span><span class="n">train_filepaths</span><span class="p">,</span> <span class="n">train_labels_df</span><span class="p">);</span>   
</span></span><span class="line"><span class="cl"><span class="n">val_dataset</span> <span class="o">=</span> <span class="n">ImageContainer</span><span class="p">(</span><span class="n">val_filepaths</span><span class="p">,</span> <span class="n">val_labels_df</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">test_dataset</span> <span class="o">=</span> <span class="n">ImageContainer</span><span class="p">(</span><span class="n">test_filepaths</span><span class="p">,</span> <span class="n">test_labels_df</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="create-the-data-loaders">Create the Data Loaders</h4>
<p>In this section, we set up data loaders for our custom dataset in Julia, similar to how data loaders are used in PyTorch to manage batching and shuffling of data.</p>
<ol>
<li>
<p>Call helper Function: <code>label_from_row()</code> : This function extracts the label from the DataFrame for a given image file. It finds the index of the column with a value of 1, indicating the class.</p>
</li>
<li>
<p>Length and Indexing:</p>
</li>
</ol>
<ul>
<li><code>length(data::ImageContainer)</code>: Defines the length method to return the number of images in the dataset. Similar to PyTorch&rsquo;s <code>__len__</code>.</li>
<li><code>getindex(data::ImageContainer, idx::Int)</code>: This method is similar to PyTorch’s <code>__getitem__</code>. It loads an image, applies transformations, and returns the processed image along with its label.</li>
</ul>
<ol start="3">
<li>Data Augmentation and Transformations:</li>
</ol>
<ul>
<li>pipeline: Defines a transformation pipeline for scaling and cropping images.</li>
<li>transforms(image, labels_df): Inside getindex, this function applies the transformations to the image and normalizes it using the predefined mean and standard deviation values.</li>
</ul>
<ol start="4">
<li>DataLoaders:</li>
</ol>
<ul>
<li><code>train_loader</code> and <code>val_loader</code>: These DataLoader objects manage batching, shuffling, and parallel processing of the training and validation datasets, similar to <code>torch.utils.data.DataLoader</code> in PyTorch</li>
</ul>
<h5 id="notes-on-implementing-custom-data-containers">Notes on Implementing Custom Data Containers</h5>
<p>According to the documentation for MLUtils.DataLoader (<a href="https://fluxml.ai/Flux.jl/stable/data/mlutils/">see here</a>), custom data containers should implement Base.length instead of  <code>numobs</code>, and Base.getindex instead of <code>getobs</code>, unless there&rsquo;s a difference between these functions and the base methods for multi-dimensional arrays.</p>
<p>Base.length: Should be implemented to return the number of observations. This is akin to PyTorch&rsquo;s <code>__len__</code>.
Base.getindex: Should be implemented to handle indexing of the dataset, similar to PyTorch&rsquo;s <code>__getitem__</code>.
These methods ensure that the data is returned in a form suitable for the learning algorithm, maintaining consistency whether the index is a scalar or vector.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">length</span><span class="p">(</span><span class="n">data</span><span class="o">::</span><span class="kt">ImageContainer</span><span class="p">)</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">im_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">DATA_MEAN</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485f0</span><span class="p">,</span> <span class="mf">0.456f0</span><span class="p">,</span> <span class="mf">0.406f0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">DATA_STD</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229f0</span><span class="p">,</span> <span class="mf">0.224f0</span><span class="p">,</span> <span class="mf">0.225f0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define a transformation pipeline</span>
</span></span><span class="line"><span class="cl"><span class="n">pipeline</span> <span class="o">=</span> <span class="n">DataAugmentation</span><span class="o">.</span><span class="n">compose</span><span class="p">(</span><span class="n">ScaleKeepAspect</span><span class="p">(</span><span class="n">im_size</span><span class="p">),</span> <span class="n">CenterCrop</span><span class="p">(</span><span class="n">im_size</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">getindex</span><span class="p">(</span><span class="n">data</span><span class="o">::</span><span class="kt">ImageContainer</span><span class="p">,</span> <span class="n">idx</span><span class="o">::</span><span class="kt">Int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">img</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels_df</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">labels_df</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">function</span> <span class="n">transforms</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">pipeline</span> <span class="o">=</span> <span class="n">ScaleKeepAspect</span><span class="p">(</span><span class="n">im_size</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">CenterCrop</span><span class="p">(</span><span class="n">im_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_img</span> <span class="o">=</span> <span class="n">Images</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_img</span> <span class="o">=</span> <span class="n">apply</span><span class="p">(</span><span class="n">pipeline</span><span class="p">,</span> <span class="n">Image</span><span class="p">(</span><span class="n">_img</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="n">itemdata</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">collect</span><span class="p">(</span><span class="n">channelview</span><span class="p">(</span><span class="n">float32</span><span class="o">.</span><span class="p">(</span><span class="n">RGB</span><span class="o">.</span><span class="p">(</span><span class="n">_img</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">permutedims</span><span class="p">((</span><span class="n">img</span> <span class="o">.-</span> <span class="n">DATA_MEAN</span><span class="p">)</span> <span class="o">./</span> <span class="n">DATA_STD</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">label_from_row</span><span class="p">(</span><span class="n">labels_df</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">img</span><span class="p">,</span> <span class="n">label</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">transforms</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_dataset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">batchsize</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">collate</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">parallel</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_dataset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">batchsize</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">collate</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">parallel</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span></code></pre></div><h2 id="model-definition">Model Definition</h2>
<p>Here we will load the model with <code>Metalhead.jl</code> and change the classifier &ldquo;head&rdquo; of the architecture to suit our classification need.</p>
<p>We will use this to select the classifier head of the model and change it.</p>
<p>For the fine-tuning portion of this exercise will follow the <a href="https://github.com/FluxML/model-zoo/tree/master/tutorials%2Ftransfer_learning">model zoo documentation</a>:</p>
<hr>
<p><img loading="lazy" src="/images/20240521_julia_transfer_learning_v5/109ebfef-0cea-49b5-98d5-fcd19f0f9596.png" type="" alt="image.png"  /></p>
<hr>
<p>Let&rsquo;s try it out with the <code>ResNet18</code> model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># load the pre-trained model</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_model</span> <span class="o">=</span> <span class="n">ResNet</span><span class="p">(</span><span class="mi">18</span><span class="p">;</span> <span class="n">pretrain</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span><span class="o">.</span><span class="n">layers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># let&#39;s look at the model</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_model</span>
</span></span></code></pre></div><pre><code>Chain(
  Chain(
    Chain(
      Conv((7, 7), 3 =&gt; 64, pad=3, stride=2, bias=false),  [90m# 9_408 parameters[39m
      BatchNorm(64, relu),              [90m# 128 parameters[39m[90m, plus 128[39m
      MaxPool((3, 3), pad=1, stride=2),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
          NNlib.relu,
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
          NNlib.relu,
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
        ),
      ),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        Chain(
          Conv((1, 1), 64 =&gt; 128, stride=2, bias=false),  [90m# 8_192 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
        ),
        Chain(
          Conv((3, 3), 64 =&gt; 128, pad=1, stride=2, bias=false),  [90m# 73_728 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
          NNlib.relu,
          Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
          NNlib.relu,
          Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
        ),
      ),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        Chain(
          Conv((1, 1), 128 =&gt; 256, stride=2, bias=false),  [90m# 32_768 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
        ),
        Chain(
          Conv((3, 3), 128 =&gt; 256, pad=1, stride=2, bias=false),  [90m# 294_912 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
          NNlib.relu,
          Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
          NNlib.relu,
          Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
        ),
      ),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        Chain(
          Conv((1, 1), 256 =&gt; 512, stride=2, bias=false),  [90m# 131_072 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        ),
        Chain(
          Conv((3, 3), 256 =&gt; 512, pad=1, stride=2, bias=false),  [90m# 1_179_648 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
          NNlib.relu,
          Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
          NNlib.relu,
          Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        ),
      ),
    ),
  ),
  Chain(
    AdaptiveMeanPool((1, 1)),
    MLUtils.flatten,
    Dense(512 =&gt; 1000),                 [90m# 513_000 parameters[39m
  ),
) [90m        # Total: 62 trainable arrays, [39m11_689_512 parameters,
[90m          # plus 40 non-trainable, 9_600 parameters, summarysize [39m44.654 MiB.
</code></pre>
<p>Now we modify the head, by chaning the last <code>Chain</code> in the model. We change the last layer to output 4 classes (as opposed to the original 1000 classes).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># modify the model</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_infer</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">resnet_model</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_tune</span> <span class="o">=</span> <span class="n">Chain</span><span class="p">(</span><span class="n">AdaptiveMeanPool</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">Flux</span><span class="o">.</span><span class="n">flatten</span><span class="p">,</span> <span class="n">Dense</span><span class="p">(</span><span class="mi">512</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>Chain(
  AdaptiveMeanPool((1, 1)),
  Flux.flatten,
  Dense(512 =&gt; 4),                      [90m# 2_052 parameters[39m
) 
</code></pre>
<p><strong>And that&rsquo;s it!</strong> Now, let&rsquo;s just explore both portions of the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">resnet_infer</span>
</span></span></code></pre></div><pre><code>Chain(
  Chain(
    Conv((7, 7), 3 =&gt; 64, pad=3, stride=2, bias=false),  [90m# 9_408 parameters[39m
    BatchNorm(64, relu),                [90m# 128 parameters[39m[90m, plus 128[39m
    MaxPool((3, 3), pad=1, stride=2),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
        NNlib.relu,
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
        NNlib.relu,
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
      ),
    ),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      Chain(
        Conv((1, 1), 64 =&gt; 128, stride=2, bias=false),  [90m# 8_192 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
      ),
      Chain(
        Conv((3, 3), 64 =&gt; 128, pad=1, stride=2, bias=false),  [90m# 73_728 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
        NNlib.relu,
        Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
        NNlib.relu,
        Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
      ),
    ),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      Chain(
        Conv((1, 1), 128 =&gt; 256, stride=2, bias=false),  [90m# 32_768 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
      ),
      Chain(
        Conv((3, 3), 128 =&gt; 256, pad=1, stride=2, bias=false),  [90m# 294_912 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
        NNlib.relu,
        Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
        NNlib.relu,
        Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
      ),
    ),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      Chain(
        Conv((1, 1), 256 =&gt; 512, stride=2, bias=false),  [90m# 131_072 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
      ),
      Chain(
        Conv((3, 3), 256 =&gt; 512, pad=1, stride=2, bias=false),  [90m# 1_179_648 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        NNlib.relu,
        Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        NNlib.relu,
        Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
      ),
    ),
  ),
) [90m        # Total: 60 trainable arrays, [39m11_176_512 parameters,
[90m          # plus 40 non-trainable, 9_600 parameters, summarysize [39m42.693 MiB.
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">resnet_tune</span>
</span></span></code></pre></div><pre><code>Chain(
  AdaptiveMeanPool((1, 1)),
  Flux.flatten,
  Dense(512 =&gt; 4),                      [90m# 2_052 parameters[39m
) 
</code></pre>
<h3 id="define-evaluation-and-training-functions">Define evaluation and training functions</h3>
<p>Again, will follow the model zoo documentation. Small adaptations will be needed. (These two functions were taken directly from the documentation).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">m_infer</span><span class="p">,</span> <span class="n">m_tune</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">good</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">in</span> <span class="n">val_loader</span>
</span></span><span class="line"><span class="cl">        <span class="n">good</span> <span class="o">+=</span> <span class="n">sum</span><span class="p">(</span><span class="n">Flux</span><span class="o">.</span><span class="n">onecold</span><span class="p">(</span><span class="n">m_tune</span><span class="p">(</span><span class="n">m_infer</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span> <span class="o">.==</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">+=</span> <span class="n">length</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="n">acc</span> <span class="o">=</span> <span class="n">round</span><span class="p">(</span><span class="n">good</span> <span class="o">/</span> <span class="n">count</span><span class="p">,</span> <span class="n">digits</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">acc</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>eval_f (generic function with 1 method)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">train_epoch!</span><span class="p">(</span><span class="n">model_infer</span><span class="p">,</span> <span class="n">model_tune</span><span class="p">,</span> <span class="n">opt</span><span class="p">,</span> <span class="n">loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">in</span> <span class="n">loader</span>
</span></span><span class="line"><span class="cl">        <span class="n">infer</span> <span class="o">=</span> <span class="n">model_infer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">grads</span> <span class="o">=</span> <span class="n">gradient</span><span class="p">(</span><span class="n">model_tune</span><span class="p">)</span> <span class="k">do</span> <span class="n">m</span>
</span></span><span class="line"><span class="cl">            <span class="n">Flux</span><span class="o">.</span><span class="n">Losses</span><span class="o">.</span><span class="n">logitcrossentropy</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="n">infer</span><span class="p">),</span> <span class="n">Flux</span><span class="o">.</span><span class="n">onehotbatch</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="mi">4</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="n">update!</span><span class="p">(</span><span class="n">opt</span><span class="p">,</span> <span class="n">model_tune</span><span class="p">,</span> <span class="n">grads</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>train_epoch! (generic function with 1 method)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">resnet_opt</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">Flux</span><span class="o">.</span><span class="n">Optimisers</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="mf">1e-3</span><span class="p">),</span> <span class="n">resnet_tune</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">iter</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="mi">5</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@time</span> <span class="n">train_epoch!</span><span class="p">(</span><span class="n">resnet_infer</span><span class="p">,</span> <span class="n">resnet_tune</span><span class="p">,</span> <span class="n">resnet_opt</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_train</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">resnet_infer</span><span class="p">,</span> <span class="n">resnet_tune</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_eval</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">resnet_infer</span><span class="p">,</span> <span class="n">resnet_tune</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;train&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_train</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;eval&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_eval</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>176.283332 seconds (37.11 M allocations: 98.153 GiB, 6.06% gc time, 143.87% compilation time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.5744
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.5455


 70.815518 seconds (2.42 M allocations: 95.936 GiB, 11.25% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.6823
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6273


 90.463025 seconds (2.42 M allocations: 95.936 GiB, 11.21% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7032
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6455


 94.362892 seconds (2.42 M allocations: 95.936 GiB, 10.91% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7433
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6727


116.526515 seconds (2.42 M allocations: 95.936 GiB, 9.62% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7885
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6909
</code></pre>
<hr>
<h2 id="vision-transformers">Vision Transformers</h2>
<hr>
<p>Similar to the PyTorch demonstration, we can do transfer learning by changing a different computer vision model (Vision Transformer).</p>
<p>Let&rsquo;s get into it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">vit_model</span> <span class="o">=</span> <span class="n">ViT</span><span class="p">(</span><span class="ss">:base</span><span class="p">;</span> <span class="n">pretrain</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span><span class="o">.</span><span class="n">layers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># let&#39;s have a look at the model head, to see how many inputs the head needs</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_model</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span></code></pre></div><pre><code>Chain(
  LayerNorm(768),                       [90m# 1_536 parameters[39m
  Dense(768 =&gt; 1000),                   [90m# 769_000 parameters[39m
) [90m                  # Total: 4 arrays, [39m770_536 parameters, 2.940 MiB.
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># modify the head</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_infer</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">vit_model</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># notice how we keep the input to the model head</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_tune</span> <span class="o">=</span> <span class="n">Chain</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LayerNorm</span><span class="p">(</span><span class="mi">768</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">Dense</span><span class="p">(</span><span class="mi">768</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div><pre><code>Chain(
  LayerNorm(768),                       [90m# 1_536 parameters[39m
  Dense(768 =&gt; 4),                      [90m# 3_076 parameters[39m
) [90m                  # Total: 4 arrays, [39m4_612 parameters, 18.352 KiB.
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">vit_opt</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">Flux</span><span class="o">.</span><span class="n">Optimisers</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="mf">1e-3</span><span class="p">),</span> <span class="n">vit_tune</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">iter</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="mi">5</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@time</span> <span class="n">train_epoch!</span><span class="p">(</span><span class="n">vit_infer</span><span class="p">,</span> <span class="n">vit_tune</span><span class="p">,</span> <span class="n">vit_opt</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_train</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">vit_infer</span><span class="p">,</span> <span class="n">vit_tune</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_eval</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">vit_infer</span><span class="p">,</span> <span class="n">vit_tune</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;train&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_train</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;eval&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_eval</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>627.303072 seconds (17.32 M allocations: 291.924 GiB, 4.61% gc time, 3.66% compilation time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7058
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6273


565.986959 seconds (2.54 M allocations: 291.028 GiB, 4.71% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.8042
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6273


516.041945 seconds (2.54 M allocations: 291.028 GiB, 4.92% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.866
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6818


515.415614 seconds (2.54 M allocations: 291.028 GiB, 4.80% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.8973
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6818


427.423410 seconds (2.54 M allocations: 291.028 GiB, 5.01% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.9199
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6727
</code></pre>
<h3 id="save-the-models">Save the Models</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">JLD2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">resnet_model_state</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">state</span><span class="p">(</span><span class="n">resnet_model</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_model_state</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">state</span><span class="p">(</span><span class="n">vit_model</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">jldsave</span><span class="p">(</span><span class="s">&#34;resnet_model.jld2&#34;</span><span class="p">;</span> <span class="n">resnet_model_state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">jldsave</span><span class="p">(</span><span class="s">&#34;vit_model.jld2&#34;</span><span class="p">;</span> <span class="n">vit_model_state</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mOpening file with JLD2.MmapIO failed, falling back to IOStream
[33m[1m└ [22m[39m[90m@ JLD2 C:\Users\ingvi\.julia\packages\JLD2\7uAqU\src\JLD2.jl:300[39m
[33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mOpening file with JLD2.MmapIO failed, falling back to IOStream
[33m[1m└ [22m[39m[90m@ JLD2 C:\Users\ingvi\.julia\packages\JLD2\7uAqU\src\JLD2.jl:300[39m
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">BSON</span><span class="o">:</span> <span class="nd">@save</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@save</span> <span class="s">&#34;resnet_model_sate.bson&#34;</span> <span class="n">resnet_model</span>
</span></span><span class="line"><span class="cl"><span class="nd">@save</span> <span class="s">&#34;vit_model_state.bson&#34;</span> <span class="n">vit_model</span>
</span></span></code></pre></div><h2 id="thank-you">Thank you!</h2>
<p>I hope this demonstration on using Julia and <code>Flux</code> for transfer learning was helpful!</p>
<p>Victor</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Transfer Learning Classifier Using PyTorch</title>
      <link>http://localhost:59413/posts/20240515_cat_mood_classification/20240515_cat_mood_classification/</link>
      <pubDate>Wed, 15 May 2024 14:53:29 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240515_cat_mood_classification/20240515_cat_mood_classification/</guid>
      <description>Things we learn here include image data exploration, transfer learning, custom datasets, comparing ML models, saving/loading models and model data, conditional setup for different work environments.</description>
      <content:encoded><![CDATA[<p><a href="https://colab.research.google.com/github/vflores-io/cat_mood/blob/main/cat_mood_classification.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></p>
<h1 id="cat-expression-classifier-using-convolutional-neural-networks">Cat Expression Classifier Using Convolutional Neural Networks</h1>
<hr>
<p>This project aims to build a cat expression classifier with convolutional neural networks (CNNs) using PyTorch. This project serves as an introduction to image classification and also dives into the nuances of handling a specific, custom dataset and adapting pre-trained models for our purposes.</p>
<h3 id="objective">Objective</h3>
<p>The primary objective of this project is to develop a model capable of classifying images of cat faces into one of four moods: alarmed, angry, calm, and pleased. By the end of this tutorial, you will learn how to preprocess image data, leverage transfer learning for image classification, and evaluate a model&rsquo;s performance.</p>
<h3 id="tools-and-techniques">Tools and Techniques</h3>
<p>We will employ PyTorch, a powerful and versatile deep learning library, to construct our CNN. The model of choice for this tutorial is ResNet18, a robust architecture that is commonly used in image recognition tasks. Given the straightforward nature of our classificaiton problem, ResNet18 provides an ecellent balance between complexity and performance.</p>
<h3 id="why-transfer-learning">Why <em>Transfer Learning</em>?</h3>
<p>In this tutorial, we utilize <em>transfer learning</em> to take advantage of a pre-trained ResNet18 model. This approach allows us to use a model that has already learned a significant amount of relevant features from a vast and diverse dataset (ImageNet). By fine-tuning this model to our specific task, we can achieve high accuracy with relatively little data and reduce the computational cost typycally associated with training a deep neural network from scratch.</p>
<h3 id="dataset">Dataset</h3>
<p>The dataset comprises images of cat faces, labeled according to their expressed mood. These images are organized into training, validation, and testing sets, each with a corresponding CSV file which maps filenames to mood labels. This guide will walk you through the process of loading, preprocessing, and augmenting this data to suit the needs of our CNN.</p>
<p>The dataset was obtained <a href="https://universe.roboflow.com/mubbarryz/domestic-cats-facial-expressions">here</a>.</p>
<p>Let&rsquo;s get started!</p>
<h2 id="dataset-exploration">Dataset Exploration</h2>
<h3 id="listing-the-number-of-images-in-each-set-and-visualizing-the-set">Listing the Number of Images in Each Set and Visualizing The Set</h3>
<p>Below we will mount the drive to retrieve the data set files.
Then, will use Python&rsquo;s <code>os</code> module to list the number of images in the dataset. This will give us an idea of the size of the set.</p>
<p>Additionally, we will include a flag to tell the model whether we want to train it or to load a previously saved model&hellip; this will become clear later.</p>
<p>Finally, we will set up a function to visualize some sample images from each set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># flag to control whether to train the model or load a saved model</span>
</span></span><span class="line"><span class="cl"><span class="n">should_train_resnet</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl"><span class="n">should_train_vit</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">set_path</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># check if the notebook is running on google colab</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="s1">&#39;google.colab&#39;</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">get_ipython</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running on Google Colab.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
</span></span><span class="line"><span class="cl">    <span class="n">drive</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s1">&#39;/content/drive&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/content/drive/PATH-TO-YOUR-DATA&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running locally.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;./data/cat_expression_data&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">base_dir</span> <span class="o">=</span> <span class="n">set_path</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>Running on Google Colab.
Mounted at /content/drive
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># base directories</span>
</span></span><span class="line"><span class="cl"><span class="n">train_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="s1">&#39;train&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="s1">&#39;val&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_images</span><span class="p">(</span><span class="n">directory</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;&#34;&#34; list folders and count image files in each folder &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">dir_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">image_files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">((</span><span class="s1">&#39;.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;.bmp&#39;</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Total image files in </span><span class="si">{</span><span class="n">dir_name</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list_images</span><span class="p">(</span><span class="n">train_dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">list_images</span><span class="p">(</span><span class="n">val_dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">list_images</span><span class="p">(</span><span class="n">test_dir</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Total image files in train: 1149
Total image files in val: 110
Total image files in test: 55
</code></pre>
<p>Finally, we will make a dictionary that maps the classes to index-based labels, from the CSV file. We will need this way later, but we will define the dictionary this early on.</p>
<h3 id="visualizing-some-of-the-data">Visualizing Some of the Data</h3>
<p>Let&rsquo;s visualize a few images from each folder to ensure to have a better feel of the data.</p>
<p>We will do this by making a dataframe out of the annotations file where the labels are stored. We will use the test annotations, since this is the smallest dataset, and the other two have the same labels anyway.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define the annotations file</span>
</span></span><span class="line"><span class="cl"><span class="n">annotations_filename</span> <span class="o">=</span> <span class="s1">&#39;_classes.csv&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define the full path to the annotations file</span>
</span></span><span class="line"><span class="cl"><span class="n">test_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">test_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load the annotations file</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">test_annotations</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">class_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">index</span><span class="p">:</span> <span class="n">col</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">:])}</span>  <span class="c1"># Adjust slicing if there are other columns</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">class_names</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>{0: ' alarmed', 1: ' angry', 2: ' calm', 3: ' pleased'}
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_sample_images</span><span class="p">(</span><span class="n">main_directory</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display sample images from each subfolder within the main directory.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">subfolders</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="o">.</span><span class="n">path</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">scandir</span><span class="p">(</span><span class="n">main_directory</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_dir</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">directory</span> <span class="ow">in</span> <span class="n">subfolders</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">image_files</span> <span class="o">=</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">((</span><span class="s1">&#39;.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;.jpeg&#39;</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">chosen_samples</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">image_files</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">),</span> <span class="n">num_samples</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Plot settings</span>
</span></span><span class="line"><span class="cl">            <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">),</span> <span class="n">num_samples</span><span class="p">),</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">fig</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Sample Images from </span><span class="si">{</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">ax</span><span class="p">,</span> <span class="n">img_path</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">axes</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">chosen_samples</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># ax.set_title(os.path.basename(img_path))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No images to display in </span><span class="si">{</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example usage with the base directory containing train, validation, and test subfolders</span>
</span></span><span class="line"><span class="cl"><span class="n">show_sample_images</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_10_0.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_10_1.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_10_2.png" type="" alt="png"  /></p>
<h2 id="data-preprocessing">Data Preprocessing</h2>
<hr>
<p>This steps involves preparing the dataset for training a PyTorch model by resizing, normalizing, and applying data augmentation.</p>
<p><strong>NOTE:</strong> At this point, it is important to know what is the model or CNN architecture we will be using. Important aspects to consider include the image size, any data transformations for training and validation, data augmentation techniques, and setting up data loaders later.</p>
<p>In this example, we will use <code>ResNet18 </code>. The inputs must follow a specific format, as per the PyTorch ResNet documentation found <a href="https://pytorch.org/hub/pytorch_vision_resnet/">here</a>:</p>
<blockquote>
<p>All pre-trained models expect input images normalized in the same way, i.e. mini-batches of 3-channel RGB images of shape <code>(3 x H x W)</code>, where <code>H</code> and <code>W</code> are expected to be at least 224. The images have to be loaded in to a range of <code>[0, 1]</code> and then normalized using <code>mean = [0.485, 0.456, 0.406]</code> and <code>std = [0.229, 0.224, 0.225]</code>.</p>
</blockquote>
<h3 id="tools-for-data-preprocessing-in-pytorch">Tools for Data Preprocessing in PyTorch</h3>
<ul>
<li><code>torchvision.transforms</code>: Provides common image transformations like resizing, normalization, and augmentation.</li>
<li><code>torch.utils.data.Dataset</code>: A base class for creating custom datasets.</li>
<li><code>torch.utils.data.DataLoader</code>: Loads and batches data for training.</li>
</ul>
<h3 id="the-data">The Data</h3>
<p>The data set we are using consists of three folders: <code>train</code>, <code>val</code>, <code>test</code>. Each of them contain a set of images of cats. The labels in this case, are in the form of a CSV file that maps the filename with a one-hot encoding to label the classification of the image, i.e. the cat&rsquo;s mood - alarmed, angry, calm, pleased.</p>
<p>Because this dataset structure is not exactly suitable for the <code>ImageFolder</code> module in PyTorch, whereby labelling is made easier and based on the folder structure, we need to create a custom dataset and loader. Let&rsquo;s get started!</p>
<h3 id="define-image-transformations">Define Image Transformations</h3>
<ul>
<li>Specify resizing dimensions, normalization parameters, and augmentation techniques (like random rotation, flips, etc.).</li>
<li>Create separate transformations for training and validation datasets.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># import transforms</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torchvision.transforms</span> <span class="k">as</span> <span class="nn">transforms</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define the image size</span>
</span></span><span class="line"><span class="cl"><span class="n">image_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">)</span>  <span class="c1"># adjusted for ResNet18</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define transformations for the training dataset</span>
</span></span><span class="line"><span class="cl"><span class="n">train_transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Resize</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>  <span class="c1"># resize to ensure minimum size</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">CenterCrop</span><span class="p">(</span><span class="mi">224</span><span class="p">),</span> <span class="c1"># center crop to 224x224</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">RandomHorizontalFlip</span><span class="p">(),</span> <span class="c1"># data augmentation</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">RandomRotation</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span> <span class="c1"># data augmentation</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ConvertImageDtype</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">),</span>  <span class="c1"># important, because the read_image reads as uint8, needs to be float</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># given that below we apply normalization</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">mean</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                         <span class="n">std</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Resize</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">CenterCrop</span><span class="p">(</span><span class="mi">224</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ConvertImageDtype</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">mean</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                         <span class="n">std</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span></code></pre></div><p>With these transformations, the data pipeline will align with common practices for pre-trained models like ResNet18.</p>
<h3 id="create-custom-datasets-and-data-loaders">Create Custom Datasets and Data Loaders</h3>
<p>Given the structure of our dataset, where labels are provided in a CSV file rather than through directory structure, we need to use a custom dataset class. This will allow us to link echc image with its respective label based on our CSV file&rsquo;s structure.</p>
<h4 id="creating-custom-dataset">Creating Custom Dataset</h4>
<p>We will extend the <code>torch.utils.data.Dataset</code> class to create our custom dataset. this class will override the necessary methods to handle our specific dataset setup:</p>
<ol>
<li>Initialization: Load the CSV file and set up the path to the images</li>
<li>Length: Return the total number of images</li>
<li>Get item: Load each image by index, apply the specified transformations, and parse the label from the CSV data</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torchvision.io</span> <span class="kn">import</span> <span class="n">read_image</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CustomImageDataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;&#34;&#34; a custom dataset class that loads images and their labels from a CSV &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">annotations_file</span><span class="p">,</span> <span class="n">img_dir</span><span class="p">,</span> <span class="n">transform</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    args:
</span></span></span><span class="line"><span class="cl"><span class="s2">      annotations_file (string): path to the CSV file with annotations
</span></span></span><span class="line"><span class="cl"><span class="s2">      img_dir (str): directory with all the images
</span></span></span><span class="line"><span class="cl"><span class="s2">      transform (callable, optional): transform to be applied on a sample
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">annotations_file</span><span class="p">)</span> <span class="c1"># load annotations</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">img_dir</span> <span class="o">=</span> <span class="n">img_dir</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; returns the number of items in the dataset &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; fetches the image and label at the index idx from the dataset &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img_dir</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">read_image</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># convert one-hot encoded labels to a categorical label</span>
</span></span><span class="line"><span class="cl">    <span class="n">one_hot_label</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">:]</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float32&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># next find the index of the element in the slice which contains the &#39;1&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># since all other numbers will be 0; this will correspond to the label</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 0, 1, 2, 3</span>
</span></span><span class="line"><span class="cl">    <span class="n">label</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">one_hot_label</span><span class="p">))</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">transform</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">image</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>  <span class="c1"># apply transformations</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">image</span><span class="p">,</span> <span class="n">label</span>
</span></span></code></pre></div><p>Now that we have defined the data classes, we can create objects for each of our datasets, as a <code>CustomImageDataset</code> class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># annotations_filename = &#39;_classes.csv&#39;    # previously defined</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># paths to annotation files</span>
</span></span><span class="line"><span class="cl"><span class="n">train_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">train_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">val_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">test_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>    <span class="c1"># previously defined</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create dataset objects</span>
</span></span><span class="line"><span class="cl"><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">CustomImageDataset</span><span class="p">(</span><span class="n">train_annotations</span><span class="p">,</span> <span class="n">train_dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">transform</span> <span class="o">=</span> <span class="n">train_transforms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_dataset</span> <span class="o">=</span> <span class="n">CustomImageDataset</span><span class="p">(</span><span class="n">val_annotations</span><span class="p">,</span> <span class="n">val_dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">transform</span> <span class="o">=</span> <span class="n">val_transforms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_dataset</span> <span class="o">=</span> <span class="n">CustomImageDataset</span><span class="p">(</span><span class="n">test_annotations</span><span class="p">,</span> <span class="n">test_dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">transform</span> <span class="o">=</span> <span class="n">val_transforms</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="creating-data-loaders">Creating Data Loaders</h4>
<p>Data loaders in PyTorch provide the necessary functionality to batch, shuffle, and feed the data to your model during training in an efficient manner. They also handle parallel processing using multiple worker threads, which can significantly speed up data loading.</p>
<p>In short, data loaders take the dataset objects and handle the process of creating batches, shuffling the data, and parallelizing the data loading process.</p>
<p>Below we will create a data loaders for our datasets.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span>   <span class="c1"># defines how many samples per batch to load</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">True</span>    <span class="c1"># shuffles the dataset at every epoch</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">False</span>   <span class="c1"># no need to shuffle validation data</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">test_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>In the loader above, we have the following main parts:</p>
<ul>
<li>Batch size: typycally set based on the system&rsquo;s memory capacity and how large the model is. A larger batch size can speed up training but requires more memory.</li>
<li>Shuffle: shuffling helps ensure that each batch sees a varierty of data across epochs, which can improve model generalization.</li>
<li>Number of workers: this controls how many subproceses to use for data loading. More workers can lead to faster data preprocessing and reduced time to train each epoch but also increases memory usage.</li>
</ul>
<h3 id="integration-with-the-training-loop">Integration with the Training Loop</h3>
<p>With the data loaders set up, we are now ready to integrate them into the model&rsquo;s training and validation loops.</p>
<p>The code <strong>snippet</strong> below shows how this would be done. We will implement the actual integration when we get to the training section.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_epochs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Forward pass, backward pass, and optimize</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Validation step at the end of each epoch</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Calculate validation accuracy, loss, etc.</span>
</span></span></code></pre></div><h2 id="model-training">Model Training</h2>
<hr>
<p>Now that the data is ready and properly formatted for input into a neural network, the next step involves setting up and training the <code>ResNet18</code> model. We will configure the model, define the loss function and optimizer, and implement the training and validation loops.</p>
<h3 id="next-steps">Next Steps</h3>
<ol>
<li>Model setup:</li>
</ol>
<ul>
<li>Load the pre-trained <code>ResNet18</code> model and modify it for our specific classification task (number of classes based on cat facial expressions)</li>
</ul>
<ol start="2">
<li>Loss function and optimizer:</li>
</ol>
<ul>
<li>Define a loss function suitable for classification, e.g. <code>CrossEntropyLoss</code></li>
<li>Set up an optimizer (like <code>Adam</code> or <code>SGD</code>) to adjust the model weights during training based on the computed gradients</li>
</ul>
<ol start="3">
<li>Training loop:</li>
</ol>
<ul>
<li>Implement the loop that processes the data through the model, computes the loss, updates the model parameters, and evaluates the model performance on the validation dataset periodically</li>
</ul>
<ol start="4">
<li>Monitoring and saving the model:</li>
</ol>
<ul>
<li>Track performance metrics such as loss and accuracy</li>
<li>Implement functionality to save the trained model for later use or further evaluation</li>
</ul>
<h3 id="model-setup">Model Setup</h3>
<p>In this section, we&rsquo;ll configure a ResNet18 model to suit our specific classification task. Since the model is originally designed for ImageNet with 1000 classes, we&rsquo;ll adapt it for our use case, which involves classifying images into four mood categories (alarmed, angry, calm, pleased).</p>
<h4 id="import-the-necessary-libraries">Import the Necessary Libraries</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># import torch  # this has already been imported before</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="nn">nn</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch.optim</span> <span class="k">as</span> <span class="nn">optim</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">models</span>
</span></span></code></pre></div><h4 id="load-and-modify-the-pre-trained-resnet18">Load and Modify the Pre-trained ResNet18</h4>
<p>We will load a pre-trained ResNet18 model and modify its final layer to suit our classification needs. This is known as <strong>transfer learning</strong>, and it is a technique that uses a pre-trained model and leverages its learned parameters to focus on a similar, more specific task. This is a powerful technique, since it uses the existing knowledge (such as edges and features) so that the new classification task is more robust, and faster to tune to the specific task.</p>
<h4 id="understanding-transfer-learning">Understanding Transfer Learning</h4>
<p><strong>Transfer Learning</strong> is a powerful technique in machine learning where a model developed for a particular task is reused as the starting point for a model on a second task. It&rsquo;s especially popular in deep learning given the vast compute and time resources required to develop neural network models on large datasets and from scratch.</p>
<h4 id="why-use-transfer-learning">Why Use Transfer Learning?</h4>
<ol>
<li>Efficiency: transfer learning allows us to leverage pre-trained networks that have already learned a good amount of features on large datasets. This is beneficial as it can drastically reduce the time and computational cost to achieve high performance.</li>
<li>Performance: models trained on large-scalr datasets like ImageNet havve proven to generalize well to other datasets. Starting with these can provide a significand head-start in terms of performance.</li>
</ol>
<h5 id="applying-transfer-learning">Applying Transfer Learning</h5>
<ul>
<li>Model adaptation: for our specific task fo classifying cat moods, we take a pre-trained ResNet18 model and tailor it to our needs. The pre-trained model brings the advantage of learned features from ImageNet, a vast and diverse dataset.</li>
<li>Feature extraction: by <strong>freezing</strong> (i.e. keeping the weight values as they are) the pre-trained layers, we utilize them as a feature extractor. Only the final layers are trained to adapt those features to our specific classification task.</li>
</ul>
<h4 id="model-setup-with-a-custom-classifier">Model Setup with a Custom Classifier</h4>
<p>We have mentioned replacing the funal layer(s) as a transfer learning techniques. In this case, we replace the final fully connected (fc) layer of ResNet18 with a different layer which will suit our need to have 4 classes. Additionally, we will replace this fc layer with a more complex classifier portion, which involves adding additional layers such as ReLU for non-linearity, and dropout for regularization to prevent overfitting.</p>
<ul>
<li>ReLU Activation: introduces non-linearity into the model, allowing it to learn more complex patterns.</li>
<li>Dropout: Randomly zeros some of the elements of the input (to the layer, not input to the model) tensor with probability $p$ during training, which helps prevent overfitting.</li>
</ul>
<p>Let&rsquo;s implement this classifier in our transfer learning setup.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># assign the model weights</span>
</span></span><span class="line"><span class="cl"><span class="n">weights</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ResNet18_Weights</span><span class="o">.</span><span class="n">DEFAULT</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create the model object with pre-trained weights</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">resnet18</span><span class="p">(</span><span class="n">weights</span> <span class="o">=</span> <span class="n">weights</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># freeze all the layers in the network</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">  <span class="n">param</span><span class="o">.</span><span class="n">requires_grad</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace the fc layer with a more complex classifier</span>
</span></span><span class="line"><span class="cl"><span class="n">num_features</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fc</span><span class="o">.</span><span class="n">in_features</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">num_features</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>    <span class="c1"># first linear layer</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>                       <span class="c1"># non-linearity</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>                 <span class="c1"># dropout for regularization</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">class_names</span><span class="p">))</span>                <span class="c1"># output layer, 4 classes for cat moods</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move model to GPU if available</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Downloading: &quot;https://download.pytorch.org/models/resnet18-f37072fd.pth&quot; to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth
100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 117MB/s]
</code></pre>
<h3 id="loss-function-and-optimizer">Loss Function and Optimizer</h3>
<p>For our classification task, we need a loss function that effectively measures the discrepancy between the predicted labels and the actual labels. Since we&rsquo;ve configured out model outputs to be class indices (from our dataset&rsquo;s one-hot encoded labels), we&rsquo;ll use <a href="https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html"><code>CrossEntropyLoss</code></a>, which is ideal for such clasification tasks.</p>
<p>We&rsquo;ll par this with the <a href="https://pytorch.org/docs/stable/generated/torch.optim.Adam.html"><code>Adam</code></a> optimizer, which is known for its efficiency in handling sparse gradients and adaptive learning rate capabilities, making it well-suited for this task.</p>
<p>Let&rsquo;s set up our loss function and optimizer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># loss function</span>
</span></span><span class="line"><span class="cl"><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># optimizer</span>
</span></span><span class="line"><span class="cl"><span class="c1"># optimize only the final classifier layers</span>
</span></span><span class="line"><span class="cl"><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">fc</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span> <span class="o">=</span> <span class="mf">0.001</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="training-and-validation-loops">Training and Validation Loops</h3>
<p>Now, let&rsquo;s write the code to train and validate our model. This involves running the model over several epochs, making predictions, calculating loss, updating the model parameters, and evaluating the model&rsquo;s perfomance on the validation dataset.</p>
<ul>
<li>Training loop: here, the model learns by adjusting its weights based on the calculated loss from the training data</li>
<li>Validation loop: validation occurs post the training phase in each epoch and helps in evaluating the model&rsquo;s performance on unseen data, ensuring it generalizes well and doesn&rsquo;t overfit</li>
</ul>
<h3 id="savingloading-the-model">Saving/Loading the Model</h3>
<h4 id="save-the-trained-model">Save the Trained Model</h4>
<p>If we have performed training, we can save the model to use next time, so that we can avoid re-training everytime we run the notebook.</p>
<p>We will implement this part as an <code>if</code> statement, that would run the training loop and save the model if we choose to, otherwise, we would just load the model weights.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pickle</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define a function to set the save model path</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">model_save_path</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># check if the notebook is running on google colab</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="s1">&#39;google.colab&#39;</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">get_ipython</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running on Google Colab.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/content/drive/PATH-TO-YOUR-SAVE-FOLDER&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running locally.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;./saved_models&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">path</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">training_loop</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">num_epochs</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">flag</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># num_epochs = 25   # define the number of epochs for training</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_losses</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_losses</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_epochs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>   <span class="c1"># set the model to training mode</span>
</span></span><span class="line"><span class="cl">      <span class="n">total_train_loss</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># forward pass to get outputs</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># backpropagation and optimization</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">total_train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span> <span class="o">*</span> <span class="n">images</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># calculate average training loss for the epoch</span>
</span></span><span class="line"><span class="cl">      <span class="n">avg_train_loss</span> <span class="o">=</span> <span class="n">total_train_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">train_losses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg_train_loss</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># print average training loss per epoch&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Epoch </span><span class="si">{</span><span class="n">epoch</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s1">/</span><span class="si">{</span><span class="n">num_epochs</span><span class="si">}</span><span class="s1">, Training Loss: </span><span class="si">{</span><span class="n">avg_train_loss</span><span class="si">:</span><span class="s1">.4f</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">#------------------#</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># validation phase #</span>
</span></span><span class="line"><span class="cl">      <span class="c1">#------------------#</span>
</span></span><span class="line"><span class="cl">      <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>   <span class="c1"># set the model to evaluation mode</span>
</span></span><span class="line"><span class="cl">      <span class="n">total_val_loss</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">      <span class="n">total_val_accuracy</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">total_val_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span> <span class="o">*</span> <span class="n">images</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">total_val_accuracy</span> <span class="o">+=</span> <span class="p">(</span><span class="n">predicted</span> <span class="o">==</span> <span class="n">labels</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># calculate average validation loss for the epoch</span>
</span></span><span class="line"><span class="cl">      <span class="n">avg_val_loss</span> <span class="o">=</span> <span class="n">total_val_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">val_losses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg_val_loss</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># calculate validation accuracy</span>
</span></span><span class="line"><span class="cl">      <span class="n">val_accuracy</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">total_val_accuracy</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># print validation accuracy</span>
</span></span><span class="line"><span class="cl">      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39; Validation loss: </span><span class="si">{</span><span class="n">avg_val_loss</span><span class="si">:</span><span class="s1">.4f</span><span class="si">}</span><span class="s1">, Validation accuracy: </span><span class="si">{</span><span class="n">val_accuracy</span><span class="si">:</span><span class="s1">.2f</span><span class="si">}</span><span class="s1">%&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># save model and training data</span>
</span></span><span class="line"><span class="cl">    <span class="n">save_model_path</span> <span class="o">=</span> <span class="n">model_save_path</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># model_filename = &#39;vit_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">torch</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">state_dict</span><span class="p">(),</span> <span class="n">model_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Model saved to&#39;</span><span class="p">,</span> <span class="n">model_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># save the training and validation losses</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">save_training_data</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">({</span><span class="s1">&#39;train_losses&#39;</span><span class="p">:</span> <span class="n">train_losses</span><span class="p">,</span> <span class="s1">&#39;val_losses&#39;</span><span class="p">:</span> <span class="n">val_losses</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Training data saved to </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Specify the filename for saving training data</span>
</span></span><span class="line"><span class="cl">    <span class="n">training_data_filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">save_training_data</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">,</span> <span class="n">training_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># load the trained model</span>
</span></span><span class="line"><span class="cl">    <span class="n">save_model_path</span> <span class="o">=</span> <span class="n">model_save_path</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># model_filename = &#39;vit_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">model_path</span><span class="p">,</span> <span class="n">map_location</span> <span class="o">=</span> <span class="n">device</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Model loaded and set to evaluation mode.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># load training data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Load the training and validation losses</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">load_training_data</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">training_data_filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">training_data</span> <span class="o">=</span> <span class="n">load_training_data</span><span class="p">(</span><span class="n">training_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_losses</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">[</span><span class="s1">&#39;train_losses&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_losses</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">[</span><span class="s1">&#39;val_losses&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training data loaded successfully.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model_filename</span> <span class="o">=</span> <span class="s1">&#39;resnet18_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">model_data_filename</span> <span class="o">=</span> <span class="s1">&#39;resnet18_training_data.pkl&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span> <span class="o">=</span> <span class="n">training_loop</span><span class="p">(</span><span class="n">should_train_resnet</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">,</span> <span class="n">num_epochs</span> <span class="o">=</span> <span class="mi">25</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Running on Google Colab.
Model loaded and set to evaluation mode.
Training data loaded successfully.
</code></pre>
<hr>
<h2 id="model-evaluation">Model Evaluation</h2>
<p>Now that the model is trained, the next step is to evaluate its performance more thoroughly, and possibly improve it based on the insights gained.</p>
<p>Evaluating the model involves checking the accuracy and also looking at other metrics like precision, recall, and F1-score, especially if the dataset is imbalanced or if specific classes are more important than others.</p>
<h3 id="model-evaluation-on-validation-set">Model Evaluation on Validation Set</h3>
<p>After training a machine learning model, it&rsquo;s crucial to evaluate its performance comprehensively. Here, we will detail three key diagnostic tools&quot;</p>
<ol>
<li>Confusion matrix</li>
<li>Plotting training and validation losses</li>
<li>Visualization of the predictions</li>
</ol>
<h4 id="confusion-matrix">Confusion Matrix</h4>
<p>A confusion matrix provides a detailed breakdown of the model&rsquo;s predictions, showing exactly how many samples from each class were correctly or incorrectly predicted as each other class. This is crucial for understanding the model&rsquo;s performance across different categories.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span><span class="p">,</span> <span class="n">classification_report</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">evaluate_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">data_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">true_labels</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="n">predictions</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">data_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">_</span><span class="p">,</span> <span class="n">preds</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">predictions</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">preds</span><span class="o">.</span><span class="n">cpu</span><span class="p">()</span><span class="o">.</span><span class="n">numpy</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">      <span class="n">true_labels</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">labels</span><span class="o">.</span><span class="n">cpu</span><span class="p">()</span><span class="o">.</span><span class="n">numpy</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># compute the confusion matrix</span>
</span></span><span class="line"><span class="cl">  <span class="n">cm</span> <span class="o">=</span> <span class="n">confusion_matrix</span><span class="p">(</span><span class="n">true_labels</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">clf_report</span> <span class="o">=</span> <span class="n">classification_report</span><span class="p">(</span><span class="n">true_labels</span><span class="p">,</span> <span class="n">predictions</span><span class="p">,</span> <span class="n">output_dict</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Convert classification report dictionary to DataFrame</span>
</span></span><span class="line"><span class="cl">  <span class="n">clf_report_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clf_report</span><span class="p">)</span><span class="o">.</span><span class="n">transpose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">cm</span><span class="p">,</span> <span class="n">clf_report_df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cm</span><span class="p">,</span> <span class="n">clf_report_df</span> <span class="o">=</span> <span class="n">evaluate_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Plot the confusion matrix</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;Blues&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Confusion Matrix&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;True Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Predicted Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print classification report</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Classification Report:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">clf_report_df</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_40_0.png" type="" alt="png"  /></p>
<pre><code>Classification Report:
              precision    recall  f1-score     support
0              0.333333  0.285714  0.307692   14.000000
1              0.862069  0.714286  0.781250   35.000000
2              0.487179  0.678571  0.567164   28.000000
3              0.866667  0.787879  0.825397   33.000000
accuracy       0.672727  0.672727  0.672727    0.672727
macro avg      0.637312  0.616613  0.620376  110.000000
weighted avg   0.700728  0.672727  0.679728  110.000000
</code></pre>
<h4 id="plotting-training-and-validation-losses">Plotting Training and Validation Losses</h4>
<p>Plotting the training and validation losses over epochs allows us to monitor the learning process, identifying issues such as overfitting or underfitting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_losses</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">  Plot the training and validation losses.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">  Parameters:
</span></span></span><span class="line"><span class="cl"><span class="s2">  - train_losses: list of training loss values per epoch
</span></span></span><span class="line"><span class="cl"><span class="s2">  - val_losses: list of validation loss values per epoch
</span></span></span><span class="line"><span class="cl"><span class="s2">  &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Training Loss&#39;</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">marker</span> <span class="o">=</span> <span class="s1">&#39;o&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">val_losses</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Validation Loss&#39;</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">marker</span> <span class="o">=</span> <span class="s1">&#39;o&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Training and Validation Losses Over Epochs&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Epoch&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Loss&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># take the tracked losses from thet training loop</span>
</span></span><span class="line"><span class="cl"><span class="n">plot_losses</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_42_0.png" type="" alt="png"  /></p>
<h4 id="visualization-of-the-predictions">Visualization of the Predictions</h4>
<p>Visualizing model predictions on actual data points provides immediate qualitative feedback about model behavior. It helps identify paterns in which the model performs well or poorly, revealing potential biases, underfitting, or overfitting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">visualize_predictions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">data_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">class_names</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">images_so_far</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">rows</span> <span class="o">=</span> <span class="n">num_images</span> <span class="o">//</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">num_images</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">num_images</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span> <span class="o">=</span> <span class="n">rows</span><span class="p">,</span> <span class="n">ncols</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                           <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">*</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># define the mean and std deviation used for normalization</span>
</span></span><span class="line"><span class="cl">  <span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data_loader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">_</span><span class="p">,</span> <span class="n">preds</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">images</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">images_so_far</span> <span class="o">&lt;</span> <span class="n">num_images</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="n">images_so_far</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">images_so_far</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="n">num_images</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">axes</span> <span class="c1"># arrange in grid</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># convert tensors to integers</span>
</span></span><span class="line"><span class="cl">          <span class="n">predicted_label</span> <span class="o">=</span> <span class="n">preds</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="n">actual_label</span> <span class="o">=</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># reverse normalization transform</span>
</span></span><span class="line"><span class="cl">          <span class="n">img</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">cpu</span><span class="p">()</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span><span class="o">.</span><span class="n">transpose</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="c1"># change CxHxW to HxWxC</span>
</span></span><span class="line"><span class="cl">          <span class="n">img</span> <span class="o">=</span> <span class="n">std</span> <span class="o">*</span> <span class="n">img</span> <span class="o">+</span> <span class="n">mean</span>   <span class="c1"># reverse normalization</span>
</span></span><span class="line"><span class="cl">          <span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>   <span class="c1"># clip values to ensure they fall between 0 and 1</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># use converted integers to access class names</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;predicted: </span><span class="si">{</span><span class="n">class_names</span><span class="p">[</span><span class="n">predicted_label</span><span class="p">]</span><span class="si">}</span><span class="s1"> | actual: </span><span class="si">{</span><span class="n">class_names</span><span class="p">[</span><span class="n">actual_label</span><span class="p">]</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">images_so_far</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>   <span class="c1"># adjust layout</span>
</span></span><span class="line"><span class="cl">          <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make new loader for random samples</span>
</span></span><span class="line"><span class="cl"><span class="n">vis_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">visualize_predictions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">vis_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">class_names</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_44_0.png" type="" alt="png"  /></p>
<h2 id="evaluation-of-model-performance">Evaluation of Model Performance</h2>
<p>Our Cat Expression Classifier, built on a modified ResNet18 architecture, demonstrates a promising ability to classify cat expressions into four categories: alarmed, angry, calm, and pleased. Here, we provide a detailed analysis of the model&rsquo;s performance based on our the training and validation efforts.</p>
<h3 id="overall-performance-metrics">Overall Performance Metrics</h3>
<p>The model achieves an overall accuracy of 68.18% on the validation set. This is a decent foundation but indicates room for further refinement, especially in distinguishing between expressions that share subtle features. Here is a breakdown of the key performance metrics:</p>
<ul>
<li>Precision: Measures the accuracy of positive predictions. for example, the <code>pleased</code> category shows high precision, indicating that the model reliably identifies this expression.</li>
<li>Recall: Reflects the model&rsquo;s ability to identify all relevant instances of a class. The <code>angry</code> category has a high recall, suggesting that the model effectively captures most of the <code>angry</code> expressions.</li>
<li>F1-Score: Balances precision and recall and is particularly useful in scenarios where class distribution is uneven.</li>
</ul>
<h3 id="confusion-matrix-insights">Confusion Matrix Insights</h3>
<p>the confusion matrix provides a granular view of the model&rsquo;s performance across the different classes. It highlights specific areas where the model performs well and others where it struggles, such as:</p>
<ul>
<li>Misclassifications between <code>alarmed</code> and <code>angry</code> suggest that the model may be conflating these expressions due to their similar features.</li>
<li>The high accuracy in identifying <code>pleased</code> expressions shows that distinct features of this mood are well captured by the model.</li>
</ul>
<h3 id="training-and-validation-losses">Training and Validation Losses</h3>
<p>The training and validation loss plots reveal the learning dynamics over the epochs:</p>
<ul>
<li>A steady decrease in training loss indicates that the model is effectively learning from the training data.</li>
<li>The pattern of validation loss provides insights into the model&rsquo;s generalization ability. Increases in validation loss suggest moments where the model might be overfitting to the training data.</li>
</ul>
<hr>
<h2 id="trying-out-visiontransformers">Trying out VisionTransformers</h2>
<h3 id="data-transformations-for-vision-transformer">Data Transformations for Vision Transformer</h3>
<p>When transitioning from a CNN like <code>ResNet18</code> to a Vision Transformer (ViT), it&rsquo;s essential to evaluate whether the existing preprocessing steps - particulary the data transformations - are suitable for the new model architecture. For ViT , wed must consider their unique handling of image data, which relies on dividing the image into fixed-size patches and understanding global dependencies through self-attention mechanisms.</p>
<p>For this exercise, we will maintain the same transformations we have previously defined.</p>
<p>The decision to retain the initial transformations is based on the principle of consistency and the minimal impact expected by changing model architectures regarding how images are scaled and augmented. The chosen transformations ensure that the images are adequately prepared for the neural network without introducing complexities or distortions that could hinder the learning of global patterns, which are vital for Vision Transformers due to their reliance on self-attention mechanisms.</p>
<p>Additionally, maintaining these transformations allows for a more straightforward comparison between the ResNet18 model and the Vision Transformer model, as any changes in model performance can more confidently be attributed to the architectural differences rather than changes in data preprocessing.</p>
<h3 id="load-pre-trained-vision-transformer-model">Load Pre-Trained Vision Transformer Model</h3>
<p>First, we need to load the ViT model that has been pre-trained on a large dataset. We&rsquo;ll then adapt the classifier <em>head</em> to our needs, which is classifying cat moods into four categories.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the ViT pre-trained model</span>
</span></span><span class="line"><span class="cl"><span class="n">weights_vit</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ViT_B_16_Weights</span><span class="o">.</span><span class="n">DEFAULT</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model_vit</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">vit_b_16</span><span class="p">(</span><span class="n">weights</span> <span class="o">=</span> <span class="n">weights_vit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># print the model structure to understand what needs to be replaced</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">model_vit</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Downloading: &quot;https://download.pytorch.org/models/vit_b_16-c867db91.pth&quot; to /root/.cache/torch/hub/checkpoints/vit_b_16-c867db91.pth
100%|██████████| 330M/330M [00:02&lt;00:00, 124MB/s]


VisionTransformer(
  (conv_proj): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))
  (encoder): Encoder(
    (dropout): Dropout(p=0.0, inplace=False)
    (layers): Sequential(
      (encoder_layer_0): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_1): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_2): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_3): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_4): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_5): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_6): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_7): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_8): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_9): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_10): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_11): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (ln): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
  )
  (heads): Sequential(
    (head): Linear(in_features=768, out_features=1000, bias=True)
  )
)
</code></pre>
<h3 id="freezing-the-encoder-layers">Freezing the Encoder Layers</h3>
<p>Freezing the encoder layers prevents their weights from being updated during training, which means they retain the knowledge they have already gained from ImageNet. We only want to train the classifier that we will modify to our specific task.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># freeze all layers in the model by disabling gradient computation</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">model_vit</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">  <span class="n">param</span><span class="o">.</span><span class="n">requires_grad</span> <span class="o">=</span> <span class="kc">False</span>
</span></span></code></pre></div><h3 id="modify-the-classifier">Modify the Classifier</h3>
<p>The standard ViT model includes a classifier at the end (usually named <code>heads</code> in <code>torchvision</code> models), which is a linear layer designed for the original classification task, e.g. 1000 classes for ImageNet. We will replace this with a new classifier suited for our task (4 cat moods).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># replace the classifier head</span>
</span></span><span class="line"><span class="cl"><span class="c1"># as we saw in the architecture above, the classifier is called `heads`</span>
</span></span><span class="line"><span class="cl"><span class="n">num_features</span> <span class="o">=</span> <span class="n">model_vit</span><span class="o">.</span><span class="n">heads</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">in_features</span>   <span class="c1"># ge tthe number of input features</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace with a new head for len(class_names) = 4</span>
</span></span><span class="line"><span class="cl"><span class="n">model_vit</span><span class="o">.</span><span class="n">heads</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">num_features</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">class_names</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move model to appropriate device</span>
</span></span><span class="line"><span class="cl"><span class="n">model_vit</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>VisionTransformer(
  (conv_proj): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))
  (encoder): Encoder(
    (dropout): Dropout(p=0.0, inplace=False)
    (layers): Sequential(
      (encoder_layer_0): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_1): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_2): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_3): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_4): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_5): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_6): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_7): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_8): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_9): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_10): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_11): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (ln): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
  )
  (heads): Sequential(
    (0): Linear(in_features=768, out_features=4, bias=True)
  )
)
</code></pre>
<h3 id="define-loss-function-and-optimizer">Define Loss Function and Optimizer</h3>
<p>Now, define the loss function and an optimizer. Since we are only training the classifier layer, ensure the optimizer is set to only update the parameters of the classifier.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># optimizer will not change, but still show it here:</span>
</span></span><span class="line"><span class="cl"><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># optimizer - only optimize the classifier parameters</span>
</span></span><span class="line"><span class="cl"><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model_vit</span><span class="o">.</span><span class="n">heads</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span> <span class="o">=</span> <span class="mf">0.001</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="training-loop">Training Loop</h3>
<p>Here, we revisit the training process, adapting our previously established procedures to the Vision Transformer (ViT) model. Much like our approach with Resnet18, we utilize a similar training loop structure to ensure consistency and comparability. the core steps of training - forward pass, loss computation, backward pass, and parameters update - are maintained, but they are now applied to a differently structured model that leverages self-attention mechanisms rather than convolutional layers. This section briefly outlines these steps, focusing on any adjustments specific to the ViT to optimize it for our cat mood classification task.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model_filename</span> <span class="o">=</span> <span class="s1">&#39;vit_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">model_data_filename</span> <span class="o">=</span> <span class="s1">&#39;vit_training_data.pkl&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span> <span class="o">=</span> <span class="n">training_loop</span><span class="p">(</span><span class="n">should_train_vit</span><span class="p">,</span> <span class="n">model_vit</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">,</span> <span class="n">num_epochs</span> <span class="o">=</span> <span class="mi">25</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Running on Google Colab.
Model loaded and set to evaluation mode.
Training data loaded successfully.
</code></pre>
<h3 id="model-evaluation-1">Model Evaluation</h3>
<h4 id="confusion-matrix-1">Confusion Matrix</h4>
<p>The confusion matrix below shows the following results:</p>
<ul>
<li>Class <code>alarmed</code>: moderate confusion with other classes, indicating difficulty in distinguishing <code>alarmed</code> from other moods.</li>
<li>Class <code>angry</code>: high accuracy, showing that `angry is well-recognized, with few misclassifications</li>
<li>Class <code>calm</code>: some confusion, particularly with <code>pleased</code>, suggesting similar features or expressions between these moods that the model confuses</li>
<li>Class <code>pleased</code>: best performance, indicating clear distinguishing features that the model learnes effectively</li>
</ul>
<h3 id="considerations-on-data-quality">Considerations on Data Quality</h3>
<p>Throughout the development and evaluation of our models, it has become evident that the quality of the dataset significantly impacts the classification accuracy. Certain misclassifications observed, such as the confusion between &lsquo;pleased&rsquo; and &lsquo;calm&rsquo; or &lsquo;alarmed&rsquo; and &lsquo;angry,&rsquo; suggest that the labels may not always align perfectly with the visual cues present in the images. This discrepancy can stem from subjective interpretations of cat expressions during labeling. Improving the dataset by refining the labeling process, possibly with the assistance of animal behavior experts, or by curating a more consistently labeled dataset could enhance model performance. Enhancing data quality would help in training more accurate and reliable models, thereby increasing the robustness of the classification outcomes.</p>
<h4 id="classification-report">Classification Report</h4>
<p>From the classification report, we can draw the following conclusions:</p>
<ul>
<li>Class <code>pleased</code> shows the highest precision, indicating a high rate of true positive predictions</li>
<li>Class <code>angry</code> has the highes recall, suggesting effective identification of this mood</li>
<li>Classes <code>angry</code> and <code>pleased</code> show high F1-scores, indicating robust performance.</li>
</ul>
<h4 id="overall-accuracy">Overall Accuracy</h4>
<p>The model achieves and accuracy of 74.55%, which is a solid performance but suggests room for improvement, particularly in reducing misclassifications among less distinct moods.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cm</span><span class="p">,</span> <span class="n">clf_report_df</span> <span class="o">=</span> <span class="n">evaluate_model</span><span class="p">(</span><span class="n">model_vit</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Plot the confusion matrix</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;Blues&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Confusion Matrix&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;True Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Predicted Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print classification report</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Classification Report:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">clf_report_df</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_62_0.png" type="" alt="png"  /></p>
<pre><code>Classification Report:
              precision    recall  f1-score     support
0              0.461538  0.428571  0.444444   14.000000
1              0.815789  0.885714  0.849315   35.000000
2              0.625000  0.535714  0.576923   28.000000
3              0.857143  0.909091  0.882353   33.000000
accuracy       0.745455  0.745455  0.745455    0.745455
macro avg      0.689868  0.689773  0.688259  110.000000
weighted avg   0.734544  0.745455  0.738361  110.000000
</code></pre>
<h3 id="training-and-validation-losses-1">Training and Validation Losses</h3>
<p>The plot of training loss shows a consistent decrease, indicating that the model is effectively learning from the data. The vlaidation loss decreases alongside the training loss but begins to plateau, suggesting that the model might be nearing its learning capacity with the current configuration and dataset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># take the tracked losses from thet training loop</span>
</span></span><span class="line"><span class="cl"><span class="n">plot_losses</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_64_0.png" type="" alt="png"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">visualize_predictions</span><span class="p">(</span><span class="n">model_vit</span><span class="p">,</span> <span class="n">vis_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">class_names</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_65_0.png" type="" alt="png"  /></p>
<h2 id="using-the-model-for-inference-on-new-data">Using the Model for Inference on New Data</h2>
<p>Let&rsquo;s try out the model on new, unseen data. This photo did not come from a dataset, but rather from a friend of mine who wants to know her cat&rsquo;s mood.</p>
<p>For inference, we first need to apply some simple transformation (not augmentation). In this case, we can use our previously defined <code>val_transforms</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">val_transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Resize</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">CenterCrop</span><span class="p">(</span><span class="mi">224</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ConvertImageDtype</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">mean</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                         <span class="n">std</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span></code></pre></div><p>Then, we can define a simple function to open, transform and add a batch dimension to the file we want to pass.</p>
<p>Then, the function will pass the image to the model to make inference. This latter step is done in a way so that the gradients are not computed, and the image data is passed as a forward pass only.</p>
<p>Finally, we will include a de-normalization to the transformed image, so that we can display it along with the predicted label.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Function to classify a single image and display it with the predicted label</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">classify_and_display_image</span><span class="p">(</span><span class="n">image_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">val_transforms</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">image_tensor</span> <span class="o">=</span> <span class="n">transformed_image</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># Add batch dimension</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>  <span class="c1"># Disable gradient calculation</span>
</span></span><span class="line"><span class="cl">        <span class="n">output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">image_tensor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">label</span> <span class="o">=</span> <span class="n">class_names</span><span class="p">[</span><span class="n">predicted</span><span class="o">.</span><span class="n">item</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Convert the transformed image tensor back to a PIL image for display</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">transformed_image</span><span class="o">.</span><span class="n">permute</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># Change from (C, H, W) to (H, W, C)</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">transformed_image</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Denormalize the image</span>
</span></span><span class="line"><span class="cl">    <span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">std</span> <span class="o">*</span> <span class="n">transformed_image</span> <span class="o">+</span> <span class="n">mean</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">transformed_image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Display the image with the predicted label</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">transformed_image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Predicted Label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example usage</span>
</span></span><span class="line"><span class="cl"><span class="n">classify_and_display_image</span><span class="p">(</span><span class="s1">&#39;gato.jpg&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_67_0.png" type="" alt="png"  /></p>
<h2 id="conclusion">Conclusion</h2>
<p>This tutorial guides you through creating a cat expression classifier using convolutional neural networks with ResNet18 and later with a Vision Transformer (ViT). It demonstrates how to apply transfer learning to improve efficiency and accuracy with limited data.</p>
<p>The guide is structured to provide clear steps and practical examples for each phase of the project, from data preprocessing and model training to evaluation. By breaking down complex concepts and processes into manageable parts, it ensures that readers can easily follow along and apply these techniques to their projects.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Election Data Dashboard Pt. 1: Collection and Cleaning</title>
      <link>http://localhost:59413/posts/20240509_election_dash_part_1-data_cleaning/election_dash_part_1-data_cleaning/</link>
      <pubDate>Thu, 09 May 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240509_election_dash_part_1-data_cleaning/election_dash_part_1-data_cleaning/</guid>
      <description>In this project, election data is collected, explored and cleaned. Visualization functions are refactored to be used on a dashboard later on.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="part-1-collecting-and-cleaning-the-data">Part 1: Collecting and Cleaning the Data</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span></code></pre></div><p>Importing the excel files. These files come from the INE (Electoral Institute in Mexico). Then, we can do some data wrangling to filter the relevant data.</p>
<p>The data comes from these two sources:</p>
<ol>
<li>The voter registration data: <a href="https://www.ine.mx/transparencia/datos-abiertos/#/archivo/datos-por-rangos-de-edad-entidad-de-origen-y-sexo-del-padron-electoral-y-lista-nominal-2024">The Open Data page</a></li>
</ol>
<p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/ine_listanominal_page.png" type="" alt="image.png"  /></p>
<ol start="2">
<li>The elections results data: <a href="https://siceen21.ine.mx/downloadzip">Election Results</a></li>
</ol>
<p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/image.png" type="" alt="image.png"  /></p>
<p>Let&rsquo;s explore the data as it comes.</p>
<p>(Note that, unfortunately, the dataframe output did not export correctly to the file displayed here).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_sx</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data/padron_y_ln_sexo.xlsx&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df_sx</span><span class="o">.</span><span class="n">columns</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">df_sx</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>15
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE\nENTIDAD</th>
      <th>NOMBRE\nENTIDAD</th>
      <th>CLAVE\nDISTRITO</th>
      <th>NOMBRE\nDISTRITO</th>
      <th>CLAVE\nMUNICIPIO</th>
      <th>NOMBRE\nMUNICIPIO</th>
      <th>SECCION</th>
      <th>PADRON\nHOMBRES</th>
      <th>PADRON\nMUJERES</th>
      <th>PADRON\nNO BINARIO</th>
      <th>PADRON\nELECTORAL</th>
      <th>LISTA\nHOMBRES</th>
      <th>LISTA\nMUJERES</th>
      <th>LISTA\nNO BINARIO</th>
      <th>LISTA\nNOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>RESIDENTES EXTRANJERO</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>8444</td>
      <td>5756</td>
      <td>0</td>
      <td>14200</td>
      <td>3452</td>
      <td>2577</td>
      <td>0</td>
      <td>6029</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>338.0</td>
      <td>973</td>
      <td>1013</td>
      <td>0</td>
      <td>1986</td>
      <td>970</td>
      <td>1011</td>
      <td>0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>339.0</td>
      <td>895</td>
      <td>954</td>
      <td>0</td>
      <td>1849</td>
      <td>893</td>
      <td>953</td>
      <td>0</td>
      <td>1846</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>340.0</td>
      <td>951</td>
      <td>1001</td>
      <td>0</td>
      <td>1952</td>
      <td>949</td>
      <td>998</td>
      <td>0</td>
      <td>1947</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>341.0</td>
      <td>1174</td>
      <td>1184</td>
      <td>0</td>
      <td>2358</td>
      <td>1172</td>
      <td>1184</td>
      <td>0</td>
      <td>2356</td>
    </tr>
  </tbody>
</table>
</div>
<p>We start by changing the names of the columns for readability.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># change column names</span>
</span></span><span class="line"><span class="cl"><span class="n">col_names_sx</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Clave Entidad&#39;</span><span class="p">,</span> <span class="s1">&#39;Nombre Entidad&#39;</span><span class="p">,</span> <span class="s1">&#39;Clave Distrito&#39;</span><span class="p">,</span> <span class="s1">&#39;Nombre Distrito&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;Clave Municipio&#39;</span><span class="p">,</span> <span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> <span class="s1">&#39;Seccion&#39;</span><span class="p">,</span> <span class="s1">&#39;Padron Hombre&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;Padron Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Padron No Binario&#39;</span><span class="p">,</span> <span class="s1">&#39;Padron Electoral&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista No Binario&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_sx</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">col_names_sx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_sx</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Clave Entidad</th>
      <th>Nombre Entidad</th>
      <th>Clave Distrito</th>
      <th>Nombre Distrito</th>
      <th>Clave Municipio</th>
      <th>Nombre Municipio</th>
      <th>Seccion</th>
      <th>Padron Hombre</th>
      <th>Padron Mujeres</th>
      <th>Padron No Binario</th>
      <th>Padron Electoral</th>
      <th>Lista Hombres</th>
      <th>Lista Mujeres</th>
      <th>Lista No Binario</th>
      <th>Lista Nominal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>RESIDENTES EXTRANJERO</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>8444</td>
      <td>5756</td>
      <td>0</td>
      <td>14200</td>
      <td>3452</td>
      <td>2577</td>
      <td>0</td>
      <td>6029</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>338.0</td>
      <td>973</td>
      <td>1013</td>
      <td>0</td>
      <td>1986</td>
      <td>970</td>
      <td>1011</td>
      <td>0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>339.0</td>
      <td>895</td>
      <td>954</td>
      <td>0</td>
      <td>1849</td>
      <td>893</td>
      <td>953</td>
      <td>0</td>
      <td>1846</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>340.0</td>
      <td>951</td>
      <td>1001</td>
      <td>0</td>
      <td>1952</td>
      <td>949</td>
      <td>998</td>
      <td>0</td>
      <td>1947</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>341.0</td>
      <td>1174</td>
      <td>1184</td>
      <td>0</td>
      <td>2358</td>
      <td>1172</td>
      <td>1184</td>
      <td>0</td>
      <td>2356</td>
    </tr>
  </tbody>
</table>
</div>
<p>Verify the data types in the dataframe and whether there are null values</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_sx</span><span class="o">.</span><span class="n">dtypes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_sx</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span>
</span></span></code></pre></div><pre><code>Clave Entidad         object
Nombre Entidad        object
Clave Distrito       float64
Nombre Distrito       object
Clave Municipio      float64
Nombre Municipio      object
Seccion              float64
Padron Hombre          int64
Padron Mujeres         int64
Padron No Binario      int64
Padron Electoral       int64
Lista Hombres          int64
Lista Mujeres          int64
Lista No Binario       int64
Lista Nominal          int64
dtype: object
Clave Entidad        0
Nombre Entidad       1
Clave Distrito       1
Nombre Distrito      1
Clave Municipio      1
Nombre Municipio     1
Seccion              1
Padron Hombre        0
Padron Mujeres       0
Padron No Binario    0
Padron Electoral     0
Lista Hombres        0
Lista Mujeres        0
Lista No Binario     0
Lista Nominal        0
dtype: int64
</code></pre>
<p>There are indeed some null values in some of the columns. Since the null values live in rows that we will not need, i.e. we will filter the rows to include only the values for the State of &ldquo;Quintana Roo&rdquo;, we don&rsquo;t need to bother in removing or doing any data gymnastics to those null values.</p>
<p>Let&rsquo;s filter the data we need now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># filter rows by state quintana roo</span>
</span></span><span class="line"><span class="cl"><span class="n">df_sx_qroo</span> <span class="o">=</span> <span class="n">df_sx</span><span class="p">[</span><span class="n">df_sx</span><span class="p">[</span><span class="s1">&#39;Nombre Entidad&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select columns for padron electoral</span>
</span></span><span class="line"><span class="cl"><span class="n">df_pe_sx_qroo</span> <span class="o">=</span> <span class="n">df_sx_qroo</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,:</span><span class="mi">11</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select columns for lista nominal</span>
</span></span><span class="line"><span class="cl"><span class="n">cols_to_drop</span> <span class="o">=</span> <span class="n">df_sx_qroo</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">7</span><span class="p">:</span><span class="mi">11</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span> <span class="o">=</span> <span class="n">df_sx_qroo</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="n">cols_to_drop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Clave Entidad</th>
      <th>Nombre Entidad</th>
      <th>Clave Distrito</th>
      <th>Nombre Distrito</th>
      <th>Clave Municipio</th>
      <th>Nombre Municipio</th>
      <th>Seccion</th>
      <th>Lista Hombres</th>
      <th>Lista Mujeres</th>
      <th>Lista No Binario</th>
      <th>Lista Nominal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>2061</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>2141</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>1963</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>2426</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>990</td>
    </tr>
  </tbody>
</table>
</div>
<h2 id="election-results">Election Results.</h2>
<p>First, we will work with the data related to the election results.</p>
<p>Let&rsquo;s load all the files separately (as they were available from the source).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the files</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2009/2009_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2012/2012_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2015/2015_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2018/2018_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2021/2021_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># filter rows by state quintana roo</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">df_re_2009</span><span class="p">[</span><span class="n">df_re_2009</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">df_re_2012</span><span class="p">[</span><span class="n">df_re_2012</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">df_re_2015</span><span class="p">[</span><span class="n">df_re_2015</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">df_re_2018</span><span class="p">[</span><span class="n">df_re_2018</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">df_re_2021</span><span class="p">[</span><span class="n">df_re_2021</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO_FEDERAL</th>
      <th>CABECERA_DISTRITAL_FEDERAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PVEM_PT</th>
      <th>PVEM_MORENA</th>
      <th>PT_MORENA</th>
      <th>CAND_IND1</th>
      <th>CAND_IND2</th>
      <th>CAND_IND3</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>49016</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>0</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>2</td>
    </tr>
    <tr>
      <th>49017</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3.0</td>
      <td>180.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>1097.0</td>
      <td>2160</td>
    </tr>
    <tr>
      <th>49018</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3.0</td>
      <td>103.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.0</td>
      <td>30.0</td>
      <td>1083.0</td>
      <td>2159</td>
    </tr>
    <tr>
      <th>49019</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3.0</td>
      <td>91.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>6.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>46.0</td>
      <td>1169.0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>49020</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4.0</td>
      <td>113.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>6.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>38.0</td>
      <td>1377.0</td>
      <td>2371</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 34 columns</p>
</div>
<p>We can already see that there are some columns that are not needed. These columns, in particular, are the independent candidate columns, and they are effectively empty. These columns&rsquo; names all begin with <code>CAND</code>. We can use that to quickly drop all of them.</p>
<p>We can also drop the null value included in the municipality (<code>MUNICIPIO</code>) columns, which leaked after filtering by the State before. We need to drop this one too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define a list of all the dataframes to loop over them below</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">df_re_2021_qroo</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># drop independent candidates and any rows with NaN in the MUNICIPIO columns</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">df_re_all_years</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># drop rows where &#39;MUNICIPIO&#39; is NaN</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">],</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># select columns that begin with &#34;CAND&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cols_cand_ind</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;CAND&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># drop the identified columns</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">cols_cand_ind</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO_FEDERAL</th>
      <th>CABECERA_DISTRITAL_FEDERAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PAN_PRD</th>
      <th>PRI_PRD</th>
      <th>PVEM_PT_MORENA</th>
      <th>PVEM_PT</th>
      <th>PVEM_MORENA</th>
      <th>PT_MORENA</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>49017</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3.0</td>
      <td>180.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>1097.0</td>
      <td>2160</td>
    </tr>
    <tr>
      <th>49018</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3.0</td>
      <td>103.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>30.0</td>
      <td>1083.0</td>
      <td>2159</td>
    </tr>
    <tr>
      <th>49019</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3.0</td>
      <td>91.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>12.0</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>6.0</td>
      <td>1.0</td>
      <td>46.0</td>
      <td>1169.0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>49020</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4.0</td>
      <td>113.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>15.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>6.0</td>
      <td>1.0</td>
      <td>38.0</td>
      <td>1377.0</td>
      <td>2371</td>
    </tr>
    <tr>
      <th>49021</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>186</td>
      <td>2.0</td>
      <td>37.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>11.0</td>
      <td>7.0</td>
      <td>0.0</td>
      <td>23.0</td>
      <td>650.0</td>
      <td>972</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 31 columns</p>
</div>
<p>Now we can extract the political party names from each of the dataframes. At each election year, the parties may be different, and also there are alliances which make this somewhat more complicated.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># List to store party names lists for each DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">df_re_all_years</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># Empty list to store party names for current DataFrame</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Get a list of column names</span>
</span></span><span class="line"><span class="cl">    <span class="n">column_names</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Find the indices of &#34;CASILLAS&#34; and &#34;NUM_VOTOS_CAN_NREG&#34; (handle potential errors)</span>
</span></span><span class="line"><span class="cl">        <span class="n">casillas_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;CASILLAS&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">num_votos_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;NUM_VOTOS_CAN_NREG&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Extract party names between the indices (avoid out-of-bounds)</span>
</span></span><span class="line"><span class="cl">        <span class="n">party_names</span> <span class="o">=</span> <span class="n">column_names</span><span class="p">[</span><span class="n">casillas_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="nb">min</span><span class="p">(</span><span class="n">num_votos_index</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">column_names</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Handle cases where &#34;CASILLAS&#34; or &#34;NUM_VOTOS_CAN_NREG&#34; might not exist</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">WARNING: &#39;CASILLAS&#39; or &#39;NUM_VOTOS_CAN_NREG&#39; not found in DataFrame&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Append the party names list for this DataFrame</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names_per_df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">party_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span>
</span></span></code></pre></div><pre><code>[['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'CONV',
  'NVA_ALIANZA',
  'PSD',
  'PRIMERO_MEXICO',
  'SALVEMOS_MEXICO'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NVA_ALIANZA',
  'PRI_PVEM',
  'PRD_PT_MC',
  'PRD_PT',
  'PRD_MC',
  'PT_MC'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NVA_ALIANZA',
  'MORENA',
  'PH',
  'ES',
  'PAN_NVA_ALIANZA',
  'PRI_PVEM',
  'PRD_PT'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NA',
  'MORENA',
  'ES',
  'PAN_PRD_MC',
  'PAN_PRD',
  'PAN_MC',
  'PRD_MC',
  'PRI_PVEM_NA',
  'PRI_PVEM',
  'PRI_NA',
  'PVEM_NA',
  'PT_MORENA_ES',
  'PT_MORENA',
  'PT_ES',
  'MORENA_ES'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'MORENA',
  'PES',
  'RSP',
  'FXM',
  'PAN_PRI_PRD',
  'PAN_PRI',
  'PAN_PRD',
  'PRI_PRD',
  'PVEM_PT_MORENA',
  'PVEM_PT',
  'PVEM_MORENA',
  'PT_MORENA']]
</code></pre>
<p>Just to get a feel of the data, we can see how many rows there are in each of the dataframes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2009 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2009_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2012 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2012_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2015 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2015_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2018 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2021 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2021_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span></code></pre></div><pre><code>Number of lines in the 2009 election dataframe:  729
Number of lines in the 2012 election dataframe:  831
Number of lines in the 2015 election dataframe:  938
Number of lines in the 2018 election dataframe:  939
Number of lines in the 2021 election dataframe:  1033
</code></pre>
<h3 id="preliminary-visualization">Preliminary Visualization</h3>
<p>Visualizaremos la informacion agregando los datos por año. De esta manera, tendremos un historial de tiempo <em>por cada municipio</em>, en el cual podemos ver el historial de los resultados de cada partido politico en cada municipio.</p>
<p>Here we visualize the information by aggregating the data per year. In this way, we will have a time history <em>per municipality (municipio)</em>, where we can see the history of the results for each political party in each municipality.</p>
<h3 id="group-by-political-party">Group by Political Party</h3>
<p>Para un analisis mas compacto, podemos agrupar los partidos politicos incluyendo sus alianzas. De este modo, por ejemplo, tendriamos que:</p>
<p>For a more compact analysis, we can group the political parties including the alliances. In this we, we would have, for example:</p>
<pre tabindex="0"><code>&#39;PAN&#39;: [&#39;PAN&#39;, &#39;PAN_NVA_ALIANZA&#39;, &#39;PAN_PRD_MC&#39;, &#39;PAN_PRD&#39;, &#39;PAN_MC&#39;, &#39;PAN_PRI_PRD&#39;, &#39;PAN_PRI&#39;]
</code></pre><p>Which means that the party <code>PAN</code> would also include the alliances with the other parties named <code>Nueva Alianza</code>, an alliance with <code>PRD</code> named <code>PAN_PRD</code>, etc.</p>
<h5 id="note">NOTE</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># write a dictionary with the alliances per party</span>
</span></span><span class="line"><span class="cl"><span class="n">alliance_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_NVA_ALIANZA&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_NA&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_PVEM_NA&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD_PT&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_NA&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD_PT_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRD_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_MORENA_ES&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA_ES&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_PT_MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PSD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PH&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;RSP&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;FXM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main_parties</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="s1">&#39;PAN&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="s1">&#39;MC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PSD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PH&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;RSP&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;FXM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more as needed for each unique party or alliance...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="vote-distribution-among-alliances">Vote Distribution Among Alliances</h3>
<p>The way this works is that the votes for any alliance are equally divided amongs the parties that conform the alliance.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO</th>
      <th>CABECERA_DISTRITAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PRI_NA</th>
      <th>PVEM_NA</th>
      <th>PT_MORENA_ES</th>
      <th>PT_MORENA</th>
      <th>PT_ES</th>
      <th>MORENA_ES</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>48293</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>1</td>
      <td>BENITO JUAREZ</td>
      <td>962</td>
      <td>3</td>
      <td>79.0</td>
      <td>...</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>18.0</td>
      <td>10.0</td>
      <td>0.0</td>
      <td>7.0</td>
      <td>9.0</td>
      <td>25.0</td>
      <td>879.0</td>
      <td>1574</td>
    </tr>
    <tr>
      <th>48294</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3</td>
      <td>279.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>50.0</td>
      <td>1275.0</td>
      <td>2116</td>
    </tr>
    <tr>
      <th>48295</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3</td>
      <td>190.0</td>
      <td>...</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>30.0</td>
      <td>1171.0</td>
      <td>2117</td>
    </tr>
    <tr>
      <th>48296</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3</td>
      <td>237.0</td>
      <td>...</td>
      <td>6.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>64.0</td>
      <td>1227.0</td>
      <td>1919</td>
    </tr>
    <tr>
      <th>48297</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4</td>
      <td>229.0</td>
      <td>...</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>7.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>52.0</td>
      <td>1446.0</td>
      <td>2308</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 34 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">alliance_votes_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">distribute_alliance_votes</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">alliances</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ensure that party columns exist in the dataframe, add them if the do not</span>
</span></span><span class="line"><span class="cl">    <span class="n">all_parties</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">party</span> <span class="k">for</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">all_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># distribute the votes from each alliance to the respective parties</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">alliance</span><span class="p">,</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">alliance</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">split_votes</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">alliance</span><span class="p">]</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">split_votes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># optionally remove the alliance columns</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">alliances</span><span class="o">.</span><span class="n">keys</span><span class="p">()),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">errors</span> <span class="o">=</span> <span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># apply the vote split function to all the dataframes:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2021_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO</th>
      <th>CABECERA_DISTRITAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PT</th>
      <th>MC</th>
      <th>NA</th>
      <th>MORENA</th>
      <th>ES</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
      <th>NVA_ALIANZA</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>48293</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>1</td>
      <td>BENITO JUAREZ</td>
      <td>962</td>
      <td>3</td>
      <td>80.166667</td>
      <td>...</td>
      <td>64.000000</td>
      <td>26.166667</td>
      <td>14.166667</td>
      <td>525.500000</td>
      <td>39.500000</td>
      <td>9.0</td>
      <td>25.0</td>
      <td>879.0</td>
      <td>1574</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48294</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3</td>
      <td>281.000000</td>
      <td>...</td>
      <td>42.333333</td>
      <td>48.500000</td>
      <td>14.666667</td>
      <td>405.333333</td>
      <td>26.333333</td>
      <td>4.0</td>
      <td>50.0</td>
      <td>1275.0</td>
      <td>2116</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48295</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3</td>
      <td>192.000000</td>
      <td>...</td>
      <td>44.833333</td>
      <td>61.000000</td>
      <td>14.166667</td>
      <td>445.833333</td>
      <td>24.333333</td>
      <td>1.0</td>
      <td>30.0</td>
      <td>1171.0</td>
      <td>2117</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48296</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3</td>
      <td>240.000000</td>
      <td>...</td>
      <td>45.833333</td>
      <td>52.500000</td>
      <td>24.166667</td>
      <td>444.833333</td>
      <td>19.333333</td>
      <td>0.0</td>
      <td>64.0</td>
      <td>1227.0</td>
      <td>1919</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48297</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4</td>
      <td>231.500000</td>
      <td>...</td>
      <td>43.333333</td>
      <td>62.000000</td>
      <td>19.500000</td>
      <td>502.333333</td>
      <td>24.333333</td>
      <td>0.0</td>
      <td>52.0</td>
      <td>1446.0</td>
      <td>2308</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 23 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># list to store party names lists for each DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">df_re_all_years</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># empty list to store party names for current DataFrame</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># get a list of column names</span>
</span></span><span class="line"><span class="cl">    <span class="n">column_names</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># find the indices of &#34;CASILLAS&#34; and &#34;NUM_VOTOS_CAN_NREG&#34; (handle potential errors)</span>
</span></span><span class="line"><span class="cl">        <span class="n">casillas_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;CASILLAS&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">num_votos_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;NUM_VOTOS_CAN_NREG&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># extract party names between the indices (avoid out-of-bounds)</span>
</span></span><span class="line"><span class="cl">        <span class="n">party_names</span> <span class="o">=</span> <span class="n">column_names</span><span class="p">[</span><span class="n">casillas_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="nb">min</span><span class="p">(</span><span class="n">num_votos_index</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">column_names</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># handle cases where &#34;CASILLAS&#34; or &#34;NUM_VOTOS_CAN_NREG&#34; might not exist</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">WARNING: &#39;CASILLAS&#39; or &#39;NUM_VOTOS_CAN_NREG&#39; not found in DataFrame&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># append the party names list for this DataFrame</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names_per_df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">party_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span>
</span></span></code></pre></div><pre><code>[['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'CONV',
  'NVA_ALIANZA',
  'PSD',
  'PRIMERO_MEXICO',
  'SALVEMOS_MEXICO'],
 ['PAN', 'PRI', 'PRD', 'PVEM', 'PT', 'MC', 'NVA_ALIANZA'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NVA_ALIANZA',
  'MORENA',
  'PH',
  'ES'],
 ['PAN', 'PRI', 'PRD', 'PVEM', 'PT', 'MC', 'NA', 'MORENA', 'ES'],
 ['PAN', 'PRI', 'PRD', 'PVEM', 'PT', 'MC', 'MORENA', 'PES', 'RSP', 'FXM']]
</code></pre>
<h2 id="visualizations">Visualizations</h2>
<h3 id="time-history">Time History</h3>
<p>Here we develop a function to plot the historical number of votes per party. Each plot will show the data for a selected municipality. The idea is to have an interactive dashboard where one could easily select these parameters and access the plot.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># function for plotting the time history, given a eyar, and a municipality</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">election_years</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Plots an interactive line plot with filled areas to zero for each main party and its alliances,
</span></span></span><span class="line"><span class="cl"><span class="s2">    in a selected municipality across elections using Plotly Express. This approximates the non-stacked
</span></span></span><span class="line"><span class="cl"><span class="s2">    area plot behavior of the original function.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># initialize dictionary to hold vote totals for main parties</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_main_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">election_years</span><span class="p">)</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># loop through each DataFrame and year</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">election_years</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># filter the DataFrame for the selected municipality</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">selected_municipality</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">filtered_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1"># loop through each main party and its alliances</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># aggregate votes for each party in the alliance, adding to the main party&#39;s total</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">votes_by_main_party</span><span class="p">[</span><span class="n">party</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">filtered_df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># prepare the data for plotting</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_for_plotting</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">main_party</span><span class="p">,</span> <span class="n">votes</span> <span class="ow">in</span> <span class="n">votes_by_main_party</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">year</span><span class="p">,</span> <span class="n">vote</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">election_years</span><span class="p">,</span> <span class="n">votes</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">data_for_plotting</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;Election Year&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">,</span> <span class="s1">&#39;Total Votes&#39;</span><span class="p">:</span> <span class="n">vote</span><span class="p">,</span> <span class="s1">&#39;Party&#39;</span><span class="p">:</span> <span class="n">main_party</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_plot</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data_for_plotting</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the plot</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">df_plot</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">line_shape</span><span class="o">=</span><span class="s1">&#39;linear&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;Total Votes per Party (Including Alliances), in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># customize the layout</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">2.5</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;tozeroy&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_title</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">yaxis_title</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend_title</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">font</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="s2">&#34;Arial, sans-serif&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;#333&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                      <span class="n">hovermode</span><span class="o">=</span><span class="s1">&#39;x unified&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                          <span class="n">orientation</span> <span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">yanchor</span> <span class="o">=</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.6</span><span class="p">,</span> <span class="c1"># adjuist to fit layout</span>
</span></span><span class="line"><span class="cl">                          <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">                      <span class="p">))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span></code></pre></div><p>Let&rsquo;s look at an example, by calling the municipality called <code>Benito Juarez</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">municipality</span> <span class="o">=</span> <span class="s1">&#39;BENITO JUAREZ&#39;</span>   <span class="c1"># as an example</span>
</span></span><span class="line"><span class="cl"><span class="n">election_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">2022</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="n">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span><span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">election_years</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_33_2.png" type="" alt="image.png"  /></p>
<h3 id="pie-chart">Pie Chart</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_election_pie_chart</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># mapping years to their indices in the list of dataframes</span>
</span></span><span class="line"><span class="cl">    <span class="n">year_to_index</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2009</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2012</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2015</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2018</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2021</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">selected_year_index</span> <span class="o">=</span> <span class="n">year_to_index</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">selected_year_index</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No data available for the year </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># extract the dataframe for the selected year</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_selected_year</span> <span class="o">=</span> <span class="n">df_re_all_years</span><span class="p">[</span><span class="n">selected_year_index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># filtering the df for the selected municipality</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_municipality</span> <span class="o">=</span> <span class="n">df_selected_year</span><span class="p">[</span><span class="n">df_selected_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">empty</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;No data available for </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># aggregating votes for each main party</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_municipality</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the pie chart</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_votes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span> <span class="s1">&#39;Votes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df_votes</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="s1">&#39;Votes&#39;</span><span class="p">,</span> <span class="n">names</span> <span class="o">=</span> <span class="s1">&#39;Party&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                 <span class="n">title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Vote Distribution in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update the traces to remove the text labels</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">textinfo</span><span class="o">=</span><span class="s1">&#39;none&#39;</span><span class="p">,</span> <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;label+percent&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot_election_pie_chart</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">)</span>      
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_35_0.png" type="" alt="image.png"  /></p>
<h2 id="choropleth">Choropleth</h2>
<p>Now we can build some choropleths. To do this, we collected a <code>geojson</code> file for the municipalities in the State of Quintana Roo, Mexico.</p>
<p>The file can be found <a href="https://github.com/PhantomInsights/mexico-geojson">in this GitHub repository</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define some colors for each party</span>
</span></span><span class="line"><span class="cl"><span class="n">party_colors</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="s1">&#39;#0052CC&#39;</span><span class="p">,</span>        <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="s1">&#39;#013369&#39;</span><span class="p">,</span>        <span class="c1"># Dark Blue</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="s1">&#39;#FFD700&#39;</span><span class="p">,</span>        <span class="c1"># Gold</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="s1">&#39;#00A550&#39;</span><span class="p">,</span>       <span class="c1"># Green</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="s1">&#39;#E00000&#39;</span><span class="p">,</span>         <span class="c1"># Red</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="s1">&#39;#FF7F00&#39;</span><span class="p">,</span>         <span class="c1"># Orange</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="s1">&#39;#6813D5&#39;</span><span class="p">,</span>     <span class="c1"># Purple</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="s1">&#39;#00AAAA&#39;</span><span class="p">,</span> <span class="c1"># Teal</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="s1">&#39;#555555&#39;</span><span class="p">,</span>        <span class="c1"># Dark Gray</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="s1">&#39;#9C2AA0&#39;</span><span class="p">,</span>  <span class="c1"># Magenta</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="s1">&#39;#6CACE4&#39;</span><span class="p">,</span> <span class="c1"># Light Blue</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="s1">&#39;#F0A3A3&#39;</span><span class="p">,</span>         <span class="c1"># Pink</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="s1">&#39;#2AD2C9&#39;</span><span class="p">,</span>         <span class="c1"># Cyan</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="s1">&#39;#F68B1F&#39;</span><span class="p">,</span>         <span class="c1"># Amber</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="s1">&#39;#93C572&#39;</span><span class="p">,</span>        <span class="c1"># Lime</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="s1">&#39;#CC317C&#39;</span><span class="p">,</span>        <span class="c1"># Rose</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="s1">&#39;#8B4513&#39;</span><span class="p">,</span>        <span class="c1"># SaddleBrown</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more entries for each party as needed...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Now, for this map to work, we need the data in the <code>geojson</code> file to coincide exactly with the names of the municipalities in the dataframes.</p>
<p>First, we explore the names of the municipalities in the dataframe for the recent elections, since this is the dataframe that contains all of the municipalities, including the most recently incorporated (i.e. in earlier elections, some of these municipalities did not exist).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># from aggregate df, we pull the latest one, and see the unique names for the column &#39;MUNICIPIO&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>array(['COZUMEL', 'SOLIDARIDAD', 'TULUM', 'ISLA MUJERES',
       'LAZARO CARDENAS', 'BENITO JUAREZ', 'FELIPE CARRILLO PUERTO',
       'JOSE MARIA MORELOS', 'OTHON P. BLANCO', 'BACALAR',
       'PUERTO MORELOS'], dtype=object)
</code></pre>
<p>Likewise, we explore the <code>goejson</code> to see how the municipalities are named. Let&rsquo;s explore the <code>geojson</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Load the GeoJSON file</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_file_path</span> <span class="o">=</span> <span class="s1">&#39;utils/mexico-geojson/2022/states/Quintana Roo.json&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">geojson_file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">geojson_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract &#34;NOM_MUN&#34; values</span>
</span></span><span class="line"><span class="cl"><span class="n">nom_mun_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">feature</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">][</span><span class="s1">&#39;NOMGEO&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">geojson_data</span><span class="p">[</span><span class="s1">&#39;features&#39;</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print the list to see what values are stored</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">nom_mun_list</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>['Felipe Carrillo Puerto', 'Cozumel', 'Isla Mujeres', 'Othón P. Blanco', 'Solidaridad', 'Puerto Morelos', 'Benito Juárez', 'José María Morelos', 'Lázaro Cárdenas', 'Tulum', 'Bacalar']
</code></pre>
<h5 id="note-1">NOTE</h5>
<p>After trying a few things out, the <code>geojson</code> was not working as intended. This was due to a difference in the name encoding. To fix this, we adjusted the <code>geojson</code> file in the property <code>properties.NOMGEO</code>/</p>
<p>We will do this programmatically, and save a new file with the new names.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Define a mapping of GeoJSON names to desired names, based on your DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is a manual step but only needs to be done once</span>
</span></span><span class="line"><span class="cl"><span class="n">name_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Felipe Carrillo Puerto&#39;</span><span class="p">:</span> <span class="s1">&#39;FELIPE CARRILLO PUERTO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Cozumel&#39;</span><span class="p">:</span> <span class="s1">&#39;COZUMEL&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Isla Mujeres&#39;</span><span class="p">:</span> <span class="s1">&#39;ISLA MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Othón P. Blanco&#39;</span><span class="p">:</span> <span class="s1">&#39;OTHON P. BLANCO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Solidaridad&#39;</span><span class="p">:</span> <span class="s1">&#39;SOLIDARIDAD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Puerto Morelos&#39;</span><span class="p">:</span> <span class="s1">&#39;PUERTO MORELOS&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Benito Juárez&#39;</span><span class="p">:</span> <span class="s1">&#39;BENITO JUAREZ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;José María Morelos&#39;</span><span class="p">:</span> <span class="s1">&#39;JOSE MARIA MORELOS&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Lázaro Cárdenas&#39;</span><span class="p">:</span> <span class="s1">&#39;LAZARO CARDENAS&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Tulum&#39;</span><span class="p">:</span> <span class="s1">&#39;TULUM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Bacalar&#39;</span><span class="p">:</span> <span class="s1">&#39;BACALAR&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Iterate over each feature and adjust the names</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">geojson_data</span><span class="p">[</span><span class="s1">&#39;features&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="n">original_name</span> <span class="o">=</span> <span class="n">feature</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">][</span><span class="s1">&#39;NOMGEO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">original_name</span> <span class="ow">in</span> <span class="n">name_mapping</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">feature</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">][</span><span class="s1">&#39;NOMGEO&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">name_mapping</span><span class="p">[</span><span class="n">original_name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#------------------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------- Save the modified GeoJSON to a new file ----------------#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#------------------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># modified_geojson_file_path = &#39;qroo_geojson_2022.json&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># with open(modified_geojson_file_path, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     json.dump(geojson_data, file, ensure_ascii=False, indent=4)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create year mapping dictionary</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Mapping each election year to its corresponding dataframe</span>
</span></span><span class="line"><span class="cl"><span class="n">df_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2009</span><span class="p">:</span> <span class="n">df_re_2009_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2012</span><span class="p">:</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2015</span><span class="p">:</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2018</span><span class="p">:</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2021</span><span class="p">:</span> <span class="n">df_re_2021_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the new geojson file here</span>
</span></span><span class="line"><span class="cl"><span class="n">election_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">2022</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_file_path</span> <span class="o">=</span> <span class="s1">&#39;data/shapefiles/qroo_geojson_2022.json&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">geojson_file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">geojson_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="choropleth-for-winning-party-per-municipality">Choropleth for Winning Party per Municipality</h3>
<p>Now let&rsquo;s create a function to generate the choropleth. We note that for each election year, there will be a different municipality map. Therefore, in some years, some municipalities will be missing altogether.</p>
<p>This choropleth will show the winning party per municipality, at a given year.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_winning_party_per_year_choropleth</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">df_dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># This function now handles a single year&#39;s DataFrame and generates a choropleth map for that year.</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_year</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">selected_year</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">winning_party_by_municipality</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">municipality</span> <span class="ow">in</span> <span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># for main_party, parties in alliance_mapping.items():</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#     for party in parties:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#         if party in df_year.columns:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#             votes_by_party[main_party] += df_year.loc[df_year[&#39;MUNICIPIO&#39;] == municipality, party].sum()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_year</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_year</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="n">winning_party</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">votes_by_party</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">winning_party_by_municipality</span><span class="p">[</span><span class="n">municipality</span><span class="p">]</span> <span class="o">=</span> <span class="n">winning_party</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">winning_party_by_municipality</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;Partido Ganador&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span><span class="p">[</span><span class="s1">&#39;Year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selected_year</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_map</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Partido Ganador&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_map</span><span class="o">=</span><span class="n">party_colors</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Winning Party per Municipality, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>  <span class="c1"># Return the figure for this specific year</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example of how to call the function for a single year</span>
</span></span><span class="line"><span class="cl"><span class="n">year</span> <span class="o">=</span> <span class="mi">2021</span>
</span></span><span class="line"><span class="cl"><span class="n">df_year</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">year</span><span class="p">]</span>  <span class="c1"># Assuming df_dict is defined with years as keys</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span> <span class="o">=</span> <span class="n">create_winning_party_per_year_choropleth</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">df_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_47_1.png" type="" alt="image.png"  /></p>
<h3 id="maps-showing-the-gender-proportion-per-municipality">Maps Showing the Gender Proportion per Municipality</h3>
<p>For this choropleth, we will need the voter registration dataframe, so we call it again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>Index(['Clave Entidad', 'Nombre Entidad', 'Clave Distrito', 'Nombre Distrito',
       'Clave Municipio', 'Nombre Municipio', 'Seccion', 'Lista Hombres',
       'Lista Mujeres', 'Lista No Binario', 'Lista Nominal'],
      dtype='object')
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Clave Entidad</th>
      <th>Nombre Entidad</th>
      <th>Clave Distrito</th>
      <th>Nombre Distrito</th>
      <th>Clave Municipio</th>
      <th>Nombre Municipio</th>
      <th>Seccion</th>
      <th>Lista Hombres</th>
      <th>Lista Mujeres</th>
      <th>Lista No Binario</th>
      <th>Lista Nominal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>2061</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>2141</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>1963</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>2426</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>990</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Calculate the percentage of women registered voters</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje Mujeres&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Porcentaje Mujeres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">Plasma</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Percentage of Women in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_51_0.png" type="" alt="image.png"  /></p>
<h2 id="map-grouped-by-age-range">Map Grouped by Age Range</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_age</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data/padron_y_ln_rango_edad.xlsx&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df_age</span><span class="o">.</span><span class="n">columns</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">df_age</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>87
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE\nENTIDAD</th>
      <th>NOMBRE\nENTIDAD</th>
      <th>CLAVE\nDISTRITO</th>
      <th>NOMBRE\nDISTRITO</th>
      <th>CLAVE\nMUNICIPIO</th>
      <th>NOMBRE\nMUNICIPIO</th>
      <th>SECCION</th>
      <th>PADRON\nHOMBRES</th>
      <th>PADRON\nMUJERES</th>
      <th>PADRON\nNO BINARIO</th>
      <th>...</th>
      <th>LISTA_50_54_NOBINARIO</th>
      <th>LISTA_55_59_HOMBRES</th>
      <th>LISTA_55_59_MUJERES</th>
      <th>LISTA_55_59_NOBINARIO</th>
      <th>LISTA_60_64_HOMBRES</th>
      <th>LISTA_60_64_MUJERES</th>
      <th>LISTA_60_64_NOBINARIO</th>
      <th>LISTA_65_Y_MAS_HOMBRES</th>
      <th>LISTA_65_Y_MAS_MUJERES</th>
      <th>LISTA_65_Y_MAS_NOBINARIO</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>RESIDENTES EXTRANJERO</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>8444</td>
      <td>5756</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>355.0</td>
      <td>234.0</td>
      <td>0.0</td>
      <td>180.0</td>
      <td>149.0</td>
      <td>0.0</td>
      <td>206.0</td>
      <td>139.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>338.0</td>
      <td>973</td>
      <td>1013</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>72.0</td>
      <td>0.0</td>
      <td>39.0</td>
      <td>37.0</td>
      <td>0.0</td>
      <td>88.0</td>
      <td>109.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>339.0</td>
      <td>895</td>
      <td>954</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>55.0</td>
      <td>60.0</td>
      <td>0.0</td>
      <td>38.0</td>
      <td>43.0</td>
      <td>0.0</td>
      <td>88.0</td>
      <td>97.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>340.0</td>
      <td>951</td>
      <td>1001</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>66.0</td>
      <td>0.0</td>
      <td>46.0</td>
      <td>48.0</td>
      <td>0.0</td>
      <td>103.0</td>
      <td>83.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>341.0</td>
      <td>1174</td>
      <td>1184</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>59.0</td>
      <td>60.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>62.0</td>
      <td>0.0</td>
      <td>110.0</td>
      <td>105.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 87 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_age</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['CLAVE\nENTIDAD', 'NOMBRE\nENTIDAD', 'CLAVE\nDISTRITO',
       'NOMBRE\nDISTRITO', 'CLAVE\nMUNICIPIO', 'NOMBRE\nMUNICIPIO', 'SECCION',
       'PADRON\nHOMBRES', 'PADRON\nMUJERES', 'PADRON\nNO BINARIO',
       'PADRON\nELECTORAL', 'LISTA\nHOMBRES', 'LISTA\nMUJERES',
       'LISTA\nNO BINARIO', 'LISTA\nNOMINAL', 'PADRON_18_HOMBRES',
       'PADRON_18_MUJERES', 'PADRON_18_NOBINARIO', 'PADRON_19_HOMBRES',
       'PADRON_19_MUJERES', 'PADRON_19_NOBINARIO', 'PADRON_20_24_HOMBRES',
       'PADRON_20_24_MUJERES', 'PADRON_20_24_NOBINARIO',
       'PADRON_25_29_HOMBRES', 'PADRON_25_29_MUJERES',
       'PADRON_25_29_NOBINARIO', 'PADRON_30_34_HOMBRES',
       'PADRON_30_34_MUJERES', 'PADRON_30_34_NOBINARIO',
       'PADRON_35_39_HOMBRES', 'PADRON_35_39_MUJERES',
       'PADRON_35_39_NOBINARIO', 'PADRON_40_44_HOMBRES',
       'PADRON_40_44_MUJERES', 'PADRON_40_44_NOBINARIO',
       'PADRON_45_49_HOMBRES', 'PADRON_45_49_MUJERES',
       'PADRON_45_49_NOBINARIO', 'PADRON_50_54_HOMBRES',
       'PADRON_50_54_MUJERES', 'PADRON_50_54_NOBINARIO',
       'PADRON_55_59_HOMBRES', 'PADRON_55_59_MUJERES',
       'PADRON_55_59_NOBINARIO', 'PADRON_60_64_HOMBRES',
       'PADRON_60_64_MUJERES', 'PADRON_60_64_NOBINARIO',
       'PADRON_65_Y_MAS_HOMBRES', 'PADRON_65_Y_MAS_MUJERES',
       'PADRON_65_Y_MAS_NOBINARIO', 'LISTA_18_HOMBRES', 'LISTA_18_MUJERES',
       'LISTA_18_NOBINARIO', 'LISTA_19_HOMBRES', 'LISTA_19_MUJERES',
       'LISTA_19_NOBINARIO', 'LISTA_20_24_HOMBRES', 'LISTA_20_24_MUJERES',
       'LISTA_20_24_NOBINARIO', 'LISTA_25_29_HOMBRES', 'LISTA_25_29_MUJERES',
       'LISTA_25_29_NOBINARIO', 'LISTA_30_34_HOMBRES', 'LISTA_30_34_MUJERES',
       'LISTA_30_34_NOBINARIO', 'LISTA_35_39_HOMBRES', 'LISTA_35_39_MUJERES',
       'LISTA_35_39_NOBINARIO', 'LISTA_40_44_HOMBRES', 'LISTA_40_44_MUJERES',
       'LISTA_40_44_NOBINARIO', 'LISTA_45_49_HOMBRES', 'LISTA_45_49_MUJERES',
       'LISTA_45_49_NOBINARIO', 'LISTA_50_54_HOMBRES', 'LISTA_50_54_MUJERES',
       'LISTA_50_54_NOBINARIO', 'LISTA_55_59_HOMBRES', 'LISTA_55_59_MUJERES',
       'LISTA_55_59_NOBINARIO', 'LISTA_60_64_HOMBRES', 'LISTA_60_64_MUJERES',
       'LISTA_60_64_NOBINARIO', 'LISTA_65_Y_MAS_HOMBRES',
       'LISTA_65_Y_MAS_MUJERES', 'LISTA_65_Y_MAS_NOBINARIO'],
      dtype='object')
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Select columns by their positions: 1-7, 12-15, and the last 36</span>
</span></span><span class="line"><span class="cl"><span class="n">cols_to_keep</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">36</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Now, select these columns from the DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age</span> <span class="o">=</span> <span class="n">df_age</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="n">cols_to_keep</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># filter rows by state quintana roo</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span> <span class="o">=</span> <span class="n">df_ln_age</span><span class="p">[</span><span class="n">df_ln_age</span><span class="p">[</span><span class="s1">&#39;NOMBRE</span><span class="se">\n</span><span class="s1">ENTIDAD&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select columns for padron electoral</span>
</span></span><span class="line"><span class="cl"><span class="c1"># df_ln_age_qroo = df_age_qroo.iloc[:,:11]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>Index(['CLAVE\nENTIDAD', 'NOMBRE\nENTIDAD', 'CLAVE\nDISTRITO',
       'NOMBRE\nDISTRITO', 'CLAVE\nMUNICIPIO', 'NOMBRE\nMUNICIPIO', 'SECCION',
       'LISTA\nHOMBRES', 'LISTA\nMUJERES', 'LISTA\nNO BINARIO',
       'LISTA\nNOMINAL', 'LISTA_18_HOMBRES', 'LISTA_18_MUJERES',
       'LISTA_18_NOBINARIO', 'LISTA_19_HOMBRES', 'LISTA_19_MUJERES',
       'LISTA_19_NOBINARIO', 'LISTA_20_24_HOMBRES', 'LISTA_20_24_MUJERES',
       'LISTA_20_24_NOBINARIO', 'LISTA_25_29_HOMBRES', 'LISTA_25_29_MUJERES',
       'LISTA_25_29_NOBINARIO', 'LISTA_30_34_HOMBRES', 'LISTA_30_34_MUJERES',
       'LISTA_30_34_NOBINARIO', 'LISTA_35_39_HOMBRES', 'LISTA_35_39_MUJERES',
       'LISTA_35_39_NOBINARIO', 'LISTA_40_44_HOMBRES', 'LISTA_40_44_MUJERES',
       'LISTA_40_44_NOBINARIO', 'LISTA_45_49_HOMBRES', 'LISTA_45_49_MUJERES',
       'LISTA_45_49_NOBINARIO', 'LISTA_50_54_HOMBRES', 'LISTA_50_54_MUJERES',
       'LISTA_50_54_NOBINARIO', 'LISTA_55_59_HOMBRES', 'LISTA_55_59_MUJERES',
       'LISTA_55_59_NOBINARIO', 'LISTA_60_64_HOMBRES', 'LISTA_60_64_MUJERES',
       'LISTA_60_64_NOBINARIO', 'LISTA_65_Y_MAS_HOMBRES',
       'LISTA_65_Y_MAS_MUJERES', 'LISTA_65_Y_MAS_NOBINARIO'],
      dtype='object')
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE\nENTIDAD</th>
      <th>NOMBRE\nENTIDAD</th>
      <th>CLAVE\nDISTRITO</th>
      <th>NOMBRE\nDISTRITO</th>
      <th>CLAVE\nMUNICIPIO</th>
      <th>NOMBRE\nMUNICIPIO</th>
      <th>SECCION</th>
      <th>LISTA\nHOMBRES</th>
      <th>LISTA\nMUJERES</th>
      <th>LISTA\nNO BINARIO</th>
      <th>...</th>
      <th>LISTA_50_54_NOBINARIO</th>
      <th>LISTA_55_59_HOMBRES</th>
      <th>LISTA_55_59_MUJERES</th>
      <th>LISTA_55_59_NOBINARIO</th>
      <th>LISTA_60_64_HOMBRES</th>
      <th>LISTA_60_64_MUJERES</th>
      <th>LISTA_60_64_NOBINARIO</th>
      <th>LISTA_65_Y_MAS_HOMBRES</th>
      <th>LISTA_65_Y_MAS_MUJERES</th>
      <th>LISTA_65_Y_MAS_NOBINARIO</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>77.0</td>
      <td>77.0</td>
      <td>0.0</td>
      <td>69.0</td>
      <td>57.0</td>
      <td>0.0</td>
      <td>99.0</td>
      <td>111.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>65.0</td>
      <td>68.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>62.0</td>
      <td>0.0</td>
      <td>100.0</td>
      <td>97.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>75.0</td>
      <td>65.0</td>
      <td>0.0</td>
      <td>43.0</td>
      <td>36.0</td>
      <td>0.0</td>
      <td>105.0</td>
      <td>112.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>76.0</td>
      <td>83.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>56.0</td>
      <td>0.0</td>
      <td>119.0</td>
      <td>113.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>21.0</td>
      <td>30.0</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>34.0</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>40.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 47 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">dtypes</span>
</span></span></code></pre></div><pre><code>CLAVE\nENTIDAD               object
NOMBRE\nENTIDAD              object
CLAVE\nDISTRITO             float64
NOMBRE\nDISTRITO             object
CLAVE\nMUNICIPIO            float64
NOMBRE\nMUNICIPIO            object
SECCION                     float64
LISTA\nHOMBRES                int64
LISTA\nMUJERES                int64
LISTA\nNO BINARIO             int64
LISTA\nNOMINAL                int64
LISTA_18_HOMBRES            float64
LISTA_18_MUJERES            float64
LISTA_18_NOBINARIO          float64
LISTA_19_HOMBRES            float64
LISTA_19_MUJERES            float64
LISTA_19_NOBINARIO          float64
LISTA_20_24_HOMBRES         float64
LISTA_20_24_MUJERES         float64
LISTA_20_24_NOBINARIO       float64
LISTA_25_29_HOMBRES         float64
LISTA_25_29_MUJERES         float64
LISTA_25_29_NOBINARIO       float64
LISTA_30_34_HOMBRES         float64
LISTA_30_34_MUJERES         float64
LISTA_30_34_NOBINARIO       float64
LISTA_35_39_HOMBRES         float64
LISTA_35_39_MUJERES         float64
LISTA_35_39_NOBINARIO       float64
LISTA_40_44_HOMBRES         float64
LISTA_40_44_MUJERES         float64
LISTA_40_44_NOBINARIO       float64
LISTA_45_49_HOMBRES         float64
LISTA_45_49_MUJERES         float64
LISTA_45_49_NOBINARIO       float64
LISTA_50_54_HOMBRES         float64
LISTA_50_54_MUJERES         float64
LISTA_50_54_NOBINARIO       float64
LISTA_55_59_HOMBRES         float64
LISTA_55_59_MUJERES         float64
LISTA_55_59_NOBINARIO       float64
LISTA_60_64_HOMBRES         float64
LISTA_60_64_MUJERES         float64
LISTA_60_64_NOBINARIO       float64
LISTA_65_Y_MAS_HOMBRES      float64
LISTA_65_Y_MAS_MUJERES      float64
LISTA_65_Y_MAS_NOBINARIO    float64
dtype: object
</code></pre>
<h4 id="change-the-column-names-to-avoid-special-characters">Change the Column Names to Avoid Special Characters</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ln_age_col_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;CLAVE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;CLAVE DISTRITO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;NOMBRE DISTRITO&#39;</span><span class="p">,</span> <span class="s1">&#39;CLAVE MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;SECCION&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA MUJERES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA NO BINARIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA NOMINAL&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_18_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_18_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_18_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_19_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_19_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_19_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_20_24_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_20_24_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_20_24_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_25_29_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_25_29_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_25_29_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_30_34_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_30_34_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_30_34_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_35_39_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_35_39_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_35_39_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_40_44_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_40_44_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_40_44_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_45_49_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_45_49_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_45_49_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_50_54_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_50_54_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_50_54_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_55_59_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_55_59_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_55_59_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_60_64_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_60_64_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_60_64_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_65_Y_MAS_HOMBRES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_65_Y_MAS_MUJERES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_65_Y_MAS_NOBINARIO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">ln_age_col_names</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="p">[[</span><span class="s1">&#39;CLAVE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;NOMBRE DISTRITO&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE ENTIDAD</th>
      <th>NOMBRE ENTIDAD</th>
      <th>CLAVE DISTRITO</th>
      <th>NOMBRE DISTRITO</th>
      <th>CLAVE MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>LISTA HOMBRES</th>
      <th>LISTA MUJERES</th>
      <th>LISTA NO BINARIO</th>
      <th>...</th>
      <th>LISTA_50_54_NOBINARIO</th>
      <th>LISTA_55_59_HOMBRES</th>
      <th>LISTA_55_59_MUJERES</th>
      <th>LISTA_55_59_NOBINARIO</th>
      <th>LISTA_60_64_HOMBRES</th>
      <th>LISTA_60_64_MUJERES</th>
      <th>LISTA_60_64_NOBINARIO</th>
      <th>LISTA_65_Y_MAS_HOMBRES</th>
      <th>LISTA_65_Y_MAS_MUJERES</th>
      <th>LISTA_65_Y_MAS_NOBINARIO</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>77.0</td>
      <td>77.0</td>
      <td>0.0</td>
      <td>69.0</td>
      <td>57.0</td>
      <td>0.0</td>
      <td>99.0</td>
      <td>111.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>65.0</td>
      <td>68.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>62.0</td>
      <td>0.0</td>
      <td>100.0</td>
      <td>97.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>75.0</td>
      <td>65.0</td>
      <td>0.0</td>
      <td>43.0</td>
      <td>36.0</td>
      <td>0.0</td>
      <td>105.0</td>
      <td>112.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>76.0</td>
      <td>83.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>56.0</td>
      <td>0.0</td>
      <td>119.0</td>
      <td>113.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>21.0</td>
      <td>30.0</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>34.0</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>40.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 47 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># refactor into a function for later use on the dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_age_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Determine the predominant age range for each municipality</span>
</span></span><span class="line"><span class="cl">    <span class="n">age_groups</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">11</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Rango de Edad Predominante&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="n">age_groups</span><span class="p">]</span><span class="o">.</span><span class="n">idxmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># when summing, pandas also concatenates the strings in &#34;NOMBRE ENTIDAD&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># so do some housekeeping</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Rango de Edad Predominante&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">Plasma</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Predominant Gender and Age Range in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_age_choropleth</span><span class="p">(</span><span class="n">df_ln_age_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_59_1.png" type="" alt="image.png"  /></p>
<h3 id="total-voter-registration-per-municipality">Total Voter Registration per Municipality</h3>
<p>We will use the data in the column <code>LISTA NOMINAL</code> (i.e. the number of registered voters) from the dataframe <code>df_ln_sx_qroo</code>. Based on this, we&rsquo;ll obtain the totals per municipality so we can visualize them.</p>
<p>Let&rsquo;s get a refresher on the column names.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['Clave Entidad', 'Nombre Entidad', 'Clave Distrito', 'Nombre Distrito',
       'Clave Municipio', 'Nombre Municipio', 'Seccion', 'Lista Hombres',
       'Lista Mujeres', 'Lista No Binario', 'Lista Nominal'],
      dtype='object')
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># refactor into a function for later use on dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_bar_plot</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># group data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span><span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">},</span> 
</span></span><span class="line"><span class="cl">    <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">Dark24</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># make a dictionary for abbreviated municipality names</span>
</span></span><span class="line"><span class="cl">    <span class="n">abb_mun_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BACALAR&#39;</span><span class="p">:</span> <span class="s1">&#39;BCL&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BENITO JUAREZ&#39;</span><span class="p">:</span> <span class="s1">&#39;BJ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;COZUMEL&#39;</span><span class="p">:</span> <span class="s1">&#39;CZ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;FELIPE CARRILLO PUERTO&#39;</span><span class="p">:</span> <span class="s1">&#39;FCP&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;ISLA MUJERES&#39;</span><span class="p">:</span> <span class="s1">&#39;IM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;JOSE MARIA MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;JMM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;LAZARO CARDENAS&#39;</span><span class="p">:</span> <span class="s1">&#39;LC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;OTHON P. BLANCO&#39;</span><span class="p">:</span> <span class="s1">&#39;OPB&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PUERTO MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;PM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SOLIDARIDAD&#39;</span><span class="p">:</span> <span class="s1">&#39;SLD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;TULUM&#39;</span><span class="p">:</span> <span class="s1">&#39;TLM&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">xaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">tickvals</span> <span class="o">=</span> <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">],</span>  <span class="c1"># Original names</span>
</span></span><span class="line"><span class="cl">            <span class="n">ticktext</span> <span class="o">=</span> <span class="p">[</span><span class="n">abb_mun_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span>  <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">]]</span>  <span class="c1"># Abbreviated names</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">yaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Registered Voters&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">plot_bgcolor</span> <span class="o">=</span> <span class="s1">&#39;rgba(0,0,0,0)&#39;</span><span class="p">,</span> <span class="c1"># transparent background</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_minsize</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>  <span class="c1"># ensure text size is legible</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_mode</span> <span class="o">=</span> <span class="s1">&#39;hide&#39;</span><span class="p">,</span> <span class="c1"># hide text if it doesn&#39;t fit</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;x+y&#39;</span><span class="p">,</span>  <span class="c1"># Show the municipio name and the count on hover</span>
</span></span><span class="line"><span class="cl">        <span class="n">hovertemplate</span><span class="o">=</span><span class="s2">&#34;&lt;b&gt;%</span><span class="si">{x}</span><span class="s2">&lt;/b&gt;&lt;br&gt;Total: %</span><span class="si">{y}</span><span class="s2">&lt;extra&gt;&lt;/extra&gt;&#34;</span>  <span class="c1"># Custom hover template</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_bar_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_total_bar_plot</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_62_1.png" type="" alt="image.png"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># refactor into a function for later use on dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span><span class="n">df_ln_qroo_totals</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  <span class="c1"># Adjust based on your GeoJSON properties</span>
</span></span><span class="line"><span class="cl">                                <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">color_continuous_scale</span><span class="o">=</span><span class="s2">&#34;Portland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">coloraxis_colorbar</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Total Registered Voters&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">orientation</span><span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">thickness</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nb">len</span> <span class="o">=</span> <span class="mf">0.65</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>                      
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_choropleth_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_total_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_63_0.png" type="" alt="image.png"  /></p>
<h3 id="map-with-voter-proportion-vs-total-registered-voters-per-municipality">Map with Voter Proportion vs Total Registered Voters per Municipality</h3>
<p>To create a map with the proportion of voters vs the total registered voters, we need the dataframe with the election results. In these dataframes, there are columns with the total of people that went out to vote.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df_re_2021_qroo</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_grouped</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>MUNICIPIO</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
      <th>Porcentaje</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>BACALAR</td>
      <td>19204.0</td>
      <td>31916</td>
      <td>0.601704</td>
    </tr>
    <tr>
      <th>1</th>
      <td>BENITO JUAREZ</td>
      <td>245654.0</td>
      <td>630987</td>
      <td>0.389317</td>
    </tr>
    <tr>
      <th>2</th>
      <td>COZUMEL</td>
      <td>38876.0</td>
      <td>70987</td>
      <td>0.547650</td>
    </tr>
    <tr>
      <th>3</th>
      <td>FELIPE CARRILLO PUERTO</td>
      <td>36950.0</td>
      <td>55894</td>
      <td>0.661073</td>
    </tr>
    <tr>
      <th>4</th>
      <td>ISLA MUJERES</td>
      <td>13456.0</td>
      <td>21729</td>
      <td>0.619265</td>
    </tr>
    <tr>
      <th>5</th>
      <td>JOSE MARIA MORELOS</td>
      <td>21985.0</td>
      <td>27940</td>
      <td>0.786865</td>
    </tr>
    <tr>
      <th>6</th>
      <td>LAZARO CARDENAS</td>
      <td>16346.0</td>
      <td>21981</td>
      <td>0.743642</td>
    </tr>
    <tr>
      <th>7</th>
      <td>OTHON P. BLANCO</td>
      <td>79889.0</td>
      <td>174372</td>
      <td>0.458153</td>
    </tr>
    <tr>
      <th>8</th>
      <td>PUERTO MORELOS</td>
      <td>11189.0</td>
      <td>21716</td>
      <td>0.515242</td>
    </tr>
    <tr>
      <th>9</th>
      <td>SOLIDARIDAD</td>
      <td>80806.0</td>
      <td>229306</td>
      <td>0.352394</td>
    </tr>
    <tr>
      <th>10</th>
      <td>TULUM</td>
      <td>21607.0</td>
      <td>35739</td>
      <td>0.604578</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">selected_year</span> <span class="o">=</span> <span class="mi">2015</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_resultados</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df_resultados</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">YlOrRd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Total Voter Turnout in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Voter Turnout Percentage in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_66_0.png" type="" alt="image.png"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Election Data Dashboard Pt. 2: Dashboard with Dash</title>
      <link>http://localhost:59413/posts/20240509_election_dash_part_2-dashboard/20240509_election_dash_part_2-dashboard/</link>
      <pubDate>Thu, 09 May 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240509_election_dash_part_2-dashboard/20240509_election_dash_part_2-dashboard/</guid>
      <description>The cleaned data is loadsed and the plot generating functions are refactored here. Then a dashboard is created using dash.</description>
      <content:encoded><![CDATA[<hr>
<h3 id="creating-the-dashboard-using-dash">Creating the Dashboard using <code>dash</code></h3>
<p>The cleaned data is loadsed and the plot generating functions are refactored here. Then a dashboard is created using dash.</p>
<p>This dashboard is deployed (at the time of writing this post) here:</p>
<p><a href="https://elections-dash.onrender.com/">https://elections-dash.onrender.com/</a></p>
<p>Here are some screenshots of the final dashboard, in case the deployed dashboard takes took long to load or is unavailable:</p>
<p><img loading="lazy" src="/images/20240509_election_dash_part_2-dashboard/elections_dashboard_cap01.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240509_election_dash_part_2-dashboard/elections_dashboard_cap02.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240509_election_dash_part_2-dashboard/elections_dashboard_cap03.png" type="" alt="png"  /></p>
<p>Here is the full code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dash</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dash</span> <span class="kn">import</span> <span class="n">Dash</span><span class="p">,</span> <span class="n">dcc</span><span class="p">,</span> <span class="n">html</span><span class="p">,</span> <span class="n">Input</span><span class="p">,</span> <span class="n">Output</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dash_bootstrap_components</span> <span class="k">as</span> <span class="nn">dbc</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># generate variables and constants</span>
</span></span><span class="line"><span class="cl"><span class="n">election_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">2022</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Mapping each election year to its corresponding dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">distribute_alliance_votes</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">alliances</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ensure that party columns exist in the dataframe, add them if the do not</span>
</span></span><span class="line"><span class="cl">    <span class="n">all_parties</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">party</span> <span class="k">for</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">all_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># distribute the votes from each alliance to the respective parties</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">alliance</span><span class="p">,</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">alliance</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">split_votes</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">alliance</span><span class="p">]</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">split_votes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># optionally remove the alliance columns</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">alliances</span><span class="o">.</span><span class="n">keys</span><span class="p">()),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">errors</span> <span class="o">=</span> <span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main_parties</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="s1">&#39;PAN&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="s1">&#39;MC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PSD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PH&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;RSP&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;FXM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more as needed for each unique party or alliance...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">alliance_votes_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add any other specific alliances as needed</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># URL of the GeoJSON file on GitHub</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_url</span> <span class="o">=</span> <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/qroo_geojson_2022.json&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Fetch the GeoJSON data</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">geojson_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span> <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span> <span class="k">else</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_lista_nominal_sexo.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_lista_nominal_edad.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">csv_urls</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2009.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2012.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2015.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2018.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2021.csv&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more URLs as needed</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Load each CSV file into a DataFrame </span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2021_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">df_re_2021_qroo</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2009</span><span class="p">:</span> <span class="n">df_re_2009_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2012</span><span class="p">:</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2015</span><span class="p">:</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2018</span><span class="p">:</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2021</span><span class="p">:</span> <span class="n">df_re_2021_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_bar_plot</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">:</span> <span class="s1">&#39;Registered Men&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">:</span> <span class="s1">&#39;Registered Women&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">:</span> <span class="s1">&#39;Total Registered&#39;</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># group data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Registered Men&#39;</span><span class="p">,</span> <span class="s1">&#39;Registered Women&#39;</span><span class="p">,</span> <span class="s1">&#39;Total Registered&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_ln_qroo_totals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Registered Men&#39;</span><span class="p">,</span> <span class="s1">&#39;Registered Women&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">},</span> 
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># make a dictionary for abbreviated municipality names</span>
</span></span><span class="line"><span class="cl">    <span class="n">abb_mun_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BACALAR&#39;</span><span class="p">:</span> <span class="s1">&#39;BCL&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BENITO JUAREZ&#39;</span><span class="p">:</span> <span class="s1">&#39;BJ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;COZUMEL&#39;</span><span class="p">:</span> <span class="s1">&#39;CZ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;FELIPE CARRILLO PUERTO&#39;</span><span class="p">:</span> <span class="s1">&#39;FCP&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;ISLA MUJERES&#39;</span><span class="p">:</span> <span class="s1">&#39;IM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;JOSE MARIA MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;JMM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;LAZARO CARDENAS&#39;</span><span class="p">:</span> <span class="s1">&#39;LC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;OTHON P. BLANCO&#39;</span><span class="p">:</span> <span class="s1">&#39;OPB&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PUERTO MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;PM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SOLIDARIDAD&#39;</span><span class="p">:</span> <span class="s1">&#39;SLD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;TULUM&#39;</span><span class="p">:</span> <span class="s1">&#39;TLM&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">xaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">tickvals</span> <span class="o">=</span> <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">],</span>  <span class="c1"># Original names</span>
</span></span><span class="line"><span class="cl">            <span class="n">ticktext</span> <span class="o">=</span> <span class="p">[</span><span class="n">abb_mun_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span>  <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">]]</span>  <span class="c1"># Abbreviated names</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">yaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Registered Voters&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">plot_bgcolor</span> <span class="o">=</span> <span class="s1">&#39;rgba(0,0,0,0)&#39;</span><span class="p">,</span> <span class="c1"># transparent background</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_minsize</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>  <span class="c1"># ensure text size is legible</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_mode</span> <span class="o">=</span> <span class="s1">&#39;hide&#39;</span><span class="p">,</span> <span class="c1"># hide text if it doesn&#39;t fit</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;x+y&#39;</span><span class="p">,</span>  <span class="c1"># Show the municipio name and the count on hover</span>
</span></span><span class="line"><span class="cl">        <span class="n">hovertemplate</span><span class="o">=</span><span class="s2">&#34;&lt;b&gt;%</span><span class="si">{x}</span><span class="s2">&lt;/b&gt;&lt;br&gt;Total: %</span><span class="si">{y}</span><span class="s2">&lt;extra&gt;&lt;/extra&gt;&#34;</span>  <span class="c1"># Custom hover template</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_bar_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ochre_scale</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="s1">&#39;#4c78c8&#39;</span><span class="p">],</span>  <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="s1">&#39;#f58518&#39;</span><span class="p">],</span>  <span class="c1"># Light ochre (yellow)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span><span class="n">df_ln_qroo_totals</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  <span class="c1"># Adjust based on your GeoJSON properties</span>
</span></span><span class="line"><span class="cl">                                <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">ochre_scale</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">coloraxis_colorbar</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Total Registered Voters&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">orientation</span><span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">thickness</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nb">len</span> <span class="o">=</span> <span class="mf">0.65</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>                      
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_choropleth_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_age_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Determine the predominant age range for each municipality</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># age_groups = df_grouped.columns[11:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">age_groups</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Men 18&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 18&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 18&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 19&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 19&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 19&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 20-24&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 20-24&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 20-24&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 25-29&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 25-29&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 25-29&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 30-34&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 30-34&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 30-34&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 35-39&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 35-39&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 35-39&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 40-44&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 40-44&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 40-44&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 45-49&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 45-49&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 45-49&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 50-54&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 50-54&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 50-54&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 55-59&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 55-59&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 55-59&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 60-64&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 60-64&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 60-64&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 65+&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 65+&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 65+&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Rename the columns from the 12th column onwards</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span><span class="p">[:</span><span class="mi">11</span><span class="p">])</span> <span class="o">+</span> <span class="n">age_groups</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span> <span class="o">-</span> <span class="mi">11</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Predominant Age and Gender Group&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="n">age_groups</span><span class="p">]</span><span class="o">.</span><span class="n">idxmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># when summing, pandas also concatenates the strings in &#34;NOMBRE ENTIDAD&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># so do some housekeeping</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Predominant Age and Gender Group&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Predominant Gender and Age Range in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Calculate the percentage of women registered voters</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ochre_scale</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="s1">&#39;#4c78c8&#39;</span><span class="p">],</span>  <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="s1">&#39;#f58518&#39;</span><span class="p">],</span>  <span class="c1"># Light ochre (yellow)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">ochre_scale</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Percentage of Women in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-----------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_winning_party_per_year_choropleth</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">df_dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># This function now handles a single year&#39;s DataFrame and generates a choropleth map for that year.</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_year</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">selected_year</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">winning_party_by_municipality</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">municipality</span> <span class="ow">in</span> <span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># for main_party, parties in alliance_mapping.items():</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#     for party in parties:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#         if party in df_year.columns:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#             votes_by_party[main_party] += df_year.loc[df_year[&#39;MUNICIPIO&#39;] == municipality, party].sum()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_year</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_year</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="n">winning_party</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">votes_by_party</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">winning_party_by_municipality</span><span class="p">[</span><span class="n">municipality</span><span class="p">]</span> <span class="o">=</span> <span class="n">winning_party</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">winning_party_by_municipality</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;Winning Party&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span><span class="p">[</span><span class="s1">&#39;Year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selected_year</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_map</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Winning Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Winning Party per Municipality, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_election_pie_chart</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># mapping years to their indices in the list of dataframes</span>
</span></span><span class="line"><span class="cl">    <span class="n">year_to_index</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2009</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2012</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2015</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2018</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2021</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">selected_year_index</span> <span class="o">=</span> <span class="n">year_to_index</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">selected_year_index</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No data available for the year </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># extract the dataframe for the selected year</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_selected_year</span> <span class="o">=</span> <span class="n">df_re_all_years</span><span class="p">[</span><span class="n">selected_year_index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># filtering the df for the selected municipality</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_municipality</span> <span class="o">=</span> <span class="n">df_selected_year</span><span class="p">[</span><span class="n">df_selected_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">empty</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;No data available for </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># aggregating votes for each main party</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_municipality</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the pie chart</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_votes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span> <span class="s1">&#39;Votes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df_votes</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="s1">&#39;Votes&#39;</span><span class="p">,</span> <span class="n">names</span> <span class="o">=</span> <span class="s1">&#39;Party&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                 <span class="n">title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Vote Distribution in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update the traces to remove the text labels</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">textinfo</span><span class="o">=</span><span class="s1">&#39;none&#39;</span><span class="p">,</span> <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;label+percent&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">election_years</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Plots an interactive line plot with filled areas to zero for each main party and its alliances,
</span></span></span><span class="line"><span class="cl"><span class="s2">    in a selected municipality across elections using Plotly Express. This approximates the non-stacked
</span></span></span><span class="line"><span class="cl"><span class="s2">    area plot behavior of the original function.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># initialize dictionary to hold vote totals for main parties</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_main_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">election_years</span><span class="p">)</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># loop through each DataFrame and year</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">election_years</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># filter the DataFrame for the selected municipality</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">selected_municipality</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">filtered_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1"># loop through each main party and its alliances</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># aggregate votes for each party in the alliance, adding to the main party&#39;s total</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">votes_by_main_party</span><span class="p">[</span><span class="n">party</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">filtered_df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># prepare the data for plotting</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_for_plotting</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">main_party</span><span class="p">,</span> <span class="n">votes</span> <span class="ow">in</span> <span class="n">votes_by_main_party</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">year</span><span class="p">,</span> <span class="n">vote</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">election_years</span><span class="p">,</span> <span class="n">votes</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">data_for_plotting</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;Election Year&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">,</span> <span class="s1">&#39;Total Votes&#39;</span><span class="p">:</span> <span class="n">vote</span><span class="p">,</span> <span class="s1">&#39;Party&#39;</span><span class="p">:</span> <span class="n">main_party</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_plot</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data_for_plotting</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the plot</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">df_plot</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">line_shape</span><span class="o">=</span><span class="s1">&#39;linear&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;Total Votes per Party (Including Alliances), in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># customize the layout</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">2.5</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;tozeroy&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_title</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">yaxis_title</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend_title</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">font</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="s2">&#34;Arial, sans-serif&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;#333&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                      <span class="n">hovermode</span><span class="o">=</span><span class="s1">&#39;x unified&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                          <span class="n">orientation</span> <span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">yanchor</span> <span class="o">=</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.6</span><span class="p">,</span> <span class="c1"># adjuist to fit layout</span>
</span></span><span class="line"><span class="cl">                          <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">                      <span class="p">))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#----------------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># HELPER function to get the municipalities per selected year</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_municipalities_per_year</span><span class="p">(</span><span class="n">df_dict</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_selected</span> <span class="o">=</span> <span class="n">df_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">df_selected</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No data available for the year </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Retrieve and return a sorted list of unique municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">df_selected</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-------------------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_resultados</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df_resultados</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ochre_scale</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="s1">&#39;#4c78c8&#39;</span><span class="p">],</span>  <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="s1">&#39;#f58518&#39;</span><span class="p">],</span>  <span class="c1"># Light ochre (yellow)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">ochre_scale</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Voter Turnout Percentage in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Voter Turnout Percentage in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># static figures:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">static_choropleth_percentage_women</span> <span class="o">=</span> <span class="n">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">static_choropleth_age</span> <span class="o">=</span> <span class="n">create_age_choropleth</span><span class="p">(</span><span class="n">df_ln_age_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">static_choropleth_totals</span> <span class="o">=</span> <span class="n">create_total_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">static_bar_totals</span> <span class="o">=</span> <span class="n">create_total_bar_plot</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a Dash application</span>
</span></span><span class="line"><span class="cl"><span class="c1"># app = Dash(__name__)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Assuming you&#39;re fine with adding Bootstrap to your project</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Dash</span><span class="p">(</span><span class="vm">__name__</span><span class="p">,</span> <span class="n">external_stylesheets</span><span class="o">=</span><span class="p">[</span><span class="n">dbc</span><span class="o">.</span><span class="n">themes</span><span class="o">.</span><span class="n">BOOTSTRAP</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">append_css</span><span class="p">({</span><span class="s1">&#39;external_url&#39;</span><span class="p">:</span> <span class="s1">&#39;/assets/styles.css&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;background&#39;</span><span class="p">:</span> <span class="s1">&#39;#111111&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="s1">&#39;#7FDBFF&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">server</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">server</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Layout</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">layout</span> <span class="o">=</span> <span class="n">dbc</span><span class="o">.</span><span class="n">Container</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">html</span><span class="o">.</span><span class="n">H1</span><span class="p">(</span><span class="s2">&#34;Elections Dashboard&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Dropdown</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;year-dropdown&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">options</span><span class="o">=</span><span class="p">[{</span><span class="s1">&#39;label&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">}</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">election_years</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span><span class="o">=</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">election_years</span><span class="p">))[</span><span class="mi">0</span><span class="p">],</span>  <span class="c1"># Default to the earliest year</span>
</span></span><span class="line"><span class="cl">            <span class="n">className</span><span class="o">=</span><span class="s1">&#39;dropdown&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">className</span> <span class="o">=</span> <span class="s1">&#39;mb-2&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Dropdown</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">className</span><span class="o">=</span><span class="s1">&#39;dropdown&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">className</span> <span class="o">=</span> <span class="s1">&#39;mb-2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;time-series-plot&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;pie-chart&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-total-voters&#39;</span><span class="p">,</span> <span class="n">figure</span> <span class="o">=</span> <span class="n">static_choropleth_totals</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-turnout&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-age&#39;</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">static_choropleth_age</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-women&#39;</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">static_choropleth_percentage_women</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-winning&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;bar-total-voters&#39;</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">static_bar_totals</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">],</span> <span class="n">fluid</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Callback to update municipio dropdown based on year selection</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.callback</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;options&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">Input</span><span class="p">(</span><span class="s1">&#39;year-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">set_municipio_options</span><span class="p">(</span><span class="n">selected_year</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming a function that returns municipios for a given year</span>
</span></span><span class="line"><span class="cl">    <span class="n">municipalities</span> <span class="o">=</span> <span class="n">get_municipalities_per_year</span><span class="p">(</span><span class="n">df_dict</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;label&#39;</span><span class="p">:</span> <span class="n">m</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="n">m</span><span class="p">}</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">municipalities</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_value</span> <span class="o">=</span> <span class="n">municipalities</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">municipalities</span> <span class="k">else</span> <span class="kc">None</span>  <span class="c1"># Default to first municipality or None</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">options</span><span class="p">,</span> <span class="n">new_value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Callback to update interactive visualizations</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.callback</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">Output</span><span class="p">(</span><span class="s1">&#39;time-series-plot&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;pie-chart&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;choropleth-winning&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;choropleth-turnout&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">Input</span><span class="p">(</span><span class="s1">&#39;year-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Input</span><span class="p">(</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">update_visualizations</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">time_series_chart</span> <span class="o">=</span> <span class="n">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_re_all_years</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">main_parties</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">selected_municipality</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">election_years</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">pie_chart_per_municipality_per_year</span> <span class="o">=</span> <span class="n">plot_election_pie_chart</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">selected_year</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">selected_municipality</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">df_re_all_years</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">main_parties</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">choropleth_winning_party_per_year</span> <span class="o">=</span> <span class="n">create_winning_party_per_year_choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">selected_year</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">geojson_data</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">main_parties</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">df_dict</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_resultados</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">selected_year</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">voter_proportion_choropleth</span> <span class="o">=</span> <span class="n">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_resultados</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">time_series_chart</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">pie_chart_per_municipality_per_year</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">            <span class="n">choropleth_winning_party_per_year</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">voter_proportion_choropleth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run_server</span><span class="p">()</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Time Series Analysis with Julia and Turing.jl</title>
      <link>http://localhost:59413/posts/20240222_bayesian_time_series_analysis/20240222_bayesian_time_series_analysis/</link>
      <pubDate>Sat, 02 Mar 2024 16:57:07 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240222_bayesian_time_series_analysis/20240222_bayesian_time_series_analysis/</guid>
      <description>This tutorial covers the fundamentals of Bayesian approaches to time series, model construction, and practical implementation, using real-world data for hands-on learning.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="introduction">Introduction</h2>
<p>In this tutorial, an AR(p) (Autoregressive model of order <em>p</em>) is employed to analyze the trneds of a time series and forecast the behavior of the signal.</p>
<p>Auto-regressive models are based on the assumption the behavior of a time series or signal depends on past values. The order of the AR model tells &ldquo;how far back&rdquo; the past values will affect the current value.</p>
<h4 id="credits">Credits</h4>
<p>This exercise is mostly following <a href="https://youtu.be/vfTYCm_Fr8I?si=D3Grgk82tV_Qzdxw">this tutorial</a>.</p>
<h3 id="definition">Definition</h3>
<p>The <em>AR(p)</em> model is defined as:</p>
<p>$$
X_t = \sum_{i=1}^{p} \phi_i X_{t-i} + \varepsilon_t
$$</p>
<p>where $\varepsilon \sim \mathcal{N}(0,\sigma^2)$ is the model uncertainty represented as white Gaussian noise, i.e. it follows a normal distribution of mean $\mu=0$ and standard deviation $\sigma$.</p>
<p>It follows that an <em>AR(2)</em> model is defined as:</p>
<p>$$
X_t = \phi_1 X_{t-1} + \phi_2 X_{t-2} + \varepsilon_t
$$</p>
<p>Naturally, we want to find the parameters $\theta={\phi_1, \phi_2,\sigma}$. Since these are unobserved quantities of interest, we need to use an inference method to reveal these parameters. We will use Bayesian inference to achieve this goal.</p>
<h2 id="data-exploration">Data Exploration</h2>
<p>For this example, I will generate artificial data. This will be done by first defining some values for the parameters $\theta$ and then we will generate random data using those parameters by initializing the $X_1, X_2$ values, and then applying the AR(2) equation to generate the subsequent values.</p>
<p>First, we import the relevant packages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">LaTeXStrings</span><span class="p">,</span> <span class="n">Random</span><span class="p">,</span> <span class="n">DataFrames</span>
</span></span><span class="line"><span class="cl"><span class="n">Random</span><span class="o">.</span><span class="n">seed!</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>TaskLocalRNG()
</code></pre>
<p>Now we create some artificial data. The steps involved in this are as follows:</p>
<ol>
<li>Define some values for the parameters $\theta$</li>
<li>Set the number of timesteps <em>t</em></li>
<li>Initialize an empty vector of size $\mathbb{R}^{t+p}$</li>
<li>Initialize the first two $X$ values with randomly generated numbers using <code>rand</code></li>
<li>Populate the vector by using the equation for $X_t$</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># define true values for θ</span>
</span></span><span class="line"><span class="cl"><span class="n">true_phi_1</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.4</span>
</span></span><span class="line"><span class="cl"><span class="n">true_phi_2</span> <span class="o">=</span> <span class="mf">0.3</span>
</span></span><span class="line"><span class="cl"><span class="n">true_sigma</span> <span class="o">=</span> <span class="mf">0.12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define the time steps</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c"># create an empty X vector</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span> <span class="o">=</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}(</span><span class="nb">undef</span><span class="p">,</span> <span class="n">time</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># initialize the X vector with two random values at time steps 1 and 2</span>
</span></span><span class="line"><span class="cl"><span class="c"># to do this, use a random normally distributed number with mean zero and standard deviation σ, i.e., ε~N(0, σ)</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">true_sigma</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">true_sigma</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># populate vector X</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">t</span> <span class="k">in</span> <span class="mi">3</span><span class="o">:</span><span class="p">(</span><span class="n">time</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="n">true_phi_1</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">	<span class="n">true_phi_2</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">	<span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">true_sigma</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>	
</span></span></code></pre></div><h3 id="visualize-the-artificial-data">Visualize the (Artificial) Data</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">p_data</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="k">end</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c"># xlims = (0, 60),</span>
</span></span><span class="line"><span class="cl">    <span class="c"># ylims = (-0.6, 0.6),</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Bayesian Autoregressive AR(2) Model&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">xlabel</span> <span class="o">=</span> <span class="sa">L</span><span class="s">&#34;t&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">ylabel</span> <span class="o">=</span> <span class="sa">L</span><span class="s">&#34;X_t&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">widen</span> <span class="o">=</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240222_Bayesian_Time_Series_Analysis/output_5_0.svg" type="" alt="svg"  /></p>
<h2 id="modeling">Modeling</h2>
<p>The next step is to construct our probabilistic model. Again, the goal here is to infer the values of the model parameters $\theta$. Once we have inferred these parameters, we can make probabilistic predictions on the future behavior of the signal $X$.</p>
<h3 id="bayesian-model">Bayesian model</h3>
<p>Since we are using a Bayesian approach, our goal, in Bayesian terms, is to find the <em>posterior distribution</em> of the parameters $\theta$, given a prior distribution, or prior knowledge, of the parameters before making any observations, i.e., seeing any data, and also a likelihood function, which reflects what kind of distribution (we assume) that the data is sourced from. Another way of understanding the likelihood function is the probability of making a set of observations $X$ given the parameters $\theta$.</p>
<p>This relationship is established by Bayes&rsquo; Theorem:</p>
<p>$$
P(\theta | X) \propto P(X | \theta)P(\theta)
$$</p>
<p>In summary, constructing the Bayesian model in this case comprises a selection of prior distributions for our unknown parameters $\theta$ and a likelihood function. We will do this using the <code>Turing.jl</code> package.</p>
<p>The model therefore will consist of the prior distributions:</p>
<p>$$
\begin{align*}
\phi_1 &amp; \sim \mathcal{N}(0, 1) \
\phi_2 &amp; \sim \mathcal{N}(0, 1) \
\sigma &amp; \sim \text{Exp}(1)
\end{align*}
$$</p>
<p>And the likelihood:</p>
<p>$$
X_t \sim \mathcal{N}(\mu_t, \sigma)
$$</p>
<p>where $\mu_t = \sum_{i=1}^{p} \phi_i X_{t-i}$ is the mean function of the distribution that governs X_t.</p>
<h4 id="a-comment-on-the-choice-of-priors">A comment on the choice of priors</h4>
<p>For autoregressive parameters, using a normal distribution is a common choice. This is because the normal distribution is convenient and allows for a range of plausible values.</p>
<p>For the prior on the model uncertainty, the exponential distribution is sometimes used for non-negative parameters and has a similar role to the inverse gamma.</p>
<p>Furthermore, the inverse gamma distribution is often chosen as a prior for the standard deviation because it is conjugate to the normal likelihood. This means that the posterior distribution will have a known form, making computations more tractable.</p>
<h3 id="bayesian-model-using-turingjl">Bayesian model using <code>Turing.jl</code></h3>
<p>Now we proceed to set up the model using the <code>Turing.jl</code> package.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">ar</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>    <span class="c"># pass the data X and the time vector</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># priors</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">phi_1</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">phi_2</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">sigma</span> <span class="o">~</span> <span class="n">Exponential</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># likelihood</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># initialize with random initial values</span>
</span></span><span class="line"><span class="cl">		<span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">X</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># populate with samples</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">3</span><span class="o">:</span><span class="p">(</span><span class="n">time</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">mu</span> <span class="o">=</span> <span class="n">phi_1</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">phi_2</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">end</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span></code></pre></div><pre><code>ar (generic function with 2 methods)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">ar</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sampler</span> <span class="o">=</span> <span class="n">NUTS</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1_000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">samples</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.4
[32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:01[39m





Chains MCMC chain (1000×15×1 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 1
Samples per chain = 1000
Wall duration     = 11.59 seconds
Compute duration  = 11.59 seconds
parameters        = phi_1, phi_2, sigma
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m e[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m  [0m ⋯

       phi_1   -0.3830    0.1047    0.0036   836.6151   762.4445    0.9996     ⋯
       phi_2    0.1587    0.1012    0.0035   838.3014   749.6718    1.0002     ⋯
       sigma    0.1083    0.0079    0.0003   755.4034   743.3822    1.0014     ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

       phi_1   -0.5733   -0.4562   -0.3858   -0.3141   -0.1771
       phi_2   -0.0339    0.0913    0.1562    0.2256    0.3549
       sigma    0.0943    0.1030    0.1079    0.1130    0.1257
</code></pre>
<h3 id="visualize-and-summarize-the-results">Visualize and Summarize the Results</h3>
<p>Next we can access the MCMC Diagnostics and generate a summary of the results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240222_Bayesian_Time_Series_Analysis/output_10_0.svg" type="" alt="svg"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">DataFrame</span><span class="p">(</span><span class="n">summarystats</span><span class="p">(</span><span class="n">chain</span><span class="p">))</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>3×8 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">parameters</th><th style = "text-align: left;">mean</th><th style = "text-align: left;">std</th><th style = "text-align: left;">mcse</th><th style = "text-align: left;">ess_bulk</th><th style = "text-align: left;">ess_tail</th><th style = "text-align: left;">rhat</th><th style = "text-align: left;">ess_per_sec</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Symbol" style = "text-align: left;">Symbol</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: left;">phi_1</td><td style = "text-align: right;">-0.383019</td><td style = "text-align: right;">0.104695</td><td style = "text-align: right;">0.00361324</td><td style = "text-align: right;">836.615</td><td style = "text-align: right;">762.444</td><td style = "text-align: right;">0.999585</td><td style = "text-align: right;">72.1655</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: left;">phi_2</td><td style = "text-align: right;">0.158661</td><td style = "text-align: right;">0.101196</td><td style = "text-align: right;">0.00351463</td><td style = "text-align: right;">838.301</td><td style = "text-align: right;">749.672</td><td style = "text-align: right;">1.00021</td><td style = "text-align: right;">72.311</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: left;">sigma</td><td style = "text-align: right;">0.108342</td><td style = "text-align: right;">0.00788622</td><td style = "text-align: right;">0.000291067</td><td style = "text-align: right;">755.403</td><td style = "text-align: right;">743.382</td><td style = "text-align: right;">1.00145</td><td style = "text-align: right;">65.1603</td></tr></tbody></table></div>
<h2 id="predictions">Predictions</h2>
<h3 id="making-predictions">Making Predictions</h3>
<p>To make predictions, the following steps are taken:</p>
<ol>
<li>Set the number of time steps into the future, $t_f$</li>
<li>Initialize an empty matrix for the forecasted $X$ values - This will be a matrix because it will be a collection of vectors. Each vector will represent one sample forecast</li>
<li>Initialize two steps of each of the sample vectors to be generated - In practical terms, initialize the first number of each column; each <em>column</em> will represent a forecast time series</li>
</ol>
<p>Keep in mind that what will be done here is to create samples of the future behavior of the signal $t_f$ number of time steps into the future. To do this, we will generate signals that use the posterior distributions of the parameters $\theta$ by calling the function <code>rand(chain[:,Z,Z])</code> which will randomly pick a number out of the sample pool, effectively &ldquo;sampling&rdquo; from that posterior distribution (sample pool).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">time_future</span> <span class="o">=</span> <span class="mi">15</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">X_future</span> <span class="o">=</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}(</span><span class="nb">undef</span><span class="p">,</span> <span class="n">time_future</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">samples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Initialize the first two time steps for every forecast</span>
</span></span><span class="line"><span class="cl"><span class="n">X_future</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span> <span class="o">.=</span> <span class="n">X</span><span class="p">[</span><span class="n">time</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">X_future</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span> <span class="o">.=</span> <span class="n">X</span><span class="p">[</span><span class="n">time</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># populate the forecast vectors by sampling from the posterior sample pool of the parameters θ</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">col</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">	<span class="n">phi_1_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="n">phi_2_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="n">error_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="n">noise_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">error_future</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">row</span> <span class="k">in</span> <span class="mi">3</span><span class="o">:</span><span class="p">(</span><span class="n">time_future</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">X_future</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">=</span> 
</span></span><span class="line"><span class="cl">			<span class="n">phi_1_future</span> <span class="o">*</span> <span class="n">X_future</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">+</span> 
</span></span><span class="line"><span class="cl">			<span class="n">phi_2_future</span> <span class="o">*</span> <span class="n">X_future</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">			<span class="n">noise_future</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h4 id="visualize-the-forecast">Visualize the forecast</h4>
<p>Now that we <em>propagated the uncertainty</em> of in the posterior distribution of the parameters $\theta$, we can plot the posterior predictive distribution of $X$, $P(X^*|\theta)$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">time_predict</span> <span class="o">=</span> <span class="n">time</span><span class="o">:</span><span class="p">(</span><span class="n">time</span> <span class="o">+</span> <span class="n">time_future</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">	<span class="n">plot!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="n">time_predict</span><span class="p">,</span> <span class="n">X_future</span><span class="p">[</span><span class="mi">2</span><span class="o">:</span><span class="k">end</span><span class="p">,</span> <span class="n">i</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="c"># predictions</span>
</span></span><span class="line"><span class="cl">	<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="ss">:green</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p_data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># visualize mean values for predictions</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">X_future_mean</span> <span class="o">=</span> <span class="p">[</span><span class="n">mean</span><span class="p">(</span><span class="n">X_future</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">2</span><span class="o">:</span><span class="p">(</span><span class="n">time_future</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="n">time_predict</span><span class="p">,</span> <span class="n">X_future_mean</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">	<span class="n">color</span> <span class="o">=</span> <span class="ss">:red</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">	<span class="n">linestyle</span> <span class="o">=</span> <span class="ss">:dot</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240222_Bayesian_Time_Series_Analysis/output_15_0.svg" type="" alt="svg"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Poisson Regression with Julia and Turing.jl</title>
      <link>http://localhost:59413/posts/20240217_bayesian_poisson_regression/20240217_bayesian_poisson_regression/</link>
      <pubDate>Sat, 17 Feb 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240217_bayesian_poisson_regression/20240217_bayesian_poisson_regression/</guid>
      <description>Explore Bayesian Poisson regression for modeling count data with Julia and Turing.jl. This tutorial includes model setup, implementation, and performance assessment with a practical example.</description>
      <content:encoded><![CDATA[<hr>
<p>In this example, I am following the tutorials found in:</p>
<ul>
<li><a href="https://turinglang.org/dev/tutorials/07-poisson-regression/">Turing.jl - Bayesian Poisson Regression</a></li>
<li><a href="https://www.pymc.io/projects/examples/en/latest/generalized_linear_models/GLM-poisson-regression.html">PyMC - GLM: Poisson Regression</a></li>
</ul>
<p>Both examples show the interaction between some variables and a discrete outcome. In this case, the outcome is the number of sneezes per day (i.e. a discrete outcome) in some study subjects, and whether or not they take antihistamine medicine and whether or not they drink alcohol.</p>
<p>This example explores how these factors, and more specifically, the combination of these factors, affect the number of times a person sneezes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">CSV</span><span class="p">,</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">Plots</span><span class="p">,</span> <span class="n">Random</span>
</span></span><span class="line"><span class="cl"><span class="n">Random</span><span class="o">.</span><span class="n">seed!</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>TaskLocalRNG()
</code></pre>
<h2 id="collect-generate-the-data">Collect (generate) the data</h2>
<p>In this example, we will generate the data in the same way as in the tutorials:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left"></th>
          <th style="text-align: center">No Alcohol</th>
          <th style="text-align: center">Alcohol</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><strong>No Meds</strong></td>
          <td style="text-align: center">6</td>
          <td style="text-align: center">36</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Meds</strong></td>
          <td style="text-align: center">1</td>
          <td style="text-align: center">3</td>
      </tr>
  </tbody>
</table>
<p>Those values will be used to create the artificial data by generating Poisson-distributed random samples.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">theta_noalc_nomed</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl"><span class="n">theta_noalc_med</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">theta_alc_nomed</span> <span class="o">=</span> <span class="mi">36</span>
</span></span><span class="line"><span class="cl"><span class="n">theta_alc_med</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ns</span> <span class="o">=</span> <span class="mi">500</span>    <span class="c"># number of samples</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># create a data frame</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">hcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">vcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_noalc_med</span><span class="p">),</span> <span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_alc_med</span><span class="p">),</span> <span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_noalc_nomed</span><span class="p">),</span> <span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_alc_nomed</span><span class="p">),</span> <span class="n">ns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">vcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">vcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span> <span class="ss">:auto</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># assign names to headers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">head_names</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:n_sneezes</span><span class="p">,</span> <span class="ss">:alcohol</span><span class="p">,</span> <span class="ss">:nomeds</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sneeze_data</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">head_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">first</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>10×3 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">n_sneezes</th><th style = "text-align: left;">alcohol</th><th style = "text-align: left;">nomeds</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">6</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">7</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">8</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">9</td><td style = "text-align: right;">2</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">10</td><td style = "text-align: right;">2</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr></tbody></table></div>
<h3 id="visualize-the-data">Visualize the data</h3>
<p>Now that we have &ldquo;collected&rdquo; some data on the number of sneezes per day from a number of people, we visualize the data.</p>
<p>The way we are collecting and plotting these data sub-sets is as follows:</p>
<ol>
<li>Call the histogram function</li>
<li>Create a histogram of the dataframe &ldquo;sneeze_data&rdquo; we &ldquo;collected&rdquo; previously</li>
<li>Select a subset of that dataframe</li>
<li>All the rows of the columns where alcohol is <code>false</code> i.e. 0 AND all the rows where no medicine was taken is also <code>false</code></li>
<li>All the rows of the columns where alcohol is <code>false</code> AND all the rows of where medicine is <code>true</code></li>
<li>&hellip; and so on</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># create separate histograms for each case</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p1</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;No alcohol + No Meds&#34;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">&#34;People Count&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p2</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;No alcohol + Meds&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p3</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Alcohol + No Meds&#34;</span><span class="p">,</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Sneezes/Day&#34;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">&#34;People Count&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p4</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Alcohol + Meds&#34;</span><span class="p">,</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Sneezes/Day&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">,</span> <span class="n">p4</span><span class="p">;</span> <span class="n">layout</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240217_Bayesian_Poisson_Regression/output_5_0.svg" type="" alt="svg"  /></p>
<h3 id="interpreting-the-data">Interpreting the data</h3>
<p>The histograms show that the data from the &ldquo;study&rdquo; resembles a Poisson distribution (as mentioned in the PyMC tutorial, this is obvious, because that&rsquo;s how the data is generated!). Furthermore, the data is telling us something:</p>
<ul>
<li>Looking at the plot for &ldquo;no alcohol and medicine&rdquo; it is clear that most people reported very few sneezes; notice how the histogram skews towards large counts (of people) for very few sneezes</li>
<li>On the other hand, notice how the &ldquo;alcohol and <em>no</em> medicine&rdquo; seems to tell us that many reported somewhere around 35 sneezes per day</li>
</ul>
<p>Again, we can start thinking of a pattern just by looking at the data, and it seems like the data is telling us that if you don&rsquo;t drink alcohol and take antihistamines, you are less likely to be sneezing around than if you drink alcohol and don&rsquo;t take any allergy meds. Makes sense, right?</p>
<h2 id="model">Model</h2>
<p>We established that the data looks like it could be modelled as a Poisson distribution. Thus, we can define our probabilistic model as follows:</p>
<p>$$Y_{obs} \sim Poisson(\lambda)$$</p>
<p>$$\log(\lambda) = \theta&rsquo;\mathbf{x} = \alpha + \beta&rsquo; \mathbf{x}$$</p>
<p>What the above means is that we assume that the observed data outcomes, i.e., the number of sneezes per day, follow a Poisson distribution, which is a discrete probability distribution that models the number of events that occur in a fixed interval of time or space. The rate or intensity of the events, $\lambda$, depends on the predictor variables (the input data) $\mathcal{x}$, such as the season, the temperature, or, in our case, whether a person ingested alcohol and whether the person took antihistamines.</p>
<p>The linear predictor $\theta&rsquo; \mathcal{x}$ is the function that links the predictor variables to the rate parameter, where $\theta = {\alpha, \beta&rsquo;}$ are the parameters of the model.</p>
<p>Looking at the structure of the linear relationship between the paramters of the model, and the predictors:</p>
<p>$$\log(\lambda) = \alpha + \beta&rsquo; \mathcal{x}$$</p>
<p>we can understand that the parameter $\alpha$ is the intercept, which is the expected number of sneezes when all the predictor variables are zero. The parameter $\beta&rsquo;$ is a vector of coefficients, which measure the effect of each predictor variable $\mathcal{x}$ on the number of sneezes. The log link function ensures that the rate parameter $\lambda$ is always positive and allows for multiplicative effects of the predictor variables on the response variable.</p>
<h3 id="define-the-model-with-turingjl">Define the model with <code>Turing.jl</code></h3>
<p>Now that we know how we are modeling our data, we use the package <code>Turing.jl</code> to define the model. <code>Turing.jl</code> is a tool that helps us write models in Julia and find the best parameters for them.</p>
<p>The model has two parts: the prior and the likelihood. The prior is what we think or guess about the parameters before we see the data. The likelihood is how likely the data is under the parameters. The parameters are the numbers that control the model, such as the rate of sneezes.</p>
<p>We use the Poisson distribution for the likelihood, because it is good for counting things, like sneezes. The Poisson distribution has one parameter, the rate of sneezes. The higher the rate, the more sneezes we expect.</p>
<p>We use any distribution for the prior, depending on how much we know about the parameters. If we know nothing, we use a flat prior, which does not favor any value. The prior affects the final answer, because it is our starting point.</p>
<p>We use Bayes’ theorem to combine the prior and the likelihood and get the final answer. The final answer is the posterior, which is what we believe about the parameters after we see the data. The posterior is the best fit for the model and the data.</p>
<p><strong>Let&rsquo;s crank up the Bayes!</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">poisson</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># define the priors</span>
</span></span><span class="line"><span class="cl">		<span class="n">alpha</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">alcohol</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">nomeds</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c"># alc_med ~ Normal(0,1)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># define the likelihood</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	        <span class="n">log_lambda</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">+</span> <span class="n">alcohol</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">nomeds</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl">	        <span class="n">lambda</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">log_lambda</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	        <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Poisson</span><span class="p">(</span><span class="n">lambda</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span></code></pre></div><pre><code>poisson (generic function with 2 methods)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># pass the data to the model function</span>
</span></span><span class="line"><span class="cl">	<span class="c"># pass the predictor data as a Matrix for efficiency</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">poisson</span><span class="p">(</span><span class="kt">Matrix</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">!</span><span class="p">,[</span><span class="ss">:alcohol</span><span class="p">,</span> <span class="ss">:nomeds</span><span class="p">]</span> <span class="p">]),</span> <span class="n">sneeze_data</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="ss">:n_sneezes</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># select the sampler</span>
</span></span><span class="line"><span class="cl"><span class="n">sampler</span> <span class="o">=</span> <span class="n">NUTS</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define the number of sampler</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># set number of chains</span>
</span></span><span class="line"><span class="cl"><span class="n">num_chains</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c"># crank up the Bayes!</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="n">samples</span><span class="p">,</span> <span class="n">num_chains</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[32mSampling (8 threads): 100%|█████████████████████████████| Time: 0:00:00[39m





Chains MCMC chain (1000×15×8 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 8
Samples per chain = 1000
Wall duration     = 13.66 seconds
Compute duration  = 100.67 seconds
parameters        = alpha, alcohol, nomeds
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m  ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m[0m ⋯

       alpha   -0.5025    0.0277    0.0005   2943.5608   2841.2874    1.0030   ⋯
     alcohol    1.7333    0.0186    0.0003   3801.1996   3652.2403    1.0022   ⋯
      nomeds    2.3348    0.0236    0.0004   2901.3750   3410.6453    1.0020   ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

       alpha   -0.5568   -0.5212   -0.5023   -0.4839   -0.4486
     alcohol    1.6974    1.7205    1.7331    1.7458    1.7698
      nomeds    2.2891    2.3189    2.3346    2.3506    2.3824
</code></pre>
<p><strong>NOTE:</strong> The above routine employs the MCMCThreads method to sample multiple chains. However, in order to implement this, one needs to change the environment variables for the number of threads Julia can use. These two threads might shed some light as to how to achieve this:</p>
<ol>
<li><a href="https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading">https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading</a></li>
<li><a href="https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794">https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794</a></li>
</ol>
<p>Of course, if you don&rsquo;t want to bother, then just change the last two functional lines in the cell above so that they read:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">	<span class="c"># set number of chains - comment this out:</span>
</span></span><span class="line"><span class="cl">	<span class="c"># num_chains = 8</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c"># crank up the Bayes! - delete MCMCThreads() and num_chains</span>
</span></span><span class="line"><span class="cl">	<span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">samples</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="visualize-the-results">Visualize the results</h3>
<p>We can see above that we have obtained a sample pool of the posterior distribution of the parameters. This is what we were looking for. What this means is that now we have a posterior distribution (in the form of a sample pool), which we can also summarize with summary statistics.</p>
<p>Let&rsquo;s look at the diagnostics plots and the summary statistics.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240217_Bayesian_Poisson_Regression/output_13_0.svg" type="" alt="svg"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">DataFrame</span><span class="p">(</span><span class="n">summarystats</span><span class="p">(</span><span class="n">chain</span><span class="p">))</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>3×8 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">parameters</th><th style = "text-align: left;">mean</th><th style = "text-align: left;">std</th><th style = "text-align: left;">mcse</th><th style = "text-align: left;">ess_bulk</th><th style = "text-align: left;">ess_tail</th><th style = "text-align: left;">rhat</th><th style = "text-align: left;">ess_per_sec</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Symbol" style = "text-align: left;">Symbol</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: left;">alpha</td><td style = "text-align: right;">-0.502519</td><td style = "text-align: right;">0.0276553</td><td style = "text-align: right;">0.000511069</td><td style = "text-align: right;">2943.56</td><td style = "text-align: right;">2841.29</td><td style = "text-align: right;">1.00298</td><td style = "text-align: right;">29.2397</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: left;">alcohol</td><td style = "text-align: right;">1.7333</td><td style = "text-align: right;">0.0186097</td><td style = "text-align: right;">0.000301611</td><td style = "text-align: right;">3801.2</td><td style = "text-align: right;">3652.24</td><td style = "text-align: right;">1.00224</td><td style = "text-align: right;">37.759</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: left;">nomeds</td><td style = "text-align: right;">2.3348</td><td style = "text-align: right;">0.0236269</td><td style = "text-align: right;">0.000436385</td><td style = "text-align: right;">2901.38</td><td style = "text-align: right;">3410.65</td><td style = "text-align: right;">1.00197</td><td style = "text-align: right;">28.8207</td></tr></tbody></table></div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># taking the first chain</span>
</span></span><span class="line"><span class="cl"><span class="n">c1</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="o">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Calculating the exponentiated means</span>
</span></span><span class="line"><span class="cl"><span class="n">b0_exp</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">c1</span><span class="p">[</span><span class="ss">:alpha</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="n">b1_exp</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">c1</span><span class="p">[</span><span class="ss">:alcohol</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="n">b2_exp</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">c1</span><span class="p">[</span><span class="ss">:nomeds</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;The exponent of the mean of the weights (or coefficients) are: </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;b0: &#34;</span><span class="p">,</span> <span class="n">b0_exp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;b1: &#34;</span><span class="p">,</span> <span class="n">b1_exp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;b2: &#34;</span><span class="p">,</span> <span class="n">b2_exp</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>The exponent of the mean of the weights (or coefficients) are: 

b0: 0.604415461752317
b1: 5.658573583760772
b2: 10.342642711232362
</code></pre>
<p>Notice how we are <strong>not</strong> recovering the original $\lambda$ values that were used to create this data set, i.e.:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">	<span class="n">theta_noalc_nomed</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl">	<span class="n">theta_noalc_med</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="n">theta_alc_nomed</span> <span class="o">=</span> <span class="mi">36</span>
</span></span><span class="line"><span class="cl">	<span class="n">theta_alc_med</span> <span class="o">=</span> <span class="mi">3</span>
</span></span></code></pre></div><p>Instead, we are recovering <em>the parameters of the linear function</em>, in other words, $\theta = {\alpha, \beta&rsquo;}$ in the linear relation:</p>
<p>$$\log(\lambda) = \alpha + \beta_1 x_{alc} + \beta_2 x_{meds}$$</p>
<p>where $x_{(\cdot)}$ represents the binary variable of whether the subject took alcohol/medicine or not.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This tutorial shows how to perform Bayesian inference on <em>discrete</em> data, e.g. the record of how many sneezes per day a group of people had, and classified according to their alcohol and medication consumption.</p>
<p>In real-world scenarios, we would obviously not know the parameter values, since this is precisely what we want to find out by incorporating whatever we knew about them into what we observed.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Logistic Regression with Julia and Turing.jl</title>
      <link>http://localhost:59413/posts/20240109_bayesian-logistic-regression/20240109_bayesian-logistic-regression/</link>
      <pubDate>Tue, 09 Jan 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20240109_bayesian-logistic-regression/20240109_bayesian-logistic-regression/</guid>
      <description>Applying Turing.jl package in Julia for a probabilistic approach to a classification problem on a real-world dataset.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="problem-statement">Problem Statement</h2>
<p>You are interested in studying the factors that influence the likelihood of heart disease among patients.</p>
<p>You have a dataset of 303 patients, each with 14 variables: age, sex, chest pain type, resting blood pressure, serum cholesterol, fasting blood sugar, resting electrocardiographic results, maximum heart rate achieved, exercise induced angina, oldpeak, slope, number of major vessels, thalassemia, and diagnosis of heart disease.</p>
<p>You want to use Bayesian logistic regression to model the probability of heart disease (the outcome variable) as a function of some or all of the other variables (the predictor variables).</p>
<p>You also want to compare different models and assess their fit and predictive performance.</p>
<h2 id="bayesian-workflow">Bayesian Workflow</h2>
<p>For this project, I will try to follow this workflow:</p>
<ol>
<li>
<p>Data exploration: Explore the data using descriptive statistics and visualizations to get a sense of the distribution, range, and correlation of the variables. Identify any outliers, missing values, or potential errors in the data. Transform or standardize the variables if needed.</p>
</li>
<li>
<p>Model specification: Specify a probabilistic model that relates the outcome variable to the predictor variables using a logistic regression equation. Choose appropriate priors for the model parameters, such as normal, student-t, or Cauchy distributions. You can use the <code>brms</code> package in Julia to define and fit Bayesian models using a formula syntax similar to <code>lme4</code>. However, try to use <code>Turing.jl</code></p>
</li>
<li>
<p>Model fitting: Fit the model using a sampling algorithm such as Hamiltonian Monte Carlo (HMC) or No-U-Turn Sampler (NUTS). You can use the <code>DynamicHMC</code> or <code>Turing.jl</code> package in Julia to implement these algorithms. Check the convergence and mixing of the chains using diagnostics such as trace plots, autocorrelation plots, effective sample size, and potential scale reduction factor. You can use the <code>MCMCDiagnostics</code> or the included diagnostics features in <code>Turing.jl</code> package in Julia to compute these diagnostics.</p>
</li>
<li>
<p>Model checking: Check the fit and validity of the model using posterior predictive checks, residual analysis, and sensitivity analysis. You can use the <code>PPCheck</code> package in Julia to perform posterior predictive checks, which compare the observed data to data simulated from the posterior predictive distribution. You can use the <code>BayesianRidgeRegression</code> package in Julia to perform residual analysis, which plots the residuals against the fitted values and the predictor variables. You can use the <code>Sensitivity</code> package in Julia to perform sensitivity analysis, which measures how the posterior distribution changes with respect to the prior distribution or the likelihood function.</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># import packages</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">CSV</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">LaTeXStrings</span><span class="p">,</span> <span class="n">Distributions</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Images</span><span class="p">,</span> <span class="n">ImageIO</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Random</span><span class="o">:</span> <span class="n">seed!</span>
</span></span><span class="line"><span class="cl"><span class="n">seed!</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Random.TaskLocalRNG()
</code></pre>
<h2 id="data-exploration">Data Exploration</h2>
<p>After &ldquo;collecting&rdquo; the data, we may import it and arrange it so we can use it further.</p>
<p>The data set can be found in this <a href="https://www.kaggle.com/datasets/aavigan/cleveland-clinic-heart-disease-dataset">Kaggle link</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s">&#34;data/processed_cleveland.csv&#34;</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map!</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">);</span> <span class="c"># make the outcome binary</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>303×14 DataFrame</span></div><div style = "float: right;"><span style = "font-style: italic;">278 rows omitted</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">age</th><th style = "text-align: left;">sex</th><th style = "text-align: left;">cp</th><th style = "text-align: left;">trestbps</th><th style = "text-align: left;">chol</th><th style = "text-align: left;">fbs</th><th style = "text-align: left;">restecg</th><th style = "text-align: left;">thalach</th><th style = "text-align: left;">exang</th><th style = "text-align: left;">oldpeak</th><th style = "text-align: left;">slope</th><th style = "text-align: left;">ca</th><th style = "text-align: left;">thal</th><th style = "text-align: left;">num</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "String1" style = "text-align: left;">String1</th><th title = "String1" style = "text-align: left;">String1</th><th title = "Int64" style = "text-align: left;">Int64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">63</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">145</td><td style = "text-align: right;">233</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">150</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2.3</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">6</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">67</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">160</td><td style = "text-align: right;">286</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">108</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1.5</td><td style = "text-align: right;">2</td><td style = "text-align: left;">3</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">67</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">120</td><td style = "text-align: right;">229</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">129</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2.6</td><td style = "text-align: right;">2</td><td style = "text-align: left;">2</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">37</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3</td><td style = "text-align: right;">130</td><td style = "text-align: right;">250</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">187</td><td style = "text-align: right;">0</td><td style = "text-align: right;">3.5</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">41</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">130</td><td style = "text-align: right;">204</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">172</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.4</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">6</td><td style = "text-align: right;">56</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">120</td><td style = "text-align: right;">236</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">178</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.8</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">7</td><td style = "text-align: right;">62</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">268</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">160</td><td style = "text-align: right;">0</td><td style = "text-align: right;">3.6</td><td style = "text-align: right;">3</td><td style = "text-align: left;">2</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">8</td><td style = "text-align: right;">57</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">120</td><td style = "text-align: right;">354</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">163</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.6</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">9</td><td style = "text-align: right;">63</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">130</td><td style = "text-align: right;">254</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">147</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.4</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">10</td><td style = "text-align: right;">53</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">203</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">155</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3.1</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">11</td><td style = "text-align: right;">57</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">192</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">148</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.4</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">6</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">12</td><td style = "text-align: right;">56</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">140</td><td style = "text-align: right;">294</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">153</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.3</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">13</td><td style = "text-align: right;">56</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3</td><td style = "text-align: right;">130</td><td style = "text-align: right;">256</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">142</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.6</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">6</td><td style = "text-align: right;">1</td></tr><tr><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">292</td><td style = "text-align: right;">55</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">132</td><td style = "text-align: right;">342</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">166</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.2</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">293</td><td style = "text-align: right;">44</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">120</td><td style = "text-align: right;">169</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">144</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2.8</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">6</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">294</td><td style = "text-align: right;">63</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">187</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">144</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4.0</td><td style = "text-align: right;">1</td><td style = "text-align: left;">2</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">295</td><td style = "text-align: right;">63</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">124</td><td style = "text-align: right;">197</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">136</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">296</td><td style = "text-align: right;">41</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">120</td><td style = "text-align: right;">157</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">182</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">297</td><td style = "text-align: right;">59</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">164</td><td style = "text-align: right;">176</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">90</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.0</td><td style = "text-align: right;">2</td><td style = "text-align: left;">2</td><td style = "text-align: left;">6</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">298</td><td style = "text-align: right;">57</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">241</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">123</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.2</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">299</td><td style = "text-align: right;">45</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">110</td><td style = "text-align: right;">264</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">132</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.2</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">300</td><td style = "text-align: right;">68</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">144</td><td style = "text-align: right;">193</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">141</td><td style = "text-align: right;">0</td><td style = "text-align: right;">3.4</td><td style = "text-align: right;">2</td><td style = "text-align: left;">2</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">301</td><td style = "text-align: right;">57</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">130</td><td style = "text-align: right;">131</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">115</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1.2</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">302</td><td style = "text-align: right;">57</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">130</td><td style = "text-align: right;">236</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">174</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">303</td><td style = "text-align: right;">38</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3</td><td style = "text-align: right;">138</td><td style = "text-align: right;">175</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">173</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">1</td><td style = "text-align: left;">?</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr></tbody></table></div>
<p>In the above data frame, the attributes are as follows:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">Variable Name</th>
          <th style="text-align: center">Role</th>
          <th style="text-align: center">Type</th>
          <th style="text-align: center">Demographic</th>
          <th style="text-align: center">Description</th>
          <th style="text-align: center">Units</th>
          <th style="text-align: center">Missing Values</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">age</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Integer</td>
          <td style="text-align: center">Age</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">years</td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">sex</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Categorical</td>
          <td style="text-align: center">Sex</td>
          <td style="text-align: center"></td>
          <td style="text-align: center"></td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">cp</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Categorical</td>
          <td style="text-align: center"></td>
          <td style="text-align: center"></td>
          <td style="text-align: center"></td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">trestbps</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Integer</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">resting blood pressure (on admission to the hospital)</td>
          <td style="text-align: center">mm Hg</td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">chol</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Integer</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">serum cholestoral</td>
          <td style="text-align: center">mg/dl</td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">fbs</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Categorical</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">fasting blood sugar &gt; 120 mg/dl</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">restecg</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Categorical</td>
          <td style="text-align: center"></td>
          <td style="text-align: center"></td>
          <td style="text-align: center"></td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">thalach</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Integer</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">maximum heart rate achieved</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">exang</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Categorical</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">exercise induced angina</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: center">oldpeak</td>
          <td style="text-align: center">Feature</td>
          <td style="text-align: center">Integer</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">ST depression induced by exercise relative to rest</td>
          <td style="text-align: center"></td>
          <td style="text-align: center">no</td>
      </tr>
      <tr>
          <td style="text-align: left"></td>
          <td style="text-align: left"></td>
          <td style="text-align: left"></td>
          <td style="text-align: left"></td>
          <td style="text-align: left"></td>
          <td style="text-align: left"></td>
          <td style="text-align: left"></td>
      </tr>
  </tbody>
</table>
<p>Complete attribute documentation:</p>
<pre><code>1. age: age in years
2. sex: sex (1 = male; 0 = female)
3. cp: chest pain type
	- Value 1: typical angina
	- Value 2: atypical angina
	- Value 3: non-anginal pain
	- Value 4: asymptomatic
4. trestbps: resting blood pressure (in mm Hg on admission to the
hospital)
5. chol: serum cholestoral in mg/dl
6.fbs: fasting blood sugar &gt; 120 mg/dl (1 = true; 0 = false)
7. restecg: resting electrocardiographic results
	- Value 0: normal
	- Value 1: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of &gt; 0.05 mV)
	- Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria
8. thalach: maximum heart rate achieved
9. exang: exercise induced angina (1 = yes; 0 = no)
10. oldpeak: ST depression induced by exercise relative to rest
11. slope: the slope of the peak exercise ST segment
	- Value 1: upsloping
	- Value 2: flat
	- Value 3: downsloping
12. ca: number of major vessels (0-3) colored by flourosopy (for calcification of vessels)
13. thal: results of nuclear stress test (3 = normal; 6 = fixed defect; 7 = reversable defect)
14. num: target variable representing diagnosis of heart disease (angiographic disease status) in any major vessel
	- Value 0: &lt; 50% diameter narrowing
	- Value 1: &gt; 50% diameter narrowing
</code></pre>
<h2 id="data-interpretation">Data Interpretation</h2>
<p>After collecting the data, it has been imported as a Data Frame. Now, to understand what we will do with this exercise, we need to analyze the data by means of Bayesian Logistic Regression.</p>
<p>With this type of analysis, we can make predictions on (typically) binary outcomes, based on a set of parameters. In this particular case, we are interested in predicting whether a patient will have heart disease based on a set of parameters such as age, chest pain, blood pressure, etc.</p>
<p>In terms of the data available, we have a set of 303 observations (303 patients) whose symptoms and circumstances have been recorded, and the <strong>outcome</strong> is the heart disease diagnosis. To simplify things, this data set has a binary outcome, i.e. heart disease <em>present/not present</em>.</p>
<p>Additionally, this study is divided in two parts: first, I will set up the logistic regression model to include only one predictor, i.e., <strong>age</strong>. Afterwards, an analysis will be performed including two or more predictors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># find the range for the age, to set the plot limits below</span>
</span></span><span class="line"><span class="cl"><span class="c"># min_age = minimum(df.age)</span>
</span></span><span class="line"><span class="cl"><span class="n">min_age</span> <span class="o">=</span> <span class="mi">15</span> 
</span></span><span class="line"><span class="cl"><span class="n">max_age</span> <span class="o">=</span> <span class="mi">85</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># visualize data</span>
</span></span><span class="line"><span class="cl"><span class="n">p_data</span> <span class="o">=</span> <span class="n">scatter</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">xlims</span> <span class="o">=</span> <span class="p">(</span><span class="n">min_age</span><span class="p">,</span> <span class="n">max_age</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="n">color</span> <span class="o">=</span> <span class="ss">:red</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">markersize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Probability of Heart Disease&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Age (years)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ylabel</span> <span class="o">=</span> <span class="s">&#34;Probability of Heart Disease&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">widen</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">dpi</span> <span class="o">=</span> <span class="mi">150</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_7_0.svg" type="" alt="svg"  /></p>
<h2 id="model-specification">Model Specification</h2>
<p>In this stage of the workflow, we will specify the Bayesian model and then use <code>Turing.jl</code> to program it in Julia.</p>
<p>The model I will use for this analysis is a Bayesian Logistic Regression model, which relates the probability of heart disease to a <em>linear combination of the predictor variables</em>, using a logistic function. The model can be written as:</p>
<p>$$\begin{aligned}
y_i &amp;\sim Bernoulli(p_i) \\
p_i &amp;= \frac{1}{1+e^{-\eta_i}} \\
\eta_i &amp;= \alpha + {\beta_1 x_{i,1}} + {\beta_2 x_{i,2}} + \ldots + {\beta_{13} x_{i,13}} \\
\alpha &amp;\sim \mathcal{N}(\mu_\alpha,\sigma_\sigma) \\
\beta_j &amp;\sim \mathcal{N}(\mu_{\beta},\sigma_{\beta}) \\
\end{aligned}$$</p>
<p>where $y_i$ is the outcome for the <em>i-th</em> patient, $p_i$ is the probability of heart disease for the <em>i-th</em> patient, $\eta_i$ is the linear predictor for the <em>i-th</em> patient, $\alpha$ and $\beta_j$ are the intercept and coefficient for the <em>j-th</em> predictor variable, respectively, and $x_{ij}$ is the value of the <em>j-th</em> predictor variable for the <em>i-th</em> patient.</p>
<p>The assumptions that I am making are:</p>
<ol>
<li>The outcome variable follows a Bernoulli distribution, i.e. $y_i \sim Bernoulli(p_i)$, which is appropriate for binary outcomes</li>
<li>The predictor variables are linearly related to the log-odds of the outcome variable, i.e. $\log(\frac{p}{1-p})$ which is a common assumption for logistic regression models</li>
<li>The prior distributions for the model parameters are uniform, which are weakly informative and reflect my prior beliefs about the plausible range of the parameters</li>
</ol>
<p>Regarding point (2):</p>
<p>That statement means that the log-odds of the outcome variable (the log of the odds ratio) can be expressed as a linear function of the predictor variables. Mathematically, this can be written as:</p>
<p>$$\log(\frac{p}{1-p}) = \alpha + \beta_1 x_1 + \beta_2 x_2 + \ldots + \beta_k x_k$$</p>
<p>where $p$ is the probability of the outcome variable being 1, $x_1, x_2, \ldots, x_k$ are the predictor variables, and $\alpha, \beta_1, \beta_2, \ldots, \beta_k$ are the coefficients (parameters).</p>
<p>This assumption implies that the effect of each predictor variable on the log-odds of the outcome variable is contant, regardless of the values of the other predictor variables. It also implies that the relationship between the predictor variables and the probability of the outcome variable is non-linear, as the probability is obtained by applying the inverse of the log-odds function, which is the logistic function:</p>
<p>$$p = \frac{1}{1+e^{-(\alpha + \beta_1 x_1 + \beta_2 x_2 + \ldots + \beta_k x_k)}}$$</p>
<p>The logistic function is an S-shaped curve that maps any real number to a value between 0 and 1. It has the property that as the linear predictor increases, the probability approaches 1, and as the linear predictor decreases, the probability approaches 0.</p>
<h3 id="model-specification-using-turingjl">Model Specification Using <code>Turing.jl</code></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># define the Bayesian model</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">logit_model</span><span class="p">(</span><span class="n">predictors</span><span class="p">,</span> <span class="n">disease</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># priors</span>
</span></span><span class="line"><span class="cl">	<span class="n">α</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">β</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># likelihood</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">η</span> <span class="o">=</span> <span class="n">α</span> <span class="o">.+</span> <span class="n">β</span><span class="o">.*</span><span class="n">predictors</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">./</span> <span class="p">(</span><span class="mi">1</span> <span class="o">.+</span> <span class="n">exp</span><span class="o">.</span><span class="p">(</span><span class="o">-</span><span class="n">η</span><span class="p">))</span>     <span class="c"># remember to include the &#34;.&#34;!</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">eachindex</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">disease</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Bernoulli</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>logit_model (generic function with 2 methods)
</code></pre>
<h4 id="crank-up-the-bayes">Crank up the Bayes!</h4>
<p>Run the model using <code>sample(model, sampler, opt_argument, samples, chains)</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># infer posterior probability</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">logit_model</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sampler</span> <span class="o">=</span> <span class="n">NUTS</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1_000</span>
</span></span><span class="line"><span class="cl"><span class="n">num_chains</span> <span class="o">=</span> <span class="mi">8</span> 		<span class="c"># set the number of chains</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="n">samples</span><span class="p">,</span> <span class="n">num_chains</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.05
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[32mSampling (8 threads): 100%|█████████████████████████████| Time: 0:00:01[39m





Chains MCMC chain (1000×14×8 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 8
Samples per chain = 1000
Wall duration     = 13.18 seconds
Compute duration  = 100.1 seconds
parameters        = α, β
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m  ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m[0m ⋯

           α   -3.0326    0.7453    0.0210   1242.6057   1246.3034    1.0043   ⋯
           β    0.0524    0.0134    0.0004   1224.4182   1259.7727    1.0037   ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

           α   -4.4814   -3.5432   -3.0127   -2.5183   -1.5973
           β    0.0264    0.0432    0.0521    0.0617    0.0789
</code></pre>
<p><strong>NOTE</strong>: The above routine employs the <code>MCMCThreads()</code> method to sample multiple chains. However, to implement this, one needs to change the environment variables for the number of threads Julia can use. These two discussions might shed some light as to how to achieve this:</p>
<ol>
<li><a href="https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading">https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading</a></li>
<li><a href="https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794">https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794</a></li>
</ol>
<p>Of course, if you don&rsquo;t want to bother, then just change the last two functional lines in the cell above so that they read:</p>
<pre><code># set number of chains - comment this out:
# num_chains = 8

# crank up the Bayes! - delete MCMCThreads() and num_chains
chain = sample(model, sampler, samples)
</code></pre>
<h4 id="plot-the-mcmc-diagnostics">Plot the MCMC Diagnostics</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span> <span class="n">dpi</span> <span class="o">=</span> <span class="mi">150</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_15_0.svg" type="" alt="png"  /></p>
<h4 id="get-the-summary-statistics">Get the Summary Statistics</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">summarystats</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m  ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m[0m ⋯

           α   -3.0326    0.7453    0.0210   1242.6057   1246.3034    1.0043   ⋯
           β    0.0524    0.0134    0.0004   1224.4182   1259.7727    1.0037   ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<h3 id="plot-and-interpret-the-results">Plot and Interpret the Results</h3>
<p>Ok, how do we interpret the results from a Bayesian approach? Let&rsquo;s start by plotting the results. This will help us understand not only the results, but really grasp the power of a Bayesian model in action.</p>
<p>From a frequentist or a machine learning approach, we would expect to find a function that models the data the best possible way, i.e. fit a model. If we were to visualize it, we would see one single sigmoid curve trying its best to explain the data.</p>
<p>How about this chart here, though? This chart is a collection of possible outcomes given that the <em>parameters</em> $\alpha$ and $\beta$ in this case, are modeled as random variables with some probability distribution. Therefore, there is an uncertainty associated with them. This uncertainty is naturally <em>propagated</em> onto the sigmoid function. Therefore, there is also an uncertainty associated with that sigmoid curve that we are trying to model.</p>
<p>Again, below we can see a collection of possible outcomes given the parameter sample space. There is a darker region where most sigmoid functions turned out, and these tend to be the most probable sigmoid functions, or, in other words, these sigmoid functions are the most probable functions that could fit the data, considering the distributions of the parameters too!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="kt">Int</span><span class="p">(</span><span class="n">samples</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>100
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">x_line</span> <span class="o">=</span> <span class="mi">15</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="n">max_age</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">m</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">line</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">m</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">line</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">plot!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="n">x_line</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span> <span class="ss">:blue</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">,</span> <span class="n">dpi</span> <span class="o">=</span> <span class="mi">150</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p_data</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_20_0.svg" type="" alt="png"  /></p>
<h3 id="making-predictions">Making Predictions</h3>
<p>So why go through all this trouble, you might be asking. Well, one of the reasons we want to use probabilistic models is, first, to make predictions. But I would go further than that: these models are useful when making informed decisions. Let&rsquo;s try this out.</p>
<p>Let&rsquo;s make predictions for different arbitrary ages (50, 60, 70, 80, 20):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">new_Age</span> <span class="o">=</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">p_disease</span> <span class="o">=</span> <span class="n">fill</span><span class="p">(</span><span class="nb">missing</span><span class="p">,</span> <span class="n">length</span><span class="p">(</span><span class="n">new_Age</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">predictions</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">logit_model</span><span class="p">(</span><span class="n">new_Age</span><span class="p">,</span> <span class="n">p_disease</span><span class="p">),</span> <span class="n">chain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">summarystats</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m [0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m [0m ⋯

  disease[1]    0.3855    0.4867    0.0055   7711.3762        NaN    0.9998    ⋯
  disease[2]    0.5258    0.4994    0.0055   8284.1301        NaN    0.9998    ⋯
  disease[3]    0.6432    0.4791    0.0056   7441.4457        NaN    1.0002    ⋯
  disease[4]    0.7555    0.4298    0.0050   7352.4368        NaN    0.9998    ⋯
  disease[5]    0.1224    0.3277    0.0039   7016.6404        NaN    1.0004    ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<h4 id="interpreting-the-predictions">Interpreting the predictions</h4>
<p>The last operations make predictions of heart diseased based <em>on age only</em>. What the predictions mean is that, given the data, the probability distribution of an individual of age 50 to have heart disease has a mean of 0.379, and a standard deviation of 0.485 (this is highly uncertain, by the way).</p>
<p>Similarly, a 20-year-old individual has a probability with a mean of 0.13 and standard deviation of 0.336 of having heart disease.</p>
<p>These statistics are extremely powerful when you are trying to make decisions, such as when diagnosing Heart Disease. It stands to reason that, if you were a physician, you want to know what your model says might be wrong (or not) with your patient, but you also want to know how much you can trust that prediction.</p>
<p>If your model classifies Patient X as having heart disease, you would probably want to know how sure you are of this. And this certainty comes partially from&hellip; you guessed it: your priors <em>and</em> the data.</p>
<p>In the plot below, we can see the where the predictions lie. Note that these probabilities are on a continuum given by the sigmoid function. But we want our final decision to be a yes or a no. To do that, we need to set a decision threshold.</p>
<p>We will do that at the end of the next section.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="p">(</span><span class="n">new_Age</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pred_mean</span> <span class="o">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">pred_plot</span> <span class="o">=</span> <span class="n">scatter!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="p">(</span><span class="n">new_Age</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pred_mean</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p_data</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_24_0.svg" type="" alt="png"  /></p>
<h2 id="model-specification-using-multiple-predictors">Model Specification Using Multiple Predictors</h2>
<h3 id="some-data-cleaning">Some Data Cleaning</h3>
<p>In this part, I am using the <code>Turing.jl</code> documentation tutorial found in <a href="https://turinglang.org/dev/tutorials/02-logistic-regression/">https://turinglang.org/dev/tutorials/02-logistic-regression/</a>.</p>
<p>In the tutorial, they quite rightly incorporate a train/test split, and data normalization, which is the recommended practice. I didn&rsquo;t do it in the first part of this tutorial to keep things simple!</p>
<p>Here is how they handle the split and the data normalization using <code>MLUtils</code>.</p>
<pre><code>function split_data(df, target; at=0.70)
    shuffled = shuffleobs(df)
    return trainset, testset = stratifiedobs(row -&gt; row[target], shuffled; p=at)
end

features = [:StudentNum, :Balance, :Income]
numerics = [:Balance, :Income]
target = :DefaultNum

trainset, testset = split_data(data, target; at=0.05)
for feature in numerics
    μ, σ = rescale!(trainset[!, feature]; obsdim=1)
    rescale!(testset[!, feature], μ, σ; obsdim=1)
end

# Turing requires data in matrix form, not dataframe
train = Matrix(trainset[:, features])
test = Matrix(testset[:, features])
train_label = trainset[:, target]
test_label = testset[:, target];
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">MLDataUtils</span><span class="o">:</span> <span class="n">shuffleobs</span><span class="p">,</span> <span class="n">stratifiedobs</span><span class="p">,</span> <span class="n">rescale!</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">StatsFuns</span> <span class="c"># we introduce this package so we can later call the </span>
</span></span><span class="line"><span class="cl">                <span class="c"># logistic function directly instead of defining it manually as before</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">split_data</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">target</span><span class="p">;</span> <span class="n">at</span><span class="o">=</span><span class="mf">0.70</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">shuffled</span> <span class="o">=</span> <span class="n">shuffleobs</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">trainset</span><span class="p">,</span> <span class="n">testset</span> <span class="o">=</span> <span class="n">stratifiedobs</span><span class="p">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">row</span><span class="p">[</span><span class="n">target</span><span class="p">],</span> <span class="n">shuffled</span><span class="p">;</span> <span class="n">p</span><span class="o">=</span><span class="n">at</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:age</span><span class="p">,</span> <span class="ss">:cp</span><span class="p">,</span> <span class="ss">:chol</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">target</span> <span class="o">=</span> <span class="ss">:num</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="n">trainset</span><span class="p">,</span> <span class="n">testset</span> <span class="o">=</span> <span class="n">split_data</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">target</span><span class="p">;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># convert the feature columns to float64 to ensure compatibility with rescale!</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">feature</span> <span class="k">in</span> <span class="n">features</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="n">float</span><span class="o">.</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">feature</span> <span class="k">in</span> <span class="n">features</span>
</span></span><span class="line"><span class="cl">    <span class="n">μ</span><span class="p">,</span> <span class="n">σ</span> <span class="o">=</span> <span class="n">rescale!</span><span class="p">(</span><span class="n">trainset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">];</span> <span class="n">obsdim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">rescale!</span><span class="p">(</span><span class="n">testset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">],</span> <span class="n">μ</span><span class="p">,</span> <span class="n">σ</span><span class="p">;</span> <span class="n">obsdim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c"># Turing requires data in matrix form, not dataframe</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span> <span class="o">=</span> <span class="kt">Matrix</span><span class="p">(</span><span class="n">trainset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">features</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">test</span> <span class="o">=</span> <span class="kt">Matrix</span><span class="p">(</span><span class="n">testset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">features</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">train_label</span> <span class="o">=</span> <span class="n">trainset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">target</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">test_label</span> <span class="o">=</span> <span class="n">testset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">target</span><span class="p">];</span>
</span></span></code></pre></div><h3 id="inference">Inference</h3>
<p>Now that our data is formatted, we can perform our Bayesian logistic regression with multiple predictors: using chest pain (cp), age (age), resting bloodpressure (tresttbps) and cholesterol (chol) levels.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">logreg_multi</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># priors</span>
</span></span><span class="line"><span class="cl">	<span class="n">intercept</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">age</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">cp</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">chol</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">n</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">n</span>
</span></span><span class="line"><span class="cl">		<span class="c"># call the logistic function directly, instead of manually</span>
</span></span><span class="line"><span class="cl">		<span class="n">v</span> <span class="o">=</span> <span class="n">logistic</span><span class="p">(</span><span class="n">intercept</span> <span class="o">+</span> <span class="n">age</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">cp</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">chol</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Bernoulli</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>logreg_multi (generic function with 2 methods)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">X</span> <span class="o">=</span> <span class="n">train</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="n">train_label</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="n">size</span><span class="p">(</span><span class="n">train</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="n">test</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>(212, 3)(91, 3)
</code></pre>
<p>Now we build the model and create the chain:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">model_multi</span> <span class="o">=</span> <span class="n">logreg_multi</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">chain_multi</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model_multi</span><span class="p">,</span> <span class="n">NUTS</span><span class="p">(),</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="mi">2_000</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span> <span class="c"># select 2000 samples directly</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 1.6
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 1.6
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 1.6





Chains MCMC chain (2000×16×8 Array{Float64, 3}):

Iterations        = 1001:1:3000
Number of chains  = 8
Samples per chain = 2000
Wall duration     = 11.32 seconds
Compute duration  = 87.27 seconds
parameters        = intercept, age, cp, chol
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m   ess_bulk [0m [1m   ess_tail [0m [1m    rhat[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m    Float64 [0m [90m    Float64 [0m [90m Float64[0m ⋯

   intercept   -0.2821    0.1647    0.0012   20113.9419   13042.8456    1.0003 ⋯
         age    0.6003    0.1760    0.0013   18327.5449   12926.7418    1.0001 ⋯
          cp    1.0699    0.1922    0.0014   19583.1899   13534.2405    0.9999 ⋯
        chol   -0.0073    0.1641    0.0012   18280.4944   12242.8280    1.0004 ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

   intercept   -0.6118   -0.3923   -0.2817   -0.1711    0.0388
         age    0.2645    0.4792    0.5964    0.7178    0.9575
          cp    0.7106    0.9372    1.0636    1.1963    1.4603
        chol   -0.3283   -0.1177   -0.0080    0.1025    0.3151
</code></pre>
<h3 id="plot-the-mcmc-diagnostics-1">Plot the MCMC Diagnostics</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain_multi</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_34_0.svg" type="" alt="png"  /></p>
<h3 id="summary-statistics">Summary Statistics</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">summarystats</span><span class="p">(</span><span class="n">chain_multi</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m   ess_bulk [0m [1m   ess_tail [0m [1m    rhat[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m    Float64 [0m [90m    Float64 [0m [90m Float64[0m ⋯

   intercept   -0.2821    0.1647    0.0012   20113.9419   13042.8456    1.0003 ⋯
         age    0.6003    0.1760    0.0013   18327.5449   12926.7418    1.0001 ⋯
          cp    1.0699    0.1922    0.0014   19583.1899   13534.2405    0.9999 ⋯
        chol   -0.0073    0.1641    0.0012   18280.4944   12242.8280    1.0004 ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<h2 id="thank-you">Thank you!</h2>
<p>And that concludes this little tutorial showcasing the power of a Bayesian model and the fun of using Julia. Thank you for stopping by!</p>
<p>Victor Flores</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Linear Regression with Julia and Turing.jl</title>
      <link>http://localhost:59413/posts/20231110_bayesian_linear_regression_julia/20231110_bayesian_linear_regression_julia/</link>
      <pubDate>Fri, 10 Nov 2023 14:53:29 +0800</pubDate>
      
      <guid>http://localhost:59413/posts/20231110_bayesian_linear_regression_julia/20231110_bayesian_linear_regression_julia/</guid>
      <description>Learn the basics of Bayesian linear regression using Julia and Turing.jl. This tutorial covers model formulation, implementation, and interpretation through a practical example.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="finding-a-linear-relationship-between-height-and-weight-using-bayesian-methods">Finding a Linear Relationship Between Height and Weight Using Bayesian Methods</h2>
<h3 id="problem-statement">Problem Statement</h3>
<p>You have some data on the relationship between the height and weight of some people, and you want to fit a linear model of the form:</p>
<p>$$y = \alpha + \beta x + \varepsilon$$</p>
<p>where $y$ is the weight, $x$ is the height, $\alpha$ is the intercept, $\beta$ is the slope, and $\varepsilon$ is the error term. You want to use Bayesian inference to estimate the posterior distributions of $\alpha$ and $\beta$ given the data and some prior assumptions. You also want to use probabilistic programming to implement the Bayesian model and perform inference using a package like <code>Turing.jl</code>.</p>
<p>Your task is to write the code in Julia that can generate some synthetic data (or use an existing data set), define the Bayesian linear regression model, and sample from the posterior distributions using Hamiltonian Monte Carlo (HMC).</p>
<h6 id="credit">Credit</h6>
<p>This exercise is heavily inspired, and mostly taken from, the doggo&rsquo;s tutorial. Please visit his <a href="https://www.youtube.com/@doggodotjl">Youtube channel here</a>, it&rsquo;s an amazing starting point for Julia programming!</p>
<h3 id="import-the-necessary-packages">Import the Necessary Packages</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">LinearAlgebra</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">CSV</span><span class="p">,</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">Plots</span><span class="p">,</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">LaTeXStrings</span>
</span></span></code></pre></div><h3 id="bayesian-workflow">Bayesian Workflow</h3>
<p>For this exercise, I will implement the following workflow:</p>
<ul>
<li>Collect data: this will be implemented by downloading the relevant data</li>
<li>Build a Bayesian model: will use <code>Turing.jl</code> to build the model</li>
<li>Infer the posterior distributions of the parameters $\alpha$ and $\beta$</li>
<li>Evaluate the fit of the model</li>
</ul>
<h4 id="collecting-the-data">Collecting the data</h4>
<p>The data to be analyzed will be the height vs. weight data from:
<a href="https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset">https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset</a>.</p>
<p>Since the dataset is too large, we will select only the first 1000 entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># collect data</span>
</span></span><span class="line"><span class="cl"><span class="c"># this data set was downloaded from kaggle:</span>
</span></span><span class="line"><span class="cl"><span class="c"># https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="s">&#34;data&#34;</span><span class="p">,</span> <span class="s">&#34;SOCR-HeightWeight.csv&#34;</span><span class="p">),</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># select only 100 entries</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="o">:</span><span class="mi">1000</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">first</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>5×3 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">Index</th><th style = "text-align: left;">Height(Inches)</th><th style = "text-align: left;">Weight(Pounds)</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">65.7833</td><td style = "text-align: right;">112.993</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">2</td><td style = "text-align: right;">71.5152</td><td style = "text-align: right;">136.487</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">3</td><td style = "text-align: right;">69.3987</td><td style = "text-align: right;">153.027</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">4</td><td style = "text-align: right;">68.2166</td><td style = "text-align: right;">142.335</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">5</td><td style = "text-align: right;">67.7878</td><td style = "text-align: right;">144.297</td></tr></tbody></table></div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># change the column headers for easier access</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">colnames</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#34;index&#34;</span><span class="p">,</span><span class="s">&#34;height&#34;</span><span class="p">,</span><span class="s">&#34;weight&#34;</span><span class="p">];</span> <span class="n">rename!</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="kt">Symbol</span><span class="o">.</span><span class="p">(</span><span class="n">colnames</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">first</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>5×3 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">index</th><th style = "text-align: left;">height</th><th style = "text-align: left;">weight</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">65.7833</td><td style = "text-align: right;">112.993</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">2</td><td style = "text-align: right;">71.5152</td><td style = "text-align: right;">136.487</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">3</td><td style = "text-align: right;">69.3987</td><td style = "text-align: right;">153.027</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">4</td><td style = "text-align: right;">68.2166</td><td style = "text-align: right;">142.335</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">5</td><td style = "text-align: right;">67.7878</td><td style = "text-align: right;">144.297</td></tr></tbody></table></div>
<h4 id="visualizing-the-data">Visualizing the Data</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot_data</span> <span class="o">=</span> <span class="n">scatter</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">weight</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Height vs. Weight&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Height (in)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ylabel</span> <span class="o">=</span> <span class="s">&#34;Weight (lb)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_9_0.svg" type="" alt="svg"  /></p>
<h4 id="building-a-bayesian-model-with-turingjl">Building a Bayesian model with <code>Turing.jl</code>.</h4>
<p>First, we assume that the weight is a variable dependent on the height. Thus, we can express the Bayesian model as:</p>
<p>$$y\sim N(\alpha + \beta^{T}\mathbf{X}, \sigma^2)$$</p>
<p>The above means that we assume that the data follows a normal distribution (in this case, a multivariate normal distribution), whose standard deviation is σ and its mean is the linear relationship $\alpha + \beta^{T}\mathbf{X}$.</p>
<p>Next, we need to assign priors to the variables $\alpha$, $\beta$ and $\sigma^2$. The latter is a measure of the uncertainty in <em>the model</em>.</p>
<p>So, the priors will be assigned as follows:</p>
<p>$$\alpha \sim N(0,10)$$
$$\beta \sim U(0,50)$$
$$\sigma^{2} \sim TN(0,100;0,\infty)$$</p>
<p>The last distribution is a <em>truncated normal distribution</em> bounded from 0 to $\infty$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">blr</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">weight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># priors:</span>
</span></span><span class="line"><span class="cl">	<span class="n">α</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="c"># intercept</span>
</span></span><span class="line"><span class="cl">	<span class="n">β</span> <span class="o">~</span> <span class="n">Uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">σ</span> <span class="o">~</span> <span class="n">truncated</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span> <span class="n">lower</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>  <span class="c"># variance standard distribution</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># likelihood</span>
</span></span><span class="line"><span class="cl">	<span class="c"># the likelihood in this case means that I assume that the data follows a</span>
</span></span><span class="line"><span class="cl">	<span class="c"># multivariate normal distribution, whose uncertainty is σ, and its mean is the linear relationship:</span>
</span></span><span class="line"><span class="cl">	<span class="n">avg_weight</span> <span class="o">=</span> <span class="n">α</span> <span class="o">.+</span> <span class="p">(</span><span class="n">β</span><span class="o">.*</span><span class="n">height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># build the model</span>
</span></span><span class="line"><span class="cl">	<span class="n">weight</span> <span class="o">~</span> <span class="n">MvNormal</span><span class="p">(</span><span class="n">avg_weight</span><span class="p">,</span> <span class="n">σ</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>blr (generic function with 2 methods)
</code></pre>
<p>The next step is to perform Bayesian inference. <em>Crank up the Bayes!</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># crank up the bayes!</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">blr</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">weight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">NUTS</span><span class="p">(),</span> <span class="n">samples</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 9.765625e-5
[32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:11[39m9m





Chains MCMC chain (1000×15×1 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 1
Samples per chain = 1000
Wall duration     = 31.4 seconds
Compute duration  = 31.4 seconds
parameters        = α, β, σ
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m     mean [0m [1m     std [0m [1m    mcse [0m [1m ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m [0m ⋯
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m [0m ⋯

           α   -34.8414    7.6414    0.4117   344.5155   365.1189    1.0038    ⋯
           β     2.3859    0.1124    0.0060   345.5269   345.0618    1.0039    ⋯
           σ    10.3030    0.2239    0.0100   509.4680   389.9078    1.0016    ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m     2.5% [0m [1m    25.0% [0m [1m    50.0% [0m [1m    75.0% [0m [1m    97.5% [0m
 [90m     Symbol [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m

           α   -49.8948   -39.7950   -34.9188   -29.8116   -19.8403
           β     2.1673     2.3108     2.3872     2.4580     2.6100
           σ     9.8649    10.1550    10.3018    10.4554    10.7449
</code></pre>
<h4 id="visualizing-the-mcmc-diagnostics-and-summarizing-the-results">Visualizing the MCMC Diagnostics and Summarizing the Results</h4>
<p>Now that we have performed Bayesian inference using the <code>NUTS()</code> algorithm, we can visualize the results. Addisionally, call for a summary of the statistics of the inferred posterior distributions of $\theta$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">summarize</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><pre><code> [1m parameters [0m [1m     mean [0m [1m     std [0m [1m    mcse [0m [1m ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m [0m ⋯
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m [0m ⋯

           α   -34.8414    7.6414    0.4117   344.5155   365.1189    1.0038    ⋯
           β     2.3859    0.1124    0.0060   345.5269   345.0618    1.0039    ⋯
           σ    10.3030    0.2239    0.0100   509.4680   389.9078    1.0016    ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_16_0.svg" type="" alt="svg"  /></p>
<h5 id="visualizing-the-results">Visualizing the results</h5>
<p>It is worth noting that the results from a Bayesian Linear Regression is not one single regression line, but many. From PyMC&rsquo;s <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/GLM_linear.html">Generalized Linear Regression tutorial</a>:</p>
<blockquote>
<p>In GLMs, we do not only have one best fitting regression line, but many. A posterior predictive plot takes multiple samples from the posterior (intercepts and slopes) and plots a regression line for each of them. We can manually generate these regression lines using the posterior samples directly.</p>
</blockquote>
<p>What this means is that if we want to visualize all the lines that are generated by the parameter posterior distribution sample pool, we need to generate one line per sample set, and then we can plot them all. This procedure is executed next.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># plot all the sample regressions</span>
</span></span><span class="line"><span class="cl"><span class="c"># this method was taken from: https://www.youtube.com/watch?v=EgrrtZEVOv0&amp;t=1113s</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">	<span class="n">α</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>    <span class="c">#chain[row, column, chain_ID]</span>
</span></span><span class="line"><span class="cl">	<span class="n">β</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">σ²</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">plot!</span><span class="p">(</span><span class="n">plot_data</span><span class="p">,</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">α</span> <span class="o">+</span> <span class="n">β</span><span class="o">*</span><span class="n">x</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="c"># samples</span>
</span></span><span class="line"><span class="cl">		<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="ss">:orange</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="c"># error</span>
</span></span><span class="line"><span class="cl">        <span class="n">ribbon</span> <span class="o">=</span> <span class="n">σ²</span><span class="p">,</span> <span class="n">fillalpha</span> <span class="o">=</span> <span class="mf">0.002</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot_data</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_18_0.svg" type="" alt="svg"  /></p>
<h3 id="using-the-regression-model-to-make-predictions">Using the Regression Model to Make Predictions</h3>
<p>Select the heights for which we want to predict the weights and then run the prediction command from <code>Turing</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">pred_height</span> <span class="o">=</span> <span class="p">[</span><span class="mi">62</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">67</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">predictions</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">blr</span><span class="p">(</span><span class="n">pred_height</span><span class="p">,</span> <span class="nb">missing</span><span class="p">),</span> <span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Chains MCMC chain (1000×6×1 Array{Float64, 3}):

Iterations        = 1:1:1000
Number of chains  = 1
Samples per chain = 1000
parameters        = weight[1], weight[2], weight[3], weight[4], weight[5], weight[6]
internals         = 

Summary Statistics
 [1m parameters [0m [1m     mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m[0m ⋯

   weight[1]   113.6815   10.3344    0.3270    997.5393   947.2109    0.9993   ⋯
   weight[2]   165.3164   10.8352    0.3744    832.5405   818.6640    1.0008   ⋯
   weight[3]   143.8911   10.5355    0.3461    929.5467   874.2977    0.9993   ⋯
   weight[4]   132.3417   10.4836    0.3448    921.6347   943.0320    1.0007   ⋯
   weight[5]   134.7606   10.7046    0.3350   1023.8876   977.6814    1.0025   ⋯
   weight[6]   124.9423   10.2245    0.3247    993.9282   867.7391    0.9991   ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m     2.5% [0m [1m    25.0% [0m [1m    50.0% [0m [1m    75.0% [0m [1m    97.5% [0m
 [90m     Symbol [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m

   weight[1]    93.9378   106.3972   113.6943   120.8093   134.9264
   weight[2]   142.4871   158.4933   165.5406   172.7313   184.7437
   weight[3]   122.8292   137.0108   144.0339   151.1920   164.2645
   weight[4]   111.8872   125.3733   132.1726   139.2690   153.7222
   weight[5]   113.9147   127.4356   135.0149   142.1375   154.5537
   weight[6]   105.3221   118.0098   125.1640   131.6011   145.2976
</code></pre>
<h4 id="visualize-the-distributions-of-the-predicted-weights">Visualize the Distributions of the Predicted Weights</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_22_0.svg" type="" alt="svg"  /></p>
<p>Finally, to obtain a point estimate, compute the mean weight prediction for each height.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">mean_predictions</span> <span class="o">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Mean
 [1m parameters [0m [1m     mean [0m
 [90m     Symbol [0m [90m  Float64 [0m

   weight[1]   113.6815
   weight[2]   165.3164
   weight[3]   143.8911
   weight[4]   132.3417
   weight[5]   134.7606
   weight[6]   124.9423
</code></pre>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
