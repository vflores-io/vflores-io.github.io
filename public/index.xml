<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Victor Flores</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Victor Flores</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 27 May 2024 16:57:31 +0800</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bayesian Linear Regression with PyMC</title>
      <link>http://localhost:1313/posts/20240527_baylinreg_pymc/e01_baylinreg_pymc/</link>
      <pubDate>Mon, 27 May 2024 16:57:31 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240527_baylinreg_pymc/e01_baylinreg_pymc/</guid>
      <description>Learn the basics of Bayesian linear regression using Julia and Turing.jl. This tutorial covers model formulation, implementation, and interpretation through a practical example.</description>
      <content:encoded><![CDATA[<p><a href="https://colab.research.google.com/github/vflores-io/Portfolio/blob/main/Bayesian%20Methods%20Tutorials/Python/PyMC/E01_BayLinReg/E01_BayLinReg_PyMC.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></p>
<hr>
<h3 id="problem-statement">Problem Statement</h3>
<p>In this notebook, we will explore the relationship between height and weight using Bayesian linear regression. Our goal is to fit a linear model of the form:</p>
<p>$$ y = \alpha + \beta x + \varepsilon $$</p>
<p>where:</p>
<ul>
<li>$y$ represents the weight,</li>
<li>$x$ represents the height,</li>
<li>$\alpha$ is the intercept,</li>
<li>$\beta$ is the slope,</li>
<li>$\varepsilon$ is the error term, modeled as Gaussian white noise, i.e., $\varepsilon \sim \mathcal{N}(0, \sigma)$, where $\sigma$ is the standard deviation of the noise.</li>
</ul>
<p>We will use Bayesian inference to estimate the posterior distributions of $\alpha$ and $\beta$ given our data and prior assumptions. Bayesian methods provide a natural way to quantify uncertainty in our parameter estimates and predictions.</p>
<h3 id="approach">Approach</h3>
<p>To achieve our goal, we will:</p>
<ol>
<li><strong>Load Real Data:</strong> We will use an actual dataset representing the heights and weights of individuals, sourced from <a href="https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset">Kaggle</a>.</li>
<li><strong>Define the Bayesian Model:</strong> Using the probabilistic programming package <code>PyMC</code>, we will define our Bayesian linear regression model, specifying our priors for $\alpha$, $\beta$, and $\sigma$.</li>
<li><strong>Perform Inference:</strong> We will use Markov Chain Monte Carlo (MCMC) algorithms, such as the No-U-Turn Sampler (NUTS), to sample from the posterior distributions of our model parameters.</li>
<li><strong>Visualization and Prediction:</strong> We will visualize the results, including the regression lines sampled from the posterior, the uncertainty intervals, and make predictions on new, unobserved data points.</li>
</ol>
<h3 id="reference">Reference</h3>
<p>This notebook is inspired by examples from the <code>PyMC</code> documentation, specifically the <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/GLM_linear.html">Generalized Linear Regression tutorial</a>. It also builds upon a <a href="https://vflores-io.github.io/posts/20231110_bayesian_linear_regression_julia/20231110_bayesian_linear_regression_julia/">similar implementation in Julia using <code>Turing.jl</code></a>. This <code>PyMC</code> recreation aims at providing a more complete illustration of the use of probabilistic programming languages.</p>
<h3 id="initial-setup">Initial setup</h3>
<p>Import the necessary packages.</p>
<p>Additionally, this notebook is supposed to be used in Google Colab. The data set (CSV) file is hosted in a private github repo. Therefore, include the github cloning to the temporary session so that the data can be accessed and used in the Colab session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">arviz</span> <span class="k">as</span> <span class="nn">az</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pymc</span> <span class="k">as</span> <span class="nn">pm</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">xarray</span> <span class="k">as</span> <span class="nn">xr</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;text.usetex&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;font.family&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;STIXGeneral&#39;</span>
</span></span></code></pre></div><h2 id="bayesian-workflow">Bayesian Workflow</h2>
<p>For this exercise, I will implement the following workflow:</p>
<ul>
<li>Collect data: this will be implemented by downloading the relevant data set</li>
<li>Build a Bayesian model: this will be built using <code>PyMC</code></li>
<li>Infer the posterior distributions of the parameters $\alpha$ and $\beta$, as well as the model noise</li>
<li>Evaluate the fit of the model</li>
</ul>
<h3 id="collecting-the-data">Collecting the data</h3>
<p>The data to be analyzed will be the height vs. weight data from <a href="https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset">https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the data and print the header</span>
</span></span><span class="line"><span class="cl"><span class="n">csv_path</span> <span class="o">=</span> <span class="s1">&#39;data/SOCR-HeightWeight.csv&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Index</th>
      <th>Height(Inches)</th>
      <th>Weight(Pounds)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>65.78331</td>
      <td>112.9925</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>71.51521</td>
      <td>136.4873</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>69.39874</td>
      <td>153.0269</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>68.21660</td>
      <td>142.3354</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>67.78781</td>
      <td>144.2971</td>
    </tr>
  </tbody>
</table>
</div>
<p>Let&rsquo;s instead work with the International System.</p>
<p>Convert the values to centimeters and kilograms.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Renaming columns 2 and 3</span>
</span></span><span class="line"><span class="cl"><span class="n">new_column_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="s1">&#39;Height (cm)&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="s1">&#39;Weight (kg)&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="n">new_column_names</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert the values to SI units</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">*</span><span class="mf">2.54</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span><span class="o">*</span><span class="mf">0.454</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># assign the relevant data to variables for easier manipulation</span>
</span></span><span class="line"><span class="cl"><span class="n">height</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Height (cm)&#39;</span><span class="p">][:</span><span class="mi">1000</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">weight</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Weight (kg)&#39;</span><span class="p">][:</span><span class="mi">1000</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Index</th>
      <th>Height (cm)</th>
      <th>Weight (kg)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>167.089607</td>
      <td>51.298595</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>181.648633</td>
      <td>61.965234</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>176.272800</td>
      <td>69.474213</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>173.270164</td>
      <td>64.620272</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>172.181037</td>
      <td>65.510883</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="visualize-the-data">Visualize the data</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># scatter plot of the data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Height vs. Weight&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Height (cm)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Weight (kg)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="kc">True</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># plt.show()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_11_0.png" type="" alt="png"  /></p>
<h2 id="building-a-bayesian-model-with-pymc">Building a Bayesian model with <code>PyMC</code></h2>
<p>First, we assume that the weight is a variable dependent on the height. Thus, we can express the Bayesian model as:</p>
<p>$$y \sim \mathcal{N}(\alpha + \beta \mathbf{X}, \sigma^2)$$</p>
<p>Since we want to <em>infer</em> the posterior distribution of the parameters $\theta = {\alpha, \beta, \sigma }$, we need to assign priors to those variables. Remember that $\sigma$ is a measure of the uncertainty in <em>the model</em>.</p>
<p>$$
\begin{align*}
\alpha &amp;\sim \mathcal{N}(0,10) \\
\beta &amp;\sim \mathcal{N}(0,1) \\
\sigma &amp;\sim \mathcal{TN}(0,100; 0, \infty)
\end{align*}
$$
The last distribution is a <em>truncated normal distribution</em> bounded from 0 to $\infty$.</p>
<p><strong>Note</strong>: Here, we define the input data <code>height</code> as a <code>MutableData</code> container. The reason for this is because, later, we will want to change this input data, to make predictions. This will become clear a bit later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="n">pm</span><span class="o">.</span><span class="n">Model</span><span class="p">()</span> <span class="k">as</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">MutableData</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># define the priors</span>
</span></span><span class="line"><span class="cl">    <span class="n">alpha</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">beta</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sigma</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">TruncatedNormal</span><span class="p">(</span><span class="s1">&#39;sigma&#39;</span><span class="p">,</span> <span class="n">mu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">lower</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># define the likelihood - assign the variable name &#34;y&#34; to the observations</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Normal</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">mu</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">+</span> <span class="p">(</span><span class="n">beta</span> <span class="o">*</span> <span class="n">x</span><span class="p">),</span> <span class="n">sigma</span> <span class="o">=</span> <span class="n">sigma</span><span class="p">,</span> <span class="n">observed</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">shape</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># inference - crank up the bayes!</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="n">chains</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (4 chains in 4 jobs)
NUTS: [alpha, beta, sigma]
</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
  <progress value='8000' class='' max='8000' style='width:300px; height:20px; vertical-align: middle;'></progress>
  100.00% [8000/8000 00:37&lt;00:00 Sampling 4 chains, 0 divergences]
</div>
<pre><code>Sampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 53 seconds.
</code></pre>
<p>We can explore the trace object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">trace</span><span class="o">.</span><span class="n">to_dataframe</span><span class="p">()</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index([                                  'chain',
                                          'draw',
                          ('posterior', 'alpha'),
                           ('posterior', 'beta'),
                          ('posterior', 'sigma'),
           ('sample_stats', 'perf_counter_diff'),
          ('sample_stats', 'perf_counter_start'),
             ('sample_stats', 'smallest_eigval'),
               ('sample_stats', 'step_size_bar'),
         ('sample_stats', 'index_in_trajectory'),
                      ('sample_stats', 'energy'),
            ('sample_stats', 'max_energy_error'),
                ('sample_stats', 'energy_error'),
             ('sample_stats', 'acceptance_rate'),
                  ('sample_stats', 'tree_depth'),
           ('sample_stats', 'process_time_diff'),
                   ('sample_stats', 'step_size'),
                     ('sample_stats', 'n_steps'),
              ('sample_stats', 'largest_eigval'),
                   ('sample_stats', 'diverging'),
                          ('sample_stats', 'lp'),
       ('sample_stats', 'reached_max_treedepth')],
      dtype='object')
</code></pre>
<h4 id="visualize-the-inference-diagnostics">Visualize the inference diagnostics</h4>
<p>Now that we have performed Bayesian inference using the <code>NUTS()</code> algorithm, we can visualize the results. Additionally, call for a summary of the statistics of the inferred posterior distributions of $\theta$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># visualize the results</span>
</span></span><span class="line"><span class="cl"><span class="c1"># az.style.use(&#39;arviz-darkgrid&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">labeller</span> <span class="o">=</span> <span class="n">az</span><span class="o">.</span><span class="n">labels</span><span class="o">.</span><span class="n">MapLabeller</span><span class="p">(</span><span class="n">var_name_map</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;alpha&#39;</span><span class="p">:</span> <span class="sa">r</span><span class="s1">&#39;$\alpha$&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="s1">&#39;beta&#39;</span><span class="p">:</span> <span class="sa">r</span><span class="s1">&#39;$\beta$&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="s1">&#39;sigma&#39;</span><span class="p">:</span> <span class="sa">r</span><span class="s1">&#39;$\sigma$&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_trace</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">var_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="s1">&#39;sigma&#39;</span><span class="p">],</span> <span class="n">labeller</span> <span class="o">=</span> <span class="n">labeller</span><span class="p">,</span> <span class="n">compact</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># plt.show()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_17_0.png" type="" alt="png"  /></p>
<h4 id="interpreting-the-mcmc-diagnostics-plots">Interpreting the MCMC Diagnostics Plots</h4>
<p>Trace plots are crucial for diagnosing the performance of Markov Chain Monte Carlo (MCMC) algorithms. These plots typically consist of two parts for each parameter: the trace plot and the posterior density plot.</p>
<p>The trace plot shows the sampled values of a parameter across iterations. A well-behaved trace plot should look like a &ldquo;hairy caterpillar,&rdquo; indicating good mixing. This means the trace should move around the parameter space without getting stuck and should not display any apparent patterns or trends. If the trace shows a clear trend or drift, it suggests that the chain has not yet converged. For the parameters $\alpha$ (intercept), $\beta$ (slope), and $\sigma$ (standard deviation of noise), we want to see the traces for different chains mixing well and stabilizing around a constant mean.</p>
<p>The posterior density plot shows the distribution of the sampled values of a parameter. This plot helps visualize the posterior distribution of the parameter. A good density plot should be smooth and unimodal, indicating that the parameter has a well-defined posterior distribution. If multiple chains are used, their density plots should overlap significantly, suggesting that all chains are sampling from the same distribution. For $\alpha$, $\beta$, and $\sigma$, overlapping density plots indicate that the chains have converged to the same posterior distribution.</p>
<p>Next, we can visualize the posterior distributions of the inferred parameters.eters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># visualize the posterior distributions</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_posterior</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">var_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;alpha&#39;</span><span class="p">,</span> <span class="s1">&#39;beta&#39;</span><span class="p">,</span> <span class="s1">&#39;sigma&#39;</span><span class="p">],</span> <span class="n">labeller</span> <span class="o">=</span> <span class="n">labeller</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_19_0.png" type="" alt="png"  /></p>
<p>After visualizing the inference diagnostics and the posterior distributions of the paramters, we can also obtain the summary statistics.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get the summary statistics of the posterior distributions</span>
</span></span><span class="line"><span class="cl"><span class="n">pm</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;stats&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>mean</th>
      <th>sd</th>
      <th>hdi_3%</th>
      <th>hdi_97%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>alpha</th>
      <td>-28.557</td>
      <td>4.558</td>
      <td>-36.650</td>
      <td>-19.619</td>
    </tr>
    <tr>
      <th>beta</th>
      <td>0.500</td>
      <td>0.026</td>
      <td>0.449</td>
      <td>0.548</td>
    </tr>
    <tr>
      <th>sigma</th>
      <td>4.657</td>
      <td>0.100</td>
      <td>4.474</td>
      <td>4.850</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="visualize-the-results">Visualize the results</h3>
<p>Now that we have posterior distributions for the parameters $\theta$, we can plot the the resulting linear regression functions. The following is an excerpt from PyMC&rsquo;s <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/GLM_linear.html">Generalized Linear Regression tutorial</a>:</p>
<blockquote>
<p>In GLMs, we do not only have one best fitting regression line, but many. A posterior predictive plot takes multiple samples from the posterior (intercepts and slopes) and plots a regression line for each of them. We can manually generate these regression lines using the posterior samples directly.</p>
</blockquote>
<p>Below, what we will effectively be doing is:</p>
<p>$$ y_i = \alpha_i + \beta_i \mathbf{X} \ \ \ , \ \ \ {i = 1, \ldots , N_{samples}}$$</p>
<p>where $N_{samples}$ are the number of samples from the posterior. This number comes from the inference procedure, and in practical terms is the umber of samples we asked <code>PyMC</code> to produce.</p>
<p>In other words, plotting the samples from the posterior distribution involves plotting the regression lines sampled from the posterior. Each sample represents a possible realization of the regression line based on the sampled values of the parameters $\alpha$ (intercept) and $\beta$ (slope).</p>
<p>These sample regression lines ullustrate the uncertainty in the regression model&rsquo;s parameters and how this uncertainty propagates into the predictions (of the regression line).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># use the posterior to create regression line samples</span>
</span></span><span class="line"><span class="cl"><span class="c1"># equivalent to: y[i]  = alpha[i] + beta[i]*X</span>
</span></span><span class="line"><span class="cl"><span class="n">trace</span><span class="o">.</span><span class="n">posterior</span><span class="p">[</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">trace</span><span class="o">.</span><span class="n">posterior</span><span class="p">[</span><span class="s2">&#34;alpha&#34;</span><span class="p">]</span> <span class="o">+</span> <span class="n">trace</span><span class="o">.</span><span class="n">posterior</span><span class="p">[</span><span class="s2">&#34;beta&#34;</span><span class="p">]</span><span class="o">*</span><span class="n">xr</span><span class="o">.</span><span class="n">DataArray</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the regression lines</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_lm</span><span class="p">(</span><span class="n">idata</span> <span class="o">=</span> <span class="n">trace</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">y_model</span><span class="o">=</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;alpha&#34;</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;markeredgecolor&#34;</span><span class="p">:</span><span class="s2">&#34;k&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span><span class="s2">&#34;Observed Data&#34;</span><span class="p">,</span> <span class="s2">&#34;markersize&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;zorder&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;#00cc99&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_mean_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;red&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_23_0.png" type="" alt="png"  /></p>
<h2 id="using-the-linear-regression-model-to-make-predictions">Using the Linear Regression Model to Make Predictions</h2>
<p>Now that we have a fitted Bayesian linear regression model, we can use it to make predictions. This involves sampling from the posterior predictive distribution, which allows us to generate predictions for new data points while incorporating the uncertainty from the posterior distribution <em>of the parameters</em>.</p>
<h4 id="sample-from-the-posterior-predictive-distribution">Sample from the Posterior Predictive Distribution:</h4>
<ul>
<li>This step involves using the inferred <code>trace</code> from our Bayesian linear regression model <code>blr_model</code> to generate predictions. The <code>pm.sample_posterior_predictive</code> function in PyMC allows us to do this. It uses the posterior samples of the parameters to compute the predicted values of the outcome variable.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># now predict the outcomes using the inferred trace</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># use the updated values and predict outcomes and probabilities:</span>
</span></span><span class="line"><span class="cl">    <span class="n">pm</span><span class="o">.</span><span class="n">sample_posterior_predictive</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">trace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">var_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">return_inferencedata</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">extend_inferencedata</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div><pre><code>Sampling: [y]
</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
  <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>
  100.00% [4000/4000 00:00&lt;00:00]
</div>
<h4 id="exploring-the-trace-object">Exploring the Trace Object</h4>
<p>The trace object stores the results of our inference. Initially, it contained the posterior samples of the model parameters (e.g., intercept and slope).</p>
<p>After running <code>pm.sample_posterior_predictive</code>, the trace object is extended to include the posterior predictive samples. These are the predicted values for the outcome variable, given the posterior distribution of the model parameters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># explore the trace object again</span>
</span></span><span class="line"><span class="cl"><span class="n">trace</span><span class="o">.</span><span class="n">to_dataframe</span><span class="p">()</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index([                                  'chain',
                                          'draw',
                          ('posterior', 'alpha'),
                           ('posterior', 'beta'),
                          ('posterior', 'sigma'),
              ('posterior', 'y_posterior[0]', 0),
          ('posterior', 'y_posterior[100]', 100),
          ('posterior', 'y_posterior[101]', 101),
          ('posterior', 'y_posterior[102]', 102),
          ('posterior', 'y_posterior[103]', 103),
       ...
                ('sample_stats', 'energy_error'),
             ('sample_stats', 'acceptance_rate'),
                  ('sample_stats', 'tree_depth'),
           ('sample_stats', 'process_time_diff'),
                   ('sample_stats', 'step_size'),
                     ('sample_stats', 'n_steps'),
              ('sample_stats', 'largest_eigval'),
                   ('sample_stats', 'diverging'),
                          ('sample_stats', 'lp'),
       ('sample_stats', 'reached_max_treedepth')],
      dtype='object', length=2022)
</code></pre>
<p>We can observe how now we have another inference data container: <code>posterior_predictive</code>. This was generated by passing the <code>extend_inferencedata</code> argument to the <code>pm.sample_posterior_predictive</code> function above.</p>
<p>This data contains predictions by passing the observed heights through our linear model and making predictions. Note that these &ldquo;predictions&rdquo; are made on <strong>observed data</strong>. This is similar to using validating the predictions on training data in machine learning, i.e. comparing the model predictions to the actual data on an observed input.</p>
<p>We can use the linear regression model to make predictions. It should be noted that, again, the linear regression model is not a single regression line, but rather a set of regression lines generated from the posterior probability of $\theta$.</p>
<h4 id="visualize-the-prediction-confidence-interval">Visualize the Prediction Confidence Interval</h4>
<p>After we sampled from the posterior, we might want to visualize this to understand the posterior predictive distribution.</p>
<p>In the code below, there are two things going on, let&rsquo;s go through them.</p>
<ol>
<li>Plotting the samples from the posterior distribution</li>
</ol>
<p>This part is exactly what we did before, which is plotting the sample posteriors of the <strong>regression line</strong>. These sample regression lines are a natural product of propagating the uncertainty from the parameters unto the prediction line.</p>
<ol start="2">
<li>Plotting the uncertainty in the mean and the observations</li>
</ol>
<p>Now we can add a ribbon to show the uncertainty not only in the regression line, but in the prediction points themselves. That is, that ribbon will tell us where we might expect a prediction point $i+1$, i.e.</p>
<p>$$ y_{i+1} = \alpha_{i+1} + \beta_{i+1} x^* $$</p>
<p>where $x^*$ is a test input point. In other words, and more specific to this demonstration:</p>
<blockquote>
<p>what is the <em>interval</em> where we would expect a predicted weight $y_{i+1}$ of an individual with a height $x*$.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># use the posterior to create regression line samples</span>
</span></span><span class="line"><span class="cl"><span class="c1"># trace.posterior[&#34;y_posterior&#34;] = trace.posterior[&#34;alpha&#34;] + trace.posterior[&#34;beta&#34;]*xr.DataArray(height)  # y_posterior = alpha + beta*x</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_lm</span><span class="p">(</span><span class="n">idata</span> <span class="o">=</span> <span class="n">trace</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">y_model</span><span class="o">=</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;alpha&#34;</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;markeredgecolor&#34;</span><span class="p">:</span><span class="s2">&#34;k&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span><span class="s2">&#34;Observed Data&#34;</span><span class="p">,</span> <span class="s2">&#34;markersize&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;zorder&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;#00cc99&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_mean_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;red&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the prediction interval</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_hdi</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span><span class="o">.</span><span class="n">posterior_predictive</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">hdi_prob</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">fill_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.8</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_30_0.png" type="" alt="png"  /></p>
<h3 id="making-predictions-on-_unobserved-data-inputs_">Making Predictions on <em>Unobserved Data Inputs</em></h3>
<p>Now, how about the case when we want to make predictions on test data that we have not seen? That is, predict the weight of an individual whose height/weight we have not observed (measured)</p>
<p>In other words, we have some test input data, i.e. some heights for which we want to predict the weights.</p>
<p>Some references of where I learned how to do this:</p>
<ol>
<li>
<p>In <a href="https://www.pymc.io/projects/examples/en/latest/fundamentals/data_container.html#applied-example-height-of-toddlers-as-a-function-of-age">this example</a> and <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/posterior_predictive.html">this other example</a> it says that we can generate out-of-sample predictions by using <code>pm.sample_posterior_predictive</code> and it shows an example of how to use the syntax.</p>
</li>
<li>
<p>More recently, <a href="https://www.pymc-labs.com/blog-posts/out-of-model-predictions-with-pymc/">this demo blog post</a> clarifies how to make predictions on out-of-model samples.</p>
</li>
</ol>
<p>Let&rsquo;s do just that now. First, we will define the test inputs we want to predict for, <code>pred_height</code>. Then, inside the model, we replace the data (which was defined as <code>MutableData</code>, with the new data we want to make predictions on. This is done as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># set new data inputs:</span>
</span></span><span class="line"><span class="cl"><span class="n">pred_height</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span> <span class="s1">&#39;new_data&#39;</span> <span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">pm</span><span class="o">.</span><span class="n">set_data</span><span class="p">({</span><span class="s1">&#39;height&#39;</span><span class="p">:</span> <span class="n">pred_height</span><span class="p">})</span>
</span></span></code></pre></div><p>What this is effectively doing is telling <code>sample_posterior_predictive</code> that we need to make predictions on <code>height</code> which now happens to be different.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define the out-of-sample predictors</span>
</span></span><span class="line"><span class="cl"><span class="n">pred_height</span> <span class="o">=</span> <span class="p">[</span><span class="mf">158.0</span><span class="p">,</span> <span class="mf">185.5</span><span class="p">,</span> <span class="mf">165.2</span><span class="p">,</span> <span class="mf">178.0</span><span class="p">,</span>  <span class="mf">180.0</span><span class="p">,</span> <span class="mf">170.2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pred_height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">blr_model</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># set the new data we want to make predictions for</span>
</span></span><span class="line"><span class="cl">    <span class="n">pm</span><span class="o">.</span><span class="n">set_data</span><span class="p">({</span><span class="s1">&#39;height&#39;</span><span class="p">:</span> <span class="n">pred_height</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">post_pred</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">sample_posterior_predictive</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">trace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">predictions</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div><pre><code>Sampling: [y]


[158.0, 185.5, 165.2, 178.0, 180.0, 170.2]
</code></pre>
<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
<div>
  <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>
  100.00% [4000/4000 00:00&lt;00:00]
</div>
<p>What we have done above is create an inference data object called <code>post_pred</code>. This object contains the samples of the predictions on the new data. Specifically, it includes two containers: <code>predictions</code> and <code>predictions_constant_data</code>.</p>
<p>The <code>predictions</code> container holds the predicted samples for our new heights. The <code>predictions_constant_data</code> holds the new heights we passed into the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">post_pred</span><span class="o">.</span><span class="n">to_dataframe</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>chain</th>
      <th>draw</th>
      <th>(y[0], 0)</th>
      <th>(y[1], 1)</th>
      <th>(y[2], 2)</th>
      <th>(y[3], 3)</th>
      <th>(y[4], 4)</th>
      <th>(y[5], 5)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0</td>
      <td>48.981930</td>
      <td>62.971186</td>
      <td>62.143385</td>
      <td>59.300742</td>
      <td>56.100237</td>
      <td>54.329348</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>1</td>
      <td>55.481192</td>
      <td>65.132876</td>
      <td>54.761877</td>
      <td>61.312254</td>
      <td>59.220124</td>
      <td>51.817360</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>2</td>
      <td>49.471550</td>
      <td>66.016910</td>
      <td>60.646273</td>
      <td>57.876344</td>
      <td>56.203720</td>
      <td>60.318281</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>3</td>
      <td>53.373737</td>
      <td>66.593653</td>
      <td>53.085799</td>
      <td>63.437949</td>
      <td>64.336626</td>
      <td>45.372830</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>4</td>
      <td>52.981309</td>
      <td>69.320059</td>
      <td>51.590686</td>
      <td>60.372046</td>
      <td>62.210738</td>
      <td>48.188656</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3995</th>
      <td>3</td>
      <td>995</td>
      <td>52.303814</td>
      <td>61.931117</td>
      <td>47.544216</td>
      <td>60.824401</td>
      <td>61.469545</td>
      <td>62.353284</td>
    </tr>
    <tr>
      <th>3996</th>
      <td>3</td>
      <td>996</td>
      <td>56.032295</td>
      <td>56.979040</td>
      <td>54.584837</td>
      <td>55.894216</td>
      <td>65.943908</td>
      <td>50.929285</td>
    </tr>
    <tr>
      <th>3997</th>
      <td>3</td>
      <td>997</td>
      <td>56.062352</td>
      <td>50.889499</td>
      <td>51.441003</td>
      <td>57.841533</td>
      <td>62.898654</td>
      <td>52.749139</td>
    </tr>
    <tr>
      <th>3998</th>
      <td>3</td>
      <td>998</td>
      <td>48.228772</td>
      <td>65.983383</td>
      <td>52.381164</td>
      <td>55.283946</td>
      <td>65.468049</td>
      <td>70.367514</td>
    </tr>
    <tr>
      <th>3999</th>
      <td>3</td>
      <td>999</td>
      <td>58.434184</td>
      <td>54.739363</td>
      <td>56.773260</td>
      <td>53.128112</td>
      <td>61.695469</td>
      <td>54.874142</td>
    </tr>
  </tbody>
</table>
<p>4000 rows × 8 columns</p>
</div>
<p>We can visualize the posterior distributions of the predictions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_posterior</span><span class="p">(</span><span class="n">post_pred</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="s2">&#34;predictions&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_36_1.png" type="" alt="png"  /></p>
<p>We can obtain point estimates by taking the mean of each prediction distribution. This is done by taking the mean of the predictions over the <code>chain</code> and <code>draw</code> dimensions, as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pred_weight</span> <span class="o">=</span> <span class="n">post_pred</span><span class="o">.</span><span class="n">predictions</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">dim</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;chain&#39;</span><span class="p">,</span> <span class="s1">&#39;draw&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Predicted weights: &#34;</span><span class="p">,</span> <span class="n">pred_weight</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Predicted weights:  [50.37415152 64.29241929 54.02070975 60.60276731 61.36759368 56.53983895]
</code></pre>
<p>Finally, we can visualize where the predictions fall by adding a scatter plot with the new ${x^<em>, y^</em>}$ data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># use the posterior to create regression line samples</span>
</span></span><span class="line"><span class="cl"><span class="c1"># trace.posterior[&#34;y_posterior&#34;] = trace.posterior[&#34;alpha&#34;] + trace.posterior[&#34;beta&#34;]*xr.DataArray(height)  # y_posterior = alpha + beta*x</span>
</span></span><span class="line"><span class="cl"><span class="n">_</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_lm</span><span class="p">(</span><span class="n">idata</span> <span class="o">=</span> <span class="n">trace</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">weight</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">y_model</span><span class="o">=</span><span class="s2">&#34;y_posterior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;b&#34;</span><span class="p">,</span> <span class="s2">&#34;alpha&#34;</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;markeredgecolor&#34;</span><span class="p">:</span><span class="s2">&#34;k&#34;</span><span class="p">,</span> <span class="s2">&#34;label&#34;</span><span class="p">:</span><span class="s2">&#34;Observed Data&#34;</span><span class="p">,</span> <span class="s2">&#34;markersize&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_plot_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">,</span> <span class="s2">&#34;zorder&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;#00cc99&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">           <span class="n">y_model_mean_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;color&#34;</span><span class="p">:</span><span class="s2">&#34;red&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># plot the prediction interval</span>
</span></span><span class="line"><span class="cl"><span class="n">az</span><span class="o">.</span><span class="n">plot_hdi</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace</span><span class="o">.</span><span class="n">posterior_predictive</span><span class="p">[</span><span class="s2">&#34;y&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">hdi_prob</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">fill_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;alpha&#34;</span><span class="p">:</span> <span class="mf">0.8</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># add predicted weights to the plot</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">pred_height</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">pred_weight</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Predicted Weights&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">zorder</span> <span class="o">=</span> <span class="mi">15</span>
</span></span><span class="line"><span class="cl">           <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240527_BayLinReg_PyMC/output_40_0.png" type="" alt="png"  /></p>
<h2 id="thank-you">Thank you!</h2>
<p>This demo focused on a relatively simple task. Here, however, we focused more on what a Bayesian approach means in the context of a linear regression. Additionally, we focused on using <code>PyMC</code> for developing the model, visualizing the results and, just as importantly, on making predictions using those results.</p>
<p>Victor</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Transfer Learning Classifier Again... with Julia!</title>
      <link>http://localhost:1313/posts/20240521_julia_transfer_learning_v5/20240521_julia_transfer_learning_v5/</link>
      <pubDate>Tue, 21 May 2024 22:38:29 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240521_julia_transfer_learning_v5/20240521_julia_transfer_learning_v5/</guid>
      <description>Replicating the cat mood classifier, this time using Julia and Flux.jl.</description>
      <content:encoded><![CDATA[<hr>
<p><img loading="lazy" src="/images/20240521_julia_transfer_learning_v5/intro.png" type="" alt="image"  /></p>
<h2 id="introduction">Introduction</h2>
<p>This guide demonstrates how to apply transfer learning using a pre-trained vision model to classify cat moods based on their facila expressions. We&rsquo;ll learn how to handle custom data setups.</p>
<p>In this demonstration, we recreate the exercise done in PyTorch, <a href="https://vflores-io.github.io/posts/20240515_cat_mood_classification/">available here</a>. Since that demonstration is quite detailed, we keep it pretty straightforward here.</p>
<h4 id="motivation--credit">Motivation &amp; Credit</h4>
<p>When I thought about learning how to implement a computer vision classification model for transfer learning in Julia and <code>Flux</code>, I immediately came upon two roadblocks:</p>
<ol>
<li>Since I am not an expert in Julia, I found the documentation to be a bit difficult to access (again, this is just me!).</li>
<li>There are not many tutorials or resources to illustrate this particular case.</li>
</ol>
<p>Therefore I took it upon myself to put things together and make a demonstration that would hopefully be useful for someone who might not be an expert in Flux (or Julia).</p>
<p>This particular demo was inspired by a combination of the following resources:</p>
<ul>
<li><a href="https://towardsdatascience.com/transfer-learning-and-twin-network-for-image-classification-using-flux-jl-cbe012ced146">Transfer Learning and Twin Network for Image Classification using <code>Flux.jl</code></a></li>
<li><a href="https://github.com/FluxML/model-zoo/tree/master/tutorials/transfer_learning"><code>Flux.jl</code>&rsquo;s Model Zoo Tutorial</a></li>
<li><a href="https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html"><code>PyTorch</code> Transfer Learning for Computer Vision Tutorial</a></li>
</ul>
<h2 id="getting-started">Getting Started</h2>
<p>We will use a pre-trained <code>ResNet18</code> model, initially trained on a general dataset, and fine-tune it for our specific task of classifying cat moods.</p>
<h3 id="initialization">Initialization</h3>
<p>First, we activate the current directory as our project environment by calling the package manager <code>Pkg</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Pkg</span>
</span></span><span class="line"><span class="cl"><span class="n">Pkg</span><span class="o">.</span><span class="n">activate</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span> 
</span></span></code></pre></div><p>Then we will import the required packages. Of course, this is also assuming that one has already added the relevant packages into the environment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Pkg</span>
</span></span><span class="line"><span class="cl"><span class="n">Pkg</span><span class="o">.</span><span class="n">activate</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Random</span><span class="o">:</span> <span class="n">shuffle!</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="n">Base</span><span class="o">:</span> <span class="n">length</span><span class="p">,</span> <span class="n">getindex</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Images</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Flux</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Flux</span><span class="o">:</span> <span class="n">update!</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">DataAugmentation</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Metalhead</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">MLUtils</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">CSV</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Plots</span>
</span></span></code></pre></div><pre><code>[32m[1m  Activating[22m[39m project at `H:\My Drive\Projects\Coding\Portfolio\Machine Learning\Julia\Transfer Learning with Flux`
</code></pre>
<h3 id="retrieve-the-data-and-initial-setup">Retrieve the Data and Initial Setup</h3>
<p>First, we specify the paths to the dataset and labels CSV files for training, validation, and test sets. Then, we load these CSV files into <code>DataFrames</code>. Finally, we create vectors of absolute file paths for each image in the dataset.</p>
<p>This setup is essential for organizing the data and ensuring that our model can access the correct images and labels during training and evaluation.</p>
<h4 id="label-structure">Label Structure</h4>
<p>The data set we are using consists of three folders: <code>train</code>, <code>val</code>, <code>test</code>. Each of them contain a set of images of cats. The labels in this case, are in the form of a CSV file that maps the filename with a one-hot encoding to label the classification of the image, i.e. the cat&rsquo;s mood - alarmed, angry, calm, pleased.</p>
<p>The dataset was obtained <a href="https://universe.roboflow.com/mubbarryz/domestic-cats-facial-expressions">here</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># specify the paths to the dataset and labels CSV</span>
</span></span><span class="line"><span class="cl"><span class="n">train_data_path</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/train&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">train_data_csv</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/train/_classes.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_data_path</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/val&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">val_data_csv</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/val/_classes.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_data_path</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/test&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">test_data_csv</span> <span class="o">=</span> <span class="s">&#34;data/cat_expression_data/test/_classes.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># load the CSV file containing the labels</span>
</span></span><span class="line"><span class="cl"><span class="n">train_labels_df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">train_data_csv</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_labels_df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">test_data_csv</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_labels_df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">val_data_csv</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># setup filepaths to the files as vectors</span>
</span></span><span class="line"><span class="cl"><span class="n">train_filepaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">abspath</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="n">train_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span> <span class="k">for</span> <span class="n">filename</span> <span class="k">in</span> <span class="n">train_labels_df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">test_filepaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">abspath</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="n">test_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span> <span class="k">for</span> <span class="n">filename</span> <span class="k">in</span> <span class="n">test_labels_df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">val_filepaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">abspath</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="n">val_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">))</span> <span class="k">for</span> <span class="n">filename</span> <span class="k">in</span> <span class="n">val_labels_df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">]</span>
</span></span></code></pre></div><pre><code>110-element Vector{String}:
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;18cd56a2ae74d2ffc8fdc89cbb.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;6625698d9d2166cdafe47e6d17.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 106 bytes ⋯ [22m[39m&quot;99a04518d4d80adea474bbe89a.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 104 bytes ⋯ [22m[39m&quot;97c687e09bf5981b9bb729304f.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;be307e32ffc3c27ee7f49305b6.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 106 bytes ⋯ [22m[39m&quot;fabcbee5c45195a0e34918a0a1.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 105 bytes ⋯ [22m[39m&quot;d2b7179bdf5554ea40998d9d93.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 105 bytes ⋯ [22m[39m&quot;bae261f0ca148e055d0935580e.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 102 bytes ⋯ [22m[39m&quot;a84e5fa1564b409f26ea9ed0c9.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 106 bytes ⋯ [22m[39m&quot;4664e5d811b55a69cac9823a87.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;7fccb36f778a5cae5eda1e6cfc.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 104 bytes ⋯ [22m[39m&quot;824395bcb65dc5b8ecd013ab0d.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 106 bytes ⋯ [22m[39m&quot;4e1297350b8f05b54f387e002a.jpg&quot;
 ⋮
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 105 bytes ⋯ [22m[39m&quot;59f6a427983efd9308ddddeea7.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;8768c7f0096dc16431b41c8367.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;aa5d35bce083f1505a7b1e727e.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 104 bytes ⋯ [22m[39m&quot;5c4e68b8fba7c493f0b8bfd7bc.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;05ac086aa8b99cb8b942b1af16.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 102 bytes ⋯ [22m[39m&quot;db819e63e4b80c5caed5a07c47.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;b96481186b7376b108e9546306.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 105 bytes ⋯ [22m[39m&quot;d5aaf15e5d105aa82e24a85eff.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;5e29bd734c42a6b7b2267fb31e.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 104 bytes ⋯ [22m[39m&quot;0628948e8f68a77c821746f0b3.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 103 bytes ⋯ [22m[39m&quot;4dee18ead713b297b872642c25.jpg&quot;
 &quot;H:\\My Drive\\Projects\\Coding\\Por&quot;[93m[1m ⋯ 104 bytes ⋯ [22m[39m&quot;eeffac7d65a76096d457bd5949.jpg&quot;
</code></pre>
<h3 id="data-exploration">Data Exploration</h3>
<p>As usual, we take a look at the data to understand what we are working with.</p>
<p>Below we make a couple of functions to visualize the data.</p>
<p>Note that the helper function <code>label_from_row</code> will come in handy later on.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># -----------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl"><span class="c"># helper function to extract label from the DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">label_from_row</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># retrieve the label for the image from the DataFrame</span>
</span></span><span class="line"><span class="cl">    <span class="n">label_row</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">row</span><span class="o">.</span><span class="n">filename</span> <span class="o">==</span> <span class="n">filename</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">label_index</span> <span class="o">=</span> <span class="n">findfirst</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">label_row</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="n">names</span><span class="p">(</span><span class="n">labels_df</span><span class="p">)[</span><span class="mi">2</span><span class="o">:</span><span class="k">end</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">label_dict</span><span class="p">[</span><span class="n">label_index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="c"># -----------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># function to display a selection of images and their labels</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">show_sample_images_and_labels</span><span class="p">(</span><span class="n">labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">;</span> <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># randomly pick indices for sampling images</span>
</span></span><span class="line"><span class="cl">    <span class="n">sample_indices</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">labels_df</span><span class="p">),</span> <span class="n">num_samples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sample_filenames</span> <span class="o">=</span> <span class="n">labels_df</span><span class="o">.</span><span class="n">filename</span><span class="p">[</span><span class="n">sample_indices</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># calculate number of rows and columns for the grid layuot</span>
</span></span><span class="line"><span class="cl">    <span class="n">num_cols</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="n">num_samples</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">num_rows</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># prepare a plot with a grid layout for the images</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">layout</span> <span class="o">=</span> <span class="p">(</span><span class="n">num_rows</span><span class="p">,</span> <span class="n">num_cols</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span> <span class="n">grid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># load and plot each sampled image</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span> <span class="k">in</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">sample_filenames</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">img_path</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">train_data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">load</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>   <span class="c"># load the image from the file</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># retrieve the label for the image from the DataFrame</span>
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">label_from_row</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">plot!</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">img</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="n">label</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">display</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>   <span class="c"># display the plot</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define a dictionary for label descriptions:</span>
</span></span><span class="line"><span class="cl"><span class="n">label_dict</span> <span class="o">=</span> <span class="kt">Dict</span><span class="p">(</span><span class="mi">1</span> <span class="o">=&gt;</span> <span class="s">&#34;alarmed&#34;</span><span class="p">,</span> <span class="mi">2</span> <span class="o">=&gt;</span> <span class="s">&#34;angry&#34;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">=&gt;</span> <span class="s">&#34;calm&#34;</span><span class="p">,</span> <span class="mi">4</span> <span class="o">=&gt;</span> <span class="s">&#34;pleased&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># run the function to show images</span>
</span></span><span class="line"><span class="cl"><span class="n">show_sample_images_and_labels</span><span class="p">(</span><span class="n">train_labels_df</span><span class="p">,</span> <span class="n">label_dict</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240521_julia_transfer_learning_v5/output_6_0.svg" type="" alt="svg"  /></p>
<h3 id="working-with-custom-datasets">Working with Custom Datasets</h3>
<p>When working with custom datasets in Julia, the concepts are similar as in PyTorch, but obviously following Julia&rsquo;s syntax.</p>
<p>In essence, we read the CSV files containing image file paths and their corresponding labels into DataFrames. We then create functions to handle data loading and transformations, such as resizing and normalizing images. This approach is similar to PyTorch&rsquo;s <code>Dataset</code>.</p>
<p>Let&rsquo;s have a quick look.</p>
<h3 id="create-a-custom-dataset">Create a Custom Dataset</h3>
<p>We define a custom dataset using a <code>struct</code>, which is similar to using a <code>class</code> in Python. The <code>ImageContainer</code> struct stores the image file paths and their corresponding labels in a DataFrame. We then create instances of this <code>struct</code> for the training, validation, and test datasets.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">struct</span> <span class="kt">ImageContainer</span><span class="p">{</span><span class="kt">T</span><span class="o">&lt;:</span><span class="kt">Vector</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">img</span><span class="o">::</span><span class="kt">T</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels_df</span><span class="o">::</span><span class="kt">DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># generate dataset</span>
</span></span><span class="line"><span class="cl"><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">ImageContainer</span><span class="p">(</span><span class="n">train_filepaths</span><span class="p">,</span> <span class="n">train_labels_df</span><span class="p">);</span>   
</span></span><span class="line"><span class="cl"><span class="n">val_dataset</span> <span class="o">=</span> <span class="n">ImageContainer</span><span class="p">(</span><span class="n">val_filepaths</span><span class="p">,</span> <span class="n">val_labels_df</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">test_dataset</span> <span class="o">=</span> <span class="n">ImageContainer</span><span class="p">(</span><span class="n">test_filepaths</span><span class="p">,</span> <span class="n">test_labels_df</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="create-the-data-loaders">Create the Data Loaders</h4>
<p>In this section, we set up data loaders for our custom dataset in Julia, similar to how data loaders are used in PyTorch to manage batching and shuffling of data.</p>
<ol>
<li>
<p>Call helper Function: <code>label_from_row()</code> : This function extracts the label from the DataFrame for a given image file. It finds the index of the column with a value of 1, indicating the class.</p>
</li>
<li>
<p>Length and Indexing:</p>
</li>
</ol>
<ul>
<li><code>length(data::ImageContainer)</code>: Defines the length method to return the number of images in the dataset. Similar to PyTorch&rsquo;s <code>__len__</code>.</li>
<li><code>getindex(data::ImageContainer, idx::Int)</code>: This method is similar to PyTorch’s <code>__getitem__</code>. It loads an image, applies transformations, and returns the processed image along with its label.</li>
</ul>
<ol start="3">
<li>Data Augmentation and Transformations:</li>
</ol>
<ul>
<li>pipeline: Defines a transformation pipeline for scaling and cropping images.</li>
<li>transforms(image, labels_df): Inside getindex, this function applies the transformations to the image and normalizes it using the predefined mean and standard deviation values.</li>
</ul>
<ol start="4">
<li>DataLoaders:</li>
</ol>
<ul>
<li><code>train_loader</code> and <code>val_loader</code>: These DataLoader objects manage batching, shuffling, and parallel processing of the training and validation datasets, similar to <code>torch.utils.data.DataLoader</code> in PyTorch</li>
</ul>
<h5 id="notes-on-implementing-custom-data-containers">Notes on Implementing Custom Data Containers</h5>
<p>According to the documentation for MLUtils.DataLoader (<a href="https://fluxml.ai/Flux.jl/stable/data/mlutils/">see here</a>), custom data containers should implement Base.length instead of  <code>numobs</code>, and Base.getindex instead of <code>getobs</code>, unless there&rsquo;s a difference between these functions and the base methods for multi-dimensional arrays.</p>
<p>Base.length: Should be implemented to return the number of observations. This is akin to PyTorch&rsquo;s <code>__len__</code>.
Base.getindex: Should be implemented to handle indexing of the dataset, similar to PyTorch&rsquo;s <code>__getitem__</code>.
These methods ensure that the data is returned in a form suitable for the learning algorithm, maintaining consistency whether the index is a scalar or vector.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">length</span><span class="p">(</span><span class="n">data</span><span class="o">::</span><span class="kt">ImageContainer</span><span class="p">)</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">im_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">DATA_MEAN</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485f0</span><span class="p">,</span> <span class="mf">0.456f0</span><span class="p">,</span> <span class="mf">0.406f0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">DATA_STD</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229f0</span><span class="p">,</span> <span class="mf">0.224f0</span><span class="p">,</span> <span class="mf">0.225f0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define a transformation pipeline</span>
</span></span><span class="line"><span class="cl"><span class="n">pipeline</span> <span class="o">=</span> <span class="n">DataAugmentation</span><span class="o">.</span><span class="n">compose</span><span class="p">(</span><span class="n">ScaleKeepAspect</span><span class="p">(</span><span class="n">im_size</span><span class="p">),</span> <span class="n">CenterCrop</span><span class="p">(</span><span class="n">im_size</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">getindex</span><span class="p">(</span><span class="n">data</span><span class="o">::</span><span class="kt">ImageContainer</span><span class="p">,</span> <span class="n">idx</span><span class="o">::</span><span class="kt">Int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">img</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels_df</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">labels_df</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">function</span> <span class="n">transforms</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">pipeline</span> <span class="o">=</span> <span class="n">ScaleKeepAspect</span><span class="p">(</span><span class="n">im_size</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">CenterCrop</span><span class="p">(</span><span class="n">im_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_img</span> <span class="o">=</span> <span class="n">Images</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_img</span> <span class="o">=</span> <span class="n">apply</span><span class="p">(</span><span class="n">pipeline</span><span class="p">,</span> <span class="n">Image</span><span class="p">(</span><span class="n">_img</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="n">itemdata</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">collect</span><span class="p">(</span><span class="n">channelview</span><span class="p">(</span><span class="n">float32</span><span class="o">.</span><span class="p">(</span><span class="n">RGB</span><span class="o">.</span><span class="p">(</span><span class="n">_img</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">permutedims</span><span class="p">((</span><span class="n">img</span> <span class="o">.-</span> <span class="n">DATA_MEAN</span><span class="p">)</span> <span class="o">./</span> <span class="n">DATA_STD</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">label</span> <span class="o">=</span> <span class="n">label_from_row</span><span class="p">(</span><span class="n">labels_df</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">img</span><span class="p">,</span> <span class="n">label</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">transforms</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">labels_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_dataset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">batchsize</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">collate</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">parallel</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_dataset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">batchsize</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">collate</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">parallel</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span></code></pre></div><h2 id="model-definition">Model Definition</h2>
<p>Here we will load the model with <code>Metalhead.jl</code> and change the classifier &ldquo;head&rdquo; of the architecture to suit our classification need.</p>
<p>We will use this to select the classifier head of the model and change it.</p>
<p>For the fine-tuning portion of this exercise will follow the <a href="https://github.com/FluxML/model-zoo/tree/master/tutorials%2Ftransfer_learning">model zoo documentation</a>:</p>
<hr>
<p><img loading="lazy" src="/images/20240521_julia_transfer_learning_v5/109ebfef-0cea-49b5-98d5-fcd19f0f9596.png" type="" alt="image.png"  /></p>
<hr>
<p>Let&rsquo;s try it out with the <code>ResNet18</code> model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># load the pre-trained model</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_model</span> <span class="o">=</span> <span class="n">ResNet</span><span class="p">(</span><span class="mi">18</span><span class="p">;</span> <span class="n">pretrain</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span><span class="o">.</span><span class="n">layers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># let&#39;s look at the model</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_model</span>
</span></span></code></pre></div><pre><code>Chain(
  Chain(
    Chain(
      Conv((7, 7), 3 =&gt; 64, pad=3, stride=2, bias=false),  [90m# 9_408 parameters[39m
      BatchNorm(64, relu),              [90m# 128 parameters[39m[90m, plus 128[39m
      MaxPool((3, 3), pad=1, stride=2),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
          NNlib.relu,
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
          NNlib.relu,
          Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
          BatchNorm(64),                [90m# 128 parameters[39m[90m, plus 128[39m
        ),
      ),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        Chain(
          Conv((1, 1), 64 =&gt; 128, stride=2, bias=false),  [90m# 8_192 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
        ),
        Chain(
          Conv((3, 3), 64 =&gt; 128, pad=1, stride=2, bias=false),  [90m# 73_728 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
          NNlib.relu,
          Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
          NNlib.relu,
          Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
          BatchNorm(128),               [90m# 256 parameters[39m[90m, plus 256[39m
        ),
      ),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        Chain(
          Conv((1, 1), 128 =&gt; 256, stride=2, bias=false),  [90m# 32_768 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
        ),
        Chain(
          Conv((3, 3), 128 =&gt; 256, pad=1, stride=2, bias=false),  [90m# 294_912 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
          NNlib.relu,
          Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
          NNlib.relu,
          Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
          BatchNorm(256),               [90m# 512 parameters[39m[90m, plus 512[39m
        ),
      ),
    ),
    Chain(
      Parallel(
        addact(NNlib.relu, ...),
        Chain(
          Conv((1, 1), 256 =&gt; 512, stride=2, bias=false),  [90m# 131_072 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        ),
        Chain(
          Conv((3, 3), 256 =&gt; 512, pad=1, stride=2, bias=false),  [90m# 1_179_648 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
          NNlib.relu,
          Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        ),
      ),
      Parallel(
        addact(NNlib.relu, ...),
        identity,
        Chain(
          Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
          NNlib.relu,
          Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
          BatchNorm(512),               [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        ),
      ),
    ),
  ),
  Chain(
    AdaptiveMeanPool((1, 1)),
    MLUtils.flatten,
    Dense(512 =&gt; 1000),                 [90m# 513_000 parameters[39m
  ),
) [90m        # Total: 62 trainable arrays, [39m11_689_512 parameters,
[90m          # plus 40 non-trainable, 9_600 parameters, summarysize [39m44.654 MiB.
</code></pre>
<p>Now we modify the head, by chaning the last <code>Chain</code> in the model. We change the last layer to output 4 classes (as opposed to the original 1000 classes).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># modify the model</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_infer</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">resnet_model</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">resnet_tune</span> <span class="o">=</span> <span class="n">Chain</span><span class="p">(</span><span class="n">AdaptiveMeanPool</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">Flux</span><span class="o">.</span><span class="n">flatten</span><span class="p">,</span> <span class="n">Dense</span><span class="p">(</span><span class="mi">512</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>Chain(
  AdaptiveMeanPool((1, 1)),
  Flux.flatten,
  Dense(512 =&gt; 4),                      [90m# 2_052 parameters[39m
) 
</code></pre>
<p><strong>And that&rsquo;s it!</strong> Now, let&rsquo;s just explore both portions of the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">resnet_infer</span>
</span></span></code></pre></div><pre><code>Chain(
  Chain(
    Conv((7, 7), 3 =&gt; 64, pad=3, stride=2, bias=false),  [90m# 9_408 parameters[39m
    BatchNorm(64, relu),                [90m# 128 parameters[39m[90m, plus 128[39m
    MaxPool((3, 3), pad=1, stride=2),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
        NNlib.relu,
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
        NNlib.relu,
        Conv((3, 3), 64 =&gt; 64, pad=1, bias=false),  [90m# 36_864 parameters[39m
        BatchNorm(64),                  [90m# 128 parameters[39m[90m, plus 128[39m
      ),
    ),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      Chain(
        Conv((1, 1), 64 =&gt; 128, stride=2, bias=false),  [90m# 8_192 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
      ),
      Chain(
        Conv((3, 3), 64 =&gt; 128, pad=1, stride=2, bias=false),  [90m# 73_728 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
        NNlib.relu,
        Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
        NNlib.relu,
        Conv((3, 3), 128 =&gt; 128, pad=1, bias=false),  [90m# 147_456 parameters[39m
        BatchNorm(128),                 [90m# 256 parameters[39m[90m, plus 256[39m
      ),
    ),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      Chain(
        Conv((1, 1), 128 =&gt; 256, stride=2, bias=false),  [90m# 32_768 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
      ),
      Chain(
        Conv((3, 3), 128 =&gt; 256, pad=1, stride=2, bias=false),  [90m# 294_912 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
        NNlib.relu,
        Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
        NNlib.relu,
        Conv((3, 3), 256 =&gt; 256, pad=1, bias=false),  [90m# 589_824 parameters[39m
        BatchNorm(256),                 [90m# 512 parameters[39m[90m, plus 512[39m
      ),
    ),
  ),
  Chain(
    Parallel(
      addact(NNlib.relu, ...),
      Chain(
        Conv((1, 1), 256 =&gt; 512, stride=2, bias=false),  [90m# 131_072 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
      ),
      Chain(
        Conv((3, 3), 256 =&gt; 512, pad=1, stride=2, bias=false),  [90m# 1_179_648 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        NNlib.relu,
        Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
      ),
    ),
    Parallel(
      addact(NNlib.relu, ...),
      identity,
      Chain(
        Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
        NNlib.relu,
        Conv((3, 3), 512 =&gt; 512, pad=1, bias=false),  [90m# 2_359_296 parameters[39m
        BatchNorm(512),                 [90m# 1_024 parameters[39m[90m, plus 1_024[39m
      ),
    ),
  ),
) [90m        # Total: 60 trainable arrays, [39m11_176_512 parameters,
[90m          # plus 40 non-trainable, 9_600 parameters, summarysize [39m42.693 MiB.
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">resnet_tune</span>
</span></span></code></pre></div><pre><code>Chain(
  AdaptiveMeanPool((1, 1)),
  Flux.flatten,
  Dense(512 =&gt; 4),                      [90m# 2_052 parameters[39m
) 
</code></pre>
<h3 id="define-evaluation-and-training-functions">Define evaluation and training functions</h3>
<p>Again, will follow the model zoo documentation. Small adaptations will be needed. (These two functions were taken directly from the documentation).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">m_infer</span><span class="p">,</span> <span class="n">m_tune</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">good</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">in</span> <span class="n">val_loader</span>
</span></span><span class="line"><span class="cl">        <span class="n">good</span> <span class="o">+=</span> <span class="n">sum</span><span class="p">(</span><span class="n">Flux</span><span class="o">.</span><span class="n">onecold</span><span class="p">(</span><span class="n">m_tune</span><span class="p">(</span><span class="n">m_infer</span><span class="p">(</span><span class="n">x</span><span class="p">)))</span> <span class="o">.==</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">+=</span> <span class="n">length</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="n">acc</span> <span class="o">=</span> <span class="n">round</span><span class="p">(</span><span class="n">good</span> <span class="o">/</span> <span class="n">count</span><span class="p">,</span> <span class="n">digits</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">acc</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>eval_f (generic function with 1 method)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">train_epoch!</span><span class="p">(</span><span class="n">model_infer</span><span class="p">,</span> <span class="n">model_tune</span><span class="p">,</span> <span class="n">opt</span><span class="p">,</span> <span class="n">loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">in</span> <span class="n">loader</span>
</span></span><span class="line"><span class="cl">        <span class="n">infer</span> <span class="o">=</span> <span class="n">model_infer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">grads</span> <span class="o">=</span> <span class="n">gradient</span><span class="p">(</span><span class="n">model_tune</span><span class="p">)</span> <span class="k">do</span> <span class="n">m</span>
</span></span><span class="line"><span class="cl">            <span class="n">Flux</span><span class="o">.</span><span class="n">Losses</span><span class="o">.</span><span class="n">logitcrossentropy</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="n">infer</span><span class="p">),</span> <span class="n">Flux</span><span class="o">.</span><span class="n">onehotbatch</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="mi">4</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="n">update!</span><span class="p">(</span><span class="n">opt</span><span class="p">,</span> <span class="n">model_tune</span><span class="p">,</span> <span class="n">grads</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>train_epoch! (generic function with 1 method)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">resnet_opt</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">Flux</span><span class="o">.</span><span class="n">Optimisers</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="mf">1e-3</span><span class="p">),</span> <span class="n">resnet_tune</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">iter</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="mi">5</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@time</span> <span class="n">train_epoch!</span><span class="p">(</span><span class="n">resnet_infer</span><span class="p">,</span> <span class="n">resnet_tune</span><span class="p">,</span> <span class="n">resnet_opt</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_train</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">resnet_infer</span><span class="p">,</span> <span class="n">resnet_tune</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_eval</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">resnet_infer</span><span class="p">,</span> <span class="n">resnet_tune</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;train&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_train</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;eval&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_eval</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>176.283332 seconds (37.11 M allocations: 98.153 GiB, 6.06% gc time, 143.87% compilation time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.5744
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.5455


 70.815518 seconds (2.42 M allocations: 95.936 GiB, 11.25% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.6823
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6273


 90.463025 seconds (2.42 M allocations: 95.936 GiB, 11.21% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7032
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6455


 94.362892 seconds (2.42 M allocations: 95.936 GiB, 10.91% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7433
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6727


116.526515 seconds (2.42 M allocations: 95.936 GiB, 9.62% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7885
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6909
</code></pre>
<hr>
<h2 id="vision-transformers">Vision Transformers</h2>
<hr>
<p>Similar to the PyTorch demonstration, we can do transfer learning by changing a different computer vision model (Vision Transformer).</p>
<p>Let&rsquo;s get into it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">vit_model</span> <span class="o">=</span> <span class="n">ViT</span><span class="p">(</span><span class="ss">:base</span><span class="p">;</span> <span class="n">pretrain</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span><span class="o">.</span><span class="n">layers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># let&#39;s have a look at the model head, to see how many inputs the head needs</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_model</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span></code></pre></div><pre><code>Chain(
  LayerNorm(768),                       [90m# 1_536 parameters[39m
  Dense(768 =&gt; 1000),                   [90m# 769_000 parameters[39m
) [90m                  # Total: 4 arrays, [39m770_536 parameters, 2.940 MiB.
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># modify the head</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_infer</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">vit_model</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># notice how we keep the input to the model head</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_tune</span> <span class="o">=</span> <span class="n">Chain</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LayerNorm</span><span class="p">(</span><span class="mi">768</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">Dense</span><span class="p">(</span><span class="mi">768</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div><pre><code>Chain(
  LayerNorm(768),                       [90m# 1_536 parameters[39m
  Dense(768 =&gt; 4),                      [90m# 3_076 parameters[39m
) [90m                  # Total: 4 arrays, [39m4_612 parameters, 18.352 KiB.
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">vit_opt</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">Flux</span><span class="o">.</span><span class="n">Optimisers</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="mf">1e-3</span><span class="p">),</span> <span class="n">vit_tune</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">iter</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="mi">5</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@time</span> <span class="n">train_epoch!</span><span class="p">(</span><span class="n">vit_infer</span><span class="p">,</span> <span class="n">vit_tune</span><span class="p">,</span> <span class="n">vit_opt</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_train</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">vit_infer</span><span class="p">,</span> <span class="n">vit_tune</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_eval</span> <span class="o">=</span> <span class="n">eval_f</span><span class="p">(</span><span class="n">vit_infer</span><span class="p">,</span> <span class="n">vit_tune</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;train&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_train</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@info</span> <span class="s">&#34;eval&#34;</span> <span class="n">metric</span> <span class="o">=</span> <span class="n">metric_eval</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>627.303072 seconds (17.32 M allocations: 291.924 GiB, 4.61% gc time, 3.66% compilation time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.7058
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6273


565.986959 seconds (2.54 M allocations: 291.028 GiB, 4.71% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.8042
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6273


516.041945 seconds (2.54 M allocations: 291.028 GiB, 4.92% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.866
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6818


515.415614 seconds (2.54 M allocations: 291.028 GiB, 4.80% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.8973
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6818


427.423410 seconds (2.54 M allocations: 291.028 GiB, 5.01% gc time)


[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mtrain
[36m[1m└ [22m[39m  metric = 0.9199
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39meval
[36m[1m└ [22m[39m  metric = 0.6727
</code></pre>
<h3 id="save-the-models">Save the Models</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">JLD2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">resnet_model_state</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">state</span><span class="p">(</span><span class="n">resnet_model</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">vit_model_state</span> <span class="o">=</span> <span class="n">Flux</span><span class="o">.</span><span class="n">state</span><span class="p">(</span><span class="n">vit_model</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">jldsave</span><span class="p">(</span><span class="s">&#34;resnet_model.jld2&#34;</span><span class="p">;</span> <span class="n">resnet_model_state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">jldsave</span><span class="p">(</span><span class="s">&#34;vit_model.jld2&#34;</span><span class="p">;</span> <span class="n">vit_model_state</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mOpening file with JLD2.MmapIO failed, falling back to IOStream
[33m[1m└ [22m[39m[90m@ JLD2 C:\Users\ingvi\.julia\packages\JLD2\7uAqU\src\JLD2.jl:300[39m
[33m[1m┌ [22m[39m[33m[1mWarning: [22m[39mOpening file with JLD2.MmapIO failed, falling back to IOStream
[33m[1m└ [22m[39m[90m@ JLD2 C:\Users\ingvi\.julia\packages\JLD2\7uAqU\src\JLD2.jl:300[39m
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">BSON</span><span class="o">:</span> <span class="nd">@save</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@save</span> <span class="s">&#34;resnet_model_sate.bson&#34;</span> <span class="n">resnet_model</span>
</span></span><span class="line"><span class="cl"><span class="nd">@save</span> <span class="s">&#34;vit_model_state.bson&#34;</span> <span class="n">vit_model</span>
</span></span></code></pre></div><h2 id="thank-you">Thank you!</h2>
<p>I hope this demonstration on using Julia and <code>Flux</code> for transfer learning was helpful!</p>
<p>Victor</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Transfer Learning Classifier Using PyTorch</title>
      <link>http://localhost:1313/posts/20240515_cat_mood_classification/20240515_cat_mood_classification/</link>
      <pubDate>Wed, 15 May 2024 14:53:29 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240515_cat_mood_classification/20240515_cat_mood_classification/</guid>
      <description>Things we learn here include image data exploration, transfer learning, custom datasets, comparing ML models, saving/loading models and model data, conditional setup for different work environments.</description>
      <content:encoded><![CDATA[<p><a href="https://colab.research.google.com/github/vflores-io/cat_mood/blob/main/cat_mood_classification.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a></p>
<h1 id="cat-expression-classifier-using-convolutional-neural-networks">Cat Expression Classifier Using Convolutional Neural Networks</h1>
<hr>
<p>This project aims to build a cat expression classifier with convolutional neural networks (CNNs) using PyTorch. This project serves as an introduction to image classification and also dives into the nuances of handling a specific, custom dataset and adapting pre-trained models for our purposes.</p>
<h3 id="objective">Objective</h3>
<p>The primary objective of this project is to develop a model capable of classifying images of cat faces into one of four moods: alarmed, angry, calm, and pleased. By the end of this tutorial, you will learn how to preprocess image data, leverage transfer learning for image classification, and evaluate a model&rsquo;s performance.</p>
<h3 id="tools-and-techniques">Tools and Techniques</h3>
<p>We will employ PyTorch, a powerful and versatile deep learning library, to construct our CNN. The model of choice for this tutorial is ResNet18, a robust architecture that is commonly used in image recognition tasks. Given the straightforward nature of our classificaiton problem, ResNet18 provides an ecellent balance between complexity and performance.</p>
<h3 id="why-transfer-learning">Why <em>Transfer Learning</em>?</h3>
<p>In this tutorial, we utilize <em>transfer learning</em> to take advantage of a pre-trained ResNet18 model. This approach allows us to use a model that has already learned a significant amount of relevant features from a vast and diverse dataset (ImageNet). By fine-tuning this model to our specific task, we can achieve high accuracy with relatively little data and reduce the computational cost typycally associated with training a deep neural network from scratch.</p>
<h3 id="dataset">Dataset</h3>
<p>The dataset comprises images of cat faces, labeled according to their expressed mood. These images are organized into training, validation, and testing sets, each with a corresponding CSV file which maps filenames to mood labels. This guide will walk you through the process of loading, preprocessing, and augmenting this data to suit the needs of our CNN.</p>
<p>The dataset was obtained <a href="https://universe.roboflow.com/mubbarryz/domestic-cats-facial-expressions">here</a>.</p>
<p>Let&rsquo;s get started!</p>
<h2 id="dataset-exploration">Dataset Exploration</h2>
<h3 id="listing-the-number-of-images-in-each-set-and-visualizing-the-set">Listing the Number of Images in Each Set and Visualizing The Set</h3>
<p>Below we will mount the drive to retrieve the data set files.
Then, will use Python&rsquo;s <code>os</code> module to list the number of images in the dataset. This will give us an idea of the size of the set.</p>
<p>Additionally, we will include a flag to tell the model whether we want to train it or to load a previously saved model&hellip; this will become clear later.</p>
<p>Finally, we will set up a function to visualize some sample images from each set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># flag to control whether to train the model or load a saved model</span>
</span></span><span class="line"><span class="cl"><span class="n">should_train_resnet</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl"><span class="n">should_train_vit</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">set_path</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># check if the notebook is running on google colab</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="s1">&#39;google.colab&#39;</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">get_ipython</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running on Google Colab.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
</span></span><span class="line"><span class="cl">    <span class="n">drive</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s1">&#39;/content/drive&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/content/drive/PATH-TO-YOUR-DATA&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running locally.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;./data/cat_expression_data&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">base_dir</span> <span class="o">=</span> <span class="n">set_path</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>Running on Google Colab.
Mounted at /content/drive
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># base directories</span>
</span></span><span class="line"><span class="cl"><span class="n">train_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="s1">&#39;train&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="s1">&#39;val&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_images</span><span class="p">(</span><span class="n">directory</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;&#34;&#34; list folders and count image files in each folder &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">dir_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">image_files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">((</span><span class="s1">&#39;.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;.bmp&#39;</span><span class="p">,</span> <span class="s1">&#39;.gif&#39;</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Total image files in </span><span class="si">{</span><span class="n">dir_name</span><span class="si">}</span><span class="s1">: </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list_images</span><span class="p">(</span><span class="n">train_dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">list_images</span><span class="p">(</span><span class="n">val_dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">list_images</span><span class="p">(</span><span class="n">test_dir</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Total image files in train: 1149
Total image files in val: 110
Total image files in test: 55
</code></pre>
<p>Finally, we will make a dictionary that maps the classes to index-based labels, from the CSV file. We will need this way later, but we will define the dictionary this early on.</p>
<h3 id="visualizing-some-of-the-data">Visualizing Some of the Data</h3>
<p>Let&rsquo;s visualize a few images from each folder to ensure to have a better feel of the data.</p>
<p>We will do this by making a dataframe out of the annotations file where the labels are stored. We will use the test annotations, since this is the smallest dataset, and the other two have the same labels anyway.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define the annotations file</span>
</span></span><span class="line"><span class="cl"><span class="n">annotations_filename</span> <span class="o">=</span> <span class="s1">&#39;_classes.csv&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define the full path to the annotations file</span>
</span></span><span class="line"><span class="cl"><span class="n">test_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">test_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load the annotations file</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">test_annotations</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">class_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">index</span><span class="p">:</span> <span class="n">col</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">:])}</span>  <span class="c1"># Adjust slicing if there are other columns</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">class_names</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>{0: ' alarmed', 1: ' angry', 2: ' calm', 3: ' pleased'}
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_sample_images</span><span class="p">(</span><span class="n">main_directory</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Display sample images from each subfolder within the main directory.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">subfolders</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="o">.</span><span class="n">path</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">scandir</span><span class="p">(</span><span class="n">main_directory</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">is_dir</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">directory</span> <span class="ow">in</span> <span class="n">subfolders</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">image_files</span> <span class="o">=</span> <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span> <span class="k">if</span> <span class="n">f</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">endswith</span><span class="p">((</span><span class="s1">&#39;.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;.jpeg&#39;</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">chosen_samples</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">image_files</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">),</span> <span class="n">num_samples</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Plot settings</span>
</span></span><span class="line"><span class="cl">            <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">image_files</span><span class="p">),</span> <span class="n">num_samples</span><span class="p">),</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">fig</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Sample Images from </span><span class="si">{</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">ax</span><span class="p">,</span> <span class="n">img_path</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">axes</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">chosen_samples</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># ax.set_title(os.path.basename(img_path))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No images to display in </span><span class="si">{</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example usage with the base directory containing train, validation, and test subfolders</span>
</span></span><span class="line"><span class="cl"><span class="n">show_sample_images</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="n">num_samples</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_10_0.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_10_1.png" type="" alt="png"  /></p>
<p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_10_2.png" type="" alt="png"  /></p>
<h2 id="data-preprocessing">Data Preprocessing</h2>
<hr>
<p>This steps involves preparing the dataset for training a PyTorch model by resizing, normalizing, and applying data augmentation.</p>
<p><strong>NOTE:</strong> At this point, it is important to know what is the model or CNN architecture we will be using. Important aspects to consider include the image size, any data transformations for training and validation, data augmentation techniques, and setting up data loaders later.</p>
<p>In this example, we will use <code>ResNet18 </code>. The inputs must follow a specific format, as per the PyTorch ResNet documentation found <a href="https://pytorch.org/hub/pytorch_vision_resnet/">here</a>:</p>
<blockquote>
<p>All pre-trained models expect input images normalized in the same way, i.e. mini-batches of 3-channel RGB images of shape <code>(3 x H x W)</code>, where <code>H</code> and <code>W</code> are expected to be at least 224. The images have to be loaded in to a range of <code>[0, 1]</code> and then normalized using <code>mean = [0.485, 0.456, 0.406]</code> and <code>std = [0.229, 0.224, 0.225]</code>.</p>
</blockquote>
<h3 id="tools-for-data-preprocessing-in-pytorch">Tools for Data Preprocessing in PyTorch</h3>
<ul>
<li><code>torchvision.transforms</code>: Provides common image transformations like resizing, normalization, and augmentation.</li>
<li><code>torch.utils.data.Dataset</code>: A base class for creating custom datasets.</li>
<li><code>torch.utils.data.DataLoader</code>: Loads and batches data for training.</li>
</ul>
<h3 id="the-data">The Data</h3>
<p>The data set we are using consists of three folders: <code>train</code>, <code>val</code>, <code>test</code>. Each of them contain a set of images of cats. The labels in this case, are in the form of a CSV file that maps the filename with a one-hot encoding to label the classification of the image, i.e. the cat&rsquo;s mood - alarmed, angry, calm, pleased.</p>
<p>Because this dataset structure is not exactly suitable for the <code>ImageFolder</code> module in PyTorch, whereby labelling is made easier and based on the folder structure, we need to create a custom dataset and loader. Let&rsquo;s get started!</p>
<h3 id="define-image-transformations">Define Image Transformations</h3>
<ul>
<li>Specify resizing dimensions, normalization parameters, and augmentation techniques (like random rotation, flips, etc.).</li>
<li>Create separate transformations for training and validation datasets.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># import transforms</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torchvision.transforms</span> <span class="k">as</span> <span class="nn">transforms</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define the image size</span>
</span></span><span class="line"><span class="cl"><span class="n">image_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">)</span>  <span class="c1"># adjusted for ResNet18</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define transformations for the training dataset</span>
</span></span><span class="line"><span class="cl"><span class="n">train_transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Resize</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>  <span class="c1"># resize to ensure minimum size</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">CenterCrop</span><span class="p">(</span><span class="mi">224</span><span class="p">),</span> <span class="c1"># center crop to 224x224</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">RandomHorizontalFlip</span><span class="p">(),</span> <span class="c1"># data augmentation</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">RandomRotation</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span> <span class="c1"># data augmentation</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ConvertImageDtype</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">),</span>  <span class="c1"># important, because the read_image reads as uint8, needs to be float</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># given that below we apply normalization</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">mean</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                         <span class="n">std</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Resize</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">CenterCrop</span><span class="p">(</span><span class="mi">224</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ConvertImageDtype</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">mean</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                         <span class="n">std</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span></code></pre></div><p>With these transformations, the data pipeline will align with common practices for pre-trained models like ResNet18.</p>
<h3 id="create-custom-datasets-and-data-loaders">Create Custom Datasets and Data Loaders</h3>
<p>Given the structure of our dataset, where labels are provided in a CSV file rather than through directory structure, we need to use a custom dataset class. This will allow us to link echc image with its respective label based on our CSV file&rsquo;s structure.</p>
<h4 id="creating-custom-dataset">Creating Custom Dataset</h4>
<p>We will extend the <code>torch.utils.data.Dataset</code> class to create our custom dataset. this class will override the necessary methods to handle our specific dataset setup:</p>
<ol>
<li>Initialization: Load the CSV file and set up the path to the images</li>
<li>Length: Return the total number of images</li>
<li>Get item: Load each image by index, apply the specified transformations, and parse the label from the CSV data</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torchvision.io</span> <span class="kn">import</span> <span class="n">read_image</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CustomImageDataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;&#34;&#34; a custom dataset class that loads images and their labels from a CSV &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">annotations_file</span><span class="p">,</span> <span class="n">img_dir</span><span class="p">,</span> <span class="n">transform</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    args:
</span></span></span><span class="line"><span class="cl"><span class="s2">      annotations_file (string): path to the CSV file with annotations
</span></span></span><span class="line"><span class="cl"><span class="s2">      img_dir (str): directory with all the images
</span></span></span><span class="line"><span class="cl"><span class="s2">      transform (callable, optional): transform to be applied on a sample
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">annotations_file</span><span class="p">)</span> <span class="c1"># load annotations</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">img_dir</span> <span class="o">=</span> <span class="n">img_dir</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; returns the number of items in the dataset &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; fetches the image and label at the index idx from the dataset &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img_dir</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">read_image</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># convert one-hot encoded labels to a categorical label</span>
</span></span><span class="line"><span class="cl">    <span class="n">one_hot_label</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">img_labels</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">:]</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float32&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># next find the index of the element in the slice which contains the &#39;1&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># since all other numbers will be 0; this will correspond to the label</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 0, 1, 2, 3</span>
</span></span><span class="line"><span class="cl">    <span class="n">label</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">one_hot_label</span><span class="p">))</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">transform</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">image</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>  <span class="c1"># apply transformations</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">image</span><span class="p">,</span> <span class="n">label</span>
</span></span></code></pre></div><p>Now that we have defined the data classes, we can create objects for each of our datasets, as a <code>CustomImageDataset</code> class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># annotations_filename = &#39;_classes.csv&#39;    # previously defined</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># paths to annotation files</span>
</span></span><span class="line"><span class="cl"><span class="n">train_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">train_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">val_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_annotations</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">test_dir</span><span class="p">,</span> <span class="n">annotations_filename</span><span class="p">)</span>    <span class="c1"># previously defined</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create dataset objects</span>
</span></span><span class="line"><span class="cl"><span class="n">train_dataset</span> <span class="o">=</span> <span class="n">CustomImageDataset</span><span class="p">(</span><span class="n">train_annotations</span><span class="p">,</span> <span class="n">train_dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">transform</span> <span class="o">=</span> <span class="n">train_transforms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">val_dataset</span> <span class="o">=</span> <span class="n">CustomImageDataset</span><span class="p">(</span><span class="n">val_annotations</span><span class="p">,</span> <span class="n">val_dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">transform</span> <span class="o">=</span> <span class="n">val_transforms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">test_dataset</span> <span class="o">=</span> <span class="n">CustomImageDataset</span><span class="p">(</span><span class="n">test_annotations</span><span class="p">,</span> <span class="n">test_dir</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                   <span class="n">transform</span> <span class="o">=</span> <span class="n">val_transforms</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="creating-data-loaders">Creating Data Loaders</h4>
<p>Data loaders in PyTorch provide the necessary functionality to batch, shuffle, and feed the data to your model during training in an efficient manner. They also handle parallel processing using multiple worker threads, which can significantly speed up data loading.</p>
<p>In short, data loaders take the dataset objects and handle the process of creating batches, shuffling the data, and parallelizing the data loading process.</p>
<p>Below we will create a data loaders for our datasets.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span>   <span class="c1"># defines how many samples per batch to load</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">True</span>    <span class="c1"># shuffles the dataset at every epoch</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">False</span>   <span class="c1"># no need to shuffle validation data</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">test_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">test_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>In the loader above, we have the following main parts:</p>
<ul>
<li>Batch size: typycally set based on the system&rsquo;s memory capacity and how large the model is. A larger batch size can speed up training but requires more memory.</li>
<li>Shuffle: shuffling helps ensure that each batch sees a varierty of data across epochs, which can improve model generalization.</li>
<li>Number of workers: this controls how many subproceses to use for data loading. More workers can lead to faster data preprocessing and reduced time to train each epoch but also increases memory usage.</li>
</ul>
<h3 id="integration-with-the-training-loop">Integration with the Training Loop</h3>
<p>With the data loaders set up, we are now ready to integrate them into the model&rsquo;s training and validation loops.</p>
<p>The code <strong>snippet</strong> below shows how this would be done. We will implement the actual integration when we get to the training section.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_epochs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Forward pass, backward pass, and optimize</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Validation step at the end of each epoch</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Calculate validation accuracy, loss, etc.</span>
</span></span></code></pre></div><h2 id="model-training">Model Training</h2>
<hr>
<p>Now that the data is ready and properly formatted for input into a neural network, the next step involves setting up and training the <code>ResNet18</code> model. We will configure the model, define the loss function and optimizer, and implement the training and validation loops.</p>
<h3 id="next-steps">Next Steps</h3>
<ol>
<li>Model setup:</li>
</ol>
<ul>
<li>Load the pre-trained <code>ResNet18</code> model and modify it for our specific classification task (number of classes based on cat facial expressions)</li>
</ul>
<ol start="2">
<li>Loss function and optimizer:</li>
</ol>
<ul>
<li>Define a loss function suitable for classification, e.g. <code>CrossEntropyLoss</code></li>
<li>Set up an optimizer (like <code>Adam</code> or <code>SGD</code>) to adjust the model weights during training based on the computed gradients</li>
</ul>
<ol start="3">
<li>Training loop:</li>
</ol>
<ul>
<li>Implement the loop that processes the data through the model, computes the loss, updates the model parameters, and evaluates the model performance on the validation dataset periodically</li>
</ul>
<ol start="4">
<li>Monitoring and saving the model:</li>
</ol>
<ul>
<li>Track performance metrics such as loss and accuracy</li>
<li>Implement functionality to save the trained model for later use or further evaluation</li>
</ul>
<h3 id="model-setup">Model Setup</h3>
<p>In this section, we&rsquo;ll configure a ResNet18 model to suit our specific classification task. Since the model is originally designed for ImageNet with 1000 classes, we&rsquo;ll adapt it for our use case, which involves classifying images into four mood categories (alarmed, angry, calm, pleased).</p>
<h4 id="import-the-necessary-libraries">Import the Necessary Libraries</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># import torch  # this has already been imported before</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="nn">nn</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch.optim</span> <span class="k">as</span> <span class="nn">optim</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">models</span>
</span></span></code></pre></div><h4 id="load-and-modify-the-pre-trained-resnet18">Load and Modify the Pre-trained ResNet18</h4>
<p>We will load a pre-trained ResNet18 model and modify its final layer to suit our classification needs. This is known as <strong>transfer learning</strong>, and it is a technique that uses a pre-trained model and leverages its learned parameters to focus on a similar, more specific task. This is a powerful technique, since it uses the existing knowledge (such as edges and features) so that the new classification task is more robust, and faster to tune to the specific task.</p>
<h4 id="understanding-transfer-learning">Understanding Transfer Learning</h4>
<p><strong>Transfer Learning</strong> is a powerful technique in machine learning where a model developed for a particular task is reused as the starting point for a model on a second task. It&rsquo;s especially popular in deep learning given the vast compute and time resources required to develop neural network models on large datasets and from scratch.</p>
<h4 id="why-use-transfer-learning">Why Use Transfer Learning?</h4>
<ol>
<li>Efficiency: transfer learning allows us to leverage pre-trained networks that have already learned a good amount of features on large datasets. This is beneficial as it can drastically reduce the time and computational cost to achieve high performance.</li>
<li>Performance: models trained on large-scalr datasets like ImageNet havve proven to generalize well to other datasets. Starting with these can provide a significand head-start in terms of performance.</li>
</ol>
<h5 id="applying-transfer-learning">Applying Transfer Learning</h5>
<ul>
<li>Model adaptation: for our specific task fo classifying cat moods, we take a pre-trained ResNet18 model and tailor it to our needs. The pre-trained model brings the advantage of learned features from ImageNet, a vast and diverse dataset.</li>
<li>Feature extraction: by <strong>freezing</strong> (i.e. keeping the weight values as they are) the pre-trained layers, we utilize them as a feature extractor. Only the final layers are trained to adapt those features to our specific classification task.</li>
</ul>
<h4 id="model-setup-with-a-custom-classifier">Model Setup with a Custom Classifier</h4>
<p>We have mentioned replacing the funal layer(s) as a transfer learning techniques. In this case, we replace the final fully connected (fc) layer of ResNet18 with a different layer which will suit our need to have 4 classes. Additionally, we will replace this fc layer with a more complex classifier portion, which involves adding additional layers such as ReLU for non-linearity, and dropout for regularization to prevent overfitting.</p>
<ul>
<li>ReLU Activation: introduces non-linearity into the model, allowing it to learn more complex patterns.</li>
<li>Dropout: Randomly zeros some of the elements of the input (to the layer, not input to the model) tensor with probability $p$ during training, which helps prevent overfitting.</li>
</ul>
<p>Let&rsquo;s implement this classifier in our transfer learning setup.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># assign the model weights</span>
</span></span><span class="line"><span class="cl"><span class="n">weights</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ResNet18_Weights</span><span class="o">.</span><span class="n">DEFAULT</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create the model object with pre-trained weights</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">resnet18</span><span class="p">(</span><span class="n">weights</span> <span class="o">=</span> <span class="n">weights</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># freeze all the layers in the network</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">  <span class="n">param</span><span class="o">.</span><span class="n">requires_grad</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace the fc layer with a more complex classifier</span>
</span></span><span class="line"><span class="cl"><span class="n">num_features</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fc</span><span class="o">.</span><span class="n">in_features</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">num_features</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>    <span class="c1"># first linear layer</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>                       <span class="c1"># non-linearity</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>                 <span class="c1"># dropout for regularization</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">class_names</span><span class="p">))</span>                <span class="c1"># output layer, 4 classes for cat moods</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move model to GPU if available</span>
</span></span><span class="line"><span class="cl"><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Downloading: &quot;https://download.pytorch.org/models/resnet18-f37072fd.pth&quot; to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth
100%|██████████| 44.7M/44.7M [00:00&lt;00:00, 117MB/s]
</code></pre>
<h3 id="loss-function-and-optimizer">Loss Function and Optimizer</h3>
<p>For our classification task, we need a loss function that effectively measures the discrepancy between the predicted labels and the actual labels. Since we&rsquo;ve configured out model outputs to be class indices (from our dataset&rsquo;s one-hot encoded labels), we&rsquo;ll use <a href="https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html"><code>CrossEntropyLoss</code></a>, which is ideal for such clasification tasks.</p>
<p>We&rsquo;ll par this with the <a href="https://pytorch.org/docs/stable/generated/torch.optim.Adam.html"><code>Adam</code></a> optimizer, which is known for its efficiency in handling sparse gradients and adaptive learning rate capabilities, making it well-suited for this task.</p>
<p>Let&rsquo;s set up our loss function and optimizer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># loss function</span>
</span></span><span class="line"><span class="cl"><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># optimizer</span>
</span></span><span class="line"><span class="cl"><span class="c1"># optimize only the final classifier layers</span>
</span></span><span class="line"><span class="cl"><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">fc</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span> <span class="o">=</span> <span class="mf">0.001</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="training-and-validation-loops">Training and Validation Loops</h3>
<p>Now, let&rsquo;s write the code to train and validate our model. This involves running the model over several epochs, making predictions, calculating loss, updating the model parameters, and evaluating the model&rsquo;s perfomance on the validation dataset.</p>
<ul>
<li>Training loop: here, the model learns by adjusting its weights based on the calculated loss from the training data</li>
<li>Validation loop: validation occurs post the training phase in each epoch and helps in evaluating the model&rsquo;s performance on unseen data, ensuring it generalizes well and doesn&rsquo;t overfit</li>
</ul>
<h3 id="savingloading-the-model">Saving/Loading the Model</h3>
<h4 id="save-the-trained-model">Save the Trained Model</h4>
<p>If we have performed training, we can save the model to use next time, so that we can avoid re-training everytime we run the notebook.</p>
<p>We will implement this part as an <code>if</code> statement, that would run the training loop and save the model if we choose to, otherwise, we would just load the model weights.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pickle</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># define a function to set the save model path</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">model_save_path</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># check if the notebook is running on google colab</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="s1">&#39;google.colab&#39;</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">get_ipython</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running on Google Colab.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/content/drive/PATH-TO-YOUR-SAVE-FOLDER&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Running locally.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;./saved_models&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">path</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">training_loop</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">num_epochs</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">flag</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># num_epochs = 25   # define the number of epochs for training</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_losses</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_losses</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_epochs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>   <span class="c1"># set the model to training mode</span>
</span></span><span class="line"><span class="cl">      <span class="n">total_train_loss</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># forward pass to get outputs</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># backpropagation and optimization</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">total_train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span> <span class="o">*</span> <span class="n">images</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># calculate average training loss for the epoch</span>
</span></span><span class="line"><span class="cl">      <span class="n">avg_train_loss</span> <span class="o">=</span> <span class="n">total_train_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">train_losses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg_train_loss</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># print average training loss per epoch&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Epoch </span><span class="si">{</span><span class="n">epoch</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s1">/</span><span class="si">{</span><span class="n">num_epochs</span><span class="si">}</span><span class="s1">, Training Loss: </span><span class="si">{</span><span class="n">avg_train_loss</span><span class="si">:</span><span class="s1">.4f</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">#------------------#</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># validation phase #</span>
</span></span><span class="line"><span class="cl">      <span class="c1">#------------------#</span>
</span></span><span class="line"><span class="cl">      <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>   <span class="c1"># set the model to evaluation mode</span>
</span></span><span class="line"><span class="cl">      <span class="n">total_val_loss</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">      <span class="n">total_val_accuracy</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">total_val_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span> <span class="o">*</span> <span class="n">images</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">total_val_accuracy</span> <span class="o">+=</span> <span class="p">(</span><span class="n">predicted</span> <span class="o">==</span> <span class="n">labels</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># calculate average validation loss for the epoch</span>
</span></span><span class="line"><span class="cl">      <span class="n">avg_val_loss</span> <span class="o">=</span> <span class="n">total_val_loss</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">val_losses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg_val_loss</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># calculate validation accuracy</span>
</span></span><span class="line"><span class="cl">      <span class="n">val_accuracy</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">total_val_accuracy</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">val_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1"># print validation accuracy</span>
</span></span><span class="line"><span class="cl">      <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39; Validation loss: </span><span class="si">{</span><span class="n">avg_val_loss</span><span class="si">:</span><span class="s1">.4f</span><span class="si">}</span><span class="s1">, Validation accuracy: </span><span class="si">{</span><span class="n">val_accuracy</span><span class="si">:</span><span class="s1">.2f</span><span class="si">}</span><span class="s1">%&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># save model and training data</span>
</span></span><span class="line"><span class="cl">    <span class="n">save_model_path</span> <span class="o">=</span> <span class="n">model_save_path</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># model_filename = &#39;vit_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">torch</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">state_dict</span><span class="p">(),</span> <span class="n">model_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Model saved to&#39;</span><span class="p">,</span> <span class="n">model_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># save the training and validation losses</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">save_training_data</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">({</span><span class="s1">&#39;train_losses&#39;</span><span class="p">:</span> <span class="n">train_losses</span><span class="p">,</span> <span class="s1">&#39;val_losses&#39;</span><span class="p">:</span> <span class="n">val_losses</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Training data saved to </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Specify the filename for saving training data</span>
</span></span><span class="line"><span class="cl">    <span class="n">training_data_filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">save_training_data</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">,</span> <span class="n">training_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># load the trained model</span>
</span></span><span class="line"><span class="cl">    <span class="n">save_model_path</span> <span class="o">=</span> <span class="n">model_save_path</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># model_filename = &#39;vit_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">model_path</span><span class="p">,</span> <span class="n">map_location</span> <span class="o">=</span> <span class="n">device</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Model loaded and set to evaluation mode.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># load training data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Load the training and validation losses</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">load_training_data</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">training_data_filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">save_model_path</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">training_data</span> <span class="o">=</span> <span class="n">load_training_data</span><span class="p">(</span><span class="n">training_data_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_losses</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">[</span><span class="s1">&#39;train_losses&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_losses</span> <span class="o">=</span> <span class="n">training_data</span><span class="p">[</span><span class="s1">&#39;val_losses&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Training data loaded successfully.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model_filename</span> <span class="o">=</span> <span class="s1">&#39;resnet18_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">model_data_filename</span> <span class="o">=</span> <span class="s1">&#39;resnet18_training_data.pkl&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span> <span class="o">=</span> <span class="n">training_loop</span><span class="p">(</span><span class="n">should_train_resnet</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">,</span> <span class="n">num_epochs</span> <span class="o">=</span> <span class="mi">25</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Running on Google Colab.
Model loaded and set to evaluation mode.
Training data loaded successfully.
</code></pre>
<hr>
<h2 id="model-evaluation">Model Evaluation</h2>
<p>Now that the model is trained, the next step is to evaluate its performance more thoroughly, and possibly improve it based on the insights gained.</p>
<p>Evaluating the model involves checking the accuracy and also looking at other metrics like precision, recall, and F1-score, especially if the dataset is imbalanced or if specific classes are more important than others.</p>
<h3 id="model-evaluation-on-validation-set">Model Evaluation on Validation Set</h3>
<p>After training a machine learning model, it&rsquo;s crucial to evaluate its performance comprehensively. Here, we will detail three key diagnostic tools&quot;</p>
<ol>
<li>Confusion matrix</li>
<li>Plotting training and validation losses</li>
<li>Visualization of the predictions</li>
</ol>
<h4 id="confusion-matrix">Confusion Matrix</h4>
<p>A confusion matrix provides a detailed breakdown of the model&rsquo;s predictions, showing exactly how many samples from each class were correctly or incorrectly predicted as each other class. This is crucial for understanding the model&rsquo;s performance across different categories.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span><span class="p">,</span> <span class="n">classification_report</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">evaluate_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">data_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">true_labels</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="n">predictions</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">data_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">_</span><span class="p">,</span> <span class="n">preds</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">predictions</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">preds</span><span class="o">.</span><span class="n">cpu</span><span class="p">()</span><span class="o">.</span><span class="n">numpy</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">      <span class="n">true_labels</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">labels</span><span class="o">.</span><span class="n">cpu</span><span class="p">()</span><span class="o">.</span><span class="n">numpy</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># compute the confusion matrix</span>
</span></span><span class="line"><span class="cl">  <span class="n">cm</span> <span class="o">=</span> <span class="n">confusion_matrix</span><span class="p">(</span><span class="n">true_labels</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">clf_report</span> <span class="o">=</span> <span class="n">classification_report</span><span class="p">(</span><span class="n">true_labels</span><span class="p">,</span> <span class="n">predictions</span><span class="p">,</span> <span class="n">output_dict</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Convert classification report dictionary to DataFrame</span>
</span></span><span class="line"><span class="cl">  <span class="n">clf_report_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">clf_report</span><span class="p">)</span><span class="o">.</span><span class="n">transpose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">cm</span><span class="p">,</span> <span class="n">clf_report_df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cm</span><span class="p">,</span> <span class="n">clf_report_df</span> <span class="o">=</span> <span class="n">evaluate_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Plot the confusion matrix</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;Blues&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Confusion Matrix&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;True Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Predicted Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print classification report</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Classification Report:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">clf_report_df</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_40_0.png" type="" alt="png"  /></p>
<pre><code>Classification Report:
              precision    recall  f1-score     support
0              0.333333  0.285714  0.307692   14.000000
1              0.862069  0.714286  0.781250   35.000000
2              0.487179  0.678571  0.567164   28.000000
3              0.866667  0.787879  0.825397   33.000000
accuracy       0.672727  0.672727  0.672727    0.672727
macro avg      0.637312  0.616613  0.620376  110.000000
weighted avg   0.700728  0.672727  0.679728  110.000000
</code></pre>
<h4 id="plotting-training-and-validation-losses">Plotting Training and Validation Losses</h4>
<p>Plotting the training and validation losses over epochs allows us to monitor the learning process, identifying issues such as overfitting or underfitting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_losses</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">  Plot the training and validation losses.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">  Parameters:
</span></span></span><span class="line"><span class="cl"><span class="s2">  - train_losses: list of training loss values per epoch
</span></span></span><span class="line"><span class="cl"><span class="s2">  - val_losses: list of validation loss values per epoch
</span></span></span><span class="line"><span class="cl"><span class="s2">  &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Training Loss&#39;</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">marker</span> <span class="o">=</span> <span class="s1">&#39;o&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">val_losses</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Validation Loss&#39;</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">marker</span> <span class="o">=</span> <span class="s1">&#39;o&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Training and Validation Losses Over Epochs&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Epoch&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Loss&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># take the tracked losses from thet training loop</span>
</span></span><span class="line"><span class="cl"><span class="n">plot_losses</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_42_0.png" type="" alt="png"  /></p>
<h4 id="visualization-of-the-predictions">Visualization of the Predictions</h4>
<p>Visualizing model predictions on actual data points provides immediate qualitative feedback about model behavior. It helps identify paterns in which the model performs well or poorly, revealing potential biases, underfitting, or overfitting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">visualize_predictions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">data_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">class_names</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">images_so_far</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="n">rows</span> <span class="o">=</span> <span class="n">num_images</span> <span class="o">//</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">num_images</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">num_images</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span> <span class="o">=</span> <span class="n">rows</span><span class="p">,</span> <span class="n">ncols</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                           <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">*</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># define the mean and std deviation used for normalization</span>
</span></span><span class="line"><span class="cl">  <span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data_loader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">_</span><span class="p">,</span> <span class="n">preds</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">images</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">images_so_far</span> <span class="o">&lt;</span> <span class="n">num_images</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="n">images_so_far</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">images_so_far</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="n">num_images</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">axes</span> <span class="c1"># arrange in grid</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># convert tensors to integers</span>
</span></span><span class="line"><span class="cl">          <span class="n">predicted_label</span> <span class="o">=</span> <span class="n">preds</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="n">actual_label</span> <span class="o">=</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># reverse normalization transform</span>
</span></span><span class="line"><span class="cl">          <span class="n">img</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">cpu</span><span class="p">()</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span><span class="o">.</span><span class="n">transpose</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="c1"># change CxHxW to HxWxC</span>
</span></span><span class="line"><span class="cl">          <span class="n">img</span> <span class="o">=</span> <span class="n">std</span> <span class="o">*</span> <span class="n">img</span> <span class="o">+</span> <span class="n">mean</span>   <span class="c1"># reverse normalization</span>
</span></span><span class="line"><span class="cl">          <span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>   <span class="c1"># clip values to ensure they fall between 0 and 1</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># use converted integers to access class names</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;predicted: </span><span class="si">{</span><span class="n">class_names</span><span class="p">[</span><span class="n">predicted_label</span><span class="p">]</span><span class="si">}</span><span class="s1"> | actual: </span><span class="si">{</span><span class="n">class_names</span><span class="p">[</span><span class="n">actual_label</span><span class="p">]</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                       <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">images_so_far</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>   <span class="c1"># adjust layout</span>
</span></span><span class="line"><span class="cl">          <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make new loader for random samples</span>
</span></span><span class="line"><span class="cl"><span class="n">vis_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_dataset</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuffle</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">visualize_predictions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">vis_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">class_names</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_44_0.png" type="" alt="png"  /></p>
<h2 id="evaluation-of-model-performance">Evaluation of Model Performance</h2>
<p>Our Cat Expression Classifier, built on a modified ResNet18 architecture, demonstrates a promising ability to classify cat expressions into four categories: alarmed, angry, calm, and pleased. Here, we provide a detailed analysis of the model&rsquo;s performance based on our the training and validation efforts.</p>
<h3 id="overall-performance-metrics">Overall Performance Metrics</h3>
<p>The model achieves an overall accuracy of 68.18% on the validation set. This is a decent foundation but indicates room for further refinement, especially in distinguishing between expressions that share subtle features. Here is a breakdown of the key performance metrics:</p>
<ul>
<li>Precision: Measures the accuracy of positive predictions. for example, the <code>pleased</code> category shows high precision, indicating that the model reliably identifies this expression.</li>
<li>Recall: Reflects the model&rsquo;s ability to identify all relevant instances of a class. The <code>angry</code> category has a high recall, suggesting that the model effectively captures most of the <code>angry</code> expressions.</li>
<li>F1-Score: Balances precision and recall and is particularly useful in scenarios where class distribution is uneven.</li>
</ul>
<h3 id="confusion-matrix-insights">Confusion Matrix Insights</h3>
<p>the confusion matrix provides a granular view of the model&rsquo;s performance across the different classes. It highlights specific areas where the model performs well and others where it struggles, such as:</p>
<ul>
<li>Misclassifications between <code>alarmed</code> and <code>angry</code> suggest that the model may be conflating these expressions due to their similar features.</li>
<li>The high accuracy in identifying <code>pleased</code> expressions shows that distinct features of this mood are well captured by the model.</li>
</ul>
<h3 id="training-and-validation-losses">Training and Validation Losses</h3>
<p>The training and validation loss plots reveal the learning dynamics over the epochs:</p>
<ul>
<li>A steady decrease in training loss indicates that the model is effectively learning from the training data.</li>
<li>The pattern of validation loss provides insights into the model&rsquo;s generalization ability. Increases in validation loss suggest moments where the model might be overfitting to the training data.</li>
</ul>
<hr>
<h2 id="trying-out-visiontransformers">Trying out VisionTransformers</h2>
<h3 id="data-transformations-for-vision-transformer">Data Transformations for Vision Transformer</h3>
<p>When transitioning from a CNN like <code>ResNet18</code> to a Vision Transformer (ViT), it&rsquo;s essential to evaluate whether the existing preprocessing steps - particulary the data transformations - are suitable for the new model architecture. For ViT , wed must consider their unique handling of image data, which relies on dividing the image into fixed-size patches and understanding global dependencies through self-attention mechanisms.</p>
<p>For this exercise, we will maintain the same transformations we have previously defined.</p>
<p>The decision to retain the initial transformations is based on the principle of consistency and the minimal impact expected by changing model architectures regarding how images are scaled and augmented. The chosen transformations ensure that the images are adequately prepared for the neural network without introducing complexities or distortions that could hinder the learning of global patterns, which are vital for Vision Transformers due to their reliance on self-attention mechanisms.</p>
<p>Additionally, maintaining these transformations allows for a more straightforward comparison between the ResNet18 model and the Vision Transformer model, as any changes in model performance can more confidently be attributed to the architectural differences rather than changes in data preprocessing.</p>
<h3 id="load-pre-trained-vision-transformer-model">Load Pre-Trained Vision Transformer Model</h3>
<p>First, we need to load the ViT model that has been pre-trained on a large dataset. We&rsquo;ll then adapt the classifier <em>head</em> to our needs, which is classifying cat moods into four categories.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the ViT pre-trained model</span>
</span></span><span class="line"><span class="cl"><span class="n">weights_vit</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ViT_B_16_Weights</span><span class="o">.</span><span class="n">DEFAULT</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model_vit</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">vit_b_16</span><span class="p">(</span><span class="n">weights</span> <span class="o">=</span> <span class="n">weights_vit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># print the model structure to understand what needs to be replaced</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">model_vit</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Downloading: &quot;https://download.pytorch.org/models/vit_b_16-c867db91.pth&quot; to /root/.cache/torch/hub/checkpoints/vit_b_16-c867db91.pth
100%|██████████| 330M/330M [00:02&lt;00:00, 124MB/s]


VisionTransformer(
  (conv_proj): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))
  (encoder): Encoder(
    (dropout): Dropout(p=0.0, inplace=False)
    (layers): Sequential(
      (encoder_layer_0): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_1): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_2): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_3): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_4): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_5): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_6): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_7): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_8): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_9): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_10): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_11): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (ln): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
  )
  (heads): Sequential(
    (head): Linear(in_features=768, out_features=1000, bias=True)
  )
)
</code></pre>
<h3 id="freezing-the-encoder-layers">Freezing the Encoder Layers</h3>
<p>Freezing the encoder layers prevents their weights from being updated during training, which means they retain the knowledge they have already gained from ImageNet. We only want to train the classifier that we will modify to our specific task.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># freeze all layers in the model by disabling gradient computation</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">model_vit</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">  <span class="n">param</span><span class="o">.</span><span class="n">requires_grad</span> <span class="o">=</span> <span class="kc">False</span>
</span></span></code></pre></div><h3 id="modify-the-classifier">Modify the Classifier</h3>
<p>The standard ViT model includes a classifier at the end (usually named <code>heads</code> in <code>torchvision</code> models), which is a linear layer designed for the original classification task, e.g. 1000 classes for ImageNet. We will replace this with a new classifier suited for our task (4 cat moods).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># replace the classifier head</span>
</span></span><span class="line"><span class="cl"><span class="c1"># as we saw in the architecture above, the classifier is called `heads`</span>
</span></span><span class="line"><span class="cl"><span class="n">num_features</span> <span class="o">=</span> <span class="n">model_vit</span><span class="o">.</span><span class="n">heads</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">in_features</span>   <span class="c1"># ge tthe number of input features</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace with a new head for len(class_names) = 4</span>
</span></span><span class="line"><span class="cl"><span class="n">model_vit</span><span class="o">.</span><span class="n">heads</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">num_features</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">class_names</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move model to appropriate device</span>
</span></span><span class="line"><span class="cl"><span class="n">model_vit</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>VisionTransformer(
  (conv_proj): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))
  (encoder): Encoder(
    (dropout): Dropout(p=0.0, inplace=False)
    (layers): Sequential(
      (encoder_layer_0): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_1): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_2): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_3): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_4): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_5): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_6): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_7): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_8): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_9): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_10): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
      (encoder_layer_11): EncoderBlock(
        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (self_attention): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
        )
        (dropout): Dropout(p=0.0, inplace=False)
        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
        (mlp): MLPBlock(
          (0): Linear(in_features=768, out_features=3072, bias=True)
          (1): GELU(approximate='none')
          (2): Dropout(p=0.0, inplace=False)
          (3): Linear(in_features=3072, out_features=768, bias=True)
          (4): Dropout(p=0.0, inplace=False)
        )
      )
    )
    (ln): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
  )
  (heads): Sequential(
    (0): Linear(in_features=768, out_features=4, bias=True)
  )
)
</code></pre>
<h3 id="define-loss-function-and-optimizer">Define Loss Function and Optimizer</h3>
<p>Now, define the loss function and an optimizer. Since we are only training the classifier layer, ensure the optimizer is set to only update the parameters of the classifier.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># optimizer will not change, but still show it here:</span>
</span></span><span class="line"><span class="cl"><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># optimizer - only optimize the classifier parameters</span>
</span></span><span class="line"><span class="cl"><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model_vit</span><span class="o">.</span><span class="n">heads</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span> <span class="o">=</span> <span class="mf">0.001</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="training-loop">Training Loop</h3>
<p>Here, we revisit the training process, adapting our previously established procedures to the Vision Transformer (ViT) model. Much like our approach with Resnet18, we utilize a similar training loop structure to ensure consistency and comparability. the core steps of training - forward pass, loss computation, backward pass, and parameters update - are maintained, but they are now applied to a differently structured model that leverages self-attention mechanisms rather than convolutional layers. This section briefly outlines these steps, focusing on any adjustments specific to the ViT to optimize it for our cat mood classification task.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model_filename</span> <span class="o">=</span> <span class="s1">&#39;vit_cat_mood.pth&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">model_data_filename</span> <span class="o">=</span> <span class="s1">&#39;vit_training_data.pkl&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span> <span class="o">=</span> <span class="n">training_loop</span><span class="p">(</span><span class="n">should_train_vit</span><span class="p">,</span> <span class="n">model_vit</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">,</span> <span class="n">model_data_filename</span><span class="p">,</span> <span class="n">num_epochs</span> <span class="o">=</span> <span class="mi">25</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Running on Google Colab.
Model loaded and set to evaluation mode.
Training data loaded successfully.
</code></pre>
<h3 id="model-evaluation-1">Model Evaluation</h3>
<h4 id="confusion-matrix-1">Confusion Matrix</h4>
<p>The confusion matrix below shows the following results:</p>
<ul>
<li>Class <code>alarmed</code>: moderate confusion with other classes, indicating difficulty in distinguishing <code>alarmed</code> from other moods.</li>
<li>Class <code>angry</code>: high accuracy, showing that `angry is well-recognized, with few misclassifications</li>
<li>Class <code>calm</code>: some confusion, particularly with <code>pleased</code>, suggesting similar features or expressions between these moods that the model confuses</li>
<li>Class <code>pleased</code>: best performance, indicating clear distinguishing features that the model learnes effectively</li>
</ul>
<h3 id="considerations-on-data-quality">Considerations on Data Quality</h3>
<p>Throughout the development and evaluation of our models, it has become evident that the quality of the dataset significantly impacts the classification accuracy. Certain misclassifications observed, such as the confusion between &lsquo;pleased&rsquo; and &lsquo;calm&rsquo; or &lsquo;alarmed&rsquo; and &lsquo;angry,&rsquo; suggest that the labels may not always align perfectly with the visual cues present in the images. This discrepancy can stem from subjective interpretations of cat expressions during labeling. Improving the dataset by refining the labeling process, possibly with the assistance of animal behavior experts, or by curating a more consistently labeled dataset could enhance model performance. Enhancing data quality would help in training more accurate and reliable models, thereby increasing the robustness of the classification outcomes.</p>
<h4 id="classification-report">Classification Report</h4>
<p>From the classification report, we can draw the following conclusions:</p>
<ul>
<li>Class <code>pleased</code> shows the highest precision, indicating a high rate of true positive predictions</li>
<li>Class <code>angry</code> has the highes recall, suggesting effective identification of this mood</li>
<li>Classes <code>angry</code> and <code>pleased</code> show high F1-scores, indicating robust performance.</li>
</ul>
<h4 id="overall-accuracy">Overall Accuracy</h4>
<p>The model achieves and accuracy of 74.55%, which is a solid performance but suggests room for improvement, particularly in reducing misclassifications among less distinct moods.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cm</span><span class="p">,</span> <span class="n">clf_report_df</span> <span class="o">=</span> <span class="n">evaluate_model</span><span class="p">(</span><span class="n">model_vit</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Plot the confusion matrix</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">cm</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">fmt</span><span class="o">=</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;Blues&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Confusion Matrix&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;True Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Predicted Label&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print classification report</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Classification Report:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">clf_report_df</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_62_0.png" type="" alt="png"  /></p>
<pre><code>Classification Report:
              precision    recall  f1-score     support
0              0.461538  0.428571  0.444444   14.000000
1              0.815789  0.885714  0.849315   35.000000
2              0.625000  0.535714  0.576923   28.000000
3              0.857143  0.909091  0.882353   33.000000
accuracy       0.745455  0.745455  0.745455    0.745455
macro avg      0.689868  0.689773  0.688259  110.000000
weighted avg   0.734544  0.745455  0.738361  110.000000
</code></pre>
<h3 id="training-and-validation-losses-1">Training and Validation Losses</h3>
<p>The plot of training loss shows a consistent decrease, indicating that the model is effectively learning from the data. The vlaidation loss decreases alongside the training loss but begins to plateau, suggesting that the model might be nearing its learning capacity with the current configuration and dataset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># take the tracked losses from thet training loop</span>
</span></span><span class="line"><span class="cl"><span class="n">plot_losses</span><span class="p">(</span><span class="n">train_losses</span><span class="p">,</span> <span class="n">val_losses</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_64_0.png" type="" alt="png"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">visualize_predictions</span><span class="p">(</span><span class="n">model_vit</span><span class="p">,</span> <span class="n">vis_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">,</span> <span class="n">class_names</span><span class="p">,</span> <span class="n">num_images</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_65_0.png" type="" alt="png"  /></p>
<h2 id="using-the-model-for-inference-on-new-data">Using the Model for Inference on New Data</h2>
<p>Let&rsquo;s try out the model on new, unseen data. This photo did not come from a dataset, but rather from a friend of mine who wants to know her cat&rsquo;s mood.</p>
<p>For inference, we first need to apply some simple transformation (not augmentation). In this case, we can use our previously defined <code>val_transforms</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">val_transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Resize</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">CenterCrop</span><span class="p">(</span><span class="mi">224</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">ConvertImageDtype</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">float</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">transforms</span><span class="o">.</span><span class="n">Normalize</span><span class="p">(</span><span class="n">mean</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                         <span class="n">std</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span></code></pre></div><p>Then, we can define a simple function to open, transform and add a batch dimension to the file we want to pass.</p>
<p>Then, the function will pass the image to the model to make inference. This latter step is done in a way so that the gradients are not computed, and the image data is passed as a forward pass only.</p>
<p>Finally, we will include a de-normalization to the transformed image, so that we can display it along with the predicted label.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Function to classify a single image and display it with the predicted label</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">classify_and_display_image</span><span class="p">(</span><span class="n">image_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">val_transforms</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">image_tensor</span> <span class="o">=</span> <span class="n">transformed_image</span><span class="o">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># Add batch dimension</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>  <span class="c1"># Disable gradient calculation</span>
</span></span><span class="line"><span class="cl">        <span class="n">output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">image_tensor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">_</span><span class="p">,</span> <span class="n">predicted</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">label</span> <span class="o">=</span> <span class="n">class_names</span><span class="p">[</span><span class="n">predicted</span><span class="o">.</span><span class="n">item</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Convert the transformed image tensor back to a PIL image for display</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">transformed_image</span><span class="o">.</span><span class="n">permute</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># Change from (C, H, W) to (H, W, C)</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">transformed_image</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Denormalize the image</span>
</span></span><span class="line"><span class="cl">    <span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">std</span> <span class="o">*</span> <span class="n">transformed_image</span> <span class="o">+</span> <span class="n">mean</span>
</span></span><span class="line"><span class="cl">    <span class="n">transformed_image</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">transformed_image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Display the image with the predicted label</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">transformed_image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Predicted Label: </span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;off&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example usage</span>
</span></span><span class="line"><span class="cl"><span class="n">classify_and_display_image</span><span class="p">(</span><span class="s1">&#39;gato.jpg&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240515_cat_mood_classification/output_67_0.png" type="" alt="png"  /></p>
<h2 id="conclusion">Conclusion</h2>
<p>This tutorial guides you through creating a cat expression classifier using convolutional neural networks with ResNet18 and later with a Vision Transformer (ViT). It demonstrates how to apply transfer learning to improve efficiency and accuracy with limited data.</p>
<p>The guide is structured to provide clear steps and practical examples for each phase of the project, from data preprocessing and model training to evaluation. By breaking down complex concepts and processes into manageable parts, it ensures that readers can easily follow along and apply these techniques to their projects.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Election Data Dashboard Pt. 1: Collection and Cleaning</title>
      <link>http://localhost:1313/posts/20240509_election_dash_part_1-data_cleaning/election_dash_part_1-data_cleaning/</link>
      <pubDate>Thu, 09 May 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240509_election_dash_part_1-data_cleaning/election_dash_part_1-data_cleaning/</guid>
      <description>In this project, election data is collected, explored and cleaned. Visualization functions are refactored to be used on a dashboard later on.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="part-1-collecting-and-cleaning-the-data">Part 1: Collecting and Cleaning the Data</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="nn">go</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span></code></pre></div><p>Importing the excel files. These files come from the INE (Electoral Institute in Mexico). Then, we can do some data wrangling to filter the relevant data.</p>
<p>The data comes from these two sources:</p>
<ol>
<li>The voter registration data: <a href="https://www.ine.mx/transparencia/datos-abiertos/#/archivo/datos-por-rangos-de-edad-entidad-de-origen-y-sexo-del-padron-electoral-y-lista-nominal-2024">The Open Data page</a></li>
</ol>
<p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/ine_listanominal_page.png" type="" alt="image.png"  /></p>
<ol start="2">
<li>The elections results data: <a href="https://siceen21.ine.mx/downloadzip">Election Results</a></li>
</ol>
<p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/image.png" type="" alt="image.png"  /></p>
<p>Let&rsquo;s explore the data as it comes.</p>
<p>(Note that, unfortunately, the dataframe output did not export correctly to the file displayed here).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_sx</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data/padron_y_ln_sexo.xlsx&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df_sx</span><span class="o">.</span><span class="n">columns</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">df_sx</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>15
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE\nENTIDAD</th>
      <th>NOMBRE\nENTIDAD</th>
      <th>CLAVE\nDISTRITO</th>
      <th>NOMBRE\nDISTRITO</th>
      <th>CLAVE\nMUNICIPIO</th>
      <th>NOMBRE\nMUNICIPIO</th>
      <th>SECCION</th>
      <th>PADRON\nHOMBRES</th>
      <th>PADRON\nMUJERES</th>
      <th>PADRON\nNO BINARIO</th>
      <th>PADRON\nELECTORAL</th>
      <th>LISTA\nHOMBRES</th>
      <th>LISTA\nMUJERES</th>
      <th>LISTA\nNO BINARIO</th>
      <th>LISTA\nNOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>RESIDENTES EXTRANJERO</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>8444</td>
      <td>5756</td>
      <td>0</td>
      <td>14200</td>
      <td>3452</td>
      <td>2577</td>
      <td>0</td>
      <td>6029</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>338.0</td>
      <td>973</td>
      <td>1013</td>
      <td>0</td>
      <td>1986</td>
      <td>970</td>
      <td>1011</td>
      <td>0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>339.0</td>
      <td>895</td>
      <td>954</td>
      <td>0</td>
      <td>1849</td>
      <td>893</td>
      <td>953</td>
      <td>0</td>
      <td>1846</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>340.0</td>
      <td>951</td>
      <td>1001</td>
      <td>0</td>
      <td>1952</td>
      <td>949</td>
      <td>998</td>
      <td>0</td>
      <td>1947</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>341.0</td>
      <td>1174</td>
      <td>1184</td>
      <td>0</td>
      <td>2358</td>
      <td>1172</td>
      <td>1184</td>
      <td>0</td>
      <td>2356</td>
    </tr>
  </tbody>
</table>
</div>
<p>We start by changing the names of the columns for readability.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># change column names</span>
</span></span><span class="line"><span class="cl"><span class="n">col_names_sx</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Clave Entidad&#39;</span><span class="p">,</span> <span class="s1">&#39;Nombre Entidad&#39;</span><span class="p">,</span> <span class="s1">&#39;Clave Distrito&#39;</span><span class="p">,</span> <span class="s1">&#39;Nombre Distrito&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;Clave Municipio&#39;</span><span class="p">,</span> <span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> <span class="s1">&#39;Seccion&#39;</span><span class="p">,</span> <span class="s1">&#39;Padron Hombre&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;Padron Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Padron No Binario&#39;</span><span class="p">,</span> <span class="s1">&#39;Padron Electoral&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista No Binario&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_sx</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">col_names_sx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_sx</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Clave Entidad</th>
      <th>Nombre Entidad</th>
      <th>Clave Distrito</th>
      <th>Nombre Distrito</th>
      <th>Clave Municipio</th>
      <th>Nombre Municipio</th>
      <th>Seccion</th>
      <th>Padron Hombre</th>
      <th>Padron Mujeres</th>
      <th>Padron No Binario</th>
      <th>Padron Electoral</th>
      <th>Lista Hombres</th>
      <th>Lista Mujeres</th>
      <th>Lista No Binario</th>
      <th>Lista Nominal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>RESIDENTES EXTRANJERO</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>8444</td>
      <td>5756</td>
      <td>0</td>
      <td>14200</td>
      <td>3452</td>
      <td>2577</td>
      <td>0</td>
      <td>6029</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>338.0</td>
      <td>973</td>
      <td>1013</td>
      <td>0</td>
      <td>1986</td>
      <td>970</td>
      <td>1011</td>
      <td>0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>339.0</td>
      <td>895</td>
      <td>954</td>
      <td>0</td>
      <td>1849</td>
      <td>893</td>
      <td>953</td>
      <td>0</td>
      <td>1846</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>340.0</td>
      <td>951</td>
      <td>1001</td>
      <td>0</td>
      <td>1952</td>
      <td>949</td>
      <td>998</td>
      <td>0</td>
      <td>1947</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>341.0</td>
      <td>1174</td>
      <td>1184</td>
      <td>0</td>
      <td>2358</td>
      <td>1172</td>
      <td>1184</td>
      <td>0</td>
      <td>2356</td>
    </tr>
  </tbody>
</table>
</div>
<p>Verify the data types in the dataframe and whether there are null values</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_sx</span><span class="o">.</span><span class="n">dtypes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_sx</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">())</span>
</span></span></code></pre></div><pre><code>Clave Entidad         object
Nombre Entidad        object
Clave Distrito       float64
Nombre Distrito       object
Clave Municipio      float64
Nombre Municipio      object
Seccion              float64
Padron Hombre          int64
Padron Mujeres         int64
Padron No Binario      int64
Padron Electoral       int64
Lista Hombres          int64
Lista Mujeres          int64
Lista No Binario       int64
Lista Nominal          int64
dtype: object
Clave Entidad        0
Nombre Entidad       1
Clave Distrito       1
Nombre Distrito      1
Clave Municipio      1
Nombre Municipio     1
Seccion              1
Padron Hombre        0
Padron Mujeres       0
Padron No Binario    0
Padron Electoral     0
Lista Hombres        0
Lista Mujeres        0
Lista No Binario     0
Lista Nominal        0
dtype: int64
</code></pre>
<p>There are indeed some null values in some of the columns. Since the null values live in rows that we will not need, i.e. we will filter the rows to include only the values for the State of &ldquo;Quintana Roo&rdquo;, we don&rsquo;t need to bother in removing or doing any data gymnastics to those null values.</p>
<p>Let&rsquo;s filter the data we need now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># filter rows by state quintana roo</span>
</span></span><span class="line"><span class="cl"><span class="n">df_sx_qroo</span> <span class="o">=</span> <span class="n">df_sx</span><span class="p">[</span><span class="n">df_sx</span><span class="p">[</span><span class="s1">&#39;Nombre Entidad&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select columns for padron electoral</span>
</span></span><span class="line"><span class="cl"><span class="n">df_pe_sx_qroo</span> <span class="o">=</span> <span class="n">df_sx_qroo</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,:</span><span class="mi">11</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select columns for lista nominal</span>
</span></span><span class="line"><span class="cl"><span class="n">cols_to_drop</span> <span class="o">=</span> <span class="n">df_sx_qroo</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">7</span><span class="p">:</span><span class="mi">11</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span> <span class="o">=</span> <span class="n">df_sx_qroo</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="n">cols_to_drop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Clave Entidad</th>
      <th>Nombre Entidad</th>
      <th>Clave Distrito</th>
      <th>Nombre Distrito</th>
      <th>Clave Municipio</th>
      <th>Nombre Municipio</th>
      <th>Seccion</th>
      <th>Lista Hombres</th>
      <th>Lista Mujeres</th>
      <th>Lista No Binario</th>
      <th>Lista Nominal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>2061</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>2141</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>1963</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>2426</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>990</td>
    </tr>
  </tbody>
</table>
</div>
<h2 id="election-results">Election Results.</h2>
<p>First, we will work with the data related to the election results.</p>
<p>Let&rsquo;s load all the files separately (as they were available from the source).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the files</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2009/2009_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2012/2012_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2015/2015_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2018/2018_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;data/DIPUTACIONES_FED_MR_2021/2021_SEE_DIP_FED_MR_NAL_SEC.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># filter rows by state quintana roo</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">df_re_2009</span><span class="p">[</span><span class="n">df_re_2009</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">df_re_2012</span><span class="p">[</span><span class="n">df_re_2012</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">df_re_2015</span><span class="p">[</span><span class="n">df_re_2015</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">df_re_2018</span><span class="p">[</span><span class="n">df_re_2018</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">df_re_2021</span><span class="p">[</span><span class="n">df_re_2021</span><span class="p">[</span><span class="s1">&#39;NOMBRE_ESTADO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO_FEDERAL</th>
      <th>CABECERA_DISTRITAL_FEDERAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PVEM_PT</th>
      <th>PVEM_MORENA</th>
      <th>PT_MORENA</th>
      <th>CAND_IND1</th>
      <th>CAND_IND2</th>
      <th>CAND_IND3</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>49016</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>0</td>
      <td>NaN</td>
      <td>0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>2</td>
    </tr>
    <tr>
      <th>49017</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3.0</td>
      <td>180.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>1097.0</td>
      <td>2160</td>
    </tr>
    <tr>
      <th>49018</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3.0</td>
      <td>103.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>3.0</td>
      <td>30.0</td>
      <td>1083.0</td>
      <td>2159</td>
    </tr>
    <tr>
      <th>49019</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3.0</td>
      <td>91.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>6.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>46.0</td>
      <td>1169.0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>49020</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4.0</td>
      <td>113.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>6.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1.0</td>
      <td>38.0</td>
      <td>1377.0</td>
      <td>2371</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 34 columns</p>
</div>
<p>We can already see that there are some columns that are not needed. These columns, in particular, are the independent candidate columns, and they are effectively empty. These columns&rsquo; names all begin with <code>CAND</code>. We can use that to quickly drop all of them.</p>
<p>We can also drop the null value included in the municipality (<code>MUNICIPIO</code>) columns, which leaked after filtering by the State before. We need to drop this one too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define a list of all the dataframes to loop over them below</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">df_re_2021_qroo</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># drop independent candidates and any rows with NaN in the MUNICIPIO columns</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">df_re_all_years</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># drop rows where &#39;MUNICIPIO&#39; is NaN</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">],</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># select columns that begin with &#34;CAND&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cols_cand_ind</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;CAND&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># drop the identified columns</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">cols_cand_ind</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO_FEDERAL</th>
      <th>CABECERA_DISTRITAL_FEDERAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PAN_PRD</th>
      <th>PRI_PRD</th>
      <th>PVEM_PT_MORENA</th>
      <th>PVEM_PT</th>
      <th>PVEM_MORENA</th>
      <th>PT_MORENA</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>49017</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3.0</td>
      <td>180.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>1097.0</td>
      <td>2160</td>
    </tr>
    <tr>
      <th>49018</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3.0</td>
      <td>103.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>3.0</td>
      <td>30.0</td>
      <td>1083.0</td>
      <td>2159</td>
    </tr>
    <tr>
      <th>49019</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3.0</td>
      <td>91.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>12.0</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>6.0</td>
      <td>1.0</td>
      <td>46.0</td>
      <td>1169.0</td>
      <td>1981</td>
    </tr>
    <tr>
      <th>49020</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4.0</td>
      <td>113.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>15.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>6.0</td>
      <td>1.0</td>
      <td>38.0</td>
      <td>1377.0</td>
      <td>2371</td>
    </tr>
    <tr>
      <th>49021</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>186</td>
      <td>2.0</td>
      <td>37.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>11.0</td>
      <td>7.0</td>
      <td>0.0</td>
      <td>23.0</td>
      <td>650.0</td>
      <td>972</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 31 columns</p>
</div>
<p>Now we can extract the political party names from each of the dataframes. At each election year, the parties may be different, and also there are alliances which make this somewhat more complicated.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># List to store party names lists for each DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">df_re_all_years</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># Empty list to store party names for current DataFrame</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Get a list of column names</span>
</span></span><span class="line"><span class="cl">    <span class="n">column_names</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Find the indices of &#34;CASILLAS&#34; and &#34;NUM_VOTOS_CAN_NREG&#34; (handle potential errors)</span>
</span></span><span class="line"><span class="cl">        <span class="n">casillas_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;CASILLAS&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">num_votos_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;NUM_VOTOS_CAN_NREG&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Extract party names between the indices (avoid out-of-bounds)</span>
</span></span><span class="line"><span class="cl">        <span class="n">party_names</span> <span class="o">=</span> <span class="n">column_names</span><span class="p">[</span><span class="n">casillas_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="nb">min</span><span class="p">(</span><span class="n">num_votos_index</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">column_names</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Handle cases where &#34;CASILLAS&#34; or &#34;NUM_VOTOS_CAN_NREG&#34; might not exist</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">WARNING: &#39;CASILLAS&#39; or &#39;NUM_VOTOS_CAN_NREG&#39; not found in DataFrame&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Append the party names list for this DataFrame</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names_per_df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">party_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span>
</span></span></code></pre></div><pre><code>[['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'CONV',
  'NVA_ALIANZA',
  'PSD',
  'PRIMERO_MEXICO',
  'SALVEMOS_MEXICO'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NVA_ALIANZA',
  'PRI_PVEM',
  'PRD_PT_MC',
  'PRD_PT',
  'PRD_MC',
  'PT_MC'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NVA_ALIANZA',
  'MORENA',
  'PH',
  'ES',
  'PAN_NVA_ALIANZA',
  'PRI_PVEM',
  'PRD_PT'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NA',
  'MORENA',
  'ES',
  'PAN_PRD_MC',
  'PAN_PRD',
  'PAN_MC',
  'PRD_MC',
  'PRI_PVEM_NA',
  'PRI_PVEM',
  'PRI_NA',
  'PVEM_NA',
  'PT_MORENA_ES',
  'PT_MORENA',
  'PT_ES',
  'MORENA_ES'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'MORENA',
  'PES',
  'RSP',
  'FXM',
  'PAN_PRI_PRD',
  'PAN_PRI',
  'PAN_PRD',
  'PRI_PRD',
  'PVEM_PT_MORENA',
  'PVEM_PT',
  'PVEM_MORENA',
  'PT_MORENA']]
</code></pre>
<p>Just to get a feel of the data, we can see how many rows there are in each of the dataframes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2009 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2009_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2012 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2012_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2015 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2015_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2018 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Number of lines in the 2021 election dataframe: &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">df_re_2021_qroo</span><span class="p">)</span> <span class="p">)</span>
</span></span></code></pre></div><pre><code>Number of lines in the 2009 election dataframe:  729
Number of lines in the 2012 election dataframe:  831
Number of lines in the 2015 election dataframe:  938
Number of lines in the 2018 election dataframe:  939
Number of lines in the 2021 election dataframe:  1033
</code></pre>
<h3 id="preliminary-visualization">Preliminary Visualization</h3>
<p>Visualizaremos la informacion agregando los datos por año. De esta manera, tendremos un historial de tiempo <em>por cada municipio</em>, en el cual podemos ver el historial de los resultados de cada partido politico en cada municipio.</p>
<p>Here we visualize the information by aggregating the data per year. In this way, we will have a time history <em>per municipality (municipio)</em>, where we can see the history of the results for each political party in each municipality.</p>
<h3 id="group-by-political-party">Group by Political Party</h3>
<p>Para un analisis mas compacto, podemos agrupar los partidos politicos incluyendo sus alianzas. De este modo, por ejemplo, tendriamos que:</p>
<p>For a more compact analysis, we can group the political parties including the alliances. In this we, we would have, for example:</p>
<pre tabindex="0"><code>&#39;PAN&#39;: [&#39;PAN&#39;, &#39;PAN_NVA_ALIANZA&#39;, &#39;PAN_PRD_MC&#39;, &#39;PAN_PRD&#39;, &#39;PAN_MC&#39;, &#39;PAN_PRI_PRD&#39;, &#39;PAN_PRI&#39;]
</code></pre><p>Which means that the party <code>PAN</code> would also include the alliances with the other parties named <code>Nueva Alianza</code>, an alliance with <code>PRD</code> named <code>PAN_PRD</code>, etc.</p>
<h5 id="note">NOTE</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># write a dictionary with the alliances per party</span>
</span></span><span class="line"><span class="cl"><span class="n">alliance_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_NVA_ALIANZA&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_NA&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_PVEM_NA&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI_PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD_PT&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_NA&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD_PT_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_PRD_MC&#39;</span><span class="p">,</span> <span class="s1">&#39;PAN_MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_MORENA_ES&#39;</span><span class="p">,</span> <span class="s1">&#39;PT_MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA_ES&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_PT_MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM_MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PSD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PH&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;RSP&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;FXM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main_parties</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="s1">&#39;PAN&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="s1">&#39;MC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PSD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PH&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;RSP&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;FXM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more as needed for each unique party or alliance...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="vote-distribution-among-alliances">Vote Distribution Among Alliances</h3>
<p>The way this works is that the votes for any alliance are equally divided amongs the parties that conform the alliance.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO</th>
      <th>CABECERA_DISTRITAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PRI_NA</th>
      <th>PVEM_NA</th>
      <th>PT_MORENA_ES</th>
      <th>PT_MORENA</th>
      <th>PT_ES</th>
      <th>MORENA_ES</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>48293</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>1</td>
      <td>BENITO JUAREZ</td>
      <td>962</td>
      <td>3</td>
      <td>79.0</td>
      <td>...</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>18.0</td>
      <td>10.0</td>
      <td>0.0</td>
      <td>7.0</td>
      <td>9.0</td>
      <td>25.0</td>
      <td>879.0</td>
      <td>1574</td>
    </tr>
    <tr>
      <th>48294</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3</td>
      <td>279.0</td>
      <td>...</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>5.0</td>
      <td>4.0</td>
      <td>50.0</td>
      <td>1275.0</td>
      <td>2116</td>
    </tr>
    <tr>
      <th>48295</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3</td>
      <td>190.0</td>
      <td>...</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>30.0</td>
      <td>1171.0</td>
      <td>2117</td>
    </tr>
    <tr>
      <th>48296</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3</td>
      <td>237.0</td>
      <td>...</td>
      <td>6.0</td>
      <td>3.0</td>
      <td>4.0</td>
      <td>5.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>64.0</td>
      <td>1227.0</td>
      <td>1919</td>
    </tr>
    <tr>
      <th>48297</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4</td>
      <td>229.0</td>
      <td>...</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>7.0</td>
      <td>5.0</td>
      <td>1.0</td>
      <td>3.0</td>
      <td>0.0</td>
      <td>52.0</td>
      <td>1446.0</td>
      <td>2308</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 34 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">alliance_votes_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">distribute_alliance_votes</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">alliances</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ensure that party columns exist in the dataframe, add them if the do not</span>
</span></span><span class="line"><span class="cl">    <span class="n">all_parties</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">party</span> <span class="k">for</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">all_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># distribute the votes from each alliance to the respective parties</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">alliance</span><span class="p">,</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">alliance</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">split_votes</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">alliance</span><span class="p">]</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">split_votes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># optionally remove the alliance columns</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">alliances</span><span class="o">.</span><span class="n">keys</span><span class="p">()),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">errors</span> <span class="o">=</span> <span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># apply the vote split function to all the dataframes:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2021_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CIRCUNSCRIPCION</th>
      <th>ID_ESTADO</th>
      <th>NOMBRE_ESTADO</th>
      <th>ID_DISTRITO</th>
      <th>CABECERA_DISTRITAL</th>
      <th>ID_MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>CASILLAS</th>
      <th>PAN</th>
      <th>...</th>
      <th>PT</th>
      <th>MC</th>
      <th>NA</th>
      <th>MORENA</th>
      <th>ES</th>
      <th>NUM_VOTOS_CAN_NREG</th>
      <th>NUM_VOTOS_NULOS</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
      <th>NVA_ALIANZA</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>48293</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>1</td>
      <td>BENITO JUAREZ</td>
      <td>962</td>
      <td>3</td>
      <td>80.166667</td>
      <td>...</td>
      <td>64.000000</td>
      <td>26.166667</td>
      <td>14.166667</td>
      <td>525.500000</td>
      <td>39.500000</td>
      <td>9.0</td>
      <td>25.0</td>
      <td>879.0</td>
      <td>1574</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48294</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>182</td>
      <td>3</td>
      <td>281.000000</td>
      <td>...</td>
      <td>42.333333</td>
      <td>48.500000</td>
      <td>14.666667</td>
      <td>405.333333</td>
      <td>26.333333</td>
      <td>4.0</td>
      <td>50.0</td>
      <td>1275.0</td>
      <td>2116</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48295</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>183</td>
      <td>3</td>
      <td>192.000000</td>
      <td>...</td>
      <td>44.833333</td>
      <td>61.000000</td>
      <td>14.166667</td>
      <td>445.833333</td>
      <td>24.333333</td>
      <td>1.0</td>
      <td>30.0</td>
      <td>1171.0</td>
      <td>2117</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48296</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>184</td>
      <td>3</td>
      <td>240.000000</td>
      <td>...</td>
      <td>45.833333</td>
      <td>52.500000</td>
      <td>24.166667</td>
      <td>444.833333</td>
      <td>19.333333</td>
      <td>0.0</td>
      <td>64.0</td>
      <td>1227.0</td>
      <td>1919</td>
      <td>0</td>
    </tr>
    <tr>
      <th>48297</th>
      <td>3</td>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1</td>
      <td>PLAYA DEL CARMEN</td>
      <td>2</td>
      <td>COZUMEL</td>
      <td>185</td>
      <td>4</td>
      <td>231.500000</td>
      <td>...</td>
      <td>43.333333</td>
      <td>62.000000</td>
      <td>19.500000</td>
      <td>502.333333</td>
      <td>24.333333</td>
      <td>0.0</td>
      <td>52.0</td>
      <td>1446.0</td>
      <td>2308</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 23 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># list to store party names lists for each DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="n">df_re_all_years</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># empty list to store party names for current DataFrame</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># get a list of column names</span>
</span></span><span class="line"><span class="cl">    <span class="n">column_names</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># find the indices of &#34;CASILLAS&#34; and &#34;NUM_VOTOS_CAN_NREG&#34; (handle potential errors)</span>
</span></span><span class="line"><span class="cl">        <span class="n">casillas_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;CASILLAS&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">num_votos_index</span> <span class="o">=</span> <span class="n">column_names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;NUM_VOTOS_CAN_NREG&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># extract party names between the indices (avoid out-of-bounds)</span>
</span></span><span class="line"><span class="cl">        <span class="n">party_names</span> <span class="o">=</span> <span class="n">column_names</span><span class="p">[</span><span class="n">casillas_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span><span class="nb">min</span><span class="p">(</span><span class="n">num_votos_index</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">column_names</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># handle cases where &#34;CASILLAS&#34; or &#34;NUM_VOTOS_CAN_NREG&#34; might not exist</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">WARNING: &#39;CASILLAS&#39; or &#39;NUM_VOTOS_CAN_NREG&#39; not found in DataFrame&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># append the party names list for this DataFrame</span>
</span></span><span class="line"><span class="cl">    <span class="n">party_names_per_df</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">party_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">party_names_per_df</span>
</span></span></code></pre></div><pre><code>[['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'CONV',
  'NVA_ALIANZA',
  'PSD',
  'PRIMERO_MEXICO',
  'SALVEMOS_MEXICO'],
 ['PAN', 'PRI', 'PRD', 'PVEM', 'PT', 'MC', 'NVA_ALIANZA'],
 ['PAN',
  'PRI',
  'PRD',
  'PVEM',
  'PT',
  'MC',
  'NVA_ALIANZA',
  'MORENA',
  'PH',
  'ES'],
 ['PAN', 'PRI', 'PRD', 'PVEM', 'PT', 'MC', 'NA', 'MORENA', 'ES'],
 ['PAN', 'PRI', 'PRD', 'PVEM', 'PT', 'MC', 'MORENA', 'PES', 'RSP', 'FXM']]
</code></pre>
<h2 id="visualizations">Visualizations</h2>
<h3 id="time-history">Time History</h3>
<p>Here we develop a function to plot the historical number of votes per party. Each plot will show the data for a selected municipality. The idea is to have an interactive dashboard where one could easily select these parameters and access the plot.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># function for plotting the time history, given a eyar, and a municipality</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">election_years</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Plots an interactive line plot with filled areas to zero for each main party and its alliances,
</span></span></span><span class="line"><span class="cl"><span class="s2">    in a selected municipality across elections using Plotly Express. This approximates the non-stacked
</span></span></span><span class="line"><span class="cl"><span class="s2">    area plot behavior of the original function.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># initialize dictionary to hold vote totals for main parties</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_main_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">election_years</span><span class="p">)</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># loop through each DataFrame and year</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">election_years</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># filter the DataFrame for the selected municipality</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">selected_municipality</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">filtered_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1"># loop through each main party and its alliances</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># aggregate votes for each party in the alliance, adding to the main party&#39;s total</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">votes_by_main_party</span><span class="p">[</span><span class="n">party</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">filtered_df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># prepare the data for plotting</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_for_plotting</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">main_party</span><span class="p">,</span> <span class="n">votes</span> <span class="ow">in</span> <span class="n">votes_by_main_party</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">year</span><span class="p">,</span> <span class="n">vote</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">election_years</span><span class="p">,</span> <span class="n">votes</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">data_for_plotting</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;Election Year&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">,</span> <span class="s1">&#39;Total Votes&#39;</span><span class="p">:</span> <span class="n">vote</span><span class="p">,</span> <span class="s1">&#39;Party&#39;</span><span class="p">:</span> <span class="n">main_party</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_plot</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data_for_plotting</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the plot</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">df_plot</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">line_shape</span><span class="o">=</span><span class="s1">&#39;linear&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;Total Votes per Party (Including Alliances), in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># customize the layout</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">2.5</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;tozeroy&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_title</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">yaxis_title</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend_title</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">font</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="s2">&#34;Arial, sans-serif&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;#333&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                      <span class="n">hovermode</span><span class="o">=</span><span class="s1">&#39;x unified&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                          <span class="n">orientation</span> <span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">yanchor</span> <span class="o">=</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.6</span><span class="p">,</span> <span class="c1"># adjuist to fit layout</span>
</span></span><span class="line"><span class="cl">                          <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">                      <span class="p">))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span></code></pre></div><p>Let&rsquo;s look at an example, by calling the municipality called <code>Benito Juarez</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">municipality</span> <span class="o">=</span> <span class="s1">&#39;BENITO JUAREZ&#39;</span>   <span class="c1"># as an example</span>
</span></span><span class="line"><span class="cl"><span class="n">election_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">2022</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="n">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span><span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">election_years</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_33_2.png" type="" alt="image.png"  /></p>
<h3 id="pie-chart">Pie Chart</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_election_pie_chart</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># mapping years to their indices in the list of dataframes</span>
</span></span><span class="line"><span class="cl">    <span class="n">year_to_index</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2009</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2012</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2015</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2018</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2021</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">selected_year_index</span> <span class="o">=</span> <span class="n">year_to_index</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">selected_year_index</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No data available for the year </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># extract the dataframe for the selected year</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_selected_year</span> <span class="o">=</span> <span class="n">df_re_all_years</span><span class="p">[</span><span class="n">selected_year_index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># filtering the df for the selected municipality</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_municipality</span> <span class="o">=</span> <span class="n">df_selected_year</span><span class="p">[</span><span class="n">df_selected_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">empty</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;No data available for </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># aggregating votes for each main party</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_municipality</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the pie chart</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_votes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span> <span class="s1">&#39;Votes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df_votes</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="s1">&#39;Votes&#39;</span><span class="p">,</span> <span class="n">names</span> <span class="o">=</span> <span class="s1">&#39;Party&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                 <span class="n">title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Vote Distribution in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update the traces to remove the text labels</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">textinfo</span><span class="o">=</span><span class="s1">&#39;none&#39;</span><span class="p">,</span> <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;label+percent&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot_election_pie_chart</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">)</span>      
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_35_0.png" type="" alt="image.png"  /></p>
<h2 id="choropleth">Choropleth</h2>
<p>Now we can build some choropleths. To do this, we collected a <code>geojson</code> file for the municipalities in the State of Quintana Roo, Mexico.</p>
<p>The file can be found <a href="https://github.com/PhantomInsights/mexico-geojson">in this GitHub repository</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># define some colors for each party</span>
</span></span><span class="line"><span class="cl"><span class="n">party_colors</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="s1">&#39;#0052CC&#39;</span><span class="p">,</span>        <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="s1">&#39;#013369&#39;</span><span class="p">,</span>        <span class="c1"># Dark Blue</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="s1">&#39;#FFD700&#39;</span><span class="p">,</span>        <span class="c1"># Gold</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="s1">&#39;#00A550&#39;</span><span class="p">,</span>       <span class="c1"># Green</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="s1">&#39;#E00000&#39;</span><span class="p">,</span>         <span class="c1"># Red</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="s1">&#39;#FF7F00&#39;</span><span class="p">,</span>         <span class="c1"># Orange</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="s1">&#39;#6813D5&#39;</span><span class="p">,</span>     <span class="c1"># Purple</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="s1">&#39;#00AAAA&#39;</span><span class="p">,</span> <span class="c1"># Teal</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="s1">&#39;#555555&#39;</span><span class="p">,</span>        <span class="c1"># Dark Gray</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="s1">&#39;#9C2AA0&#39;</span><span class="p">,</span>  <span class="c1"># Magenta</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="s1">&#39;#6CACE4&#39;</span><span class="p">,</span> <span class="c1"># Light Blue</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="s1">&#39;#F0A3A3&#39;</span><span class="p">,</span>         <span class="c1"># Pink</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="s1">&#39;#2AD2C9&#39;</span><span class="p">,</span>         <span class="c1"># Cyan</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="s1">&#39;#F68B1F&#39;</span><span class="p">,</span>         <span class="c1"># Amber</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="s1">&#39;#93C572&#39;</span><span class="p">,</span>        <span class="c1"># Lime</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="s1">&#39;#CC317C&#39;</span><span class="p">,</span>        <span class="c1"># Rose</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="s1">&#39;#8B4513&#39;</span><span class="p">,</span>        <span class="c1"># SaddleBrown</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more entries for each party as needed...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Now, for this map to work, we need the data in the <code>geojson</code> file to coincide exactly with the names of the municipalities in the dataframes.</p>
<p>First, we explore the names of the municipalities in the dataframe for the recent elections, since this is the dataframe that contains all of the municipalities, including the most recently incorporated (i.e. in earlier elections, some of these municipalities did not exist).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># from aggregate df, we pull the latest one, and see the unique names for the column &#39;MUNICIPIO&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>array(['COZUMEL', 'SOLIDARIDAD', 'TULUM', 'ISLA MUJERES',
       'LAZARO CARDENAS', 'BENITO JUAREZ', 'FELIPE CARRILLO PUERTO',
       'JOSE MARIA MORELOS', 'OTHON P. BLANCO', 'BACALAR',
       'PUERTO MORELOS'], dtype=object)
</code></pre>
<p>Likewise, we explore the <code>goejson</code> to see how the municipalities are named. Let&rsquo;s explore the <code>geojson</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Load the GeoJSON file</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_file_path</span> <span class="o">=</span> <span class="s1">&#39;utils/mexico-geojson/2022/states/Quintana Roo.json&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">geojson_file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">geojson_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract &#34;NOM_MUN&#34; values</span>
</span></span><span class="line"><span class="cl"><span class="n">nom_mun_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">feature</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">][</span><span class="s1">&#39;NOMGEO&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">geojson_data</span><span class="p">[</span><span class="s1">&#39;features&#39;</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print the list to see what values are stored</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">nom_mun_list</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>['Felipe Carrillo Puerto', 'Cozumel', 'Isla Mujeres', 'Othón P. Blanco', 'Solidaridad', 'Puerto Morelos', 'Benito Juárez', 'José María Morelos', 'Lázaro Cárdenas', 'Tulum', 'Bacalar']
</code></pre>
<h5 id="note-1">NOTE</h5>
<p>After trying a few things out, the <code>geojson</code> was not working as intended. This was due to a difference in the name encoding. To fix this, we adjusted the <code>geojson</code> file in the property <code>properties.NOMGEO</code>/</p>
<p>We will do this programmatically, and save a new file with the new names.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Define a mapping of GeoJSON names to desired names, based on your DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is a manual step but only needs to be done once</span>
</span></span><span class="line"><span class="cl"><span class="n">name_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Felipe Carrillo Puerto&#39;</span><span class="p">:</span> <span class="s1">&#39;FELIPE CARRILLO PUERTO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Cozumel&#39;</span><span class="p">:</span> <span class="s1">&#39;COZUMEL&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Isla Mujeres&#39;</span><span class="p">:</span> <span class="s1">&#39;ISLA MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Othón P. Blanco&#39;</span><span class="p">:</span> <span class="s1">&#39;OTHON P. BLANCO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Solidaridad&#39;</span><span class="p">:</span> <span class="s1">&#39;SOLIDARIDAD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Puerto Morelos&#39;</span><span class="p">:</span> <span class="s1">&#39;PUERTO MORELOS&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Benito Juárez&#39;</span><span class="p">:</span> <span class="s1">&#39;BENITO JUAREZ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;José María Morelos&#39;</span><span class="p">:</span> <span class="s1">&#39;JOSE MARIA MORELOS&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Lázaro Cárdenas&#39;</span><span class="p">:</span> <span class="s1">&#39;LAZARO CARDENAS&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Tulum&#39;</span><span class="p">:</span> <span class="s1">&#39;TULUM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Bacalar&#39;</span><span class="p">:</span> <span class="s1">&#39;BACALAR&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Iterate over each feature and adjust the names</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">geojson_data</span><span class="p">[</span><span class="s1">&#39;features&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="n">original_name</span> <span class="o">=</span> <span class="n">feature</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">][</span><span class="s1">&#39;NOMGEO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">original_name</span> <span class="ow">in</span> <span class="n">name_mapping</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">feature</span><span class="p">[</span><span class="s1">&#39;properties&#39;</span><span class="p">][</span><span class="s1">&#39;NOMGEO&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">name_mapping</span><span class="p">[</span><span class="n">original_name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#------------------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------- Save the modified GeoJSON to a new file ----------------#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#------------------------------------------------------------------------------#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># modified_geojson_file_path = &#39;qroo_geojson_2022.json&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># with open(modified_geojson_file_path, &#39;w&#39;, encoding=&#39;utf-8&#39;) as file:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     json.dump(geojson_data, file, ensure_ascii=False, indent=4)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create year mapping dictionary</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Mapping each election year to its corresponding dataframe</span>
</span></span><span class="line"><span class="cl"><span class="n">df_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2009</span><span class="p">:</span> <span class="n">df_re_2009_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2012</span><span class="p">:</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2015</span><span class="p">:</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2018</span><span class="p">:</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2021</span><span class="p">:</span> <span class="n">df_re_2021_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load the new geojson file here</span>
</span></span><span class="line"><span class="cl"><span class="n">election_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">2022</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_file_path</span> <span class="o">=</span> <span class="s1">&#39;data/shapefiles/qroo_geojson_2022.json&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">geojson_file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">geojson_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="choropleth-for-winning-party-per-municipality">Choropleth for Winning Party per Municipality</h3>
<p>Now let&rsquo;s create a function to generate the choropleth. We note that for each election year, there will be a different municipality map. Therefore, in some years, some municipalities will be missing altogether.</p>
<p>This choropleth will show the winning party per municipality, at a given year.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_winning_party_per_year_choropleth</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">df_dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># This function now handles a single year&#39;s DataFrame and generates a choropleth map for that year.</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_year</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">selected_year</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">winning_party_by_municipality</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">municipality</span> <span class="ow">in</span> <span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># for main_party, parties in alliance_mapping.items():</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#     for party in parties:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#         if party in df_year.columns:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#             votes_by_party[main_party] += df_year.loc[df_year[&#39;MUNICIPIO&#39;] == municipality, party].sum()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_year</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_year</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="n">winning_party</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">votes_by_party</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">winning_party_by_municipality</span><span class="p">[</span><span class="n">municipality</span><span class="p">]</span> <span class="o">=</span> <span class="n">winning_party</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">winning_party_by_municipality</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;Partido Ganador&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span><span class="p">[</span><span class="s1">&#39;Year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selected_year</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_map</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Partido Ganador&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_map</span><span class="o">=</span><span class="n">party_colors</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Winning Party per Municipality, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>  <span class="c1"># Return the figure for this specific year</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example of how to call the function for a single year</span>
</span></span><span class="line"><span class="cl"><span class="n">year</span> <span class="o">=</span> <span class="mi">2021</span>
</span></span><span class="line"><span class="cl"><span class="n">df_year</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">year</span><span class="p">]</span>  <span class="c1"># Assuming df_dict is defined with years as keys</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span> <span class="o">=</span> <span class="n">create_winning_party_per_year_choropleth</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">df_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_47_1.png" type="" alt="image.png"  /></p>
<h3 id="maps-showing-the-gender-proportion-per-municipality">Maps Showing the Gender Proportion per Municipality</h3>
<p>For this choropleth, we will need the voter registration dataframe, so we call it again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>Index(['Clave Entidad', 'Nombre Entidad', 'Clave Distrito', 'Nombre Distrito',
       'Clave Municipio', 'Nombre Municipio', 'Seccion', 'Lista Hombres',
       'Lista Mujeres', 'Lista No Binario', 'Lista Nominal'],
      dtype='object')
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Clave Entidad</th>
      <th>Nombre Entidad</th>
      <th>Clave Distrito</th>
      <th>Nombre Distrito</th>
      <th>Clave Municipio</th>
      <th>Nombre Municipio</th>
      <th>Seccion</th>
      <th>Lista Hombres</th>
      <th>Lista Mujeres</th>
      <th>Lista No Binario</th>
      <th>Lista Nominal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>2061</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>2141</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>1963</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>2426</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>990</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Calculate the percentage of women registered voters</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje Mujeres&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Porcentaje Mujeres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">Plasma</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Percentage of Women in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_51_0.png" type="" alt="image.png"  /></p>
<h2 id="map-grouped-by-age-range">Map Grouped by Age Range</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_age</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;data/padron_y_ln_rango_edad.xlsx&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df_age</span><span class="o">.</span><span class="n">columns</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">df_age</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>87
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE\nENTIDAD</th>
      <th>NOMBRE\nENTIDAD</th>
      <th>CLAVE\nDISTRITO</th>
      <th>NOMBRE\nDISTRITO</th>
      <th>CLAVE\nMUNICIPIO</th>
      <th>NOMBRE\nMUNICIPIO</th>
      <th>SECCION</th>
      <th>PADRON\nHOMBRES</th>
      <th>PADRON\nMUJERES</th>
      <th>PADRON\nNO BINARIO</th>
      <th>...</th>
      <th>LISTA_50_54_NOBINARIO</th>
      <th>LISTA_55_59_HOMBRES</th>
      <th>LISTA_55_59_MUJERES</th>
      <th>LISTA_55_59_NOBINARIO</th>
      <th>LISTA_60_64_HOMBRES</th>
      <th>LISTA_60_64_MUJERES</th>
      <th>LISTA_60_64_NOBINARIO</th>
      <th>LISTA_65_Y_MAS_HOMBRES</th>
      <th>LISTA_65_Y_MAS_MUJERES</th>
      <th>LISTA_65_Y_MAS_NOBINARIO</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>RESIDENTES EXTRANJERO</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>8444</td>
      <td>5756</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>355.0</td>
      <td>234.0</td>
      <td>0.0</td>
      <td>180.0</td>
      <td>149.0</td>
      <td>0.0</td>
      <td>206.0</td>
      <td>139.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>338.0</td>
      <td>973</td>
      <td>1013</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>72.0</td>
      <td>0.0</td>
      <td>39.0</td>
      <td>37.0</td>
      <td>0.0</td>
      <td>88.0</td>
      <td>109.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>339.0</td>
      <td>895</td>
      <td>954</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>55.0</td>
      <td>60.0</td>
      <td>0.0</td>
      <td>38.0</td>
      <td>43.0</td>
      <td>0.0</td>
      <td>88.0</td>
      <td>97.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>340.0</td>
      <td>951</td>
      <td>1001</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>66.0</td>
      <td>0.0</td>
      <td>46.0</td>
      <td>48.0</td>
      <td>0.0</td>
      <td>103.0</td>
      <td>83.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>AGUASCALIENTES</td>
      <td>1.0</td>
      <td>JESUS MARIA                                   ...</td>
      <td>2.0</td>
      <td>ASIENTOS</td>
      <td>341.0</td>
      <td>1174</td>
      <td>1184</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>59.0</td>
      <td>60.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>62.0</td>
      <td>0.0</td>
      <td>110.0</td>
      <td>105.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 87 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_age</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['CLAVE\nENTIDAD', 'NOMBRE\nENTIDAD', 'CLAVE\nDISTRITO',
       'NOMBRE\nDISTRITO', 'CLAVE\nMUNICIPIO', 'NOMBRE\nMUNICIPIO', 'SECCION',
       'PADRON\nHOMBRES', 'PADRON\nMUJERES', 'PADRON\nNO BINARIO',
       'PADRON\nELECTORAL', 'LISTA\nHOMBRES', 'LISTA\nMUJERES',
       'LISTA\nNO BINARIO', 'LISTA\nNOMINAL', 'PADRON_18_HOMBRES',
       'PADRON_18_MUJERES', 'PADRON_18_NOBINARIO', 'PADRON_19_HOMBRES',
       'PADRON_19_MUJERES', 'PADRON_19_NOBINARIO', 'PADRON_20_24_HOMBRES',
       'PADRON_20_24_MUJERES', 'PADRON_20_24_NOBINARIO',
       'PADRON_25_29_HOMBRES', 'PADRON_25_29_MUJERES',
       'PADRON_25_29_NOBINARIO', 'PADRON_30_34_HOMBRES',
       'PADRON_30_34_MUJERES', 'PADRON_30_34_NOBINARIO',
       'PADRON_35_39_HOMBRES', 'PADRON_35_39_MUJERES',
       'PADRON_35_39_NOBINARIO', 'PADRON_40_44_HOMBRES',
       'PADRON_40_44_MUJERES', 'PADRON_40_44_NOBINARIO',
       'PADRON_45_49_HOMBRES', 'PADRON_45_49_MUJERES',
       'PADRON_45_49_NOBINARIO', 'PADRON_50_54_HOMBRES',
       'PADRON_50_54_MUJERES', 'PADRON_50_54_NOBINARIO',
       'PADRON_55_59_HOMBRES', 'PADRON_55_59_MUJERES',
       'PADRON_55_59_NOBINARIO', 'PADRON_60_64_HOMBRES',
       'PADRON_60_64_MUJERES', 'PADRON_60_64_NOBINARIO',
       'PADRON_65_Y_MAS_HOMBRES', 'PADRON_65_Y_MAS_MUJERES',
       'PADRON_65_Y_MAS_NOBINARIO', 'LISTA_18_HOMBRES', 'LISTA_18_MUJERES',
       'LISTA_18_NOBINARIO', 'LISTA_19_HOMBRES', 'LISTA_19_MUJERES',
       'LISTA_19_NOBINARIO', 'LISTA_20_24_HOMBRES', 'LISTA_20_24_MUJERES',
       'LISTA_20_24_NOBINARIO', 'LISTA_25_29_HOMBRES', 'LISTA_25_29_MUJERES',
       'LISTA_25_29_NOBINARIO', 'LISTA_30_34_HOMBRES', 'LISTA_30_34_MUJERES',
       'LISTA_30_34_NOBINARIO', 'LISTA_35_39_HOMBRES', 'LISTA_35_39_MUJERES',
       'LISTA_35_39_NOBINARIO', 'LISTA_40_44_HOMBRES', 'LISTA_40_44_MUJERES',
       'LISTA_40_44_NOBINARIO', 'LISTA_45_49_HOMBRES', 'LISTA_45_49_MUJERES',
       'LISTA_45_49_NOBINARIO', 'LISTA_50_54_HOMBRES', 'LISTA_50_54_MUJERES',
       'LISTA_50_54_NOBINARIO', 'LISTA_55_59_HOMBRES', 'LISTA_55_59_MUJERES',
       'LISTA_55_59_NOBINARIO', 'LISTA_60_64_HOMBRES', 'LISTA_60_64_MUJERES',
       'LISTA_60_64_NOBINARIO', 'LISTA_65_Y_MAS_HOMBRES',
       'LISTA_65_Y_MAS_MUJERES', 'LISTA_65_Y_MAS_NOBINARIO'],
      dtype='object')
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Select columns by their positions: 1-7, 12-15, and the last 36</span>
</span></span><span class="line"><span class="cl"><span class="n">cols_to_keep</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">36</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Now, select these columns from the DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age</span> <span class="o">=</span> <span class="n">df_age</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="n">cols_to_keep</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># filter rows by state quintana roo</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span> <span class="o">=</span> <span class="n">df_ln_age</span><span class="p">[</span><span class="n">df_ln_age</span><span class="p">[</span><span class="s1">&#39;NOMBRE</span><span class="se">\n</span><span class="s1">ENTIDAD&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;QUINTANA ROO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># select columns for padron electoral</span>
</span></span><span class="line"><span class="cl"><span class="c1"># df_ln_age_qroo = df_age_qroo.iloc[:,:11]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>Index(['CLAVE\nENTIDAD', 'NOMBRE\nENTIDAD', 'CLAVE\nDISTRITO',
       'NOMBRE\nDISTRITO', 'CLAVE\nMUNICIPIO', 'NOMBRE\nMUNICIPIO', 'SECCION',
       'LISTA\nHOMBRES', 'LISTA\nMUJERES', 'LISTA\nNO BINARIO',
       'LISTA\nNOMINAL', 'LISTA_18_HOMBRES', 'LISTA_18_MUJERES',
       'LISTA_18_NOBINARIO', 'LISTA_19_HOMBRES', 'LISTA_19_MUJERES',
       'LISTA_19_NOBINARIO', 'LISTA_20_24_HOMBRES', 'LISTA_20_24_MUJERES',
       'LISTA_20_24_NOBINARIO', 'LISTA_25_29_HOMBRES', 'LISTA_25_29_MUJERES',
       'LISTA_25_29_NOBINARIO', 'LISTA_30_34_HOMBRES', 'LISTA_30_34_MUJERES',
       'LISTA_30_34_NOBINARIO', 'LISTA_35_39_HOMBRES', 'LISTA_35_39_MUJERES',
       'LISTA_35_39_NOBINARIO', 'LISTA_40_44_HOMBRES', 'LISTA_40_44_MUJERES',
       'LISTA_40_44_NOBINARIO', 'LISTA_45_49_HOMBRES', 'LISTA_45_49_MUJERES',
       'LISTA_45_49_NOBINARIO', 'LISTA_50_54_HOMBRES', 'LISTA_50_54_MUJERES',
       'LISTA_50_54_NOBINARIO', 'LISTA_55_59_HOMBRES', 'LISTA_55_59_MUJERES',
       'LISTA_55_59_NOBINARIO', 'LISTA_60_64_HOMBRES', 'LISTA_60_64_MUJERES',
       'LISTA_60_64_NOBINARIO', 'LISTA_65_Y_MAS_HOMBRES',
       'LISTA_65_Y_MAS_MUJERES', 'LISTA_65_Y_MAS_NOBINARIO'],
      dtype='object')
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE\nENTIDAD</th>
      <th>NOMBRE\nENTIDAD</th>
      <th>CLAVE\nDISTRITO</th>
      <th>NOMBRE\nDISTRITO</th>
      <th>CLAVE\nMUNICIPIO</th>
      <th>NOMBRE\nMUNICIPIO</th>
      <th>SECCION</th>
      <th>LISTA\nHOMBRES</th>
      <th>LISTA\nMUJERES</th>
      <th>LISTA\nNO BINARIO</th>
      <th>...</th>
      <th>LISTA_50_54_NOBINARIO</th>
      <th>LISTA_55_59_HOMBRES</th>
      <th>LISTA_55_59_MUJERES</th>
      <th>LISTA_55_59_NOBINARIO</th>
      <th>LISTA_60_64_HOMBRES</th>
      <th>LISTA_60_64_MUJERES</th>
      <th>LISTA_60_64_NOBINARIO</th>
      <th>LISTA_65_Y_MAS_HOMBRES</th>
      <th>LISTA_65_Y_MAS_MUJERES</th>
      <th>LISTA_65_Y_MAS_NOBINARIO</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>77.0</td>
      <td>77.0</td>
      <td>0.0</td>
      <td>69.0</td>
      <td>57.0</td>
      <td>0.0</td>
      <td>99.0</td>
      <td>111.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>65.0</td>
      <td>68.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>62.0</td>
      <td>0.0</td>
      <td>100.0</td>
      <td>97.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>75.0</td>
      <td>65.0</td>
      <td>0.0</td>
      <td>43.0</td>
      <td>36.0</td>
      <td>0.0</td>
      <td>105.0</td>
      <td>112.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>76.0</td>
      <td>83.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>56.0</td>
      <td>0.0</td>
      <td>119.0</td>
      <td>113.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>21.0</td>
      <td>30.0</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>34.0</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>40.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 47 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">dtypes</span>
</span></span></code></pre></div><pre><code>CLAVE\nENTIDAD               object
NOMBRE\nENTIDAD              object
CLAVE\nDISTRITO             float64
NOMBRE\nDISTRITO             object
CLAVE\nMUNICIPIO            float64
NOMBRE\nMUNICIPIO            object
SECCION                     float64
LISTA\nHOMBRES                int64
LISTA\nMUJERES                int64
LISTA\nNO BINARIO             int64
LISTA\nNOMINAL                int64
LISTA_18_HOMBRES            float64
LISTA_18_MUJERES            float64
LISTA_18_NOBINARIO          float64
LISTA_19_HOMBRES            float64
LISTA_19_MUJERES            float64
LISTA_19_NOBINARIO          float64
LISTA_20_24_HOMBRES         float64
LISTA_20_24_MUJERES         float64
LISTA_20_24_NOBINARIO       float64
LISTA_25_29_HOMBRES         float64
LISTA_25_29_MUJERES         float64
LISTA_25_29_NOBINARIO       float64
LISTA_30_34_HOMBRES         float64
LISTA_30_34_MUJERES         float64
LISTA_30_34_NOBINARIO       float64
LISTA_35_39_HOMBRES         float64
LISTA_35_39_MUJERES         float64
LISTA_35_39_NOBINARIO       float64
LISTA_40_44_HOMBRES         float64
LISTA_40_44_MUJERES         float64
LISTA_40_44_NOBINARIO       float64
LISTA_45_49_HOMBRES         float64
LISTA_45_49_MUJERES         float64
LISTA_45_49_NOBINARIO       float64
LISTA_50_54_HOMBRES         float64
LISTA_50_54_MUJERES         float64
LISTA_50_54_NOBINARIO       float64
LISTA_55_59_HOMBRES         float64
LISTA_55_59_MUJERES         float64
LISTA_55_59_NOBINARIO       float64
LISTA_60_64_HOMBRES         float64
LISTA_60_64_MUJERES         float64
LISTA_60_64_NOBINARIO       float64
LISTA_65_Y_MAS_HOMBRES      float64
LISTA_65_Y_MAS_MUJERES      float64
LISTA_65_Y_MAS_NOBINARIO    float64
dtype: object
</code></pre>
<h4 id="change-the-column-names-to-avoid-special-characters">Change the Column Names to Avoid Special Characters</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ln_age_col_names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;CLAVE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;CLAVE DISTRITO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;NOMBRE DISTRITO&#39;</span><span class="p">,</span> <span class="s1">&#39;CLAVE MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;SECCION&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA MUJERES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA NO BINARIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA NOMINAL&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_18_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_18_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_18_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_19_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_19_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_19_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_20_24_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_20_24_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_20_24_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_25_29_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_25_29_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_25_29_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_30_34_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_30_34_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_30_34_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_35_39_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_35_39_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_35_39_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_40_44_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_40_44_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_40_44_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_45_49_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_45_49_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_45_49_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_50_54_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_50_54_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_50_54_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_55_59_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_55_59_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_55_59_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_60_64_HOMBRES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_60_64_MUJERES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_60_64_NOBINARIO&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_65_Y_MAS_HOMBRES&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="s1">&#39;LISTA_65_Y_MAS_MUJERES&#39;</span><span class="p">,</span> <span class="s1">&#39;LISTA_65_Y_MAS_NOBINARIO&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">ln_age_col_names</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="p">[[</span><span class="s1">&#39;CLAVE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">,</span> <span class="s1">&#39;NOMBRE DISTRITO&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CLAVE ENTIDAD</th>
      <th>NOMBRE ENTIDAD</th>
      <th>CLAVE DISTRITO</th>
      <th>NOMBRE DISTRITO</th>
      <th>CLAVE MUNICIPIO</th>
      <th>MUNICIPIO</th>
      <th>SECCION</th>
      <th>LISTA HOMBRES</th>
      <th>LISTA MUJERES</th>
      <th>LISTA NO BINARIO</th>
      <th>...</th>
      <th>LISTA_50_54_NOBINARIO</th>
      <th>LISTA_55_59_HOMBRES</th>
      <th>LISTA_55_59_MUJERES</th>
      <th>LISTA_55_59_NOBINARIO</th>
      <th>LISTA_60_64_HOMBRES</th>
      <th>LISTA_60_64_MUJERES</th>
      <th>LISTA_60_64_NOBINARIO</th>
      <th>LISTA_65_Y_MAS_HOMBRES</th>
      <th>LISTA_65_Y_MAS_MUJERES</th>
      <th>LISTA_65_Y_MAS_NOBINARIO</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>50685</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>182.0</td>
      <td>1046</td>
      <td>1015</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>77.0</td>
      <td>77.0</td>
      <td>0.0</td>
      <td>69.0</td>
      <td>57.0</td>
      <td>0.0</td>
      <td>99.0</td>
      <td>111.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50686</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>183.0</td>
      <td>1056</td>
      <td>1085</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>65.0</td>
      <td>68.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>62.0</td>
      <td>0.0</td>
      <td>100.0</td>
      <td>97.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50687</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>184.0</td>
      <td>982</td>
      <td>981</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>75.0</td>
      <td>65.0</td>
      <td>0.0</td>
      <td>43.0</td>
      <td>36.0</td>
      <td>0.0</td>
      <td>105.0</td>
      <td>112.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50688</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>185.0</td>
      <td>1228</td>
      <td>1198</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>76.0</td>
      <td>83.0</td>
      <td>0.0</td>
      <td>50.0</td>
      <td>56.0</td>
      <td>0.0</td>
      <td>119.0</td>
      <td>113.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>50689</th>
      <td>23</td>
      <td>QUINTANA ROO</td>
      <td>1.0</td>
      <td>SOLIDARIDAD                                   ...</td>
      <td>2.0</td>
      <td>COZUMEL</td>
      <td>186.0</td>
      <td>525</td>
      <td>465</td>
      <td>0</td>
      <td>...</td>
      <td>0.0</td>
      <td>21.0</td>
      <td>30.0</td>
      <td>0.0</td>
      <td>29.0</td>
      <td>34.0</td>
      <td>0.0</td>
      <td>56.0</td>
      <td>40.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 47 columns</p>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># refactor into a function for later use on the dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_age_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Determine the predominant age range for each municipality</span>
</span></span><span class="line"><span class="cl">    <span class="n">age_groups</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">11</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Rango de Edad Predominante&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="n">age_groups</span><span class="p">]</span><span class="o">.</span><span class="n">idxmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># when summing, pandas also concatenates the strings in &#34;NOMBRE ENTIDAD&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># so do some housekeeping</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Rango de Edad Predominante&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">Plasma</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Predominant Gender and Age Range in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_age_choropleth</span><span class="p">(</span><span class="n">df_ln_age_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_59_1.png" type="" alt="image.png"  /></p>
<h3 id="total-voter-registration-per-municipality">Total Voter Registration per Municipality</h3>
<p>We will use the data in the column <code>LISTA NOMINAL</code> (i.e. the number of registered voters) from the dataframe <code>df_ln_sx_qroo</code>. Based on this, we&rsquo;ll obtain the totals per municipality so we can visualize them.</p>
<p>Let&rsquo;s get a refresher on the column names.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['Clave Entidad', 'Nombre Entidad', 'Clave Distrito', 'Nombre Distrito',
       'Clave Municipio', 'Nombre Municipio', 'Seccion', 'Lista Hombres',
       'Lista Mujeres', 'Lista No Binario', 'Lista Nominal'],
      dtype='object')
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># refactor into a function for later use on dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_bar_plot</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># group data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">    <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span><span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">},</span> 
</span></span><span class="line"><span class="cl">    <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">Dark24</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># make a dictionary for abbreviated municipality names</span>
</span></span><span class="line"><span class="cl">    <span class="n">abb_mun_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BACALAR&#39;</span><span class="p">:</span> <span class="s1">&#39;BCL&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BENITO JUAREZ&#39;</span><span class="p">:</span> <span class="s1">&#39;BJ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;COZUMEL&#39;</span><span class="p">:</span> <span class="s1">&#39;CZ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;FELIPE CARRILLO PUERTO&#39;</span><span class="p">:</span> <span class="s1">&#39;FCP&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;ISLA MUJERES&#39;</span><span class="p">:</span> <span class="s1">&#39;IM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;JOSE MARIA MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;JMM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;LAZARO CARDENAS&#39;</span><span class="p">:</span> <span class="s1">&#39;LC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;OTHON P. BLANCO&#39;</span><span class="p">:</span> <span class="s1">&#39;OPB&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PUERTO MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;PM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SOLIDARIDAD&#39;</span><span class="p">:</span> <span class="s1">&#39;SLD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;TULUM&#39;</span><span class="p">:</span> <span class="s1">&#39;TLM&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">xaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">tickvals</span> <span class="o">=</span> <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">],</span>  <span class="c1"># Original names</span>
</span></span><span class="line"><span class="cl">            <span class="n">ticktext</span> <span class="o">=</span> <span class="p">[</span><span class="n">abb_mun_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span>  <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">]]</span>  <span class="c1"># Abbreviated names</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">yaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Registered Voters&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">plot_bgcolor</span> <span class="o">=</span> <span class="s1">&#39;rgba(0,0,0,0)&#39;</span><span class="p">,</span> <span class="c1"># transparent background</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_minsize</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>  <span class="c1"># ensure text size is legible</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_mode</span> <span class="o">=</span> <span class="s1">&#39;hide&#39;</span><span class="p">,</span> <span class="c1"># hide text if it doesn&#39;t fit</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;x+y&#39;</span><span class="p">,</span>  <span class="c1"># Show the municipio name and the count on hover</span>
</span></span><span class="line"><span class="cl">        <span class="n">hovertemplate</span><span class="o">=</span><span class="s2">&#34;&lt;b&gt;%</span><span class="si">{x}</span><span class="s2">&lt;/b&gt;&lt;br&gt;Total: %</span><span class="si">{y}</span><span class="s2">&lt;extra&gt;&lt;/extra&gt;&#34;</span>  <span class="c1"># Custom hover template</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_bar_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_total_bar_plot</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_62_1.png" type="" alt="image.png"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># refactor into a function for later use on dashboard</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span><span class="n">df_ln_qroo_totals</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  <span class="c1"># Adjust based on your GeoJSON properties</span>
</span></span><span class="line"><span class="cl">                                <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">color_continuous_scale</span><span class="o">=</span><span class="s2">&#34;Portland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">coloraxis_colorbar</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Total Registered Voters&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">orientation</span><span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">thickness</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nb">len</span> <span class="o">=</span> <span class="mf">0.65</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>                      
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_choropleth_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_total_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_63_0.png" type="" alt="image.png"  /></p>
<h3 id="map-with-voter-proportion-vs-total-registered-voters-per-municipality">Map with Voter Proportion vs Total Registered Voters per Municipality</h3>
<p>To create a map with the proportion of voters vs the total registered voters, we need the dataframe with the election results. In these dataframes, there are columns with the total of people that went out to vote.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df_re_2021_qroo</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_grouped</span>
</span></span></code></pre></div><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>MUNICIPIO</th>
      <th>TOTAL_VOTOS</th>
      <th>LISTA_NOMINAL</th>
      <th>Porcentaje</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>BACALAR</td>
      <td>19204.0</td>
      <td>31916</td>
      <td>0.601704</td>
    </tr>
    <tr>
      <th>1</th>
      <td>BENITO JUAREZ</td>
      <td>245654.0</td>
      <td>630987</td>
      <td>0.389317</td>
    </tr>
    <tr>
      <th>2</th>
      <td>COZUMEL</td>
      <td>38876.0</td>
      <td>70987</td>
      <td>0.547650</td>
    </tr>
    <tr>
      <th>3</th>
      <td>FELIPE CARRILLO PUERTO</td>
      <td>36950.0</td>
      <td>55894</td>
      <td>0.661073</td>
    </tr>
    <tr>
      <th>4</th>
      <td>ISLA MUJERES</td>
      <td>13456.0</td>
      <td>21729</td>
      <td>0.619265</td>
    </tr>
    <tr>
      <th>5</th>
      <td>JOSE MARIA MORELOS</td>
      <td>21985.0</td>
      <td>27940</td>
      <td>0.786865</td>
    </tr>
    <tr>
      <th>6</th>
      <td>LAZARO CARDENAS</td>
      <td>16346.0</td>
      <td>21981</td>
      <td>0.743642</td>
    </tr>
    <tr>
      <th>7</th>
      <td>OTHON P. BLANCO</td>
      <td>79889.0</td>
      <td>174372</td>
      <td>0.458153</td>
    </tr>
    <tr>
      <th>8</th>
      <td>PUERTO MORELOS</td>
      <td>11189.0</td>
      <td>21716</td>
      <td>0.515242</td>
    </tr>
    <tr>
      <th>9</th>
      <td>SOLIDARIDAD</td>
      <td>80806.0</td>
      <td>229306</td>
      <td>0.352394</td>
    </tr>
    <tr>
      <th>10</th>
      <td>TULUM</td>
      <td>21607.0</td>
      <td>35739</td>
      <td>0.604578</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">selected_year</span> <span class="o">=</span> <span class="mi">2015</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_resultados</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df_resultados</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">sequential</span><span class="o">.</span><span class="n">YlOrRd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Total Voter Turnout in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Voter Turnout Percentage in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240509_election_dash_part_1-data_cleaning/output_66_0.png" type="" alt="image.png"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Election Data Dashboard Pt. 2: Dashboard with Dash</title>
      <link>http://localhost:1313/posts/20240509_election_dash_part_2-dashboard/20240509_election_dash_part_2-dashboard/</link>
      <pubDate>Thu, 09 May 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240509_election_dash_part_2-dashboard/20240509_election_dash_part_2-dashboard/</guid>
      <description>The cleaned data is loadsed and the plot generating functions are refactored here. Then a dashboard is created using dash.</description>
      <content:encoded><![CDATA[<hr>
<h3 id="creating-the-dashboard-using-dash">Creating the Dashboard using <code>dash</code></h3>
<p>The cleaned data is loadsed and the plot generating functions are refactored here. Then a dashboard is created using dash.</p>
<p>This dashboard is deployed (at the time of writing this post) here:</p>
<p><a href="https://elections-dash.onrender.com/">https://elections-dash.onrender.com/</a></p>
<p>Here is the full code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dash</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dash</span> <span class="kn">import</span> <span class="n">Dash</span><span class="p">,</span> <span class="n">dcc</span><span class="p">,</span> <span class="n">html</span><span class="p">,</span> <span class="n">Input</span><span class="p">,</span> <span class="n">Output</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dash_bootstrap_components</span> <span class="k">as</span> <span class="nn">dbc</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># generate variables and constants</span>
</span></span><span class="line"><span class="cl"><span class="n">election_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">2022</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Mapping each election year to its corresponding dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">distribute_alliance_votes</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">alliances</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ensure that party columns exist in the dataframe, add them if the do not</span>
</span></span><span class="line"><span class="cl">    <span class="n">all_parties</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">party</span> <span class="k">for</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">all_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># distribute the votes from each alliance to the respective parties</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">alliance</span><span class="p">,</span> <span class="n">parties</span> <span class="ow">in</span> <span class="n">alliances</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">alliance</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">split_votes</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">alliance</span><span class="p">]</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">parties</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">split_votes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># optionally remove the alliance columns</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">alliances</span><span class="o">.</span><span class="n">keys</span><span class="p">()),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">errors</span> <span class="o">=</span> <span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main_parties</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN&#39;</span><span class="p">:</span> <span class="s1">&#39;PAN&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI&#39;</span><span class="p">:</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD&#39;</span><span class="p">:</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM&#39;</span><span class="p">:</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT&#39;</span><span class="p">:</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MC&#39;</span><span class="p">:</span> <span class="s1">&#39;MC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA&#39;</span><span class="p">:</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PSD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PSD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRIMERO_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;SALVEMOS_MEXICO&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PH&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PH&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;RSP&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;RSP&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;FXM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;FXM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more as needed for each unique party or alliance...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">alliance_votes_mapping</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_NVA_ALIANZA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;NVA_ALIANZA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRI&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRI&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRI_PRD&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRI&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_NA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;NA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_PRD_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;PRD&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PAN_MC&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PAN&#39;</span><span class="p">,</span> <span class="s1">&#39;MC&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA_ES&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">,</span> <span class="s1">&#39;ES&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_PT_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;PT&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;PVEM_MORENA&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;PVEM&#39;</span><span class="p">,</span> <span class="s1">&#39;MORENA&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add any other specific alliances as needed</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># URL of the GeoJSON file on GitHub</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_url</span> <span class="o">=</span> <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/qroo_geojson_2022.json&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Fetch the GeoJSON data</span>
</span></span><span class="line"><span class="cl"><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">geojson_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">geojson_data</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span> <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span> <span class="k">else</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_sx_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_lista_nominal_sexo.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_ln_age_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_lista_nominal_edad.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">csv_urls</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2009.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2012.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2015.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2018.csv&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;https://raw.githubusercontent.com/vflores-io/elections_dash/main/data/cleaned_results_2021.csv&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add more URLs as needed</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Load each CSV file into a DataFrame </span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">csv_urls</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_2009_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2012_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2015_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2018_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_re_2021_qroo</span> <span class="o">=</span> <span class="n">distribute_alliance_votes</span><span class="p">(</span><span class="n">df_re_2021_qroo</span><span class="p">,</span> <span class="n">alliance_votes_mapping</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_re_all_years</span> <span class="o">=</span> <span class="p">[</span><span class="n">df_re_2009_qroo</span><span class="p">,</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span> <span class="n">df_re_2021_qroo</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2009</span><span class="p">:</span> <span class="n">df_re_2009_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2012</span><span class="p">:</span> <span class="n">df_re_2012_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2015</span><span class="p">:</span> <span class="n">df_re_2015_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2018</span><span class="p">:</span> <span class="n">df_re_2018_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mi">2021</span><span class="p">:</span> <span class="n">df_re_2021_qroo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_bar_plot</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;Lista Hombres&#39;</span><span class="p">:</span> <span class="s1">&#39;Registered Men&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">:</span> <span class="s1">&#39;Registered Women&#39;</span><span class="p">,</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">:</span> <span class="s1">&#39;Total Registered&#39;</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># group data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Registered Men&#39;</span><span class="p">,</span> <span class="s1">&#39;Registered Women&#39;</span><span class="p">,</span> <span class="s1">&#39;Total Registered&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_ln_qroo_totals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Registered Men&#39;</span><span class="p">,</span> <span class="s1">&#39;Registered Women&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;variable&#39;</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">},</span> 
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># make a dictionary for abbreviated municipality names</span>
</span></span><span class="line"><span class="cl">    <span class="n">abb_mun_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BACALAR&#39;</span><span class="p">:</span> <span class="s1">&#39;BCL&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;BENITO JUAREZ&#39;</span><span class="p">:</span> <span class="s1">&#39;BJ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;COZUMEL&#39;</span><span class="p">:</span> <span class="s1">&#39;CZ&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;FELIPE CARRILLO PUERTO&#39;</span><span class="p">:</span> <span class="s1">&#39;FCP&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;ISLA MUJERES&#39;</span><span class="p">:</span> <span class="s1">&#39;IM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;JOSE MARIA MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;JMM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;LAZARO CARDENAS&#39;</span><span class="p">:</span> <span class="s1">&#39;LC&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;OTHON P. BLANCO&#39;</span><span class="p">:</span> <span class="s1">&#39;OPB&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PUERTO MORELOS&#39;</span><span class="p">:</span> <span class="s1">&#39;PM&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SOLIDARIDAD&#39;</span><span class="p">:</span> <span class="s1">&#39;SLD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;TULUM&#39;</span><span class="p">:</span> <span class="s1">&#39;TLM&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">xaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">tickvals</span> <span class="o">=</span> <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">],</span>  <span class="c1"># Original names</span>
</span></span><span class="line"><span class="cl">            <span class="n">ticktext</span> <span class="o">=</span> <span class="p">[</span><span class="n">abb_mun_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span>  <span class="n">df_ln_qroo_totals</span><span class="p">[</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">]]</span>  <span class="c1"># Abbreviated names</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">yaxis</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Registered Voters&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">plot_bgcolor</span> <span class="o">=</span> <span class="s1">&#39;rgba(0,0,0,0)&#39;</span><span class="p">,</span> <span class="c1"># transparent background</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_minsize</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>  <span class="c1"># ensure text size is legible</span>
</span></span><span class="line"><span class="cl">        <span class="n">uniformtext_mode</span> <span class="o">=</span> <span class="s1">&#39;hide&#39;</span><span class="p">,</span> <span class="c1"># hide text if it doesn&#39;t fit</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_bar_totals</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;x+y&#39;</span><span class="p">,</span>  <span class="c1"># Show the municipio name and the count on hover</span>
</span></span><span class="line"><span class="cl">        <span class="n">hovertemplate</span><span class="o">=</span><span class="s2">&#34;&lt;b&gt;%</span><span class="si">{x}</span><span class="s2">&lt;/b&gt;&lt;br&gt;Total: %</span><span class="si">{y}</span><span class="s2">&lt;extra&gt;&lt;/extra&gt;&#34;</span>  <span class="c1"># Custom hover template</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_bar_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_total_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_ln_qroo_totals</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">])[[</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ochre_scale</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="s1">&#39;#4c78c8&#39;</span><span class="p">],</span>  <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="s1">&#39;#f58518&#39;</span><span class="p">],</span>  <span class="c1"># Light ochre (yellow)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span><span class="n">df_ln_qroo_totals</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  <span class="c1"># Adjust based on your GeoJSON properties</span>
</span></span><span class="line"><span class="cl">                                <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">ochre_scale</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Registered Voters per Municipality&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">fig_choropleth_totals</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">coloraxis_colorbar</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Total Registered Voters&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">orientation</span><span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">thickness</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nb">len</span> <span class="o">=</span> <span class="mf">0.65</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>                      
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig_choropleth_totals</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_age_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Determine the predominant age range for each municipality</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># age_groups = df_grouped.columns[11:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">age_groups</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Men 18&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 18&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 18&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 19&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 19&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 19&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 20-24&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 20-24&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 20-24&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 25-29&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 25-29&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 25-29&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 30-34&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 30-34&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 30-34&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 35-39&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 35-39&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 35-39&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 40-44&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 40-44&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 40-44&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 45-49&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 45-49&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 45-49&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 50-54&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 50-54&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 50-54&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 55-59&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 55-59&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 55-59&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;Men 60-64&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 60-64&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 60-64&#39;</span><span class="p">,</span> <span class="s1">&#39;Men 65+&#39;</span><span class="p">,</span> <span class="s1">&#39;Women 65+&#39;</span><span class="p">,</span> <span class="s1">&#39;Non-Binary 65+&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Rename the columns from the 12th column onwards</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span><span class="p">[:</span><span class="mi">11</span><span class="p">])</span> <span class="o">+</span> <span class="n">age_groups</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">df_grouped</span><span class="o">.</span><span class="n">columns</span><span class="p">)</span> <span class="o">-</span> <span class="mi">11</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Predominant Age and Gender Group&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="n">age_groups</span><span class="p">]</span><span class="o">.</span><span class="n">idxmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># when summing, pandas also concatenates the strings in &#34;NOMBRE ENTIDAD&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># so do some housekeeping</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;NOMBRE ENTIDAD&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Predominant Age and Gender Group&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Predominant Gender and Age Range in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Calculate the percentage of women registered voters</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Mujeres&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Lista Nominal&#39;</span><span class="p">])</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ochre_scale</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="s1">&#39;#4c78c8&#39;</span><span class="p">],</span>  <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="s1">&#39;#f58518&#39;</span><span class="p">],</span>  <span class="c1"># Light ochre (yellow)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;Nombre Municipio&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">ochre_scale</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s2">&#34;Percentage of Women in Voter Registration&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Women Percentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-----------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_winning_party_per_year_choropleth</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">df_dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># This function now handles a single year&#39;s DataFrame and generates a choropleth map for that year.</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_year</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">selected_year</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">winning_party_by_municipality</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">municipality</span> <span class="ow">in</span> <span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># for main_party, parties in alliance_mapping.items():</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#     for party in parties:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#         if party in df_year.columns:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#             votes_by_party[main_party] += df_year.loc[df_year[&#39;MUNICIPIO&#39;] == municipality, party].sum()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_year</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_year</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">municipality</span><span class="p">,</span> <span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="n">winning_party</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">votes_by_party</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">winning_party_by_municipality</span><span class="p">[</span><span class="n">municipality</span><span class="p">]</span> <span class="o">=</span> <span class="n">winning_party</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">winning_party_by_municipality</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> <span class="s1">&#39;Winning Party&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_map</span><span class="p">[</span><span class="s1">&#39;Year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">selected_year</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_map</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Winning Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Winning Party per Municipality, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_election_pie_chart</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">df_re_all_years</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># mapping years to their indices in the list of dataframes</span>
</span></span><span class="line"><span class="cl">    <span class="n">year_to_index</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2009</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2012</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2015</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2018</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2021</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">selected_year_index</span> <span class="o">=</span> <span class="n">year_to_index</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">selected_year_index</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No data available for the year </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># extract the dataframe for the selected year</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_selected_year</span> <span class="o">=</span> <span class="n">df_re_all_years</span><span class="p">[</span><span class="n">selected_year_index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># filtering the df for the selected municipality</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_municipality</span> <span class="o">=</span> <span class="n">df_selected_year</span><span class="p">[</span><span class="n">df_selected_year</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">empty</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;No data available for </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># aggregating votes for each main party</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">df_municipality</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">votes_by_party</span><span class="p">[</span><span class="n">party</span><span class="p">]</span> <span class="o">+=</span> <span class="n">df_municipality</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the pie chart</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_votes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">votes_by_party</span><span class="o">.</span><span class="n">items</span><span class="p">()),</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span> <span class="s1">&#39;Votes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df_votes</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="s1">&#39;Votes&#39;</span><span class="p">,</span> <span class="n">names</span> <span class="o">=</span> <span class="s1">&#39;Party&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                 <span class="n">title</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;Vote Distribution in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update the traces to remove the text labels</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">textinfo</span><span class="o">=</span><span class="s1">&#39;none&#39;</span><span class="p">,</span> <span class="n">hoverinfo</span><span class="o">=</span><span class="s1">&#39;label+percent&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">main_parties</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">,</span> <span class="n">election_years</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Plots an interactive line plot with filled areas to zero for each main party and its alliances,
</span></span></span><span class="line"><span class="cl"><span class="s2">    in a selected municipality across elections using Plotly Express. This approximates the non-stacked
</span></span></span><span class="line"><span class="cl"><span class="s2">    area plot behavior of the original function.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># initialize dictionary to hold vote totals for main parties</span>
</span></span><span class="line"><span class="cl">    <span class="n">votes_by_main_party</span> <span class="o">=</span> <span class="p">{</span><span class="n">main_party</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">election_years</span><span class="p">)</span> <span class="k">for</span> <span class="n">main_party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># loop through each DataFrame and year</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">df_list</span><span class="p">,</span> <span class="n">election_years</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># filter the DataFrame for the selected municipality</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">selected_municipality</span> <span class="ow">in</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">filtered_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">selected_municipality</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1"># loop through each main party and its alliances</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">main_parties</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># aggregate votes for each party in the alliance, adding to the main party&#39;s total</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">party</span> <span class="ow">in</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">columns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">votes_by_main_party</span><span class="p">[</span><span class="n">party</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">filtered_df</span><span class="p">[</span><span class="n">party</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># prepare the data for plotting</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_for_plotting</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">main_party</span><span class="p">,</span> <span class="n">votes</span> <span class="ow">in</span> <span class="n">votes_by_main_party</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">year</span><span class="p">,</span> <span class="n">vote</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">election_years</span><span class="p">,</span> <span class="n">votes</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">data_for_plotting</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;Election Year&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">,</span> <span class="s1">&#39;Total Votes&#39;</span><span class="p">:</span> <span class="n">vote</span><span class="p">,</span> <span class="s1">&#39;Party&#39;</span><span class="p">:</span> <span class="n">main_party</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_plot</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data_for_plotting</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the plot</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">df_plot</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">line_shape</span><span class="o">=</span><span class="s1">&#39;linear&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s1">&#39;Total Votes per Party (Including Alliances), in </span><span class="si">{</span><span class="n">selected_municipality</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">color_discrete_sequence</span><span class="o">=</span><span class="n">px</span><span class="o">.</span><span class="n">colors</span><span class="o">.</span><span class="n">qualitative</span><span class="o">.</span><span class="n">T10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># customize the layout</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_traces</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s1">&#39;lines&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mf">2.5</span><span class="p">),</span> <span class="n">fill</span><span class="o">=</span><span class="s1">&#39;tozeroy&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">xaxis_title</span><span class="o">=</span><span class="s1">&#39;Election Year&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">yaxis_title</span><span class="o">=</span><span class="s1">&#39;Total Votes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend_title</span><span class="o">=</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">font</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">family</span><span class="o">=</span><span class="s2">&#34;Arial, sans-serif&#34;</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&#34;#333&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                      <span class="n">hovermode</span><span class="o">=</span><span class="s1">&#39;x unified&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                      <span class="n">legend</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                          <span class="n">orientation</span> <span class="o">=</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">yanchor</span> <span class="o">=</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.6</span><span class="p">,</span> <span class="c1"># adjuist to fit layout</span>
</span></span><span class="line"><span class="cl">                          <span class="n">xanchor</span> <span class="o">=</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">                      <span class="p">))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#----------------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># HELPER function to get the municipalities per selected year</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_municipalities_per_year</span><span class="p">(</span><span class="n">df_dict</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_selected</span> <span class="o">=</span> <span class="n">df_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">df_selected</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No data available for the year </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Retrieve and return a sorted list of unique municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">df_selected</span><span class="p">[</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-------------------------------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_resultados</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Aggregate data by MUNICIPIO if not already aggregated</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span> <span class="o">=</span> <span class="n">df_resultados</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">:</span> <span class="s1">&#39;sum&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;TOTAL_VOTOS&#39;</span><span class="p">]</span> <span class="o">/</span> <span class="n">df_grouped</span><span class="p">[</span><span class="s1">&#39;LISTA_NOMINAL&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ochre_scale</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="s1">&#39;#4c78c8&#39;</span><span class="p">],</span>  <span class="c1"># Blue</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="s1">&#39;#f58518&#39;</span><span class="p">],</span>  <span class="c1"># Light ochre (yellow)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming `geojson` is your GeoJSON object for the municipalities</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_grouped</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">geojson</span><span class="o">=</span><span class="n">geojson_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">locations</span><span class="o">=</span><span class="s1">&#39;MUNICIPIO&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color</span><span class="o">=</span><span class="s1">&#39;Porcentaje Votantes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">featureidkey</span><span class="o">=</span><span class="s2">&#34;properties.NOMGEO&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">ochre_scale</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">projection</span><span class="o">=</span><span class="s2">&#34;mercator&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="s2">&#34;Voter Turnout Percentage in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_geos</span><span class="p">(</span><span class="n">fitbounds</span><span class="o">=</span><span class="s2">&#34;locations&#34;</span><span class="p">,</span> <span class="n">visible</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Update layout for colorbar position</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="o">.</span><span class="n">update_layout</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">title</span><span class="o">=</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Voter Turnout Percentage in </span><span class="si">{</span><span class="n">selected_year</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">orientation</span><span class="o">=</span><span class="s1">&#39;h&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">xanchor</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=-</span><span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">thickness</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>  <span class="c1"># Adjust the thickness of the colorbar</span>
</span></span><span class="line"><span class="cl">        <span class="nb">len</span><span class="o">=</span><span class="mf">0.65</span>       <span class="c1"># Set the length as a fraction of the plot area width</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fig</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># static figures:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">static_choropleth_percentage_women</span> <span class="o">=</span> <span class="n">create_gender_proportion_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">static_choropleth_age</span> <span class="o">=</span> <span class="n">create_age_choropleth</span><span class="p">(</span><span class="n">df_ln_age_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">static_choropleth_totals</span> <span class="o">=</span> <span class="n">create_total_choropleth</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">static_bar_totals</span> <span class="o">=</span> <span class="n">create_total_bar_plot</span><span class="p">(</span><span class="n">df_ln_sx_qroo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a Dash application</span>
</span></span><span class="line"><span class="cl"><span class="c1"># app = Dash(__name__)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Assuming you&#39;re fine with adding Bootstrap to your project</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Dash</span><span class="p">(</span><span class="vm">__name__</span><span class="p">,</span> <span class="n">external_stylesheets</span><span class="o">=</span><span class="p">[</span><span class="n">dbc</span><span class="o">.</span><span class="n">themes</span><span class="o">.</span><span class="n">BOOTSTRAP</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">append_css</span><span class="p">({</span><span class="s1">&#39;external_url&#39;</span><span class="p">:</span> <span class="s1">&#39;/assets/styles.css&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;background&#39;</span><span class="p">:</span> <span class="s1">&#39;#111111&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;text&#39;</span><span class="p">:</span> <span class="s1">&#39;#7FDBFF&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">server</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">server</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Layout</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="o">.</span><span class="n">layout</span> <span class="o">=</span> <span class="n">dbc</span><span class="o">.</span><span class="n">Container</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">    <span class="n">html</span><span class="o">.</span><span class="n">H1</span><span class="p">(</span><span class="s2">&#34;Elections Dashboard&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Dropdown</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;year-dropdown&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">options</span><span class="o">=</span><span class="p">[{</span><span class="s1">&#39;label&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="n">year</span><span class="p">}</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">election_years</span><span class="p">))],</span>
</span></span><span class="line"><span class="cl">            <span class="n">value</span><span class="o">=</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">election_years</span><span class="p">))[</span><span class="mi">0</span><span class="p">],</span>  <span class="c1"># Default to the earliest year</span>
</span></span><span class="line"><span class="cl">            <span class="n">className</span><span class="o">=</span><span class="s1">&#39;dropdown&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">className</span> <span class="o">=</span> <span class="s1">&#39;mb-2&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Dropdown</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nb">id</span><span class="o">=</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">className</span><span class="o">=</span><span class="s1">&#39;dropdown&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">className</span> <span class="o">=</span> <span class="s1">&#39;mb-2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;time-series-plot&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;pie-chart&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-total-voters&#39;</span><span class="p">,</span> <span class="n">figure</span> <span class="o">=</span> <span class="n">static_choropleth_totals</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-turnout&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-age&#39;</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">static_choropleth_age</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-women&#39;</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">static_choropleth_percentage_women</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">]),</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbc</span><span class="o">.</span><span class="n">Row</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;choropleth-winning&#39;</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">dbc</span><span class="o">.</span><span class="n">Col</span><span class="p">(</span><span class="n">dcc</span><span class="o">.</span><span class="n">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;bar-total-voters&#39;</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">static_bar_totals</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="s1">&#39;graph-container&#39;</span><span class="p">),</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">lg</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">],</span> <span class="n">fluid</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Callback to update municipio dropdown based on year selection</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.callback</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;options&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">Input</span><span class="p">(</span><span class="s1">&#39;year-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">set_municipio_options</span><span class="p">(</span><span class="n">selected_year</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming a function that returns municipios for a given year</span>
</span></span><span class="line"><span class="cl">    <span class="n">municipalities</span> <span class="o">=</span> <span class="n">get_municipalities_per_year</span><span class="p">(</span><span class="n">df_dict</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span> <span class="o">=</span> <span class="p">[{</span><span class="s1">&#39;label&#39;</span><span class="p">:</span> <span class="n">m</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="n">m</span><span class="p">}</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">municipalities</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_value</span> <span class="o">=</span> <span class="n">municipalities</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">municipalities</span> <span class="k">else</span> <span class="kc">None</span>  <span class="c1"># Default to first municipality or None</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">options</span><span class="p">,</span> <span class="n">new_value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Callback to update interactive visualizations</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.callback</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">Output</span><span class="p">(</span><span class="s1">&#39;time-series-plot&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;pie-chart&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;choropleth-winning&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Output</span><span class="p">(</span><span class="s1">&#39;choropleth-turnout&#39;</span><span class="p">,</span> <span class="s1">&#39;figure&#39;</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">Input</span><span class="p">(</span><span class="s1">&#39;year-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="n">Input</span><span class="p">(</span><span class="s1">&#39;municipio-dropdown&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">update_visualizations</span><span class="p">(</span><span class="n">selected_year</span><span class="p">,</span> <span class="n">selected_municipality</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">time_series_chart</span> <span class="o">=</span> <span class="n">plot_aggregated_votes_by_main_party_px</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_re_all_years</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">main_parties</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">selected_municipality</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">election_years</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">pie_chart_per_municipality_per_year</span> <span class="o">=</span> <span class="n">plot_election_pie_chart</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">selected_year</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">selected_municipality</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">df_re_all_years</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">main_parties</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">choropleth_winning_party_per_year</span> <span class="o">=</span> <span class="n">create_winning_party_per_year_choropleth</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">selected_year</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">geojson_data</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">main_parties</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">df_dict</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">df_resultados</span> <span class="o">=</span> <span class="n">df_dict</span><span class="p">[</span><span class="n">selected_year</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">voter_proportion_choropleth</span> <span class="o">=</span> <span class="n">create_voter_turnout_proportion_choropleth</span><span class="p">(</span><span class="n">df_resultados</span><span class="p">,</span> <span class="n">selected_year</span><span class="p">,</span> <span class="n">geojson_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">time_series_chart</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">pie_chart_per_municipality_per_year</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">            <span class="n">choropleth_winning_party_per_year</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">voter_proportion_choropleth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run_server</span><span class="p">()</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Time Series Analysis with Julia and Turing.jl</title>
      <link>http://localhost:1313/posts/20240222_bayesian_time_series_analysis/20240222_bayesian_time_series_analysis/</link>
      <pubDate>Sat, 02 Mar 2024 16:57:07 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240222_bayesian_time_series_analysis/20240222_bayesian_time_series_analysis/</guid>
      <description>This tutorial covers the fundamentals of Bayesian approaches to time series, model construction, and practical implementation, using real-world data for hands-on learning.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="introduction">Introduction</h2>
<p>In this tutorial, an AR(p) (Autoregressive model of order <em>p</em>) is employed to analyze the trneds of a time series and forecast the behavior of the signal.</p>
<p>Auto-regressive models are based on the assumption the behavior of a time series or signal depends on past values. The order of the AR model tells &ldquo;how far back&rdquo; the past values will affect the current value.</p>
<h4 id="credits">Credits</h4>
<p>This exercise is mostly following <a href="https://youtu.be/vfTYCm_Fr8I?si=D3Grgk82tV_Qzdxw">this tutorial</a>.</p>
<h3 id="definition">Definition</h3>
<p>The <em>AR(p)</em> model is defined as:</p>
<p>$$
X_t = \sum_{i=1}^{p} \phi_i X_{t-i} + \varepsilon_t
$$</p>
<p>where $\varepsilon \sim \mathcal{N}(0,\sigma^2)$ is the model uncertainty represented as white Gaussian noise, i.e. it follows a normal distribution of mean $\mu=0$ and standard deviation $\sigma$.</p>
<p>It follows that an <em>AR(2)</em> model is defined as:</p>
<p>$$
X_t = \phi_1 X_{t-1} + \phi_2 X_{t-2} + \varepsilon_t
$$</p>
<p>Naturally, we want to find the parameters $\theta={\phi_1, \phi_2,\sigma}$. Since these are unobserved quantities of interest, we need to use an inference method to reveal these parameters. We will use Bayesian inference to achieve this goal.</p>
<h2 id="data-exploration">Data Exploration</h2>
<p>For this example, I will generate artificial data. This will be done by first defining some values for the parameters $\theta$ and then we will generate random data using those parameters by initializing the $X_1, X_2$ values, and then applying the AR(2) equation to generate the subsequent values.</p>
<p>First, we import the relevant packages.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">LaTeXStrings</span><span class="p">,</span> <span class="n">Random</span><span class="p">,</span> <span class="n">DataFrames</span>
</span></span><span class="line"><span class="cl"><span class="n">Random</span><span class="o">.</span><span class="n">seed!</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>TaskLocalRNG()
</code></pre>
<p>Now we create some artificial data. The steps involved in this are as follows:</p>
<ol>
<li>Define some values for the parameters $\theta$</li>
<li>Set the number of timesteps <em>t</em></li>
<li>Initialize an empty vector of size $\mathbb{R}^{t+p}$</li>
<li>Initialize the first two $X$ values with randomly generated numbers using <code>rand</code></li>
<li>Populate the vector by using the equation for $X_t$</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># define true values for θ</span>
</span></span><span class="line"><span class="cl"><span class="n">true_phi_1</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.4</span>
</span></span><span class="line"><span class="cl"><span class="n">true_phi_2</span> <span class="o">=</span> <span class="mf">0.3</span>
</span></span><span class="line"><span class="cl"><span class="n">true_sigma</span> <span class="o">=</span> <span class="mf">0.12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define the time steps</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c"># create an empty X vector</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span> <span class="o">=</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}(</span><span class="nb">undef</span><span class="p">,</span> <span class="n">time</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># initialize the X vector with two random values at time steps 1 and 2</span>
</span></span><span class="line"><span class="cl"><span class="c"># to do this, use a random normally distributed number with mean zero and standard deviation σ, i.e., ε~N(0, σ)</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">true_sigma</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">true_sigma</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># populate vector X</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">t</span> <span class="k">in</span> <span class="mi">3</span><span class="o">:</span><span class="p">(</span><span class="n">time</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="n">true_phi_1</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">	<span class="n">true_phi_2</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">	<span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">true_sigma</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>	
</span></span></code></pre></div><h3 id="visualize-the-artificial-data">Visualize the (Artificial) Data</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">p_data</span> <span class="o">=</span> <span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="k">end</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c"># xlims = (0, 60),</span>
</span></span><span class="line"><span class="cl">    <span class="c"># ylims = (-0.6, 0.6),</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Bayesian Autoregressive AR(2) Model&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">xlabel</span> <span class="o">=</span> <span class="sa">L</span><span class="s">&#34;t&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">ylabel</span> <span class="o">=</span> <span class="sa">L</span><span class="s">&#34;X_t&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">widen</span> <span class="o">=</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240222_Bayesian_Time_Series_Analysis/output_5_0.svg" type="" alt="svg"  /></p>
<h2 id="modeling">Modeling</h2>
<p>The next step is to construct our probabilistic model. Again, the goal here is to infer the values of the model parameters $\theta$. Once we have inferred these parameters, we can make probabilistic predictions on the future behavior of the signal $X$.</p>
<h3 id="bayesian-model">Bayesian model</h3>
<p>Since we are using a Bayesian approach, our goal, in Bayesian terms, is to find the <em>posterior distribution</em> of the parameters $\theta$, given a prior distribution, or prior knowledge, of the parameters before making any observations, i.e., seeing any data, and also a likelihood function, which reflects what kind of distribution (we assume) that the data is sourced from. Another way of understanding the likelihood function is the probability of making a set of observations $X$ given the parameters $\theta$.</p>
<p>This relationship is established by Bayes&rsquo; Theorem:</p>
<p>$$
P(\theta | X) \propto P(X | \theta)P(\theta)
$$</p>
<p>In summary, constructing the Bayesian model in this case comprises a selection of prior distributions for our unknown parameters $\theta$ and a likelihood function. We will do this using the <code>Turing.jl</code> package.</p>
<p>The model therefore will consist of the prior distributions:</p>
<p>$$
\begin{align*}
\phi_1 &amp; \sim \mathcal{N}(0, 1) \
\phi_2 &amp; \sim \mathcal{N}(0, 1) \
\sigma &amp; \sim \text{Exp}(1)
\end{align*}
$$</p>
<p>And the likelihood:</p>
<p>$$
X_t \sim \mathcal{N}(\mu_t, \sigma)
$$</p>
<p>where $\mu_t = \sum_{i=1}^{p} \phi_i X_{t-i}$ is the mean function of the distribution that governs X_t.</p>
<h4 id="a-comment-on-the-choice-of-priors">A comment on the choice of priors</h4>
<p>For autoregressive parameters, using a normal distribution is a common choice. This is because the normal distribution is convenient and allows for a range of plausible values.</p>
<p>For the prior on the model uncertainty, the exponential distribution is sometimes used for non-negative parameters and has a similar role to the inverse gamma.</p>
<p>Furthermore, the inverse gamma distribution is often chosen as a prior for the standard deviation because it is conjugate to the normal likelihood. This means that the posterior distribution will have a known form, making computations more tractable.</p>
<h3 id="bayesian-model-using-turingjl">Bayesian model using <code>Turing.jl</code></h3>
<p>Now we proceed to set up the model using the <code>Turing.jl</code> package.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">ar</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>    <span class="c"># pass the data X and the time vector</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># priors</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">phi_1</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">phi_2</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">sigma</span> <span class="o">~</span> <span class="n">Exponential</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># likelihood</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># initialize with random initial values</span>
</span></span><span class="line"><span class="cl">		<span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">X</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># populate with samples</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">3</span><span class="o">:</span><span class="p">(</span><span class="n">time</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">mu</span> <span class="o">=</span> <span class="n">phi_1</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">phi_2</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">end</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span></code></pre></div><pre><code>ar (generic function with 2 methods)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">ar</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sampler</span> <span class="o">=</span> <span class="n">NUTS</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1_000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">samples</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.4
[32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:01[39m





Chains MCMC chain (1000×15×1 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 1
Samples per chain = 1000
Wall duration     = 11.59 seconds
Compute duration  = 11.59 seconds
parameters        = phi_1, phi_2, sigma
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m e[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m  [0m ⋯

       phi_1   -0.3830    0.1047    0.0036   836.6151   762.4445    0.9996     ⋯
       phi_2    0.1587    0.1012    0.0035   838.3014   749.6718    1.0002     ⋯
       sigma    0.1083    0.0079    0.0003   755.4034   743.3822    1.0014     ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

       phi_1   -0.5733   -0.4562   -0.3858   -0.3141   -0.1771
       phi_2   -0.0339    0.0913    0.1562    0.2256    0.3549
       sigma    0.0943    0.1030    0.1079    0.1130    0.1257
</code></pre>
<h3 id="visualize-and-summarize-the-results">Visualize and Summarize the Results</h3>
<p>Next we can access the MCMC Diagnostics and generate a summary of the results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240222_Bayesian_Time_Series_Analysis/output_10_0.svg" type="" alt="svg"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">DataFrame</span><span class="p">(</span><span class="n">summarystats</span><span class="p">(</span><span class="n">chain</span><span class="p">))</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>3×8 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">parameters</th><th style = "text-align: left;">mean</th><th style = "text-align: left;">std</th><th style = "text-align: left;">mcse</th><th style = "text-align: left;">ess_bulk</th><th style = "text-align: left;">ess_tail</th><th style = "text-align: left;">rhat</th><th style = "text-align: left;">ess_per_sec</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Symbol" style = "text-align: left;">Symbol</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: left;">phi_1</td><td style = "text-align: right;">-0.383019</td><td style = "text-align: right;">0.104695</td><td style = "text-align: right;">0.00361324</td><td style = "text-align: right;">836.615</td><td style = "text-align: right;">762.444</td><td style = "text-align: right;">0.999585</td><td style = "text-align: right;">72.1655</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: left;">phi_2</td><td style = "text-align: right;">0.158661</td><td style = "text-align: right;">0.101196</td><td style = "text-align: right;">0.00351463</td><td style = "text-align: right;">838.301</td><td style = "text-align: right;">749.672</td><td style = "text-align: right;">1.00021</td><td style = "text-align: right;">72.311</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: left;">sigma</td><td style = "text-align: right;">0.108342</td><td style = "text-align: right;">0.00788622</td><td style = "text-align: right;">0.000291067</td><td style = "text-align: right;">755.403</td><td style = "text-align: right;">743.382</td><td style = "text-align: right;">1.00145</td><td style = "text-align: right;">65.1603</td></tr></tbody></table></div>
<h2 id="predictions">Predictions</h2>
<h3 id="making-predictions">Making Predictions</h3>
<p>To make predictions, the following steps are taken:</p>
<ol>
<li>Set the number of time steps into the future, $t_f$</li>
<li>Initialize an empty matrix for the forecasted $X$ values - This will be a matrix because it will be a collection of vectors. Each vector will represent one sample forecast</li>
<li>Initialize two steps of each of the sample vectors to be generated - In practical terms, initialize the first number of each column; each <em>column</em> will represent a forecast time series</li>
</ol>
<p>Keep in mind that what will be done here is to create samples of the future behavior of the signal $t_f$ number of time steps into the future. To do this, we will generate signals that use the posterior distributions of the parameters $\theta$ by calling the function <code>rand(chain[:,Z,Z])</code> which will randomly pick a number out of the sample pool, effectively &ldquo;sampling&rdquo; from that posterior distribution (sample pool).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">time_future</span> <span class="o">=</span> <span class="mi">15</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">X_future</span> <span class="o">=</span> <span class="kt">Matrix</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}(</span><span class="nb">undef</span><span class="p">,</span> <span class="n">time_future</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">samples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Initialize the first two time steps for every forecast</span>
</span></span><span class="line"><span class="cl"><span class="n">X_future</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span> <span class="o">.=</span> <span class="n">X</span><span class="p">[</span><span class="n">time</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">X_future</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span> <span class="o">.=</span> <span class="n">X</span><span class="p">[</span><span class="n">time</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># populate the forecast vectors by sampling from the posterior sample pool of the parameters θ</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">col</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">	<span class="n">phi_1_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="n">phi_2_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="n">error_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="n">noise_future</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">error_future</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">row</span> <span class="k">in</span> <span class="mi">3</span><span class="o">:</span><span class="p">(</span><span class="n">time_future</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">X_future</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">=</span> 
</span></span><span class="line"><span class="cl">			<span class="n">phi_1_future</span> <span class="o">*</span> <span class="n">X_future</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">+</span> 
</span></span><span class="line"><span class="cl">			<span class="n">phi_2_future</span> <span class="o">*</span> <span class="n">X_future</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">			<span class="n">noise_future</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h4 id="visualize-the-forecast">Visualize the forecast</h4>
<p>Now that we <em>propagated the uncertainty</em> of in the posterior distribution of the parameters $\theta$, we can plot the posterior predictive distribution of $X$, $P(X^*|\theta)$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">time_predict</span> <span class="o">=</span> <span class="n">time</span><span class="o">:</span><span class="p">(</span><span class="n">time</span> <span class="o">+</span> <span class="n">time_future</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">	<span class="n">plot!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="n">time_predict</span><span class="p">,</span> <span class="n">X_future</span><span class="p">[</span><span class="mi">2</span><span class="o">:</span><span class="k">end</span><span class="p">,</span> <span class="n">i</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="c"># predictions</span>
</span></span><span class="line"><span class="cl">	<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="ss">:green</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.1</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p_data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># visualize mean values for predictions</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">X_future_mean</span> <span class="o">=</span> <span class="p">[</span><span class="n">mean</span><span class="p">(</span><span class="n">X_future</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">2</span><span class="o">:</span><span class="p">(</span><span class="n">time_future</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="n">time_predict</span><span class="p">,</span> <span class="n">X_future_mean</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">	<span class="n">color</span> <span class="o">=</span> <span class="ss">:red</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">	<span class="n">linestyle</span> <span class="o">=</span> <span class="ss">:dot</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240222_Bayesian_Time_Series_Analysis/output_15_0.svg" type="" alt="svg"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Poisson Regression with Julia and Turing.jl</title>
      <link>http://localhost:1313/posts/20240217_bayesian_poisson_regression/20240217_bayesian_poisson_regression/</link>
      <pubDate>Sat, 17 Feb 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240217_bayesian_poisson_regression/20240217_bayesian_poisson_regression/</guid>
      <description>Explore Bayesian Poisson regression for modeling count data with Julia and Turing.jl. This tutorial includes model setup, implementation, and performance assessment with a practical example.</description>
      <content:encoded><![CDATA[<hr>
<p>In this example, I am following the tutorials found in:</p>
<ul>
<li><a href="https://turinglang.org/dev/tutorials/07-poisson-regression/">Turing.jl - Bayesian Poisson Regression</a></li>
<li><a href="https://www.pymc.io/projects/examples/en/latest/generalized_linear_models/GLM-poisson-regression.html">PyMC - GLM: Poisson Regression</a></li>
</ul>
<p>Both examples show the interaction between some variables and a discrete outcome. In this case, the outcome is the number of sneezes per day (i.e. a discrete outcome) in some study subjects, and whether or not they take antihistamine medicine and whether or not they drink alcohol.</p>
<p>This example explores how these factors, and more specifically, the combination of these factors, affect the number of times a person sneezes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">CSV</span><span class="p">,</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">Plots</span><span class="p">,</span> <span class="n">Random</span>
</span></span><span class="line"><span class="cl"><span class="n">Random</span><span class="o">.</span><span class="n">seed!</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>TaskLocalRNG()
</code></pre>
<h2 id="collect-generate-the-data">Collect (generate) the data</h2>
<p>In this example, we will generate the data in the same way as in the tutorials:</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:center">No Alcohol</th>
<th style="text-align:center">Alcohol</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>No Meds</strong></td>
<td style="text-align:center">6</td>
<td style="text-align:center">36</td>
</tr>
<tr>
<td style="text-align:left"><strong>Meds</strong></td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
<p>Those values will be used to create the artificial data by generating Poisson-distributed random samples.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">theta_noalc_nomed</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl"><span class="n">theta_noalc_med</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">theta_alc_nomed</span> <span class="o">=</span> <span class="mi">36</span>
</span></span><span class="line"><span class="cl"><span class="n">theta_alc_med</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ns</span> <span class="o">=</span> <span class="mi">500</span>    <span class="c"># number of samples</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># create a data frame</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">hcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">vcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_noalc_med</span><span class="p">),</span> <span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_alc_med</span><span class="p">),</span> <span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_noalc_nomed</span><span class="p">),</span> <span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">rand</span><span class="p">(</span><span class="n">Poisson</span><span class="p">(</span><span class="n">theta_alc_nomed</span><span class="p">),</span> <span class="n">ns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">vcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">vcat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">falses</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">trues</span><span class="p">(</span><span class="n">ns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span> <span class="ss">:auto</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># assign names to headers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">head_names</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:n_sneezes</span><span class="p">,</span> <span class="ss">:alcohol</span><span class="p">,</span> <span class="ss">:nomeds</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sneeze_data</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">head_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">first</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>10×3 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">n_sneezes</th><th style = "text-align: left;">alcohol</th><th style = "text-align: left;">nomeds</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">6</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">7</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">8</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">9</td><td style = "text-align: right;">2</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">10</td><td style = "text-align: right;">2</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td></tr></tbody></table></div>
<h3 id="visualize-the-data">Visualize the data</h3>
<p>Now that we have &ldquo;collected&rdquo; some data on the number of sneezes per day from a number of people, we visualize the data.</p>
<p>The way we are collecting and plotting these data sub-sets is as follows:</p>
<ol>
<li>Call the histogram function</li>
<li>Create a histogram of the dataframe &ldquo;sneeze_data&rdquo; we &ldquo;collected&rdquo; previously</li>
<li>Select a subset of that dataframe</li>
<li>All the rows of the columns where alcohol is <code>false</code> i.e. 0 AND all the rows where no medicine was taken is also <code>false</code></li>
<li>All the rows of the columns where alcohol is <code>false</code> AND all the rows of where medicine is <code>true</code></li>
<li>&hellip; and so on</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># create separate histograms for each case</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p1</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;No alcohol + No Meds&#34;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">&#34;People Count&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p2</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;No alcohol + Meds&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p3</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Alcohol + No Meds&#34;</span><span class="p">,</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Sneezes/Day&#34;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s">&#34;People Count&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p4</span> <span class="o">=</span> <span class="n">histogram</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:alcohol</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">.&amp;</span> <span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">:</span><span class="p">,</span><span class="ss">:nomeds</span><span class="p">]</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">),</span> <span class="ss">:n_sneezes</span><span class="p">];</span> <span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Alcohol + Meds&#34;</span><span class="p">,</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Sneezes/Day&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">,</span> <span class="n">p4</span><span class="p">;</span> <span class="n">layout</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240217_Bayesian_Poisson_Regression/output_5_0.svg" type="" alt="svg"  /></p>
<h3 id="interpreting-the-data">Interpreting the data</h3>
<p>The histograms show that the data from the &ldquo;study&rdquo; resembles a Poisson distribution (as mentioned in the PyMC tutorial, this is obvious, because that&rsquo;s how the data is generated!). Furthermore, the data is telling us something:</p>
<ul>
<li>Looking at the plot for &ldquo;no alcohol and medicine&rdquo; it is clear that most people reported very few sneezes; notice how the histogram skews towards large counts (of people) for very few sneezes</li>
<li>On the other hand, notice how the &ldquo;alcohol and <em>no</em> medicine&rdquo; seems to tell us that many reported somewhere around 35 sneezes per day</li>
</ul>
<p>Again, we can start thinking of a pattern just by looking at the data, and it seems like the data is telling us that if you don&rsquo;t drink alcohol and take antihistamines, you are less likely to be sneezing around than if you drink alcohol and don&rsquo;t take any allergy meds. Makes sense, right?</p>
<h2 id="model">Model</h2>
<p>We established that the data looks like it could be modelled as a Poisson distribution. Thus, we can define our probabilistic model as follows:</p>
<p>$$Y_{obs} \sim Poisson(\lambda)$$</p>
<p>$$\log(\lambda) = \theta&rsquo;\mathbf{x} = \alpha + \beta&rsquo; \mathbf{x}$$</p>
<p>What the above means is that we assume that the observed data outcomes, i.e., the number of sneezes per day, follow a Poisson distribution, which is a discrete probability distribution that models the number of events that occur in a fixed interval of time or space. The rate or intensity of the events, $\lambda$, depends on the predictor variables (the input data) $\mathcal{x}$, such as the season, the temperature, or, in our case, whether a person ingested alcohol and whether the person took antihistamines.</p>
<p>The linear predictor $\theta&rsquo; \mathcal{x}$ is the function that links the predictor variables to the rate parameter, where $\theta = {\alpha, \beta&rsquo;}$ are the parameters of the model.</p>
<p>Looking at the structure of the linear relationship between the paramters of the model, and the predictors:</p>
<p>$$\log(\lambda) = \alpha + \beta&rsquo; \mathcal{x}$$</p>
<p>we can understand that the parameter $\alpha$ is the intercept, which is the expected number of sneezes when all the predictor variables are zero. The parameter $\beta&rsquo;$ is a vector of coefficients, which measure the effect of each predictor variable $\mathcal{x}$ on the number of sneezes. The log link function ensures that the rate parameter $\lambda$ is always positive and allows for multiplicative effects of the predictor variables on the response variable.</p>
<h3 id="define-the-model-with-turingjl">Define the model with <code>Turing.jl</code></h3>
<p>Now that we know how we are modeling our data, we use the package <code>Turing.jl</code> to define the model. <code>Turing.jl</code> is a tool that helps us write models in Julia and find the best parameters for them.</p>
<p>The model has two parts: the prior and the likelihood. The prior is what we think or guess about the parameters before we see the data. The likelihood is how likely the data is under the parameters. The parameters are the numbers that control the model, such as the rate of sneezes.</p>
<p>We use the Poisson distribution for the likelihood, because it is good for counting things, like sneezes. The Poisson distribution has one parameter, the rate of sneezes. The higher the rate, the more sneezes we expect.</p>
<p>We use any distribution for the prior, depending on how much we know about the parameters. If we know nothing, we use a flat prior, which does not favor any value. The prior affects the final answer, because it is our starting point.</p>
<p>We use Bayes’ theorem to combine the prior and the likelihood and get the final answer. The final answer is the posterior, which is what we believe about the parameters after we see the data. The posterior is the best fit for the model and the data.</p>
<p><strong>Let&rsquo;s crank up the Bayes!</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">poisson</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># define the priors</span>
</span></span><span class="line"><span class="cl">		<span class="n">alpha</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">alcohol</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">nomeds</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c"># alc_med ~ Normal(0,1)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c"># define the likelihood</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	        <span class="n">log_lambda</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">+</span> <span class="n">alcohol</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">nomeds</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl">	        <span class="n">lambda</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">log_lambda</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	        <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Poisson</span><span class="p">(</span><span class="n">lambda</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span></code></pre></div><pre><code>poisson (generic function with 2 methods)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># pass the data to the model function</span>
</span></span><span class="line"><span class="cl">	<span class="c"># pass the predictor data as a Matrix for efficiency</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">poisson</span><span class="p">(</span><span class="kt">Matrix</span><span class="p">(</span><span class="n">sneeze_data</span><span class="p">[</span><span class="o">!</span><span class="p">,[</span><span class="ss">:alcohol</span><span class="p">,</span> <span class="ss">:nomeds</span><span class="p">]</span> <span class="p">]),</span> <span class="n">sneeze_data</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="ss">:n_sneezes</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># select the sampler</span>
</span></span><span class="line"><span class="cl"><span class="n">sampler</span> <span class="o">=</span> <span class="n">NUTS</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># define the number of sampler</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># set number of chains</span>
</span></span><span class="line"><span class="cl"><span class="n">num_chains</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c"># crank up the Bayes!</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="n">samples</span><span class="p">,</span> <span class="n">num_chains</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.00625
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[32mSampling (8 threads): 100%|█████████████████████████████| Time: 0:00:00[39m





Chains MCMC chain (1000×15×8 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 8
Samples per chain = 1000
Wall duration     = 13.66 seconds
Compute duration  = 100.67 seconds
parameters        = alpha, alcohol, nomeds
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m  ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m[0m ⋯

       alpha   -0.5025    0.0277    0.0005   2943.5608   2841.2874    1.0030   ⋯
     alcohol    1.7333    0.0186    0.0003   3801.1996   3652.2403    1.0022   ⋯
      nomeds    2.3348    0.0236    0.0004   2901.3750   3410.6453    1.0020   ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

       alpha   -0.5568   -0.5212   -0.5023   -0.4839   -0.4486
     alcohol    1.6974    1.7205    1.7331    1.7458    1.7698
      nomeds    2.2891    2.3189    2.3346    2.3506    2.3824
</code></pre>
<p><strong>NOTE:</strong> The above routine employs the MCMCThreads method to sample multiple chains. However, in order to implement this, one needs to change the environment variables for the number of threads Julia can use. These two threads might shed some light as to how to achieve this:</p>
<ol>
<li><a href="https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading">https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading</a></li>
<li><a href="https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794">https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794</a></li>
</ol>
<p>Of course, if you don&rsquo;t want to bother, then just change the last two functional lines in the cell above so that they read:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">	<span class="c"># set number of chains - comment this out:</span>
</span></span><span class="line"><span class="cl">	<span class="c"># num_chains = 8</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c"># crank up the Bayes! - delete MCMCThreads() and num_chains</span>
</span></span><span class="line"><span class="cl">	<span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">samples</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="visualize-the-results">Visualize the results</h3>
<p>We can see above that we have obtained a sample pool of the posterior distribution of the parameters. This is what we were looking for. What this means is that now we have a posterior distribution (in the form of a sample pool), which we can also summarize with summary statistics.</p>
<p>Let&rsquo;s look at the diagnostics plots and the summary statistics.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240217_Bayesian_Poisson_Regression/output_13_0.svg" type="" alt="svg"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">DataFrame</span><span class="p">(</span><span class="n">summarystats</span><span class="p">(</span><span class="n">chain</span><span class="p">))</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>3×8 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">parameters</th><th style = "text-align: left;">mean</th><th style = "text-align: left;">std</th><th style = "text-align: left;">mcse</th><th style = "text-align: left;">ess_bulk</th><th style = "text-align: left;">ess_tail</th><th style = "text-align: left;">rhat</th><th style = "text-align: left;">ess_per_sec</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Symbol" style = "text-align: left;">Symbol</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: left;">alpha</td><td style = "text-align: right;">-0.502519</td><td style = "text-align: right;">0.0276553</td><td style = "text-align: right;">0.000511069</td><td style = "text-align: right;">2943.56</td><td style = "text-align: right;">2841.29</td><td style = "text-align: right;">1.00298</td><td style = "text-align: right;">29.2397</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: left;">alcohol</td><td style = "text-align: right;">1.7333</td><td style = "text-align: right;">0.0186097</td><td style = "text-align: right;">0.000301611</td><td style = "text-align: right;">3801.2</td><td style = "text-align: right;">3652.24</td><td style = "text-align: right;">1.00224</td><td style = "text-align: right;">37.759</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: left;">nomeds</td><td style = "text-align: right;">2.3348</td><td style = "text-align: right;">0.0236269</td><td style = "text-align: right;">0.000436385</td><td style = "text-align: right;">2901.38</td><td style = "text-align: right;">3410.65</td><td style = "text-align: right;">1.00197</td><td style = "text-align: right;">28.8207</td></tr></tbody></table></div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># taking the first chain</span>
</span></span><span class="line"><span class="cl"><span class="n">c1</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="o">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Calculating the exponentiated means</span>
</span></span><span class="line"><span class="cl"><span class="n">b0_exp</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">c1</span><span class="p">[</span><span class="ss">:alpha</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="n">b1_exp</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">c1</span><span class="p">[</span><span class="ss">:alcohol</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="n">b2_exp</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">c1</span><span class="p">[</span><span class="ss">:nomeds</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;The exponent of the mean of the weights (or coefficients) are: </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;b0: &#34;</span><span class="p">,</span> <span class="n">b0_exp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;b1: &#34;</span><span class="p">,</span> <span class="n">b1_exp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="s">&#34;b2: &#34;</span><span class="p">,</span> <span class="n">b2_exp</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>The exponent of the mean of the weights (or coefficients) are: 

b0: 0.604415461752317
b1: 5.658573583760772
b2: 10.342642711232362
</code></pre>
<p>Notice how we are <strong>not</strong> recovering the original $\lambda$ values that were used to create this data set, i.e.:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">	<span class="n">theta_noalc_nomed</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl">	<span class="n">theta_noalc_med</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="n">theta_alc_nomed</span> <span class="o">=</span> <span class="mi">36</span>
</span></span><span class="line"><span class="cl">	<span class="n">theta_alc_med</span> <span class="o">=</span> <span class="mi">3</span>
</span></span></code></pre></div><p>Instead, we are recovering <em>the parameters of the linear function</em>, in other words, $\theta = {\alpha, \beta&rsquo;}$ in the linear relation:</p>
<p>$$\log(\lambda) = \alpha + \beta_1 x_{alc} + \beta_2 x_{meds}$$</p>
<p>where $x_{(\cdot)}$ represents the binary variable of whether the subject took alcohol/medicine or not.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This tutorial shows how to perform Bayesian inference on <em>discrete</em> data, e.g. the record of how many sneezes per day a group of people had, and classified according to their alcohol and medication consumption.</p>
<p>In real-world scenarios, we would obviously not know the parameter values, since this is precisely what we want to find out by incorporating whatever we knew about them into what we observed.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Logistic Regression with Julia and Turing.jl</title>
      <link>http://localhost:1313/posts/20240109_bayesian-logistic-regression/20240109_bayesian-logistic-regression/</link>
      <pubDate>Tue, 09 Jan 2024 11:57:07 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20240109_bayesian-logistic-regression/20240109_bayesian-logistic-regression/</guid>
      <description>Applying Turing.jl package in Julia for a probabilistic approach to a classification problem on a real-world dataset.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="problem-statement">Problem Statement</h2>
<p>You are interested in studying the factors that influence the likelihood of heart disease among patients.</p>
<p>You have a dataset of 303 patients, each with 14 variables: age, sex, chest pain type, resting blood pressure, serum cholesterol, fasting blood sugar, resting electrocardiographic results, maximum heart rate achieved, exercise induced angina, oldpeak, slope, number of major vessels, thalassemia, and diagnosis of heart disease.</p>
<p>You want to use Bayesian logistic regression to model the probability of heart disease (the outcome variable) as a function of some or all of the other variables (the predictor variables).</p>
<p>You also want to compare different models and assess their fit and predictive performance.</p>
<h2 id="bayesian-workflow">Bayesian Workflow</h2>
<p>For this project, I will try to follow this workflow:</p>
<ol>
<li>
<p>Data exploration: Explore the data using descriptive statistics and visualizations to get a sense of the distribution, range, and correlation of the variables. Identify any outliers, missing values, or potential errors in the data. Transform or standardize the variables if needed.</p>
</li>
<li>
<p>Model specification: Specify a probabilistic model that relates the outcome variable to the predictor variables using a logistic regression equation. Choose appropriate priors for the model parameters, such as normal, student-t, or Cauchy distributions. You can use the <code>brms</code> package in Julia to define and fit Bayesian models using a formula syntax similar to <code>lme4</code>. However, try to use <code>Turing.jl</code></p>
</li>
<li>
<p>Model fitting: Fit the model using a sampling algorithm such as Hamiltonian Monte Carlo (HMC) or No-U-Turn Sampler (NUTS). You can use the <code>DynamicHMC</code> or <code>Turing.jl</code> package in Julia to implement these algorithms. Check the convergence and mixing of the chains using diagnostics such as trace plots, autocorrelation plots, effective sample size, and potential scale reduction factor. You can use the <code>MCMCDiagnostics</code> or the included diagnostics features in <code>Turing.jl</code> package in Julia to compute these diagnostics.</p>
</li>
<li>
<p>Model checking: Check the fit and validity of the model using posterior predictive checks, residual analysis, and sensitivity analysis. You can use the <code>PPCheck</code> package in Julia to perform posterior predictive checks, which compare the observed data to data simulated from the posterior predictive distribution. You can use the <code>BayesianRidgeRegression</code> package in Julia to perform residual analysis, which plots the residuals against the fitted values and the predictor variables. You can use the <code>Sensitivity</code> package in Julia to perform sensitivity analysis, which measures how the posterior distribution changes with respect to the prior distribution or the likelihood function.</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># import packages</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">CSV</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">LaTeXStrings</span><span class="p">,</span> <span class="n">Distributions</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Images</span><span class="p">,</span> <span class="n">ImageIO</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Random</span><span class="o">:</span> <span class="n">seed!</span>
</span></span><span class="line"><span class="cl"><span class="n">seed!</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Random.TaskLocalRNG()
</code></pre>
<h2 id="data-exploration">Data Exploration</h2>
<p>After &ldquo;collecting&rdquo; the data, we may import it and arrange it so we can use it further.</p>
<p>The data set can be found in this <a href="https://www.kaggle.com/datasets/aavigan/cleveland-clinic-heart-disease-dataset">Kaggle link</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s">&#34;data/processed_cleveland.csv&#34;</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">map!</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">);</span> <span class="c"># make the outcome binary</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>303×14 DataFrame</span></div><div style = "float: right;"><span style = "font-style: italic;">278 rows omitted</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">age</th><th style = "text-align: left;">sex</th><th style = "text-align: left;">cp</th><th style = "text-align: left;">trestbps</th><th style = "text-align: left;">chol</th><th style = "text-align: left;">fbs</th><th style = "text-align: left;">restecg</th><th style = "text-align: left;">thalach</th><th style = "text-align: left;">exang</th><th style = "text-align: left;">oldpeak</th><th style = "text-align: left;">slope</th><th style = "text-align: left;">ca</th><th style = "text-align: left;">thal</th><th style = "text-align: left;">num</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "String1" style = "text-align: left;">String1</th><th title = "String1" style = "text-align: left;">String1</th><th title = "Int64" style = "text-align: left;">Int64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">63</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">145</td><td style = "text-align: right;">233</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">150</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2.3</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">6</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">67</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">160</td><td style = "text-align: right;">286</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">108</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1.5</td><td style = "text-align: right;">2</td><td style = "text-align: left;">3</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">67</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">120</td><td style = "text-align: right;">229</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">129</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2.6</td><td style = "text-align: right;">2</td><td style = "text-align: left;">2</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">37</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3</td><td style = "text-align: right;">130</td><td style = "text-align: right;">250</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">187</td><td style = "text-align: right;">0</td><td style = "text-align: right;">3.5</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">41</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">130</td><td style = "text-align: right;">204</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">172</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.4</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">6</td><td style = "text-align: right;">56</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">120</td><td style = "text-align: right;">236</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">178</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.8</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">7</td><td style = "text-align: right;">62</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">268</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">160</td><td style = "text-align: right;">0</td><td style = "text-align: right;">3.6</td><td style = "text-align: right;">3</td><td style = "text-align: left;">2</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">8</td><td style = "text-align: right;">57</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">120</td><td style = "text-align: right;">354</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">163</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.6</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">9</td><td style = "text-align: right;">63</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">130</td><td style = "text-align: right;">254</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">147</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.4</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">10</td><td style = "text-align: right;">53</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">203</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">155</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3.1</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">11</td><td style = "text-align: right;">57</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">192</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">148</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.4</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">6</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">12</td><td style = "text-align: right;">56</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">140</td><td style = "text-align: right;">294</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">153</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.3</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">13</td><td style = "text-align: right;">56</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3</td><td style = "text-align: right;">130</td><td style = "text-align: right;">256</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">142</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.6</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">6</td><td style = "text-align: right;">1</td></tr><tr><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td><td style = "text-align: right;">&vellip;</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">292</td><td style = "text-align: right;">55</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">132</td><td style = "text-align: right;">342</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">166</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.2</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">293</td><td style = "text-align: right;">44</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">120</td><td style = "text-align: right;">169</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">144</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2.8</td><td style = "text-align: right;">3</td><td style = "text-align: left;">0</td><td style = "text-align: left;">6</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">294</td><td style = "text-align: right;">63</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">187</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">144</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4.0</td><td style = "text-align: right;">1</td><td style = "text-align: left;">2</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">295</td><td style = "text-align: right;">63</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">124</td><td style = "text-align: right;">197</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">136</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">296</td><td style = "text-align: right;">41</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">120</td><td style = "text-align: right;">157</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">182</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">1</td><td style = "text-align: left;">0</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">297</td><td style = "text-align: right;">59</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">164</td><td style = "text-align: right;">176</td><td style = "text-align: right;">1</td><td style = "text-align: right;">2</td><td style = "text-align: right;">90</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.0</td><td style = "text-align: right;">2</td><td style = "text-align: left;">2</td><td style = "text-align: left;">6</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">298</td><td style = "text-align: right;">57</td><td style = "text-align: right;">0</td><td style = "text-align: right;">4</td><td style = "text-align: right;">140</td><td style = "text-align: right;">241</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">123</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0.2</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">299</td><td style = "text-align: right;">45</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">110</td><td style = "text-align: right;">264</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">132</td><td style = "text-align: right;">0</td><td style = "text-align: right;">1.2</td><td style = "text-align: right;">2</td><td style = "text-align: left;">0</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">300</td><td style = "text-align: right;">68</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">144</td><td style = "text-align: right;">193</td><td style = "text-align: right;">1</td><td style = "text-align: right;">0</td><td style = "text-align: right;">141</td><td style = "text-align: right;">0</td><td style = "text-align: right;">3.4</td><td style = "text-align: right;">2</td><td style = "text-align: left;">2</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">301</td><td style = "text-align: right;">57</td><td style = "text-align: right;">1</td><td style = "text-align: right;">4</td><td style = "text-align: right;">130</td><td style = "text-align: right;">131</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">115</td><td style = "text-align: right;">1</td><td style = "text-align: right;">1.2</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">7</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">302</td><td style = "text-align: right;">57</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">130</td><td style = "text-align: right;">236</td><td style = "text-align: right;">0</td><td style = "text-align: right;">2</td><td style = "text-align: right;">174</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">2</td><td style = "text-align: left;">1</td><td style = "text-align: left;">3</td><td style = "text-align: right;">1</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">303</td><td style = "text-align: right;">38</td><td style = "text-align: right;">1</td><td style = "text-align: right;">3</td><td style = "text-align: right;">138</td><td style = "text-align: right;">175</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0</td><td style = "text-align: right;">173</td><td style = "text-align: right;">0</td><td style = "text-align: right;">0.0</td><td style = "text-align: right;">1</td><td style = "text-align: left;">?</td><td style = "text-align: left;">3</td><td style = "text-align: right;">0</td></tr></tbody></table></div>
<p>In the above data frame, the attributes are as follows:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Variable Name</th>
<th style="text-align:center">Role</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">Demographic</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Units</th>
<th style="text-align:center">Missing Values</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">age</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center">Age</td>
<td style="text-align:center"></td>
<td style="text-align:center">years</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">sex</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Categorical</td>
<td style="text-align:center">Sex</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">cp</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Categorical</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">trestbps</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center"></td>
<td style="text-align:center">resting blood pressure (on admission to the hospital)</td>
<td style="text-align:center">mm Hg</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">chol</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center"></td>
<td style="text-align:center">serum cholestoral</td>
<td style="text-align:center">mg/dl</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">fbs</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Categorical</td>
<td style="text-align:center"></td>
<td style="text-align:center">fasting blood sugar &gt; 120 mg/dl</td>
<td style="text-align:center"></td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">restecg</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Categorical</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">thalach</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center"></td>
<td style="text-align:center">maximum heart rate achieved</td>
<td style="text-align:center"></td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">exang</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Categorical</td>
<td style="text-align:center"></td>
<td style="text-align:center">exercise induced angina</td>
<td style="text-align:center"></td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">oldpeak</td>
<td style="text-align:center">Feature</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center"></td>
<td style="text-align:center">ST depression induced by exercise relative to rest</td>
<td style="text-align:center"></td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Complete attribute documentation:</p>
<pre><code>1. age: age in years
2. sex: sex (1 = male; 0 = female)
3. cp: chest pain type
	- Value 1: typical angina
	- Value 2: atypical angina
	- Value 3: non-anginal pain
	- Value 4: asymptomatic
4. trestbps: resting blood pressure (in mm Hg on admission to the
hospital)
5. chol: serum cholestoral in mg/dl
6.fbs: fasting blood sugar &gt; 120 mg/dl (1 = true; 0 = false)
7. restecg: resting electrocardiographic results
	- Value 0: normal
	- Value 1: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of &gt; 0.05 mV)
	- Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria
8. thalach: maximum heart rate achieved
9. exang: exercise induced angina (1 = yes; 0 = no)
10. oldpeak: ST depression induced by exercise relative to rest
11. slope: the slope of the peak exercise ST segment
	- Value 1: upsloping
	- Value 2: flat
	- Value 3: downsloping
12. ca: number of major vessels (0-3) colored by flourosopy (for calcification of vessels)
13. thal: results of nuclear stress test (3 = normal; 6 = fixed defect; 7 = reversable defect)
14. num: target variable representing diagnosis of heart disease (angiographic disease status) in any major vessel
	- Value 0: &lt; 50% diameter narrowing
	- Value 1: &gt; 50% diameter narrowing
</code></pre>
<h2 id="data-interpretation">Data Interpretation</h2>
<p>After collecting the data, it has been imported as a Data Frame. Now, to understand what we will do with this exercise, we need to analyze the data by means of Bayesian Logistic Regression.</p>
<p>With this type of analysis, we can make predictions on (typically) binary outcomes, based on a set of parameters. In this particular case, we are interested in predicting whether a patient will have heart disease based on a set of parameters such as age, chest pain, blood pressure, etc.</p>
<p>In terms of the data available, we have a set of 303 observations (303 patients) whose symptoms and circumstances have been recorded, and the <strong>outcome</strong> is the heart disease diagnosis. To simplify things, this data set has a binary outcome, i.e. heart disease <em>present/not present</em>.</p>
<p>Additionally, this study is divided in two parts: first, I will set up the logistic regression model to include only one predictor, i.e., <strong>age</strong>. Afterwards, an analysis will be performed including two or more predictors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># find the range for the age, to set the plot limits below</span>
</span></span><span class="line"><span class="cl"><span class="c"># min_age = minimum(df.age)</span>
</span></span><span class="line"><span class="cl"><span class="n">min_age</span> <span class="o">=</span> <span class="mi">15</span> 
</span></span><span class="line"><span class="cl"><span class="n">max_age</span> <span class="o">=</span> <span class="mi">85</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># visualize data</span>
</span></span><span class="line"><span class="cl"><span class="n">p_data</span> <span class="o">=</span> <span class="n">scatter</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">xlims</span> <span class="o">=</span> <span class="p">(</span><span class="n">min_age</span><span class="p">,</span> <span class="n">max_age</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="n">color</span> <span class="o">=</span> <span class="ss">:red</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">markersize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Probability of Heart Disease&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Age (years)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ylabel</span> <span class="o">=</span> <span class="s">&#34;Probability of Heart Disease&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">widen</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">dpi</span> <span class="o">=</span> <span class="mi">150</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_7_0.svg" type="" alt="svg"  /></p>
<h2 id="model-specification">Model Specification</h2>
<p>In this stage of the workflow, we will specify the Bayesian model and then use <code>Turing.jl</code> to program it in Julia.</p>
<p>The model I will use for this analysis is a Bayesian Logistic Regression model, which relates the probability of heart disease to a <em>linear combination of the predictor variables</em>, using a logistic function. The model can be written as:</p>
<p>$$\begin{aligned}
y_i &amp;\sim Bernoulli(p_i) \\
p_i &amp;= \frac{1}{1+e^{-\eta_i}} \\
\eta_i &amp;= \alpha + {\beta_1 x_{i,1}} + {\beta_2 x_{i,2}} + \ldots + {\beta_{13} x_{i,13}} \\
\alpha &amp;\sim \mathcal{N}(\mu_\alpha,\sigma_\sigma) \\
\beta_j &amp;\sim \mathcal{N}(\mu_{\beta},\sigma_{\beta}) \\
\end{aligned}$$</p>
<p>where $y_i$ is the outcome for the <em>i-th</em> patient, $p_i$ is the probability of heart disease for the <em>i-th</em> patient, $\eta_i$ is the linear predictor for the <em>i-th</em> patient, $\alpha$ and $\beta_j$ are the intercept and coefficient for the <em>j-th</em> predictor variable, respectively, and $x_{ij}$ is the value of the <em>j-th</em> predictor variable for the <em>i-th</em> patient.</p>
<p>The assumptions that I am making are:</p>
<ol>
<li>The outcome variable follows a Bernoulli distribution, i.e. $y_i \sim Bernoulli(p_i)$, which is appropriate for binary outcomes</li>
<li>The predictor variables are linearly related to the log-odds of the outcome variable, i.e. $\log(\frac{p}{1-p})$ which is a common assumption for logistic regression models</li>
<li>The prior distributions for the model parameters are uniform, which are weakly informative and reflect my prior beliefs about the plausible range of the parameters</li>
</ol>
<p>Regarding point (2):</p>
<p>That statement means that the log-odds of the outcome variable (the log of the odds ratio) can be expressed as a linear function of the predictor variables. Mathematically, this can be written as:</p>
<p>$$\log(\frac{p}{1-p}) = \alpha + \beta_1 x_1 + \beta_2 x_2 + \ldots + \beta_k x_k$$</p>
<p>where $p$ is the probability of the outcome variable being 1, $x_1, x_2, \ldots, x_k$ are the predictor variables, and $\alpha, \beta_1, \beta_2, \ldots, \beta_k$ are the coefficients (parameters).</p>
<p>This assumption implies that the effect of each predictor variable on the log-odds of the outcome variable is contant, regardless of the values of the other predictor variables. It also implies that the relationship between the predictor variables and the probability of the outcome variable is non-linear, as the probability is obtained by applying the inverse of the log-odds function, which is the logistic function:</p>
<p>$$p = \frac{1}{1+e^{-(\alpha + \beta_1 x_1 + \beta_2 x_2 + \ldots + \beta_k x_k)}}$$</p>
<p>The logistic function is an S-shaped curve that maps any real number to a value between 0 and 1. It has the property that as the linear predictor increases, the probability approaches 1, and as the linear predictor decreases, the probability approaches 0.</p>
<h3 id="model-specification-using-turingjl">Model Specification Using <code>Turing.jl</code></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># define the Bayesian model</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">logit_model</span><span class="p">(</span><span class="n">predictors</span><span class="p">,</span> <span class="n">disease</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># priors</span>
</span></span><span class="line"><span class="cl">	<span class="n">α</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">β</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># likelihood</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">η</span> <span class="o">=</span> <span class="n">α</span> <span class="o">.+</span> <span class="n">β</span><span class="o">.*</span><span class="n">predictors</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">./</span> <span class="p">(</span><span class="mi">1</span> <span class="o">.+</span> <span class="n">exp</span><span class="o">.</span><span class="p">(</span><span class="o">-</span><span class="n">η</span><span class="p">))</span>     <span class="c"># remember to include the &#34;.&#34;!</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">eachindex</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">disease</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Bernoulli</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>logit_model (generic function with 2 methods)
</code></pre>
<h4 id="crank-up-the-bayes">Crank up the Bayes!</h4>
<p>Run the model using <code>sample(model, sampler, opt_argument, samples, chains)</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># infer posterior probability</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">logit_model</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sampler</span> <span class="o">=</span> <span class="n">NUTS</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1_000</span>
</span></span><span class="line"><span class="cl"><span class="n">num_chains</span> <span class="o">=</span> <span class="mi">8</span> 		<span class="c"># set the number of chains</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">sampler</span><span class="p">,</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="n">samples</span><span class="p">,</span> <span class="n">num_chains</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.0125
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.05
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.025
[32mSampling (8 threads): 100%|█████████████████████████████| Time: 0:00:01[39m





Chains MCMC chain (1000×14×8 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 8
Samples per chain = 1000
Wall duration     = 13.18 seconds
Compute duration  = 100.1 seconds
parameters        = α, β
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m  ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m[0m ⋯

           α   -3.0326    0.7453    0.0210   1242.6057   1246.3034    1.0043   ⋯
           β    0.0524    0.0134    0.0004   1224.4182   1259.7727    1.0037   ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

           α   -4.4814   -3.5432   -3.0127   -2.5183   -1.5973
           β    0.0264    0.0432    0.0521    0.0617    0.0789
</code></pre>
<p><strong>NOTE</strong>: The above routine employs the <code>MCMCThreads()</code> method to sample multiple chains. However, to implement this, one needs to change the environment variables for the number of threads Julia can use. These two discussions might shed some light as to how to achieve this:</p>
<ol>
<li><a href="https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading">https://docs.julialang.org/en/v1/manual/multi-threading/#man-multithreading</a></li>
<li><a href="https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794">https://discourse.julialang.org/t/julia-num-threads-in-vs-code-windows-10-wsl/28794</a></li>
</ol>
<p>Of course, if you don&rsquo;t want to bother, then just change the last two functional lines in the cell above so that they read:</p>
<pre><code># set number of chains - comment this out:
# num_chains = 8

# crank up the Bayes! - delete MCMCThreads() and num_chains
chain = sample(model, sampler, samples)
</code></pre>
<h4 id="plot-the-mcmc-diagnostics">Plot the MCMC Diagnostics</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span> <span class="n">dpi</span> <span class="o">=</span> <span class="mi">150</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_15_0.svg" type="" alt="png"  /></p>
<h4 id="get-the-summary-statistics">Get the Summary Statistics</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">summarystats</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m  ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m   Float64 [0m [90m Float64 [0m [90m[0m ⋯

           α   -3.0326    0.7453    0.0210   1242.6057   1246.3034    1.0043   ⋯
           β    0.0524    0.0134    0.0004   1224.4182   1259.7727    1.0037   ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<h3 id="plot-and-interpret-the-results">Plot and Interpret the Results</h3>
<p>Ok, how do we interpret the results from a Bayesian approach? Let&rsquo;s start by plotting the results. This will help us understand not only the results, but really grasp the power of a Bayesian model in action.</p>
<p>From a frequentist or a machine learning approach, we would expect to find a function that models the data the best possible way, i.e. fit a model. If we were to visualize it, we would see one single sigmoid curve trying its best to explain the data.</p>
<p>How about this chart here, though? This chart is a collection of possible outcomes given that the <em>parameters</em> $\alpha$ and $\beta$ in this case, are modeled as random variables with some probability distribution. Therefore, there is an uncertainty associated with them. This uncertainty is naturally <em>propagated</em> onto the sigmoid function. Therefore, there is also an uncertainty associated with that sigmoid curve that we are trying to model.</p>
<p>Again, below we can see a collection of possible outcomes given the parameter sample space. There is a darker region where most sigmoid functions turned out, and these tend to be the most probable sigmoid functions, or, in other words, these sigmoid functions are the most probable functions that could fit the data, considering the distributions of the parameters too!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="kt">Int</span><span class="p">(</span><span class="n">samples</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>100
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">x_line</span> <span class="o">=</span> <span class="mi">15</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="n">max_age</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">m</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">line</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">m</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">p</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">line</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">plot!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="n">x_line</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span> <span class="ss">:blue</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">,</span> <span class="n">dpi</span> <span class="o">=</span> <span class="mi">150</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p_data</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_20_0.svg" type="" alt="png"  /></p>
<h3 id="making-predictions">Making Predictions</h3>
<p>So why go through all this trouble, you might be asking. Well, one of the reasons we want to use probabilistic models is, first, to make predictions. But I would go further than that: these models are useful when making informed decisions. Let&rsquo;s try this out.</p>
<p>Let&rsquo;s make predictions for different arbitrary ages (50, 60, 70, 80, 20):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">new_Age</span> <span class="o">=</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">p_disease</span> <span class="o">=</span> <span class="n">fill</span><span class="p">(</span><span class="nb">missing</span><span class="p">,</span> <span class="n">length</span><span class="p">(</span><span class="n">new_Age</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">predictions</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">logit_model</span><span class="p">(</span><span class="n">new_Age</span><span class="p">,</span> <span class="n">p_disease</span><span class="p">),</span> <span class="n">chain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">summarystats</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m [0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m [0m ⋯

  disease[1]    0.3855    0.4867    0.0055   7711.3762        NaN    0.9998    ⋯
  disease[2]    0.5258    0.4994    0.0055   8284.1301        NaN    0.9998    ⋯
  disease[3]    0.6432    0.4791    0.0056   7441.4457        NaN    1.0002    ⋯
  disease[4]    0.7555    0.4298    0.0050   7352.4368        NaN    0.9998    ⋯
  disease[5]    0.1224    0.3277    0.0039   7016.6404        NaN    1.0004    ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<h4 id="interpreting-the-predictions">Interpreting the predictions</h4>
<p>The last operations make predictions of heart diseased based <em>on age only</em>. What the predictions mean is that, given the data, the probability distribution of an individual of age 50 to have heart disease has a mean of 0.379, and a standard deviation of 0.485 (this is highly uncertain, by the way).</p>
<p>Similarly, a 20-year-old individual has a probability with a mean of 0.13 and standard deviation of 0.336 of having heart disease.</p>
<p>These statistics are extremely powerful when you are trying to make decisions, such as when diagnosing Heart Disease. It stands to reason that, if you were a physician, you want to know what your model says might be wrong (or not) with your patient, but you also want to know how much you can trust that prediction.</p>
<p>If your model classifies Patient X as having heart disease, you would probably want to know how sure you are of this. And this certainty comes partially from&hellip; you guessed it: your priors <em>and</em> the data.</p>
<p>In the plot below, we can see the where the predictions lie. Note that these probabilities are on a continuum given by the sigmoid function. But we want our final decision to be a yes or a no. To do that, we need to set a decision threshold.</p>
<p>We will do that at the end of the next section.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="p">(</span><span class="n">new_Age</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pred_mean</span> <span class="o">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="o">:</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">pred_plot</span> <span class="o">=</span> <span class="n">scatter!</span><span class="p">(</span><span class="n">p_data</span><span class="p">,</span> <span class="p">(</span><span class="n">new_Age</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pred_mean</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p_data</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_24_0.svg" type="" alt="png"  /></p>
<h2 id="model-specification-using-multiple-predictors">Model Specification Using Multiple Predictors</h2>
<h3 id="some-data-cleaning">Some Data Cleaning</h3>
<p>In this part, I am using the <code>Turing.jl</code> documentation tutorial found in <a href="https://turinglang.org/dev/tutorials/02-logistic-regression/">https://turinglang.org/dev/tutorials/02-logistic-regression/</a>.</p>
<p>In the tutorial, they quite rightly incorporate a train/test split, and data normalization, which is the recommended practice. I didn&rsquo;t do it in the first part of this tutorial to keep things simple!</p>
<p>Here is how they handle the split and the data normalization using <code>MLUtils</code>.</p>
<pre><code>function split_data(df, target; at=0.70)
    shuffled = shuffleobs(df)
    return trainset, testset = stratifiedobs(row -&gt; row[target], shuffled; p=at)
end

features = [:StudentNum, :Balance, :Income]
numerics = [:Balance, :Income]
target = :DefaultNum

trainset, testset = split_data(data, target; at=0.05)
for feature in numerics
    μ, σ = rescale!(trainset[!, feature]; obsdim=1)
    rescale!(testset[!, feature], μ, σ; obsdim=1)
end

# Turing requires data in matrix form, not dataframe
train = Matrix(trainset[:, features])
test = Matrix(testset[:, features])
train_label = trainset[:, target]
test_label = testset[:, target];
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">MLDataUtils</span><span class="o">:</span> <span class="n">shuffleobs</span><span class="p">,</span> <span class="n">stratifiedobs</span><span class="p">,</span> <span class="n">rescale!</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">StatsFuns</span> <span class="c"># we introduce this package so we can later call the </span>
</span></span><span class="line"><span class="cl">                <span class="c"># logistic function directly instead of defining it manually as before</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">split_data</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">target</span><span class="p">;</span> <span class="n">at</span><span class="o">=</span><span class="mf">0.70</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">shuffled</span> <span class="o">=</span> <span class="n">shuffleobs</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">trainset</span><span class="p">,</span> <span class="n">testset</span> <span class="o">=</span> <span class="n">stratifiedobs</span><span class="p">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">row</span><span class="p">[</span><span class="n">target</span><span class="p">],</span> <span class="n">shuffled</span><span class="p">;</span> <span class="n">p</span><span class="o">=</span><span class="n">at</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="n">features</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:age</span><span class="p">,</span> <span class="ss">:cp</span><span class="p">,</span> <span class="ss">:chol</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">target</span> <span class="o">=</span> <span class="ss">:num</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="n">trainset</span><span class="p">,</span> <span class="n">testset</span> <span class="o">=</span> <span class="n">split_data</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">target</span><span class="p">;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># convert the feature columns to float64 to ensure compatibility with rescale!</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">feature</span> <span class="k">in</span> <span class="n">features</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="n">float</span><span class="o">.</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">feature</span> <span class="k">in</span> <span class="n">features</span>
</span></span><span class="line"><span class="cl">    <span class="n">μ</span><span class="p">,</span> <span class="n">σ</span> <span class="o">=</span> <span class="n">rescale!</span><span class="p">(</span><span class="n">trainset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">];</span> <span class="n">obsdim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">rescale!</span><span class="p">(</span><span class="n">testset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">feature</span><span class="p">],</span> <span class="n">μ</span><span class="p">,</span> <span class="n">σ</span><span class="p">;</span> <span class="n">obsdim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c"># Turing requires data in matrix form, not dataframe</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span> <span class="o">=</span> <span class="kt">Matrix</span><span class="p">(</span><span class="n">trainset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">features</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">test</span> <span class="o">=</span> <span class="kt">Matrix</span><span class="p">(</span><span class="n">testset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">features</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">train_label</span> <span class="o">=</span> <span class="n">trainset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">target</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">test_label</span> <span class="o">=</span> <span class="n">testset</span><span class="p">[</span><span class="o">!</span><span class="p">,</span> <span class="n">target</span><span class="p">];</span>
</span></span></code></pre></div><h3 id="inference">Inference</h3>
<p>Now that our data is formatted, we can perform our Bayesian logistic regression with multiple predictors: using chest pain (cp), age (age), resting bloodpressure (tresttbps) and cholesterol (chol) levels.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">logreg_multi</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># priors</span>
</span></span><span class="line"><span class="cl">	<span class="n">intercept</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">age</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">cp</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">chol</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">n</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">n</span>
</span></span><span class="line"><span class="cl">		<span class="c"># call the logistic function directly, instead of manually</span>
</span></span><span class="line"><span class="cl">		<span class="n">v</span> <span class="o">=</span> <span class="n">logistic</span><span class="p">(</span><span class="n">intercept</span> <span class="o">+</span> <span class="n">age</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">cp</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">chol</span><span class="o">*</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">~</span> <span class="n">Bernoulli</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>logreg_multi (generic function with 2 methods)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">X</span> <span class="o">=</span> <span class="n">train</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="n">train_label</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="n">size</span><span class="p">(</span><span class="n">train</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="n">test</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>(212, 3)(91, 3)
</code></pre>
<p>Now we build the model and create the chain:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">model_multi</span> <span class="o">=</span> <span class="n">logreg_multi</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">chain_multi</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model_multi</span><span class="p">,</span> <span class="n">NUTS</span><span class="p">(),</span> <span class="n">MCMCThreads</span><span class="p">(),</span> <span class="mi">2_000</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span> <span class="c"># select 2000 samples directly</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 1.6
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 1.6
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 0.8
[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 1.6





Chains MCMC chain (2000×16×8 Array{Float64, 3}):

Iterations        = 1001:1:3000
Number of chains  = 8
Samples per chain = 2000
Wall duration     = 11.32 seconds
Compute duration  = 87.27 seconds
parameters        = intercept, age, cp, chol
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m   ess_bulk [0m [1m   ess_tail [0m [1m    rhat[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m    Float64 [0m [90m    Float64 [0m [90m Float64[0m ⋯

   intercept   -0.2821    0.1647    0.0012   20113.9419   13042.8456    1.0003 ⋯
         age    0.6003    0.1760    0.0013   18327.5449   12926.7418    1.0001 ⋯
          cp    1.0699    0.1922    0.0014   19583.1899   13534.2405    0.9999 ⋯
        chol   -0.0073    0.1641    0.0012   18280.4944   12242.8280    1.0004 ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m    2.5% [0m [1m   25.0% [0m [1m   50.0% [0m [1m   75.0% [0m [1m   97.5% [0m
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m

   intercept   -0.6118   -0.3923   -0.2817   -0.1711    0.0388
         age    0.2645    0.4792    0.5964    0.7178    0.9575
          cp    0.7106    0.9372    1.0636    1.1963    1.4603
        chol   -0.3283   -0.1177   -0.0080    0.1025    0.3151
</code></pre>
<h3 id="plot-the-mcmc-diagnostics-1">Plot the MCMC Diagnostics</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain_multi</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">150</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20240109_Bayesian_Logistic_Regression/output_34_0.svg" type="" alt="png"  /></p>
<h3 id="summary-statistics">Summary Statistics</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">summarystats</span><span class="p">(</span><span class="n">chain_multi</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Summary Statistics
 [1m parameters [0m [1m    mean [0m [1m     std [0m [1m    mcse [0m [1m   ess_bulk [0m [1m   ess_tail [0m [1m    rhat[0m ⋯
 [90m     Symbol [0m [90m Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m    Float64 [0m [90m    Float64 [0m [90m Float64[0m ⋯

   intercept   -0.2821    0.1647    0.0012   20113.9419   13042.8456    1.0003 ⋯
         age    0.6003    0.1760    0.0013   18327.5449   12926.7418    1.0001 ⋯
          cp    1.0699    0.1922    0.0014   19583.1899   13534.2405    0.9999 ⋯
        chol   -0.0073    0.1641    0.0012   18280.4944   12242.8280    1.0004 ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<h2 id="thank-you">Thank you!</h2>
<p>And that concludes this little tutorial showcasing the power of a Bayesian model and the fun of using Julia. Thank you for stopping by!</p>
<p>Victor Flores</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bayesian Linear Regression with Julia and Turing.jl</title>
      <link>http://localhost:1313/posts/20231110_bayesian_linear_regression_julia/20231110_bayesian_linear_regression_julia/</link>
      <pubDate>Fri, 10 Nov 2023 14:53:29 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/20231110_bayesian_linear_regression_julia/20231110_bayesian_linear_regression_julia/</guid>
      <description>Learn the basics of Bayesian linear regression using Julia and Turing.jl. This tutorial covers model formulation, implementation, and interpretation through a practical example.</description>
      <content:encoded><![CDATA[<hr>
<h2 id="finding-a-linear-relationship-between-height-and-weight-using-bayesian-methods">Finding a Linear Relationship Between Height and Weight Using Bayesian Methods</h2>
<h3 id="problem-statement">Problem Statement</h3>
<p>You have some data on the relationship between the height and weight of some people, and you want to fit a linear model of the form:</p>
<p>$$y = \alpha + \beta x + \varepsilon$$</p>
<p>where $y$ is the weight, $x$ is the height, $\alpha$ is the intercept, $\beta$ is the slope, and $\varepsilon$ is the error term. You want to use Bayesian inference to estimate the posterior distributions of $\alpha$ and $\beta$ given the data and some prior assumptions. You also want to use probabilistic programming to implement the Bayesian model and perform inference using a package like <code>Turing.jl</code>.</p>
<p>Your task is to write the code in Julia that can generate some synthetic data (or use an existing data set), define the Bayesian linear regression model, and sample from the posterior distributions using Hamiltonian Monte Carlo (HMC).</p>
<h6 id="credit">Credit</h6>
<p>This exercise is heavily inspired, and mostly taken from, the doggo&rsquo;s tutorial. Please visit his <a href="https://www.youtube.com/@doggodotjl">Youtube channel here</a>, it&rsquo;s an amazing starting point for Julia programming!</p>
<h3 id="import-the-necessary-packages">Import the Necessary Packages</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">LinearAlgebra</span><span class="p">,</span> <span class="n">Turing</span><span class="p">,</span> <span class="n">CSV</span><span class="p">,</span> <span class="n">DataFrames</span><span class="p">,</span> <span class="n">Plots</span><span class="p">,</span> <span class="n">StatsPlots</span><span class="p">,</span> <span class="n">LaTeXStrings</span>
</span></span></code></pre></div><h3 id="bayesian-workflow">Bayesian Workflow</h3>
<p>For this exercise, I will implement the following workflow:</p>
<ul>
<li>Collect data: this will be implemented by downloading the relevant data</li>
<li>Build a Bayesian model: will use <code>Turing.jl</code> to build the model</li>
<li>Infer the posterior distributions of the parameters $\alpha$ and $\beta$</li>
<li>Evaluate the fit of the model</li>
</ul>
<h4 id="collecting-the-data">Collecting the data</h4>
<p>The data to be analyzed will be the height vs. weight data from:
<a href="https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset">https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset</a>.</p>
<p>Since the dataset is too large, we will select only the first 1000 entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># collect data</span>
</span></span><span class="line"><span class="cl"><span class="c"># this data set was downloaded from kaggle:</span>
</span></span><span class="line"><span class="cl"><span class="c"># https://www.kaggle.com/datasets/burnoutminer/heights-and-weights-dataset</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">CSV</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">joinpath</span><span class="p">(</span><span class="s">&#34;data&#34;</span><span class="p">,</span> <span class="s">&#34;SOCR-HeightWeight.csv&#34;</span><span class="p">),</span> <span class="n">DataFrame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># select only 100 entries</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">1</span><span class="o">:</span><span class="mi">1000</span><span class="p">,</span> <span class="o">:</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">first</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>5×3 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">Index</th><th style = "text-align: left;">Height(Inches)</th><th style = "text-align: left;">Weight(Pounds)</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">65.7833</td><td style = "text-align: right;">112.993</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">2</td><td style = "text-align: right;">71.5152</td><td style = "text-align: right;">136.487</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">3</td><td style = "text-align: right;">69.3987</td><td style = "text-align: right;">153.027</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">4</td><td style = "text-align: right;">68.2166</td><td style = "text-align: right;">142.335</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">5</td><td style = "text-align: right;">67.7878</td><td style = "text-align: right;">144.297</td></tr></tbody></table></div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># change the column headers for easier access</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">colnames</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#34;index&#34;</span><span class="p">,</span><span class="s">&#34;height&#34;</span><span class="p">,</span><span class="s">&#34;weight&#34;</span><span class="p">];</span> <span class="n">rename!</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="kt">Symbol</span><span class="o">.</span><span class="p">(</span><span class="n">colnames</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">first</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span></code></pre></div><div><div style = "float: left;"><span>5×3 DataFrame</span></div><div style = "clear: both;"></div></div><div class = "data-frame" style = "overflow-x: scroll;"><table class = "data-frame" style = "margin-bottom: 6px;"><thead><tr class = "header"><th class = "rowNumber" style = "font-weight: bold; text-align: right;">Row</th><th style = "text-align: left;">index</th><th style = "text-align: left;">height</th><th style = "text-align: left;">weight</th></tr><tr class = "subheader headerLastRow"><th class = "rowNumber" style = "font-weight: bold; text-align: right;"></th><th title = "Int64" style = "text-align: left;">Int64</th><th title = "Float64" style = "text-align: left;">Float64</th><th title = "Float64" style = "text-align: left;">Float64</th></tr></thead><tbody><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">1</td><td style = "text-align: right;">1</td><td style = "text-align: right;">65.7833</td><td style = "text-align: right;">112.993</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">2</td><td style = "text-align: right;">2</td><td style = "text-align: right;">71.5152</td><td style = "text-align: right;">136.487</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">3</td><td style = "text-align: right;">3</td><td style = "text-align: right;">69.3987</td><td style = "text-align: right;">153.027</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">4</td><td style = "text-align: right;">4</td><td style = "text-align: right;">68.2166</td><td style = "text-align: right;">142.335</td></tr><tr><td class = "rowNumber" style = "font-weight: bold; text-align: right;">5</td><td style = "text-align: right;">5</td><td style = "text-align: right;">67.7878</td><td style = "text-align: right;">144.297</td></tr></tbody></table></div>
<h4 id="visualizing-the-data">Visualizing the Data</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot_data</span> <span class="o">=</span> <span class="n">scatter</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">weight</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">title</span> <span class="o">=</span> <span class="s">&#34;Height vs. Weight&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">xlabel</span> <span class="o">=</span> <span class="s">&#34;Height (in)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ylabel</span> <span class="o">=</span> <span class="s">&#34;Weight (lb)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_9_0.svg" type="" alt="svg"  /></p>
<h4 id="building-a-bayesian-model-with-turingjl">Building a Bayesian model with <code>Turing.jl</code>.</h4>
<p>First, we assume that the weight is a variable dependent on the height. Thus, we can express the Bayesian model as:</p>
<p>$$y\sim N(\alpha + \beta^{T}\mathbf{X}, \sigma^2)$$</p>
<p>The above means that we assume that the data follows a normal distribution (in this case, a multivariate normal distribution), whose standard deviation is σ and its mean is the linear relationship $\alpha + \beta^{T}\mathbf{X}$.</p>
<p>Next, we need to assign priors to the variables $\alpha$, $\beta$ and $\sigma^2$. The latter is a measure of the uncertainty in <em>the model</em>.</p>
<p>So, the priors will be assigned as follows:</p>
<p>$$\alpha \sim N(0,10)$$
$$\beta \sim U(0,50)$$
$$\sigma^{2} \sim TN(0,100;0,\infty)$$</p>
<p>The last distribution is a <em>truncated normal distribution</em> bounded from 0 to $\infty$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="nd">@model</span> <span class="k">function</span> <span class="n">blr</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">weight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># priors:</span>
</span></span><span class="line"><span class="cl">	<span class="n">α</span> <span class="o">~</span> <span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="c"># intercept</span>
</span></span><span class="line"><span class="cl">	<span class="n">β</span> <span class="o">~</span> <span class="n">Uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">σ</span> <span class="o">~</span> <span class="n">truncated</span><span class="p">(</span><span class="n">Normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span> <span class="n">lower</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>  <span class="c"># variance standard distribution</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># likelihood</span>
</span></span><span class="line"><span class="cl">	<span class="c"># the likelihood in this case means that I assume that the data follows a</span>
</span></span><span class="line"><span class="cl">	<span class="c"># multivariate normal distribution, whose uncertainty is σ, and its mean is the linear relationship:</span>
</span></span><span class="line"><span class="cl">	<span class="n">avg_weight</span> <span class="o">=</span> <span class="n">α</span> <span class="o">.+</span> <span class="p">(</span><span class="n">β</span><span class="o">.*</span><span class="n">height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c"># build the model</span>
</span></span><span class="line"><span class="cl">	<span class="n">weight</span> <span class="o">~</span> <span class="n">MvNormal</span><span class="p">(</span><span class="n">avg_weight</span><span class="p">,</span> <span class="n">σ</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>blr (generic function with 2 methods)
</code></pre>
<p>The next step is to perform Bayesian inference. <em>Crank up the Bayes!</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># crank up the bayes!</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">blr</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">weight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">NUTS</span><span class="p">(),</span> <span class="n">samples</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>[36m[1m┌ [22m[39m[36m[1mInfo: [22m[39mFound initial step size
[36m[1m└ [22m[39m  ϵ = 9.765625e-5
[32mSampling: 100%|█████████████████████████████████████████| Time: 0:00:11[39m9m





Chains MCMC chain (1000×15×1 Array{Float64, 3}):

Iterations        = 501:1:1500
Number of chains  = 1
Samples per chain = 1000
Wall duration     = 31.4 seconds
Compute duration  = 31.4 seconds
parameters        = α, β, σ
internals         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size

Summary Statistics
 [1m parameters [0m [1m     mean [0m [1m     std [0m [1m    mcse [0m [1m ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m [0m ⋯
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m [0m ⋯

           α   -34.8414    7.6414    0.4117   344.5155   365.1189    1.0038    ⋯
           β     2.3859    0.1124    0.0060   345.5269   345.0618    1.0039    ⋯
           σ    10.3030    0.2239    0.0100   509.4680   389.9078    1.0016    ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m     2.5% [0m [1m    25.0% [0m [1m    50.0% [0m [1m    75.0% [0m [1m    97.5% [0m
 [90m     Symbol [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m

           α   -49.8948   -39.7950   -34.9188   -29.8116   -19.8403
           β     2.1673     2.3108     2.3872     2.4580     2.6100
           σ     9.8649    10.1550    10.3018    10.4554    10.7449
</code></pre>
<h4 id="visualizing-the-mcmc-diagnostics-and-summarizing-the-results">Visualizing the MCMC Diagnostics and Summarizing the Results</h4>
<p>Now that we have performed Bayesian inference using the <code>NUTS()</code> algorithm, we can visualize the results. Addisionally, call for a summary of the statistics of the inferred posterior distributions of $\theta$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">summarize</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><pre><code> [1m parameters [0m [1m     mean [0m [1m     std [0m [1m    mcse [0m [1m ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m [0m ⋯
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m [0m ⋯

           α   -34.8414    7.6414    0.4117   344.5155   365.1189    1.0038    ⋯
           β     2.3859    0.1124    0.0060   345.5269   345.0618    1.0039    ⋯
           σ    10.3030    0.2239    0.0100   509.4680   389.9078    1.0016    ⋯
[36m                                                                1 column omitted[0m
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_16_0.svg" type="" alt="svg"  /></p>
<h5 id="visualizing-the-results">Visualizing the results</h5>
<p>It is worth noting that the results from a Bayesian Linear Regression is not one single regression line, but many. From PyMC&rsquo;s <a href="https://www.pymc.io/projects/docs/en/stable/learn/core_notebooks/GLM_linear.html">Generalized Linear Regression tutorial</a>:</p>
<blockquote>
<p>In GLMs, we do not only have one best fitting regression line, but many. A posterior predictive plot takes multiple samples from the posterior (intercepts and slopes) and plots a regression line for each of them. We can manually generate these regression lines using the posterior samples directly.</p>
</blockquote>
<p>What this means is that if we want to visualize all the lines that are generated by the parameter posterior distribution sample pool, we need to generate one line per sample set, and then we can plot them all. This procedure is executed next.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># plot all the sample regressions</span>
</span></span><span class="line"><span class="cl"><span class="c"># this method was taken from: https://www.youtube.com/watch?v=EgrrtZEVOv0&amp;t=1113s</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">samples</span>
</span></span><span class="line"><span class="cl">	<span class="n">α</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>    <span class="c">#chain[row, column, chain_ID]</span>
</span></span><span class="line"><span class="cl">	<span class="n">β</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">σ²</span> <span class="o">=</span> <span class="n">chain</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="n">plot!</span><span class="p">(</span><span class="n">plot_data</span><span class="p">,</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">α</span> <span class="o">+</span> <span class="n">β</span><span class="o">*</span><span class="n">x</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="n">legend</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="c"># samples</span>
</span></span><span class="line"><span class="cl">		<span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="ss">:orange</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="c"># error</span>
</span></span><span class="line"><span class="cl">        <span class="n">ribbon</span> <span class="o">=</span> <span class="n">σ²</span><span class="p">,</span> <span class="n">fillalpha</span> <span class="o">=</span> <span class="mf">0.002</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plot_data</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_18_0.svg" type="" alt="svg"  /></p>
<h3 id="using-the-regression-model-to-make-predictions">Using the Regression Model to Make Predictions</h3>
<p>Select the heights for which we want to predict the weights and then run the prediction command from <code>Turing</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">pred_height</span> <span class="o">=</span> <span class="p">[</span><span class="mi">62</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">67</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">predictions</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">blr</span><span class="p">(</span><span class="n">pred_height</span><span class="p">,</span> <span class="nb">missing</span><span class="p">),</span> <span class="n">chain</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Chains MCMC chain (1000×6×1 Array{Float64, 3}):

Iterations        = 1:1:1000
Number of chains  = 1
Samples per chain = 1000
parameters        = weight[1], weight[2], weight[3], weight[4], weight[5], weight[6]
internals         = 

Summary Statistics
 [1m parameters [0m [1m     mean [0m [1m     std [0m [1m    mcse [0m [1m  ess_bulk [0m [1m ess_tail [0m [1m    rhat [0m [1m[0m ⋯
 [90m     Symbol [0m [90m  Float64 [0m [90m Float64 [0m [90m Float64 [0m [90m   Float64 [0m [90m  Float64 [0m [90m Float64 [0m [90m[0m ⋯

   weight[1]   113.6815   10.3344    0.3270    997.5393   947.2109    0.9993   ⋯
   weight[2]   165.3164   10.8352    0.3744    832.5405   818.6640    1.0008   ⋯
   weight[3]   143.8911   10.5355    0.3461    929.5467   874.2977    0.9993   ⋯
   weight[4]   132.3417   10.4836    0.3448    921.6347   943.0320    1.0007   ⋯
   weight[5]   134.7606   10.7046    0.3350   1023.8876   977.6814    1.0025   ⋯
   weight[6]   124.9423   10.2245    0.3247    993.9282   867.7391    0.9991   ⋯
[36m                                                                1 column omitted[0m

Quantiles
 [1m parameters [0m [1m     2.5% [0m [1m    25.0% [0m [1m    50.0% [0m [1m    75.0% [0m [1m    97.5% [0m
 [90m     Symbol [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m [90m  Float64 [0m

   weight[1]    93.9378   106.3972   113.6943   120.8093   134.9264
   weight[2]   142.4871   158.4933   165.5406   172.7313   184.7437
   weight[3]   122.8292   137.0108   144.0339   151.1920   164.2645
   weight[4]   111.8872   125.3733   132.1726   139.2690   153.7222
   weight[5]   113.9147   127.4356   135.0149   142.1375   154.5537
   weight[6]   105.3221   118.0098   125.1640   131.6011   145.2976
</code></pre>
<h4 id="visualize-the-distributions-of-the-predicted-weights">Visualize the Distributions of the Predicted Weights</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span></span></code></pre></div><p><img loading="lazy" src="/images/20231110_Bayesian_Linear_Regression_Julia/output_22_0.svg" type="" alt="svg"  /></p>
<p>Finally, to obtain a point estimate, compute the mean weight prediction for each height.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">mean_predictions</span> <span class="o">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">predictions</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Mean
 [1m parameters [0m [1m     mean [0m
 [90m     Symbol [0m [90m  Float64 [0m

   weight[1]   113.6815
   weight[2]   165.3164
   weight[3]   143.8911
   weight[4]   132.3417
   weight[5]   134.7606
   weight[6]   124.9423
</code></pre>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
